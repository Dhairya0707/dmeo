// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "linux_x64"
// Module: zapp_user_main
// Flags: soundNullSafety(true), enableAsserts(true)
define('zapp_user_main', ['dart_sdk', 'flutter_sdk'], (function load__zapp_user_main(dart_sdk, flutter_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const ui = dart_sdk.ui;
  const convert = dart_sdk.convert;
  const _native_typed_data = dart_sdk._native_typed_data;
  const typed_data = dart_sdk.typed_data;
  const _internal = dart_sdk._internal;
  const math = dart_sdk.math;
  const collection = dart_sdk.collection;
  const _js_helper = dart_sdk._js_helper;
  const html = dart_sdk.html;
  const js_util = dart_sdk.js_util;
  const indexed_db = dart_sdk.indexed_db;
  const io = dart_sdk.io;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const app = flutter_sdk.src__material__app;
  const theme_data = flutter_sdk.src__material__theme_data;
  const colors = flutter_sdk.src__material__colors;
  const framework = flutter_sdk.src__widgets__framework;
  const editable_text = flutter_sdk.src__widgets__editable_text;
  const scaffold = flutter_sdk.src__material__scaffold;
  const app_bar = flutter_sdk.src__material__app_bar;
  const text = flutter_sdk.src__widgets__text;
  const single_child_scroll_view = flutter_sdk.src__widgets__single_child_scroll_view;
  const edge_insets = flutter_sdk.src__painting__edge_insets;
  const basic = flutter_sdk.src__widgets__basic;
  const flex = flutter_sdk.src__rendering__flex;
  const text_field = flutter_sdk.src__material__text_field;
  const input_decorator = flutter_sdk.src__material__input_decorator;
  const input_border = flutter_sdk.src__material__input_border;
  const border_radius = flutter_sdk.src__painting__border_radius;
  const outlined_button = flutter_sdk.src__material__outlined_button;
  const navigator = flutter_sdk.src__widgets__navigator;
  const page = flutter_sdk.src__material__page;
  const text_style = flutter_sdk.src__painting__text_style;
  const elevated_button = flutter_sdk.src__material__elevated_button;
  const rounded_rectangle_border = flutter_sdk.src__painting__rounded_rectangle_border;
  const binding = flutter_sdk.src__widgets__binding;
  const plugin_registry = flutter_sdk.src__plugin_registry;
  const change_notifier = flutter_sdk.src__foundation__change_notifier;
  const icon_button = flutter_sdk.src__material__icon_button;
  const icon = flutter_sdk.src__widgets__icon;
  const icons = flutter_sdk.src__material__icons;
  const bottom_sheet = flutter_sdk.src__material__bottom_sheet;
  const safe_area = flutter_sdk.src__widgets__safe_area;
  const list_tile = flutter_sdk.src__material__list_tile;
  const container = flutter_sdk.src__widgets__container;
  const equality = flutter_sdk.src__equality;
  const date_format = flutter_sdk.src__intl__date_format;
  const platform = flutter_sdk.src__foundation__platform;
  const message_codecs = flutter_sdk.src__services__message_codecs;
  const platform_channel = flutter_sdk.src__services__platform_channel;
  const message_codec = flutter_sdk.src__services__message_codec;
  const binary_messenger = flutter_sdk.src__services__binary_messenger;
  const deprecated = flutter_sdk.src__deprecated;
  const string_scanner = flutter_sdk.src__string_scanner;
  const canonicalized_map = flutter_sdk.src__canonicalized_map;
  const stream_group = flutter_sdk.src__stream_group;
  const serialization = flutter_sdk.src__foundation__serialization;
  const span_exception = flutter_sdk.src__span_exception;
  const queue_list = flutter_sdk.src__queue_list;
  var $46zapp_entry = Object.create(dart.library);
  var main = Object.create(dart.library);
  var web_plugin_registrant = Object.create(dart.library);
  var hive = Object.create(dart.library);
  var hive_flutter = Object.create(dart.library);
  var firstlime = Object.create(dart.library);
  var mainpage = Object.create(dart.library);
  var cloud_firestore_web = Object.create(dart.library);
  var firebase_auth_web = Object.create(dart.library);
  var firebase_core_web = Object.create(dart.library);
  var firebase_storage_web = Object.create(dart.library);
  var crypto = Object.create(dart.library);
  var default_compaction_strategy = Object.create(dart.library);
  var default_key_comparator = Object.create(dart.library);
  var aes_cbc_pkcs7 = Object.create(dart.library);
  var crc32 = Object.create(dart.library);
  var hive_impl = Object.create(dart.library);
  var hive_list_impl = Object.create(dart.library);
  var hive_object = Object.create(dart.library);
  var extensions = Object.create(dart.library);
  var box_collection_indexed_db = Object.create(dart.library);
  var path_provider = Object.create(dart.library);
  var path = Object.create(dart.library);
  var cloud_firestore_platform_interface = Object.create(dart.library);
  var internals = Object.create(dart.library);
  var load_bundle_task_web = Object.create(dart.library);
  var web_utils = Object.create(dart.library);
  var firebase_core = Object.create(dart.library);
  var firebase_core_web_interop = Object.create(dart.library);
  var collection_reference_web = Object.create(dart.library);
  var field_value_factory_web = Object.create(dart.library);
  var document_reference_web = Object.create(dart.library);
  var query_web = Object.create(dart.library);
  var transaction_web = Object.create(dart.library);
  var write_batch_web = Object.create(dart.library);
  var firestore = Object.create(dart.library);
  var firebase_auth_platform_interface = Object.create(dart.library);
  var web_utils$ = Object.create(dart.library);
  var firebase_auth_web_confirmation_result = Object.create(dart.library);
  var firebase_auth_web_recaptcha_verifier_factory = Object.create(dart.library);
  var firebase_auth_web_user = Object.create(dart.library);
  var firebase_auth_web_user_credential = Object.create(dart.library);
  var auth$ = Object.create(dart.library);
  var firebase_core_platform_interface = Object.create(dart.library);
  var core$ = Object.create(dart.library);
  var firebase_storage_web$ = Object.create(dart.library);
  var digest = Object.create(dart.library);
  var hash = Object.create(dart.library);
  var hmac = Object.create(dart.library);
  var md5 = Object.create(dart.library);
  var sha1 = Object.create(dart.library);
  var sha256 = Object.create(dart.library);
  var sha512 = Object.create(dart.library);
  var aes_engine = Object.create(dart.library);
  var big_int_adapter = Object.create(dart.library);
  var date_time_adapter = Object.create(dart.library);
  var storage_backend_memory = Object.create(dart.library);
  var box_base_impl = Object.create(dart.library);
  var box_impl = Object.create(dart.library);
  var lazy_box_impl = Object.create(dart.library);
  var type_registry_impl = Object.create(dart.library);
  var storage_backend = Object.create(dart.library);
  var hive_collection_mixin = Object.create(dart.library);
  var delegating_list_view_mixin = Object.create(dart.library);
  var box_collection_stub = Object.create(dart.library);
  var pointer = Object.create(dart.library);
  var blob = Object.create(dart.library);
  var field_path = Object.create(dart.library);
  var geo_point = Object.create(dart.library);
  var platform_interface_firestore = Object.create(dart.library);
  var platform_interface_collection_reference = Object.create(dart.library);
  var platform_interface_document_change = Object.create(dart.library);
  var platform_interface_document_reference = Object.create(dart.library);
  var platform_interface_document_snapshot = Object.create(dart.library);
  var platform_interface_field_value = Object.create(dart.library);
  var platform_interface_field_value_factory = Object.create(dart.library);
  var platform_interface_query = Object.create(dart.library);
  var platform_interface_query_snapshot = Object.create(dart.library);
  var platform_interface_transaction = Object.create(dart.library);
  var platform_interface_write_batch = Object.create(dart.library);
  var platform_interface_load_bundle_task = Object.create(dart.library);
  var platform_interface_load_bundle_task_snapshot = Object.create(dart.library);
  var snapshot_metadata = Object.create(dart.library);
  var source = Object.create(dart.library);
  var load_bundle_task_state = Object.create(dart.library);
  var timestamp = Object.create(dart.library);
  var settings = Object.create(dart.library);
  var get_options = Object.create(dart.library);
  var set_options = Object.create(dart.library);
  var persistence_settings = Object.create(dart.library);
  var load_bundle_task_state$ = Object.create(dart.library);
  var internals$ = Object.create(dart.library);
  var decode_utility = Object.create(dart.library);
  var es6_interop = Object.create(dart.library);
  var func = Object.create(dart.library);
  var js$ = Object.create(dart.library);
  var js_interop = Object.create(dart.library);
  var utils = Object.create(dart.library);
  var field_value_web = Object.create(dart.library);
  var encode_utility = Object.create(dart.library);
  var firestore_interop = Object.create(dart.library);
  var utils$ = Object.create(dart.library);
  var action_code_info = Object.create(dart.library);
  var action_code_settings = Object.create(dart.library);
  var additional_user_info = Object.create(dart.library);
  var auth_credential = Object.create(dart.library);
  var auth_provider = Object.create(dart.library);
  var firebase_auth_exception = Object.create(dart.library);
  var id_token_result = Object.create(dart.library);
  var platform_interface_confirmation_result = Object.create(dart.library);
  var platform_interface_firebase_auth = Object.create(dart.library);
  var platform_interface_recaptcha_verifier_factory = Object.create(dart.library);
  var platform_interface_user = Object.create(dart.library);
  var platform_interface_user_credential = Object.create(dart.library);
  var email_auth = Object.create(dart.library);
  var facebook_auth = Object.create(dart.library);
  var github_auth = Object.create(dart.library);
  var google_auth = Object.create(dart.library);
  var oauth = Object.create(dart.library);
  var phone_auth = Object.create(dart.library);
  var saml_auth = Object.create(dart.library);
  var twitter_auth = Object.create(dart.library);
  var types = Object.create(dart.library);
  var user_info = Object.create(dart.library);
  var user_metadata = Object.create(dart.library);
  var http_parser = Object.create(dart.library);
  var auth_interop = Object.create(dart.library);
  var utils$0 = Object.create(dart.library);
  var messages$46pigeon = Object.create(dart.library);
  var plugin_platform_interface = Object.create(dart.library);
  var mocks = Object.create(dart.library);
  var test_api = Object.create(dart.library);
  var app$ = Object.create(dart.library);
  var core_interop = Object.create(dart.library);
  var app_interop = Object.create(dart.library);
  var firebase_storage_platform_interface = Object.create(dart.library);
  var storage = Object.create(dart.library);
  var reference_web = Object.create(dart.library);
  var errors = Object.create(dart.library);
  var digest_sink = Object.create(dart.library);
  var hash_sink = Object.create(dart.library);
  var utils$1 = Object.create(dart.library);
  var sha512_slowsinks = Object.create(dart.library);
  var aes_tables = Object.create(dart.library);
  var frame$ = Object.create(dart.library);
  var frame_helper = Object.create(dart.library);
  var keystore$ = Object.create(dart.library);
  var change_notifier$ = Object.create(dart.library);
  var ignored_type_adapter = Object.create(dart.library);
  var backend_manager = Object.create(dart.library);
  var field_path_type = Object.create(dart.library);
  var method_channel_firestore = Object.create(dart.library);
  var method_channel_field_value_factory = Object.create(dart.library);
  var method_channel_firebase_auth = Object.create(dart.library);
  var authentication_challenge = Object.create(dart.library);
  var case_insensitive_map = Object.create(dart.library);
  var chunked_coding = Object.create(dart.library);
  var http_date = Object.create(dart.library);
  var media_type = Object.create(dart.library);
  var full_metadata = Object.create(dart.library);
  var list_options = Object.create(dart.library);
  var platform_interface_firebase_storage = Object.create(dart.library);
  var platform_interface_list_result = Object.create(dart.library);
  var platform_interface_reference = Object.create(dart.library);
  var platform_interface_task = Object.create(dart.library);
  var platform_interface_task_snapshot = Object.create(dart.library);
  var put_string_format = Object.create(dart.library);
  var settable_metadata = Object.create(dart.library);
  var task_state = Object.create(dart.library);
  var storage_interop = Object.create(dart.library);
  var http = Object.create(dart.library);
  var metadata$ = Object.create(dart.library);
  var task_web = Object.create(dart.library);
  var list = Object.create(dart.library);
  var metadata_cache = Object.create(dart.library);
  var typed_data$ = Object.create(dart.library);
  var binary_reader_impl = Object.create(dart.library);
  var indexable_skip_list = Object.create(dart.library);
  var backend_manager$ = Object.create(dart.library);
  var method_channel_load_bundle_task = Object.create(dart.library);
  var method_channel_query_snapshot = Object.create(dart.library);
  var source$ = Object.create(dart.library);
  var method_channel_collection_reference = Object.create(dart.library);
  var method_channel_document_reference = Object.create(dart.library);
  var method_channel_query = Object.create(dart.library);
  var method_channel_transaction = Object.create(dart.library);
  var method_channel_write_batch = Object.create(dart.library);
  var firestore_message_codec = Object.create(dart.library);
  var exception$ = Object.create(dart.library);
  var method_channel_field_value = Object.create(dart.library);
  var method_channel_user = Object.create(dart.library);
  var method_channel_user_credential = Object.create(dart.library);
  var exception$0 = Object.create(dart.library);
  var scan = Object.create(dart.library);
  var utils$2 = Object.create(dart.library);
  var decoder = Object.create(dart.library);
  var encoder = Object.create(dart.library);
  var method_channel_firebase_storage = Object.create(dart.library);
  var pointer$ = Object.create(dart.library);
  var client$ = Object.create(dart.library);
  var exception = Object.create(dart.library);
  var request$ = Object.create(dart.library);
  var response$ = Object.create(dart.library);
  var streamed_request = Object.create(dart.library);
  var base_client = Object.create(dart.library);
  var base_request = Object.create(dart.library);
  var base_response = Object.create(dart.library);
  var byte_stream = Object.create(dart.library);
  var multipart_file = Object.create(dart.library);
  var multipart_request = Object.create(dart.library);
  var streamed_response = Object.create(dart.library);
  var task = Object.create(dart.library);
  var list_result_web = Object.create(dart.library);
  var typed_queue = Object.create(dart.library);
  var typed_buffers = Object.create(dart.library);
  var storage_backend_js = Object.create(dart.library);
  var method_channel_document_change = Object.create(dart.library);
  var auto_id_generator = Object.create(dart.library);
  var charcodes = Object.create(dart.library);
  var exception$1 = Object.create(dart.library);
  var method_channel_reference = Object.create(dart.library);
  var method_channel_task_snapshot = Object.create(dart.library);
  var browser_client = Object.create(dart.library);
  var utils$3 = Object.create(dart.library);
  var multipart_file_stub = Object.create(dart.library);
  var boundary_characters = Object.create(dart.library);
  var task_snapshot_web = Object.create(dart.library);
  var typed_buffer = Object.create(dart.library);
  var binary_writer_impl = Object.create(dart.library);
  var method_channel_list_result = Object.create(dart.library);
  var method_channel_task = Object.create(dart.library);
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T$ = {
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ListOfString: () => (T$.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfStringTodynamic: () => (T$.ListOfStringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$.ListOfString()])))(),
    JSArrayOfString: () => (T$.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    dynamicToNull: () => (T$.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToNull: () => (T$.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectAndStackTraceTovoid: () => (T$.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T$.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))(),
    ObjectN: () => (T$.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    BuildContextToSecondPage: () => (T$.BuildContextToSecondPage = dart.constFn(dart.fnType(main.SecondPage, [framework.BuildContext])))(),
    JSArrayOfWidget: () => (T$.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))(),
    intTobool: () => (T$.intTobool = dart.constFn(dart.fnType(core.bool, [core.int])))(),
    JSArrayOfVoidTovoid: () => (T$.JSArrayOfVoidTovoid = dart.constFn(_interceptors.JSArray$(T$.VoidTovoid())))(),
    BoxEventTovoid: () => (T$.BoxEventTovoid = dart.constFn(dart.fnType(dart.void, [hive.BoxEvent])))(),
    ListN: () => (T$.ListN = dart.constFn(dart.nullable(core.List)))(),
    FutureOfvoid: () => (T$.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    StringN: () => (T$.StringN = dart.constFn(dart.nullable(core.String)))(),
    StringNToFutureOfvoid: () => (T$.StringNToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [], [T$.StringN()])))(),
    BuildContextToSafeArea: () => (T$.BuildContextToSafeArea = dart.constFn(dart.fnType(safe_area.SafeArea, [framework.BuildContext])))(),
    BuildContextToContainer: () => (T$.BuildContextToContainer = dart.constFn(dart.fnType(container.Container, [framework.BuildContext])))(),
    BuildContextToCreatePage: () => (T$.BuildContextToCreatePage = dart.constFn(dart.fnType(mainpage.CreatePage, [framework.BuildContext])))(),
    BuildContextToJoinPage: () => (T$.BuildContextToJoinPage = dart.constFn(dart.fnType(mainpage.JoinPage, [framework.BuildContext])))(),
    TransactionN: () => (T$.TransactionN = dart.constFn(dart.nullable(firestore.Transaction)))(),
    VoidToFuture: () => (T$.VoidToFuture = dart.constFn(dart.fnType(async.Future, [])))(),
    VoidToFutureOfvoid: () => (T$.VoidToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [])))(),
    VoidTobool: () => (T$.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    CompleterOfvoid: () => (T$.CompleterOfvoid = dart.constFn(async.Completer$(dart.void)))(),
    UserPlatformN: () => (T$.UserPlatformN = dart.constFn(dart.nullable(platform_interface_user.UserPlatform)))(),
    StreamControllerOfUserPlatformN: () => (T$.StreamControllerOfUserPlatformN = dart.constFn(async.StreamController$(T$.UserPlatformN())))(),
    UserWebN: () => (T$.UserWebN = dart.constFn(dart.nullable(firebase_auth_web_user.UserWeb)))(),
    UserN: () => (T$.UserN = dart.constFn(dart.nullable(auth$.User)))(),
    UserNToUserWebN: () => (T$.UserNToUserWebN = dart.constFn(dart.fnType(T$.UserWebN(), [T$.UserN()])))(),
    UserWebNTovoid: () => (T$.UserWebNTovoid = dart.constFn(dart.fnType(dart.void, [T$.UserWebN()])))(),
    _AsyncStarImplOfUserPlatformN: () => (T$._AsyncStarImplOfUserPlatformN = dart.constFn(async._AsyncStarImpl$(T$.UserPlatformN())))(),
    LinkedHashMapOfString$dynamic: () => (T$.LinkedHashMapOfString$dynamic = dart.constFn(collection.LinkedHashMap$(core.String, dart.dynamic)))(),
    IdentityMapOfString$StreamControllerOfUserPlatformN: () => (T$.IdentityMapOfString$StreamControllerOfUserPlatformN = dart.constFn(_js_helper.IdentityMap$(core.String, T$.StreamControllerOfUserPlatformN())))(),
    VoidToFirebaseWebService: () => (T$.VoidToFirebaseWebService = dart.constFn(dart.fnType(firebase_core_web.FirebaseWebService, [])))(),
    dynamicToString: () => (T$.dynamicToString = dart.constFn(dart.fnType(core.String, [dart.dynamic])))(),
    FirebaseWebServiceToFutureOfvoid: () => (T$.FirebaseWebServiceToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [firebase_core_web.FirebaseWebService])))(),
    ListOfFirebaseAppPlatform: () => (T$.ListOfFirebaseAppPlatform = dart.constFn(core.List$(firebase_core_platform_interface.FirebaseAppPlatform)))(),
    AppToFirebaseAppPlatform: () => (T$.AppToFirebaseAppPlatform = dart.constFn(dart.fnType(firebase_core_platform_interface.FirebaseAppPlatform, [app$.App])))(),
    VoidToListOfFirebaseAppPlatform: () => (T$.VoidToListOfFirebaseAppPlatform = dart.constFn(dart.fnType(T$.ListOfFirebaseAppPlatform(), [])))(),
    VoidToString: () => (T$.VoidToString = dart.constFn(dart.fnType(core.String, [])))(),
    VoidToApp: () => (T$.VoidToApp = dart.constFn(dart.fnType(app$.App, [])))(),
    IdentityMapOfString$FirebaseWebService: () => (T$.IdentityMapOfString$FirebaseWebService = dart.constFn(_js_helper.IdentityMap$(core.String, firebase_core_web.FirebaseWebService)))(),
    ObjectAndStackTraceToNever: () => (T$.ObjectAndStackTraceToNever = dart.constFn(dart.fnType(dart.Never, [core.Object, core.StackTrace])))(),
    IdentityMapOfString$BoxBaseImpl: () => (T$.IdentityMapOfString$BoxBaseImpl = dart.constFn(_js_helper.IdentityMap$(core.String, box_base_impl.BoxBaseImpl)))(),
    IdentityMapOfString$Future: () => (T$.IdentityMapOfString$Future = dart.constFn(_js_helper.IdentityMap$(core.String, async.Future)))(),
    DateTimeAdapterOfDateTimeWithoutTZ: () => (T$.DateTimeAdapterOfDateTimeWithoutTZ = dart.constFn(date_time_adapter.DateTimeAdapter$(date_time_adapter.DateTimeWithoutTZ)))(),
    dynamicAnddynamicToint: () => (T$.dynamicAnddynamicToint = dart.constFn(dart.fnType(core.int, [dart.dynamic, dart.dynamic])))(),
    intAndintTobool: () => (T$.intAndintTobool = dart.constFn(dart.fnType(core.bool, [core.int, core.int])))(),
    BoxBaseImplToFutureOfvoid: () => (T$.BoxBaseImplToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [box_base_impl.BoxBaseImpl])))(),
    IdentityMapOfint$ResolvedAdapter: () => (T$.IdentityMapOfint$ResolvedAdapter = dart.constFn(_js_helper.IdentityMap$(core.int, type_registry_impl.ResolvedAdapter)))(),
    HiveListOfHiveObjectMixin: () => (T$.HiveListOfHiveObjectMixin = dart.constFn(hive.HiveList$(hive_object.HiveObjectMixin)))(),
    LinkedMapOfHiveListOfHiveObjectMixin$int: () => (T$.LinkedMapOfHiveListOfHiveObjectMixin$int = dart.constFn(_js_helper.LinkedMap$(T$.HiveListOfHiveObjectMixin(), core.int)))(),
    dynamicAndBoxBaseTovoid: () => (T$.dynamicAndBoxBaseTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic, hive.BoxBase])))(),
    HiveListImplOfHiveObjectMixin: () => (T$.HiveListImplOfHiveObjectMixin = dart.constFn(hive_list_impl.HiveListImpl$(hive_object.HiveObjectMixin)))(),
    HiveListOfHiveObjectMixinTovoid: () => (T$.HiveListOfHiveObjectMixinTovoid = dart.constFn(dart.fnType(dart.void, [T$.HiveListOfHiveObjectMixin()])))(),
    HiveListOfHiveObjectMixinTobool: () => (T$.HiveListOfHiveObjectMixinTobool = dart.constFn(dart.fnType(core.bool, [T$.HiveListOfHiveObjectMixin()])))(),
    intToint: () => (T$.intToint = dart.constFn(dart.fnType(core.int, [core.int])))(),
    intAndintTovoid: () => (T$.intAndintTovoid = dart.constFn(dart.fnType(dart.void, [core.int, core.int])))(),
    intAndintToUint8List: () => (T$.intAndintToUint8List = dart.constFn(dart.fnType(typed_data.Uint8List, [core.int, core.int])))(),
    intToUint8List: () => (T$.intToUint8List = dart.constFn(dart.fnType(typed_data.Uint8List, [core.int])))(),
    JSArrayOfCollectionBox: () => (T$.JSArrayOfCollectionBox = dart.constFn(_interceptors.JSArray$(box_collection_indexed_db.CollectionBox)))(),
    VersionChangeEventTovoid: () => (T$.VersionChangeEventTovoid = dart.constFn(dart.fnType(dart.void, [indexed_db.VersionChangeEvent])))(),
    CollectionBoxTobool: () => (T$.CollectionBoxTobool = dart.constFn(dart.fnType(core.bool, [box_collection_indexed_db.CollectionBox])))(),
    TransactionToFutureOfvoid: () => (T$.TransactionToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [indexed_db.Transaction])))(),
    JSArrayOfTransactionToFutureOfvoid: () => (T$.JSArrayOfTransactionToFutureOfvoid = dart.constFn(_interceptors.JSArray$(T$.TransactionToFutureOfvoid())))(),
    ListOfTransactionToFutureOfvoid: () => (T$.ListOfTransactionToFutureOfvoid = dart.constFn(core.List$(T$.TransactionToFutureOfvoid())))(),
    ListOfObjectN: () => (T$.ListOfObjectN = dart.constFn(core.List$(T$.ObjectN())))(),
    MapOfString$ObjectN: () => (T$.MapOfString$ObjectN = dart.constFn(core.Map$(core.String, T$.ObjectN())))(),
    StringTobool: () => (T$.StringTobool = dart.constFn(dart.fnType(core.bool, [core.String])))(),
    StringToString: () => (T$.StringToString = dart.constFn(dart.fnType(core.String, [core.String])))(),
    StreamSubscriptionOfLoadBundleTaskProgress: () => (T$.StreamSubscriptionOfLoadBundleTaskProgress = dart.constFn(async.StreamSubscription$(firestore.LoadBundleTaskProgress)))(),
    StreamSubscriptionOfLoadBundleTaskProgressTovoid: () => (T$.StreamSubscriptionOfLoadBundleTaskProgressTovoid = dart.constFn(dart.fnType(dart.void, [T$.StreamSubscriptionOfLoadBundleTaskProgress()])))(),
    IdentityMapOfString$dynamic: () => (T$.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    LoadBundleTaskProgressToLoadBundleTaskSnapshotPlatform: () => (T$.LoadBundleTaskProgressToLoadBundleTaskSnapshotPlatform = dart.constFn(dart.fnType(platform_interface_load_bundle_task_snapshot.LoadBundleTaskSnapshotPlatform, [firestore.LoadBundleTaskProgress])))(),
    DocumentSnapshotN: () => (T$.DocumentSnapshotN = dart.constFn(dart.nullable(firestore.DocumentSnapshot)))(),
    DocumentSnapshotNToDocumentSnapshotPlatform: () => (T$.DocumentSnapshotNToDocumentSnapshotPlatform = dart.constFn(dart.fnType(platform_interface_document_snapshot.DocumentSnapshotPlatform, [T$.DocumentSnapshotN()])))(),
    DocumentChangeToDocumentChangePlatform: () => (T$.DocumentChangeToDocumentChangePlatform = dart.constFn(dart.fnType(platform_interface_document_change.DocumentChangePlatform, [firestore.DocumentChange])))(),
    IdentityMapOfString$bool: () => (T$.IdentityMapOfString$bool = dart.constFn(_js_helper.IdentityMap$(core.String, core.bool)))(),
    FieldPathToString: () => (T$.FieldPathToString = dart.constFn(dart.fnType(core.String, [field_path.FieldPath])))(),
    FirebaseAppPlatformToFirebaseApp: () => (T$.FirebaseAppPlatformToFirebaseApp = dart.constFn(dart.fnType(firebase_core.FirebaseApp, [firebase_core_platform_interface.FirebaseAppPlatform])))(),
    DefaultEqualityOfNever: () => (T$.DefaultEqualityOfNever = dart.constFn(equality.DefaultEquality$(dart.Never)))(),
    MapOfString$dynamic: () => (T$.MapOfString$dynamic = dart.constFn(core.Map$(core.String, dart.dynamic)))(),
    FutureOfQuerySnapshotPlatform: () => (T$.FutureOfQuerySnapshotPlatform = dart.constFn(async.Future$(platform_interface_query_snapshot.QuerySnapshotPlatform)))(),
    VoidToFutureOfQuerySnapshotPlatform: () => (T$.VoidToFutureOfQuerySnapshotPlatform = dart.constFn(dart.fnType(T$.FutureOfQuerySnapshotPlatform(), [])))(),
    StreamOfQuerySnapshotPlatform: () => (T$.StreamOfQuerySnapshotPlatform = dart.constFn(async.Stream$(platform_interface_query_snapshot.QuerySnapshotPlatform)))(),
    QuerySnapshotToQuerySnapshotPlatform: () => (T$.QuerySnapshotToQuerySnapshotPlatform = dart.constFn(dart.fnType(platform_interface_query_snapshot.QuerySnapshotPlatform, [firestore.QuerySnapshot])))(),
    VoidToStreamOfQuerySnapshotPlatform: () => (T$.VoidToStreamOfQuerySnapshotPlatform = dart.constFn(dart.fnType(T$.StreamOfQuerySnapshotPlatform(), [])))(),
    FutureOrOfDocumentSnapshot: () => (T$.FutureOrOfDocumentSnapshot = dart.constFn(async.FutureOr$(firestore.DocumentSnapshot)))(),
    FutureOfDocumentSnapshot: () => (T$.FutureOfDocumentSnapshot = dart.constFn(async.Future$(firestore.DocumentSnapshot)))(),
    VoidToFutureOfDocumentSnapshot: () => (T$.VoidToFutureOfDocumentSnapshot = dart.constFn(dart.fnType(T$.FutureOfDocumentSnapshot(), [])))(),
    StreamOfDocumentSnapshotPlatform: () => (T$.StreamOfDocumentSnapshotPlatform = dart.constFn(async.Stream$(platform_interface_document_snapshot.DocumentSnapshotPlatform)))(),
    DocumentSnapshotToDocumentSnapshotPlatform: () => (T$.DocumentSnapshotToDocumentSnapshotPlatform = dart.constFn(dart.fnType(platform_interface_document_snapshot.DocumentSnapshotPlatform, [firestore.DocumentSnapshot])))(),
    VoidToStreamOfDocumentSnapshotPlatform: () => (T$.VoidToStreamOfDocumentSnapshotPlatform = dart.constFn(dart.fnType(T$.StreamOfDocumentSnapshotPlatform(), [])))(),
    FutureOfDocumentSnapshotPlatform: () => (T$.FutureOfDocumentSnapshotPlatform = dart.constFn(async.Future$(platform_interface_document_snapshot.DocumentSnapshotPlatform)))(),
    VoidToFutureOfDocumentSnapshotPlatform: () => (T$.VoidToFutureOfDocumentSnapshotPlatform = dart.constFn(dart.fnType(T$.FutureOfDocumentSnapshotPlatform(), [])))(),
    QueryOfQueryJsImpl: () => (T$.QueryOfQueryJsImpl = dart.constFn(firestore.Query$(dart.packageJSType("firebase_firestore.Query", false))))(),
    ObjectNToNull: () => (T$.ObjectNToNull = dart.constFn(dart.fnType(core.Null, [T$.ObjectN()])))(),
    StreamControllerOfvoid: () => (T$.StreamControllerOfvoid = dart.constFn(async.StreamController$(dart.void)))(),
    dynamicToPromiseJsImpl: () => (T$.dynamicToPromiseJsImpl = dart.constFn(dart.fnType(dart.packageJSType("Promise", false), [dart.dynamic])))(),
    FutureOfObjectN: () => (T$.FutureOfObjectN = dart.constFn(async.Future$(T$.ObjectN())))(),
    ObjectNTodynamic: () => (T$.ObjectNTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$.ObjectN()])))(),
    voidTodynamic: () => (T$.voidTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.void])))(),
    ExpandoOfFirestore: () => (T$.ExpandoOfFirestore = dart.constFn(core.Expando$(firestore.Firestore)))(),
    StreamControllerOfLoadBundleTaskProgress: () => (T$.StreamControllerOfLoadBundleTaskProgress = dart.constFn(async.StreamController$(firestore.LoadBundleTaskProgress)))(),
    LoadBundleTaskProgressJsImplTovoid: () => (T$.LoadBundleTaskProgressJsImplTovoid = dart.constFn(dart.fnType(dart.void, [dart.packageJSType("LoadBundleTaskProgressJsImpl", false)])))(),
    dynamicTodynamic: () => (T$.dynamicTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.dynamic])))(),
    FirestoreErrorTodynamic: () => (T$.FirestoreErrorTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.packageJSType("FirestoreError", false)])))(),
    FirestoreErrorToNull: () => (T$.FirestoreErrorToNull = dart.constFn(dart.fnType(core.Null, [dart.packageJSType("FirestoreError", false)])))(),
    ExpandoOfLoadBundleTask: () => (T$.ExpandoOfLoadBundleTask = dart.constFn(core.Expando$(firestore.LoadBundleTask)))(),
    ExpandoOfLoadBundleTaskProgress: () => (T$.ExpandoOfLoadBundleTaskProgress = dart.constFn(core.Expando$(firestore.LoadBundleTaskProgress)))(),
    ExpandoOfWriteBatch: () => (T$.ExpandoOfWriteBatch = dart.constFn(core.Expando$(firestore.WriteBatch)))(),
    DocumentSnapshotJsImplToDocumentSnapshot: () => (T$.DocumentSnapshotJsImplToDocumentSnapshot = dart.constFn(dart.fnType(firestore.DocumentSnapshot, [dart.packageJSType("firebase_firestore.DocumentSnapshot", false)])))(),
    DocumentSnapshotJsImplToNull: () => (T$.DocumentSnapshotJsImplToNull = dart.constFn(dart.fnType(core.Null, [dart.packageJSType("firebase_firestore.DocumentSnapshot", false)])))(),
    dynamicTovoid: () => (T$.dynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic])))(),
    StreamControllerOfDocumentSnapshot: () => (T$.StreamControllerOfDocumentSnapshot = dart.constFn(async.StreamController$(firestore.DocumentSnapshot)))(),
    ExpandoOfDocumentReference: () => (T$.ExpandoOfDocumentReference = dart.constFn(core.Expando$(firestore.DocumentReference)))(),
    QuerySnapshotJsImplToQuerySnapshot: () => (T$.QuerySnapshotJsImplToQuerySnapshot = dart.constFn(dart.fnType(firestore.QuerySnapshot, [dart.packageJSType("firebase_firestore.QuerySnapshot", false)])))(),
    QuerySnapshotJsImplToNull: () => (T$.QuerySnapshotJsImplToNull = dart.constFn(dart.fnType(core.Null, [dart.packageJSType("firebase_firestore.QuerySnapshot", false)])))(),
    StreamControllerOfQuerySnapshot: () => (T$.StreamControllerOfQuerySnapshot = dart.constFn(async.StreamController$(firestore.QuerySnapshot)))(),
    JSArrayOfDocumentSnapshotJsImpl: () => (T$.JSArrayOfDocumentSnapshotJsImpl = dart.constFn(_interceptors.JSArray$(dart.packageJSType("firebase_firestore.DocumentSnapshot", false))))(),
    JSArrayOfListN: () => (T$.JSArrayOfListN = dart.constFn(_interceptors.JSArray$(T$.ListN())))(),
    CollectionReferenceOfCollectionReferenceJsImpl: () => (T$.CollectionReferenceOfCollectionReferenceJsImpl = dart.constFn(firestore.CollectionReference$(dart.packageJSType("firebase_firestore.CollectionReference", false))))(),
    DocumentReferenceJsImplToDocumentReference: () => (T$.DocumentReferenceJsImplToDocumentReference = dart.constFn(dart.fnType(firestore.DocumentReference, [dart.packageJSType("firebase_firestore.DocumentReference", false)])))(),
    ExpandoOfCollectionReferenceOfCollectionReferenceJsImpl: () => (T$.ExpandoOfCollectionReferenceOfCollectionReferenceJsImpl = dart.constFn(core.Expando$(T$.CollectionReferenceOfCollectionReferenceJsImpl())))(),
    ExpandoOfDocumentChange: () => (T$.ExpandoOfDocumentChange = dart.constFn(core.Expando$(firestore.DocumentChange)))(),
    MapNOfString$dynamic: () => (T$.MapNOfString$dynamic = dart.constFn(dart.nullable(T$.MapOfString$dynamic())))(),
    ExpandoOfDocumentSnapshot: () => (T$.ExpandoOfDocumentSnapshot = dart.constFn(core.Expando$(firestore.DocumentSnapshot)))(),
    dynamicToDocumentChange: () => (T$.dynamicToDocumentChange = dart.constFn(dart.fnType(firestore.DocumentChange, [dart.dynamic])))(),
    dynamicToDocumentSnapshot: () => (T$.dynamicToDocumentSnapshot = dart.constFn(dart.fnType(firestore.DocumentSnapshot, [dart.dynamic])))(),
    ExpandoOfQuerySnapshot: () => (T$.ExpandoOfQuerySnapshot = dart.constFn(core.Expando$(firestore.QuerySnapshot)))(),
    ExpandoOfTransaction: () => (T$.ExpandoOfTransaction = dart.constFn(core.Expando$(firestore.Transaction)))(),
    boolN: () => (T$.boolN = dart.constFn(dart.nullable(core.bool)))(),
    ObjectToNull: () => (T$.ObjectToNull = dart.constFn(dart.fnType(core.Null, [core.Object])))(),
    intN: () => (T$.intN = dart.constFn(dart.nullable(core.int)))(),
    IdentityMapOfString$intN: () => (T$.IdentityMapOfString$intN = dart.constFn(_js_helper.IdentityMap$(core.String, T$.intN())))(),
    UserInfoOfUserInfoJsImpl: () => (T$.UserInfoOfUserInfoJsImpl = dart.constFn(auth$.UserInfo$(dart.packageJSType("UserInfoJsImpl", false))))(),
    UserInfoOfUserInfoJsImplToMapOfString$dynamic: () => (T$.UserInfoOfUserInfoJsImplToMapOfString$dynamic = dart.constFn(dart.fnType(T$.MapOfString$dynamic(), [T$.UserInfoOfUserInfoJsImpl()])))(),
    LinkedHashMapOfString$StringN: () => (T$.LinkedHashMapOfString$StringN = dart.constFn(collection.LinkedHashMap$(core.String, T$.StringN())))(),
    dynamicToUserInfo: () => (T$.dynamicToUserInfo = dart.constFn(dart.fnType(user_info.UserInfo, [dart.dynamic])))(),
    dynamicToUserInfoOfUserInfoJsImpl: () => (T$.dynamicToUserInfoOfUserInfoJsImpl = dart.constFn(dart.fnType(T$.UserInfoOfUserInfoJsImpl(), [dart.dynamic])))(),
    UserCredentialJsImplToUserCredential: () => (T$.UserCredentialJsImplToUserCredential = dart.constFn(dart.fnType(auth$.UserCredential, [dart.packageJSType("UserCredentialJsImpl", false)])))(),
    ConfirmationResultJsImplToConfirmationResult: () => (T$.ConfirmationResultJsImplToConfirmationResult = dart.constFn(dart.fnType(auth$.ConfirmationResult, [dart.packageJSType("firebase_auth.ConfirmationResult", false)])))(),
    UserJsImplToUser: () => (T$.UserJsImplToUser = dart.constFn(dart.fnType(auth$.User, [dart.packageJSType("UserJsImpl", false)])))(),
    IdTokenResultImplToIdTokenResult: () => (T$.IdTokenResultImplToIdTokenResult = dart.constFn(dart.fnType(auth$.IdTokenResult, [dart.packageJSType("IdTokenResultImpl", false)])))(),
    ExpandoOfUser: () => (T$.ExpandoOfUser = dart.constFn(core.Expando$(auth$.User)))(),
    UserJsImplNToNull: () => (T$.UserJsImplNToNull = dart.constFn(dart.fnType(core.Null, [dart.nullable(dart.packageJSType("UserJsImpl", false))])))(),
    StreamControllerOfUserN: () => (T$.StreamControllerOfUserN = dart.constFn(async.StreamController$(T$.UserN())))(),
    Iterable__ToListOfE: () => (T$.Iterable__ToListOfE = dart.constFn(dart.gFnType(E => [core.List$(E), [core.Iterable], {growable: core.bool}, {}], E => [T$.ObjectN()])))(),
    ExpandoOfAuth: () => (T$.ExpandoOfAuth = dart.constFn(core.Expando$(auth$.Auth)))(),
    IdentityMapOfString$Map: () => (T$.IdentityMapOfString$Map = dart.constFn(_js_helper.IdentityMap$(core.String, core.Map)))(),
    IdentityMapOfString$StringN: () => (T$.IdentityMapOfString$StringN = dart.constFn(_js_helper.IdentityMap$(core.String, T$.StringN())))(),
    PigeonInitializeResponseN: () => (T$.PigeonInitializeResponseN = dart.constFn(dart.nullable(messages$46pigeon.PigeonInitializeResponse)))(),
    PigeonInitializeResponseNTobool: () => (T$.PigeonInitializeResponseNTobool = dart.constFn(dart.fnType(core.bool, [T$.PigeonInitializeResponseN()])))(),
    IdentityMapOfString$MethodChannelFirebaseApp: () => (T$.IdentityMapOfString$MethodChannelFirebaseApp = dart.constFn(_js_helper.IdentityMap$(core.String, firebase_core_platform_interface.MethodChannelFirebaseApp)))(),
    MapOfObjectN$ObjectN: () => (T$.MapOfObjectN$ObjectN = dart.constFn(core.Map$(T$.ObjectN(), T$.ObjectN())))(),
    MapNOfObjectN$ObjectN: () => (T$.MapNOfObjectN$ObjectN = dart.constFn(dart.nullable(T$.MapOfObjectN$ObjectN())))(),
    dynamicToApp: () => (T$.dynamicToApp = dart.constFn(dart.fnType(app$.App, [dart.dynamic])))(),
    VoidToReferencePlatform: () => (T$.VoidToReferencePlatform = dart.constFn(dart.fnType(platform_interface_reference.ReferencePlatform, [])))(),
    ListOfint: () => (T$.ListOfint = dart.constFn(core.List$(core.int)))(),
    SinkOfDigest: () => (T$.SinkOfDigest = dart.constFn(core.Sink$(digest.Digest)))(),
    JSArrayOfint: () => (T$.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    ListOfUint32List: () => (T$.ListOfUint32List = dart.constFn(core.List$(typed_data.Uint32List)))(),
    intToUint32List: () => (T$.intToUint32List = dart.constFn(dart.fnType(typed_data.Uint32List, [core.int])))(),
    IterableOfint: () => (T$.IterableOfint = dart.constFn(core.Iterable$(core.int)))(),
    JSArrayOfFrame: () => (T$.JSArrayOfFrame = dart.constFn(_interceptors.JSArray$(frame$.Frame)))(),
    StringAndMapOfString$dynamicTodynamic: () => (T$.StringAndMapOfString$dynamicTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.String, T$.MapOfString$dynamic()])))(),
    intAndMapNOfString$dynamicTodynamic: () => (T$.intAndMapNOfString$dynamicTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.int, T$.MapNOfString$dynamic()])))(),
    ListOfList: () => (T$.ListOfList = dart.constFn(core.List$(core.List)))(),
    ObjectToFieldPath: () => (T$.ObjectToFieldPath = dart.constFn(dart.fnType(field_path.FieldPath, [core.Object])))(),
    VoidToRN: () => (T$.VoidToRN = dart.constFn(dart.gFnType(R => {
      var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
      return [__t$RN(), []];
    }, R => {
      var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
      return [T$.ObjectN()];
    })))(),
    dynamicAnddynamicToNever: () => (T$.dynamicAnddynamicToNever = dart.constFn(dart.fnType(dart.Never, [dart.dynamic, dart.dynamic])))(),
    ObjectNTobool: () => (T$.ObjectNTobool = dart.constFn(dart.fnType(core.bool, [T$.ObjectN()])))(),
    StringAnddynamicTodynamic: () => (T$.StringAnddynamicTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.String, dart.dynamic])))(),
    dynamicAnddynamicTovoid: () => (T$.dynamicAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic, dart.dynamic])))(),
    ObjectTodynamic: () => (T$.ObjectTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.Object])))(),
    ObjectNToObjectN: () => (T$.ObjectNToObjectN = dart.constFn(dart.fnType(T$.ObjectN(), [T$.ObjectN()])))(),
    IdentityMapOfString$ObjectN: () => (T$.IdentityMapOfString$ObjectN = dart.constFn(_js_helper.IdentityMap$(core.String, T$.ObjectN())))(),
    LinkedMapOfObjectN$ObjectN: () => (T$.LinkedMapOfObjectN$ObjectN = dart.constFn(_js_helper.LinkedMap$(T$.ObjectN(), T$.ObjectN())))(),
    BasicMessageChannelOfObjectN: () => (T$.BasicMessageChannelOfObjectN = dart.constFn(platform_channel.BasicMessageChannel$(T$.ObjectN())))(),
    JSArrayOfObjectN: () => (T$.JSArrayOfObjectN = dart.constFn(_interceptors.JSArray$(T$.ObjectN())))(),
    ListNOfObjectN: () => (T$.ListNOfObjectN = dart.constFn(dart.nullable(T$.ListOfObjectN())))(),
    ListOfPigeonInitializeResponseN: () => (T$.ListOfPigeonInitializeResponseN = dart.constFn(core.List$(T$.PigeonInitializeResponseN())))(),
    PigeonFirebaseOptionsN: () => (T$.PigeonFirebaseOptionsN = dart.constFn(dart.nullable(messages$46pigeon.PigeonFirebaseOptions)))(),
    IdentityMapOfStringN$ObjectN: () => (T$.IdentityMapOfStringN$ObjectN = dart.constFn(_js_helper.IdentityMap$(T$.StringN(), T$.ObjectN())))(),
    JSArrayOfPigeonInitializeResponseN: () => (T$.JSArrayOfPigeonInitializeResponseN = dart.constFn(_interceptors.JSArray$(T$.PigeonInitializeResponseN())))(),
    FutureOfMapOfObjectN$ObjectN: () => (T$.FutureOfMapOfObjectN$ObjectN = dart.constFn(async.Future$(T$.MapOfObjectN$ObjectN())))(),
    ObjectNToFutureOfMapOfObjectN$ObjectN: () => (T$.ObjectNToFutureOfMapOfObjectN$ObjectN = dart.constFn(dart.fnType(T$.FutureOfMapOfObjectN$ObjectN(), [T$.ObjectN()])))(),
    ExpandoOfApp: () => (T$.ExpandoOfApp = dart.constFn(core.Expando$(app$.App)))(),
    ExpandoOfStorage: () => (T$.ExpandoOfStorage = dart.constFn(core.Expando$(storage.Storage)))(),
    FullMetadataJsImplToFullMetadata: () => (T$.FullMetadataJsImplToFullMetadata = dart.constFn(dart.fnType(storage.FullMetadata, [dart.packageJSType("FullMetadataJsImpl", false)])))(),
    ListResultJsImplToListResult: () => (T$.ListResultJsImplToListResult = dart.constFn(dart.fnType(storage.ListResult, [dart.packageJSType("ListResultJsImpl", false)])))(),
    ExpandoOfStorageReference: () => (T$.ExpandoOfStorageReference = dart.constFn(core.Expando$(storage.StorageReference)))(),
    LinkedHashMapOfString$String: () => (T$.LinkedHashMapOfString$String = dart.constFn(collection.LinkedHashMap$(core.String, core.String)))(),
    IdentityMapOfString$String: () => (T$.IdentityMapOfString$String = dart.constFn(_js_helper.IdentityMap$(core.String, core.String)))(),
    ExpandoOfFullMetadata: () => (T$.ExpandoOfFullMetadata = dart.constFn(core.Expando$(storage.FullMetadata)))(),
    UploadTaskSnapshotJsImplToUploadTaskSnapshot: () => (T$.UploadTaskSnapshotJsImplToUploadTaskSnapshot = dart.constFn(dart.fnType(storage.UploadTaskSnapshot, [dart.packageJSType("UploadTaskSnapshotJsImpl", false)])))(),
    UploadTaskSnapshotJsImplToNull: () => (T$.UploadTaskSnapshotJsImplToNull = dart.constFn(dart.fnType(core.Null, [dart.packageJSType("UploadTaskSnapshotJsImpl", false)])))(),
    StreamControllerOfUploadTaskSnapshot: () => (T$.StreamControllerOfUploadTaskSnapshot = dart.constFn(async.StreamController$(storage.UploadTaskSnapshot)))(),
    ExpandoOfUploadTask: () => (T$.ExpandoOfUploadTask = dart.constFn(core.Expando$(storage.UploadTask)))(),
    ExpandoOfUploadTaskSnapshot: () => (T$.ExpandoOfUploadTaskSnapshot = dart.constFn(core.Expando$(storage.UploadTaskSnapshot)))(),
    dynamicToStorageReference: () => (T$.dynamicToStorageReference = dart.constFn(dart.fnType(storage.StorageReference, [dart.dynamic])))(),
    ExpandoOfListResult: () => (T$.ExpandoOfListResult = dart.constFn(core.Expando$(storage.ListResult)))(),
    FutureOfString: () => (T$.FutureOfString = dart.constFn(async.Future$(core.String)))(),
    VoidToFutureOfString: () => (T$.VoidToFutureOfString = dart.constFn(dart.fnType(T$.FutureOfString(), [])))(),
    FutureOfFullMetadata: () => (T$.FutureOfFullMetadata = dart.constFn(async.Future$(full_metadata.FullMetadata)))(),
    VoidToFutureOfFullMetadata: () => (T$.VoidToFutureOfFullMetadata = dart.constFn(dart.fnType(T$.FutureOfFullMetadata(), [])))(),
    FutureOrOfListResultPlatform: () => (T$.FutureOrOfListResultPlatform = dart.constFn(async.FutureOr$(platform_interface_list_result.ListResultPlatform)))(),
    FutureOfListResultWeb: () => (T$.FutureOfListResultWeb = dart.constFn(async.Future$(list_result_web.ListResultWeb)))(),
    VoidToFutureOfListResultWeb: () => (T$.VoidToFutureOfListResultWeb = dart.constFn(dart.fnType(T$.FutureOfListResultWeb(), [])))(),
    FutureOfListResultPlatform: () => (T$.FutureOfListResultPlatform = dart.constFn(async.Future$(platform_interface_list_result.ListResultPlatform)))(),
    FutureOfUint8List: () => (T$.FutureOfUint8List = dart.constFn(async.Future$(typed_data.Uint8List)))(),
    MapOfString$String: () => (T$.MapOfString$String = dart.constFn(core.Map$(core.String, core.String)))(),
    MapNOfString$String: () => (T$.MapNOfString$String = dart.constFn(dart.nullable(T$.MapOfString$String())))(),
    Uri__ToFutureOfUint8List: () => (T$.Uri__ToFutureOfUint8List = dart.constFn(dart.fnType(T$.FutureOfUint8List(), [core.Uri], {headers: T$.MapNOfString$String()}, {})))(),
    Uint8ListN: () => (T$.Uint8ListN = dart.constFn(dart.nullable(typed_data.Uint8List)))(),
    FutureOrOfUint8ListN: () => (T$.FutureOrOfUint8ListN = dart.constFn(async.FutureOr$(T$.Uint8ListN())))(),
    VoidToFutureOfUint8List: () => (T$.VoidToFutureOfUint8List = dart.constFn(dart.fnType(T$.FutureOfUint8List(), [])))(),
    StringAndStringToString: () => (T$.StringAndStringToString = dart.constFn(dart.fnType(core.String, [core.String, core.String])))(),
    LinkedMapOfdynamic$Frame: () => (T$.LinkedMapOfdynamic$Frame = dart.constFn(_js_helper.LinkedMap$(dart.dynamic, frame$.Frame)))(),
    IndexableSkipListOfdynamic$Frame: () => (T$.IndexableSkipListOfdynamic$Frame = dart.constFn(indexable_skip_list.IndexableSkipList$(dart.dynamic, frame$.Frame)))(),
    StreamControllerOfBoxEvent: () => (T$.StreamControllerOfBoxEvent = dart.constFn(async.StreamController$(hive.BoxEvent)))(),
    BoxEventTobool: () => (T$.BoxEventTobool = dart.constFn(dart.fnType(core.bool, [hive.BoxEvent])))(),
    IdentityMapOfString$Object: () => (T$.IdentityMapOfString$Object = dart.constFn(_js_helper.IdentityMap$(core.String, core.Object)))(),
    dynamicToFutureOfvoid: () => (T$.dynamicToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [dart.dynamic])))(),
    StringNToNull: () => (T$.StringNToNull = dart.constFn(dart.fnType(core.Null, [T$.StringN()])))(),
    _ValueWrapperOfUserPlatform: () => (T$._ValueWrapperOfUserPlatform = dart.constFn(method_channel_firebase_auth._ValueWrapper$(platform_interface_user.UserPlatform)))(),
    VoidToMethodChannelFirebaseAuth: () => (T$.VoidToMethodChannelFirebaseAuth = dart.constFn(dart.fnType(method_channel_firebase_auth.MethodChannelFirebaseAuth, [])))(),
    _ValueWrapperOfUserPlatformToUserPlatformN: () => (T$._ValueWrapperOfUserPlatformToUserPlatformN = dart.constFn(dart.fnType(T$.UserPlatformN(), [T$._ValueWrapperOfUserPlatform()])))(),
    FutureOrOfString: () => (T$.FutureOrOfString = dart.constFn(async.FutureOr$(core.String)))(),
    MapN: () => (T$.MapN = dart.constFn(dart.nullable(core.Map)))(),
    IdentityMapOfString$MethodChannelFirebaseAuth: () => (T$.IdentityMapOfString$MethodChannelFirebaseAuth = dart.constFn(_js_helper.IdentityMap$(core.String, method_channel_firebase_auth.MethodChannelFirebaseAuth)))(),
    StreamControllerOf_ValueWrapperOfUserPlatform: () => (T$.StreamControllerOf_ValueWrapperOfUserPlatform = dart.constFn(async.StreamController$(T$._ValueWrapperOfUserPlatform())))(),
    IdentityMapOfString$StreamControllerOf_ValueWrapperOfUserPlatform: () => (T$.IdentityMapOfString$StreamControllerOf_ValueWrapperOfUserPlatform = dart.constFn(_js_helper.IdentityMap$(core.String, T$.StreamControllerOf_ValueWrapperOfUserPlatform())))(),
    UnmodifiableMapViewOfString$String: () => (T$.UnmodifiableMapViewOfString$String = dart.constFn(collection.UnmodifiableMapView$(core.String, core.String)))(),
    CaseInsensitiveMapOfString: () => (T$.CaseInsensitiveMapOfString = dart.constFn(case_insensitive_map.CaseInsensitiveMap$(core.String)))(),
    ListOfAuthenticationChallenge: () => (T$.ListOfAuthenticationChallenge = dart.constFn(core.List$(authentication_challenge.AuthenticationChallenge)))(),
    VoidToAuthenticationChallenge: () => (T$.VoidToAuthenticationChallenge = dart.constFn(dart.fnType(authentication_challenge.AuthenticationChallenge, [])))(),
    VoidToListOfAuthenticationChallenge: () => (T$.VoidToListOfAuthenticationChallenge = dart.constFn(dart.fnType(T$.ListOfAuthenticationChallenge(), [])))(),
    VoidToDateTime: () => (T$.VoidToDateTime = dart.constFn(dart.fnType(core.DateTime, [])))(),
    VoidToMediaType: () => (T$.VoidToMediaType = dart.constFn(dart.fnType(media_type.MediaType, [])))(),
    MatchToString: () => (T$.MatchToString = dart.constFn(dart.fnType(core.String, [core.Match])))(),
    StringAndStringTovoid: () => (T$.StringAndStringTovoid = dart.constFn(dart.fnType(dart.void, [core.String, core.String])))(),
    FutureOfResponse: () => (T$.FutureOfResponse = dart.constFn(async.Future$(response$.Response)))(),
    ClientToFutureOfResponse: () => (T$.ClientToFutureOfResponse = dart.constFn(dart.fnType(T$.FutureOfResponse(), [client$.Client])))(),
    ClientToFutureOfString: () => (T$.ClientToFutureOfString = dart.constFn(dart.fnType(T$.FutureOfString(), [client$.Client])))(),
    ClientToFutureOfUint8List: () => (T$.ClientToFutureOfUint8List = dart.constFn(dart.fnType(T$.FutureOfUint8List(), [client$.Client])))(),
    LinkedMapOfPutStringFormat$String: () => (T$.LinkedMapOfPutStringFormat$String = dart.constFn(_js_helper.LinkedMap$(put_string_format.PutStringFormat, core.String)))(),
    StreamOfTaskSnapshotPlatform: () => (T$.StreamOfTaskSnapshotPlatform = dart.constFn(async.Stream$(platform_interface_task_snapshot.TaskSnapshotPlatform)))(),
    StreamGroupOfTaskSnapshotPlatform: () => (T$.StreamGroupOfTaskSnapshotPlatform = dart.constFn(stream_group.StreamGroup$(platform_interface_task_snapshot.TaskSnapshotPlatform)))(),
    UploadTaskSnapshotToTaskSnapshotWeb: () => (T$.UploadTaskSnapshotToTaskSnapshotWeb = dart.constFn(dart.fnType(task_snapshot_web.TaskSnapshotWeb, [storage.UploadTaskSnapshot])))(),
    VoidToStreamOfTaskSnapshotPlatform: () => (T$.VoidToStreamOfTaskSnapshotPlatform = dart.constFn(dart.fnType(T$.StreamOfTaskSnapshotPlatform(), [])))(),
    FutureOfTaskSnapshotPlatform: () => (T$.FutureOfTaskSnapshotPlatform = dart.constFn(async.Future$(platform_interface_task_snapshot.TaskSnapshotPlatform)))(),
    FutureOfTaskSnapshotWeb: () => (T$.FutureOfTaskSnapshotWeb = dart.constFn(async.Future$(task_snapshot_web.TaskSnapshotWeb)))(),
    VoidToFutureOfTaskSnapshotWeb: () => (T$.VoidToFutureOfTaskSnapshotWeb = dart.constFn(dart.fnType(T$.FutureOfTaskSnapshotWeb(), [])))(),
    TaskSnapshotPlatformTobool: () => (T$.TaskSnapshotPlatformTobool = dart.constFn(dart.fnType(core.bool, [platform_interface_task_snapshot.TaskSnapshotPlatform])))(),
    dynamicTobool: () => (T$.dynamicTobool = dart.constFn(dart.fnType(core.bool, [dart.dynamic])))(),
    StorageReferenceToString: () => (T$.StorageReferenceToString = dart.constFn(dart.fnType(core.String, [storage.StorageReference])))(),
    ListOfdouble: () => (T$.ListOfdouble = dart.constFn(core.List$(core.double)))(),
    ListOfbool: () => (T$.ListOfbool = dart.constFn(core.List$(core.bool)))(),
    _AsyncStarImplOfLoadBundleTaskSnapshotPlatform: () => (T$._AsyncStarImplOfLoadBundleTaskSnapshotPlatform = dart.constFn(async._AsyncStarImpl$(platform_interface_load_bundle_task_snapshot.LoadBundleTaskSnapshotPlatform)))(),
    StreamOfLoadBundleTaskSnapshotPlatform: () => (T$.StreamOfLoadBundleTaskSnapshotPlatform = dart.constFn(async.Stream$(platform_interface_load_bundle_task_snapshot.LoadBundleTaskSnapshotPlatform)))(),
    VoidToStreamOfLoadBundleTaskSnapshotPlatform: () => (T$.VoidToStreamOfLoadBundleTaskSnapshotPlatform = dart.constFn(dart.fnType(T$.StreamOfLoadBundleTaskSnapshotPlatform(), [])))(),
    StreamSubscriptionOfLoadBundleTaskSnapshotPlatform: () => (T$.StreamSubscriptionOfLoadBundleTaskSnapshotPlatform = dart.constFn(async.StreamSubscription$(platform_interface_load_bundle_task_snapshot.LoadBundleTaskSnapshotPlatform)))(),
    StreamSubscriptionOfLoadBundleTaskSnapshotPlatformTovoid: () => (T$.StreamSubscriptionOfLoadBundleTaskSnapshotPlatformTovoid = dart.constFn(dart.fnType(dart.void, [T$.StreamSubscriptionOfLoadBundleTaskSnapshotPlatform()])))(),
    ListOfDocumentSnapshotPlatform: () => (T$.ListOfDocumentSnapshotPlatform = dart.constFn(core.List$(platform_interface_document_snapshot.DocumentSnapshotPlatform)))(),
    intToDocumentSnapshotPlatform: () => (T$.intToDocumentSnapshotPlatform = dart.constFn(dart.fnType(platform_interface_document_snapshot.DocumentSnapshotPlatform, [core.int])))(),
    ListOfDocumentChangePlatform: () => (T$.ListOfDocumentChangePlatform = dart.constFn(core.List$(platform_interface_document_change.DocumentChangePlatform)))(),
    intToMethodChannelDocumentChange: () => (T$.intToMethodChannelDocumentChange = dart.constFn(dart.fnType(method_channel_document_change.MethodChannelDocumentChange, [core.int])))(),
    StreamControllerOfQuerySnapshotPlatform: () => (T$.StreamControllerOfQuerySnapshotPlatform = dart.constFn(async.StreamController$(platform_interface_query_snapshot.QuerySnapshotPlatform)))(),
    StreamControllerOfDocumentSnapshotPlatform: () => (T$.StreamControllerOfDocumentSnapshotPlatform = dart.constFn(async.StreamController$(platform_interface_document_snapshot.DocumentSnapshotPlatform)))(),
    JSArrayOfMapOfString$dynamic: () => (T$.JSArrayOfMapOfString$dynamic = dart.constFn(_interceptors.JSArray$(T$.MapOfString$dynamic())))(),
    MethodChannelUserN: () => (T$.MethodChannelUserN = dart.constFn(dart.nullable(method_channel_user.MethodChannelUser)))(),
    StreamControllerOfListOfint: () => (T$.StreamControllerOfListOfint = dart.constFn(async.StreamController$(T$.ListOfint())))(),
    SinkOfListOfint: () => (T$.SinkOfListOfint = dart.constFn(core.Sink$(T$.ListOfint())))(),
    intAndStringTovoid: () => (T$.intAndStringTovoid = dart.constFn(dart.fnType(dart.void, [core.int, core.String])))(),
    MethodCallToFutureOfvoid: () => (T$.MethodCallToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [message_codec.MethodCall])))(),
    IdentityMapOfString$MethodChannelFirebaseStorage: () => (T$.IdentityMapOfString$MethodChannelFirebaseStorage = dart.constFn(_js_helper.IdentityMap$(core.String, method_channel_firebase_storage.MethodChannelFirebaseStorage)))(),
    StreamControllerOfTaskSnapshotPlatform: () => (T$.StreamControllerOfTaskSnapshotPlatform = dart.constFn(async.StreamController$(platform_interface_task_snapshot.TaskSnapshotPlatform)))(),
    IdentityMapOfint$StreamControllerOfTaskSnapshotPlatform: () => (T$.IdentityMapOfint$StreamControllerOfTaskSnapshotPlatform = dart.constFn(_js_helper.IdentityMap$(core.int, T$.StreamControllerOfTaskSnapshotPlatform())))(),
    StringAndStringTobool: () => (T$.StringAndStringTobool = dart.constFn(dart.fnType(core.bool, [core.String, core.String])))(),
    StringToint: () => (T$.StringToint = dart.constFn(dart.fnType(core.int, [core.String])))(),
    _EmptyStreamOfListOfint: () => (T$._EmptyStreamOfListOfint = dart.constFn(async._EmptyStream$(T$.ListOfint())))(),
    StreamOfListOfint: () => (T$.StreamOfListOfint = dart.constFn(async.Stream$(T$.ListOfint())))(),
    CompleterOfUint8List: () => (T$.CompleterOfUint8List = dart.constFn(async.Completer$(typed_data.Uint8List)))(),
    ListOfintTovoid: () => (T$.ListOfintTovoid = dart.constFn(dart.fnType(dart.void, [T$.ListOfint()])))(),
    JSArrayOfMultipartFile: () => (T$.JSArrayOfMultipartFile = dart.constFn(_interceptors.JSArray$(multipart_file.MultipartFile)))(),
    _AsyncStarImplOfListOfint: () => (T$._AsyncStarImplOfListOfint = dart.constFn(async._AsyncStarImpl$(T$.ListOfint())))(),
    LinkedMapOfTaskState$TaskState: () => (T$.LinkedMapOfTaskState$TaskState = dart.constFn(_js_helper.LinkedMap$(storage.TaskState, task_state.TaskState)))(),
    ListOfnum: () => (T$.ListOfnum = dart.constFn(core.List$(core.num)))(),
    CompleterOfList: () => (T$.CompleterOfList = dart.constFn(async.Completer$(core.List)))(),
    EventTovoid: () => (T$.EventTovoid = dart.constFn(dart.fnType(dart.void, [html.Event])))(),
    CursorWithValueToObjectN: () => (T$.CursorWithValueToObjectN = dart.constFn(dart.fnType(T$.ObjectN(), [indexed_db.CursorWithValue])))(),
    CompleterOfIterable: () => (T$.CompleterOfIterable = dart.constFn(async.Completer$(core.Iterable)))(),
    CursorWithValueTodynamic: () => (T$.CursorWithValueTodynamic = dart.constFn(dart.fnType(dart.dynamic, [indexed_db.CursorWithValue])))(),
    DocumentChangeTypeTobool: () => (T$.DocumentChangeTypeTobool = dart.constFn(dart.fnType(core.bool, [platform_interface_document_change.DocumentChangeType])))(),
    LinkedHashSetOfHttpRequest: () => (T$.LinkedHashSetOfHttpRequest = dart.constFn(collection.LinkedHashSet$(html.HttpRequest)))(),
    CompleterOfStreamedResponse: () => (T$.CompleterOfStreamedResponse = dart.constFn(async.Completer$(streamed_response.StreamedResponse)))(),
    ProgressEventToNull: () => (T$.ProgressEventToNull = dart.constFn(dart.fnType(core.Null, [html.ProgressEvent])))(),
    JSArrayOfListOfString: () => (T$.JSArrayOfListOfString = dart.constFn(_interceptors.JSArray$(T$.ListOfString())))(),
    ListOfStringToString: () => (T$.ListOfStringToString = dart.constFn(dart.fnType(core.String, [T$.ListOfString()])))(),
    StringToMethodChannelReference: () => (T$.StringToMethodChannelReference = dart.constFn(dart.fnType(method_channel_reference.MethodChannelReference, [core.String])))(),
    voidToNull: () => (T$.voidToNull = dart.constFn(dart.fnType(core.Null, [dart.void])))(),
    ObjectAndStackTraceToNull: () => (T$.ObjectAndStackTraceToNull = dart.constFn(dart.fnType(core.Null, [core.Object, core.StackTrace])))(),
    TaskSnapshotPlatformToFutureOfvoid: () => (T$.TaskSnapshotPlatformToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [platform_interface_task_snapshot.TaskSnapshotPlatform])))(),
    CompleterOfTaskSnapshotPlatform: () => (T$.CompleterOfTaskSnapshotPlatform = dart.constFn(async.Completer$(platform_interface_task_snapshot.TaskSnapshotPlatform)))()
  };
  var S$ = {
    $toString: dartx.toString,
    _usernameController: dart.privateName(main, "_usernameController"),
    $isNotEmpty: dartx.isNotEmpty,
    EdgeInsets_bottom: dart.privateName(edge_insets, "EdgeInsets.bottom"),
    EdgeInsets_right: dart.privateName(edge_insets, "EdgeInsets.right"),
    EdgeInsets_top: dart.privateName(edge_insets, "EdgeInsets.top"),
    EdgeInsets_left: dart.privateName(edge_insets, "EdgeInsets.left"),
    index: dart.privateName(hive, "HiveField.index"),
    defaultValue: dart.privateName(hive, "HiveField.defaultValue"),
    typeId: dart.privateName(hive, "HiveType.typeId"),
    adapterName: dart.privateName(hive, "HiveType.adapterName"),
    Utf8Decoder__allowMalformed: dart.privateName(convert, "Utf8Decoder._allowMalformed"),
    key: dart.privateName(hive, "BoxEvent.key"),
    value: dart.privateName(hive, "BoxEvent.value"),
    deleted: dart.privateName(hive, "BoxEvent.deleted"),
    $runtimeType: dartx.runtimeType,
    $hashCode: dartx.hashCode,
    $_equals: dartx._equals,
    __HiveAesCipher__cipher: dart.privateName(hive, "_#HiveAesCipher#_cipher"),
    __HiveAesCipher__keyCrc: dart.privateName(hive, "_#HiveAesCipher#_keyCrc"),
    $length: dartx.length,
    $any: dartx.any,
    _cipher: dart.privateName(hive, "_cipher"),
    _keyCrc: dart.privateName(hive, "_keyCrc"),
    $setAll: dartx.setAll,
    message: dart.privateName(hive, "HiveError.message"),
    $iterator: dartx.iterator,
    _name: dart.privateName(core, "_name"),
    _enumToString: dart.privateName(core, "_enumToString"),
    _Enum__name: dart.privateName(core, "_Enum._name"),
    _Enum_index: dart.privateName(core, "_Enum.index"),
    _listeners: dart.privateName(hive_flutter, "_listeners"),
    _subscription: dart.privateName(hive_flutter, "_subscription"),
    $isEmpty: dartx.isEmpty,
    $add: dartx.add,
    $remove: dartx.remove,
    box: dart.privateName(hive_flutter, "WatchBoxBuilder.box"),
    builder: dart.privateName(hive_flutter, "WatchBoxBuilder.builder"),
    watchKeys: dart.privateName(hive_flutter, "WatchBoxBuilder.watchKeys"),
    _subscribe: dart.privateName(hive_flutter, "_subscribe"),
    _unsubscribe: dart.privateName(hive_flutter, "_unsubscribe"),
    $contains: dartx.contains,
    $toSet: dartx.toSet,
    _showBottomSheet: dart.privateName(mainpage, "_showBottomSheet"),
    _webFirestore: dart.privateName(cloud_firestore_web, "_webFirestore"),
    _settings: dart.privateName(cloud_firestore_web, "_settings"),
    _delegate: dart.privateName(cloud_firestore_web, "_delegate"),
    Duration__duration: dart.privateName(core, "Duration._duration"),
    Settings_ignoreUndefinedProperties: dart.privateName(settings, "Settings.ignoreUndefinedProperties"),
    Settings_cacheSizeBytes: dart.privateName(settings, "Settings.cacheSizeBytes"),
    Settings_sslEnabled: dart.privateName(settings, "Settings.sslEnabled"),
    Settings_host: dart.privateName(settings, "Settings.host"),
    Settings_persistenceEnabled: dart.privateName(settings, "Settings.persistenceEnabled"),
    GetOptions_source: dart.privateName(get_options, "GetOptions.source"),
    appInstance: dart.privateName(platform_interface_firestore, "FirebaseFirestorePlatform.appInstance"),
    _instanceToken: dart.privateName(plugin_platform_interface, "_instanceToken"),
    _initialized: dart.privateName(firebase_auth_web, "_initialized"),
    _webAuth: dart.privateName(firebase_auth_web, "_webAuth"),
    $_set: dartx._set,
    _delegate$1: dart.privateName(firebase_auth_web, "_delegate"),
    $_get: dartx._get,
    appInstance$1: dart.privateName(platform_interface_firebase_auth, "FirebaseAuthPlatform.appInstance"),
    tenantId: dart.privateName(platform_interface_firebase_auth, "FirebaseAuthPlatform.tenantId"),
    _isAutomaticDataCollectionEnabled: dart.privateName(firebase_core_web, "_isAutomaticDataCollectionEnabled"),
    name: dart.privateName(firebase_core_platform_interface, "FirebaseAppPlatform.name"),
    options: dart.privateName(firebase_core_platform_interface, "FirebaseAppPlatform.options"),
    _isDefault: dart.privateName(firebase_core_platform_interface, "_isDefault"),
    name$1: dart.privateName(firebase_core_web, "FirebaseWebService.name"),
    override: dart.privateName(firebase_core_web, "FirebaseWebService.override"),
    $putIfAbsent: dartx.putIfAbsent,
    _firebaseSDKVersion: dart.privateName(firebase_core_web, "_firebaseSDKVersion"),
    $map: dartx.map,
    $toList: dartx.toList,
    _ignoredServiceScripts: dart.privateName(firebase_core_web, "_ignoredServiceScripts"),
    $type: dartx.type,
    $text: dartx.text,
    $head: dartx.head,
    $append: dartx.append,
    _injectSrcScript: dart.privateName(firebase_core_web, "_injectSrcScript"),
    $values: dartx.values,
    _initializeCore: dart.privateName(firebase_core_web, "_initializeCore"),
    $split: dartx.split,
    $replaceAll: dartx.replaceAll,
    $compareTo: dartx.compareTo,
    __AesCbcPkcs7__encryptionKey: dart.privateName(aes_cbc_pkcs7, "_#AesCbcPkcs7#_encryptionKey"),
    __AesCbcPkcs7__decryptionKey: dart.privateName(aes_cbc_pkcs7, "_#AesCbcPkcs7#_decryptionKey"),
    _keyBytes: dart.privateName(aes_cbc_pkcs7, "_keyBytes"),
    _encryptionKey: dart.privateName(aes_cbc_pkcs7, "_encryptionKey"),
    _decryptionKey: dart.privateName(aes_cbc_pkcs7, "_decryptionKey"),
    $truncate: dartx.truncate,
    $modulo: dartx['%'],
    $setRange: dartx.setRange,
    $fillRange: dartx.fillRange,
    $rightShift: dartx['>>'],
    homePath: dart.privateName(hive_impl, "HiveImpl.homePath"),
    _boxes: dart.privateName(hive_impl, "_boxes"),
    _openingBoxes: dart.privateName(hive_impl, "_openingBoxes"),
    _managerOverride: dart.privateName(hive_impl, "_managerOverride"),
    _secureRandom: dart.privateName(hive_impl, "_secureRandom"),
    _registerDefaultAdapters: dart.privateName(hive_impl, "_registerDefaultAdapters"),
    _manager: dart.privateName(hive_impl, "_manager"),
    $toLowerCase: dartx.toLowerCase,
    $containsKey: dartx.containsKey,
    _openBox: dart.privateName(hive_impl, "_openBox"),
    _getBoxInternal: dart.privateName(hive_impl, "_getBoxInternal"),
    _typeAdapters: dart.privateName(type_registry_impl, "_typeAdapters"),
    $clear: dartx.clear,
    boxName: dart.privateName(hive_list_impl, "HiveListImpl.boxName"),
    _hive: dart.privateName(hive_list_impl, "_hive"),
    _invalidated: dart.privateName(hive_list_impl, "_invalidated"),
    _disposed: dart.privateName(hive_list_impl, "_disposed"),
    _keys: dart.privateName(hive_list_impl, "_keys"),
    _delegate$2: dart.privateName(hive_list_impl, "_delegate"),
    _box: dart.privateName(hive_list_impl, "_box"),
    _checkElementIsValid: dart.privateName(hive_list_impl, "_checkElementIsValid"),
    $addAll: dartx.addAll,
    $cast: dartx.cast,
    $first: dartx.first,
    $last: dartx.last,
    $plus: dartx['+'],
    $asMap: dartx.asMap,
    $elementAt: dartx.elementAt,
    $every: dartx.every,
    $expand: dartx.expand,
    $firstWhere: dartx.firstWhere,
    $fold: dartx.fold,
    $followedBy: dartx.followedBy,
    $forEach: dartx.forEach,
    $getRange: dartx.getRange,
    $indexOf: dartx.indexOf,
    $indexWhere: dartx.indexWhere,
    $join: dartx.join,
    $lastIndexOf: dartx.lastIndexOf,
    $lastIndexWhere: dartx.lastIndexWhere,
    $lastWhere: dartx.lastWhere,
    $reduce: dartx.reduce,
    $reversed: dartx.reversed,
    $single: dartx.single,
    $singleWhere: dartx.singleWhere,
    $skip: dartx.skip,
    $skipWhile: dartx.skipWhile,
    $sublist: dartx.sublist,
    $take: dartx.take,
    $takeWhile: dartx.takeWhile,
    $where: dartx.where,
    $whereType: dartx.whereType,
    _box$1: dart.privateName(hive_object, "HiveObjectMixin._box"),
    _key: dart.privateName(hive_object, "HiveObjectMixin._key"),
    _hiveLists: dart.privateName(hive_object, "HiveObjectMixin._hiveLists"),
    _box$2: dart.privateName(hive_object, "_box"),
    _key$1: dart.privateName(hive_object, "_key"),
    _hiveLists$1: dart.privateName(hive_object, "_hiveLists"),
    _requireInitialized: dart.privateName(hive_object, "_requireInitialized"),
    $keys: dartx.keys,
    $codeUnits: dartx.codeUnits,
    $buffer: dartx.buffer,
    $offsetInBytes: dartx.offsetInBytes,
    boxNames: dart.privateName(box_collection_indexed_db, "BoxCollection.boxNames"),
    _openBoxes: dart.privateName(box_collection_indexed_db, "_openBoxes"),
    _txnCache: dart.privateName(box_collection_indexed_db, "_txnCache"),
    _db: dart.privateName(box_collection_indexed_db, "_db"),
    $indexedDB: dartx.indexedDB,
    $result: dartx.result,
    $target: dartx.target,
    $open: dartx.open,
    _cache: dart.privateName(box_collection_indexed_db, "_cache"),
    $transaction: dartx.transaction,
    $completed: dartx.completed,
    _cachedKeys: dart.privateName(box_collection_indexed_db, "_cachedKeys"),
    $deleteDatabase: dartx.deleteDatabase,
    name$2: dart.privateName(box_collection_indexed_db, "CollectionBox.name"),
    boxCollection: dart.privateName(box_collection_indexed_db, "CollectionBox.boxCollection"),
    $objectStore: dartx.objectStore,
    $getAllKeys: dartx.getAllKeys,
    $onSuccess: dartx.onSuccess,
    $openCursor: dartx.openCursor,
    $value: dartx.value,
    $getObject: dartx.getObject,
    $put: dartx.put,
    $delete: dartx.delete,
    $replaceFirst: dartx.replaceFirst,
    __LoadBundleTaskWeb_stream: dart.privateName(load_bundle_task_web, "_#LoadBundleTaskWeb#stream"),
    _delegate$3: dart.privateName(firebase_core, "_delegate"),
    _firestorePlatform: dart.privateName(collection_reference_web, "_firestorePlatform"),
    _webFirestore$1: dart.privateName(collection_reference_web, "_webFirestore"),
    _delegate$4: dart.privateName(collection_reference_web, "_delegate"),
    _pointer: dart.privateName(collection_reference_web, "_pointer"),
    _pointer$1: dart.privateName(platform_interface_collection_reference, "_pointer"),
    isCollectionGroupQuery: dart.privateName(query_web, "QueryWeb.isCollectionGroupQuery"),
    _path: dart.privateName(query_web, "_path"),
    _webQuery: dart.privateName(query_web, "_webQuery"),
    DeepCollectionEquality__unordered: dart.privateName(equality, "DeepCollectionEquality._unordered"),
    DeepCollectionEquality__base: dart.privateName(equality, "DeepCollectionEquality._base"),
    _copyWithParameters: dart.privateName(query_web, "_copyWithParameters"),
    _buildWebQueryWithParameters: dart.privateName(query_web, "_buildWebQueryWithParameters"),
    firestore: dart.privateName(platform_interface_query, "QueryPlatform.firestore"),
    parameters: dart.privateName(platform_interface_query, "QueryPlatform.parameters"),
    firestoreWeb: dart.privateName(document_reference_web, "DocumentReferenceWeb.firestoreWeb"),
    _delegate$5: dart.privateName(document_reference_web, "_delegate"),
    firestore$1: dart.privateName(platform_interface_document_reference, "DocumentReferencePlatform.firestore"),
    _pointer$2: dart.privateName(platform_interface_document_reference, "_pointer"),
    _firestore: dart.privateName(transaction_web, "_firestore"),
    _webFirestoreDelegate: dart.privateName(transaction_web, "_webFirestoreDelegate"),
    _webTransactionDelegate: dart.privateName(transaction_web, "_webTransactionDelegate"),
    _webFirestoreDelegate$1: dart.privateName(write_batch_web, "_webFirestoreDelegate"),
    _webWriteBatchDelegate: dart.privateName(write_batch_web, "_webWriteBatchDelegate"),
    jsObject: dart.privateName(js$, "JsObjectWrapper.jsObject"),
    taskState: dart.privateName(firestore, "LoadBundleTaskProgress.taskState"),
    bytesLoaded: dart.privateName(firestore, "LoadBundleTaskProgress.bytesLoaded"),
    documentsLoaded: dart.privateName(firestore, "LoadBundleTaskProgress.documentsLoaded"),
    totalBytes: dart.privateName(firestore, "LoadBundleTaskProgress.totalBytes"),
    totalDocuments: dart.privateName(firestore, "LoadBundleTaskProgress.totalDocuments"),
    _wrapUpdateFunctionCall: dart.privateName(firestore, "_wrapUpdateFunctionCall"),
    $insert: dartx.insert,
    _createSnapshotStream: dart.privateName(firestore, "_createSnapshotStream"),
    __Query_onSnapshot: dart.privateName(firestore, "_#Query#onSnapshot"),
    __Query_onSnapshotMetadata: dart.privateName(firestore, "_#Query#onSnapshotMetadata"),
    _createQueryConstraint: dart.privateName(firestore, "_createQueryConstraint"),
    _jsify: dart.privateName(firestore, "_jsify"),
    _auth: dart.privateName(firebase_auth_web_confirmation_result, "_auth"),
    _webConfirmationResult: dart.privateName(firebase_auth_web_confirmation_result, "_webConfirmationResult"),
    verificationId: dart.privateName(platform_interface_confirmation_result, "ConfirmationResultPlatform.verificationId"),
    __RecaptchaVerifierFactoryWeb__delegate: dart.privateName(firebase_auth_web_recaptcha_verifier_factory, "_#RecaptchaVerifierFactoryWeb#_delegate"),
    $document: dartx.document,
    $children: dartx.children,
    $id: dartx.id,
    _delegate$6: dart.privateName(firebase_auth_web_recaptcha_verifier_factory, "_delegate"),
    _webUser: dart.privateName(firebase_auth_web_user, "_webUser"),
    auth: dart.privateName(platform_interface_user, "UserPlatform.auth"),
    _user: dart.privateName(platform_interface_user, "_user"),
    auth$1: dart.privateName(platform_interface_user_credential, "UserCredentialPlatform.auth"),
    additionalUserInfo: dart.privateName(platform_interface_user_credential, "UserCredentialPlatform.additionalUserInfo"),
    credential: dart.privateName(platform_interface_user_credential, "UserCredentialPlatform.credential"),
    user: dart.privateName(platform_interface_user_credential, "UserCredentialPlatform.user"),
    _onAuthUnsubscribe: dart.privateName(auth$, "_onAuthUnsubscribe"),
    _changeController: dart.privateName(auth$, "_changeController"),
    _onIdTokenChangedUnsubscribe: dart.privateName(auth$, "_onIdTokenChangedUnsubscribe"),
    _idTokenChangedController: dart.privateName(auth$, "_idTokenChangedController"),
    plugin: dart.privateName(firebase_core_platform_interface, "FirebaseException.plugin"),
    message$1: dart.privateName(firebase_core_platform_interface, "FirebaseException.message"),
    code: dart.privateName(firebase_core_platform_interface, "FirebaseException.code"),
    stackTrace: dart.privateName(firebase_core_platform_interface, "FirebaseException.stackTrace"),
    apiKey: dart.privateName(firebase_core_platform_interface, "FirebaseOptions.apiKey"),
    appId: dart.privateName(firebase_core_platform_interface, "FirebaseOptions.appId"),
    messagingSenderId: dart.privateName(firebase_core_platform_interface, "FirebaseOptions.messagingSenderId"),
    projectId: dart.privateName(firebase_core_platform_interface, "FirebaseOptions.projectId"),
    authDomain: dart.privateName(firebase_core_platform_interface, "FirebaseOptions.authDomain"),
    databaseURL: dart.privateName(firebase_core_platform_interface, "FirebaseOptions.databaseURL"),
    storageBucket: dart.privateName(firebase_core_platform_interface, "FirebaseOptions.storageBucket"),
    measurementId: dart.privateName(firebase_core_platform_interface, "FirebaseOptions.measurementId"),
    trackingId: dart.privateName(firebase_core_platform_interface, "FirebaseOptions.trackingId"),
    deepLinkURLScheme: dart.privateName(firebase_core_platform_interface, "FirebaseOptions.deepLinkURLScheme"),
    androidClientId: dart.privateName(firebase_core_platform_interface, "FirebaseOptions.androidClientId"),
    iosClientId: dart.privateName(firebase_core_platform_interface, "FirebaseOptions.iosClientId"),
    iosBundleId: dart.privateName(firebase_core_platform_interface, "FirebaseOptions.iosBundleId"),
    appGroupId: dart.privateName(firebase_core_platform_interface, "FirebaseOptions.appGroupId"),
    MapEquality__valueEquality: dart.privateName(equality, "MapEquality._valueEquality"),
    MapEquality__keyEquality: dart.privateName(equality, "MapEquality._keyEquality"),
    _initializeFirebaseAppFromMap: dart.privateName(firebase_core_platform_interface, "_initializeFirebaseAppFromMap"),
    _initializeCore$1: dart.privateName(firebase_core_platform_interface, "_initializeCore"),
    _isDeleted: dart.privateName(firebase_core_platform_interface, "_isDeleted"),
    _api: dart.privateName(firebase_core_platform_interface, "_api"),
    _isAutomaticDataCollectionEnabled$1: dart.privateName(firebase_core_platform_interface, "_isAutomaticDataCollectionEnabled"),
    _appName: dart.privateName(firebase_core_platform_interface, "_appName"),
    _methodChannelName: dart.privateName(firebase_core_platform_interface, "_methodChannelName"),
    _maxDownloadRetryTime: dart.privateName(firebase_storage_web$, "_maxDownloadRetryTime"),
    _maxOperationRetryTime: dart.privateName(firebase_storage_web$, "_maxOperationRetryTime"),
    _webStorage: dart.privateName(firebase_storage_web$, "_webStorage"),
    _bucket: dart.privateName(firebase_storage_web$, "_bucket"),
    _createReference: dart.privateName(firebase_storage_web$, "_createReference"),
    appInstance$2: dart.privateName(platform_interface_firebase_storage, "FirebaseStoragePlatform.appInstance"),
    bucket: dart.privateName(platform_interface_firebase_storage, "FirebaseStoragePlatform.bucket"),
    emulatorHost: dart.privateName(platform_interface_firebase_storage, "FirebaseStoragePlatform.emulatorHost"),
    emulatorPort: dart.privateName(platform_interface_firebase_storage, "FirebaseStoragePlatform.emulatorPort"),
    bytes: dart.privateName(digest, "Digest.bytes"),
    $codeUnitAt: dartx.codeUnitAt,
    _hash: dart.privateName(hmac, "_hash"),
    _key$2: dart.privateName(hmac, "_key"),
    _innerResultSink: dart.privateName(hmac, "_innerResultSink"),
    ___HmacSink__innerSink: dart.privateName(hmac, "_#_HmacSink#_innerSink"),
    _isClosed: dart.privateName(hmac, "_isClosed"),
    _outerSink: dart.privateName(hmac, "_outerSink"),
    _innerSink: dart.privateName(hmac, "_innerSink"),
    blockSize: dart.privateName(md5, "_MD5.blockSize"),
    digest: dart.privateName(md5, "_MD5Sink.digest"),
    Endian__littleEndian: dart.privateName(typed_data, "Endian._littleEndian"),
    _lengthInBytes: dart.privateName(hash_sink, "_lengthInBytes"),
    _pendingData: dart.privateName(hash_sink, "_pendingData"),
    _isClosed$1: dart.privateName(hash_sink, "_isClosed"),
    _sink: dart.privateName(hash_sink, "_sink"),
    _endian: dart.privateName(hash_sink, "_endian"),
    _signatureBytes: dart.privateName(hash_sink, "_signatureBytes"),
    _currentChunk: dart.privateName(hash_sink, "_currentChunk"),
    _iterate: dart.privateName(hash_sink, "_iterate"),
    _finalizeData: dart.privateName(hash_sink, "_finalizeData"),
    _byteDigest: dart.privateName(hash_sink, "_byteDigest"),
    $asUint8List: dartx.asUint8List,
    $lengthInBytes: dartx.lengthInBytes,
    $asByteData: dartx.asByteData,
    $setUint32: dartx.setUint32,
    $getUint32: dartx.getUint32,
    $removeRange: dartx.removeRange,
    _roundUp: dart.privateName(hash_sink, "_roundUp"),
    blockSize$1: dart.privateName(sha1, "_Sha1.blockSize"),
    digest$1: dart.privateName(sha1, "_Sha1Sink.digest"),
    _extended: dart.privateName(sha1, "_extended"),
    blockSize$2: dart.privateName(sha256, "_Sha256.blockSize"),
    blockSize$3: dart.privateName(sha256, "_Sha224.blockSize"),
    _extended$1: dart.privateName(sha256, "_extended"),
    _digest: dart.privateName(sha256, "_digest"),
    $leftShift: dartx['<<'],
    _rotr32: dart.privateName(sha256, "_rotr32"),
    _ch: dart.privateName(sha256, "_ch"),
    _maj: dart.privateName(sha256, "_maj"),
    _bsig0: dart.privateName(sha256, "_bsig0"),
    _bsig1: dart.privateName(sha256, "_bsig1"),
    _ssig0: dart.privateName(sha256, "_ssig0"),
    _ssig1: dart.privateName(sha256, "_ssig1"),
    $asUint32List: dartx.asUint32List,
    blockSize$4: dart.privateName(sha512, "_Sha384.blockSize"),
    blockSize$5: dart.privateName(sha512, "_Sha512.blockSize"),
    blockSize$6: dart.privateName(sha512, "_Sha512224.blockSize"),
    blockSize$7: dart.privateName(sha512, "_Sha512256.blockSize"),
    typeId$1: dart.privateName(big_int_adapter, "BigIntAdapter.typeId"),
    typeId$2: dart.privateName(date_time_adapter, "DateTimeAdapter.typeId"),
    typeId$3: dart.privateName(date_time_adapter, "DateTimeWithTimezoneAdapter.typeId"),
    supportsCompaction: dart.privateName(storage_backend_memory, "StorageBackendMemory.supportsCompaction"),
    _cipher$1: dart.privateName(storage_backend_memory, "_cipher"),
    _bytes: dart.privateName(storage_backend_memory, "_bytes"),
    _frameHelper: dart.privateName(storage_backend_memory, "_frameHelper"),
    name$3: dart.privateName(box_base_impl, "BoxBaseImpl.name"),
    hive: dart.privateName(box_base_impl, "BoxBaseImpl.hive"),
    backend: dart.privateName(box_base_impl, "BoxBaseImpl.backend"),
    __BoxBaseImpl_keystore: dart.privateName(box_base_impl, "_#BoxBaseImpl#keystore"),
    _open: dart.privateName(box_base_impl, "_open"),
    _compactionStrategy: dart.privateName(box_base_impl, "_compactionStrategy"),
    lazy: dart.privateName(box_impl, "BoxImpl.lazy"),
    _writeFrames: dart.privateName(box_impl, "_writeFrames"),
    lazy$1: dart.privateName(lazy_box_impl, "LazyBoxImpl.lazy"),
    adapter: dart.privateName(type_registry_impl, "ResolvedAdapter.adapter"),
    typeId$4: dart.privateName(type_registry_impl, "ResolvedAdapter.typeId"),
    components: dart.privateName(pointer, "Pointer.components"),
    $isOdd: dartx.isOdd,
    $isEven: dartx.isEven,
    $removeLast: dartx.removeLast,
    bytes$1: dart.privateName(blob, "Blob.bytes"),
    components$1: dart.privateName(field_path, "FieldPath.components"),
    $startsWith: dartx.startsWith,
    $endsWith: dartx.endsWith,
    ListEquality__elementEquality: dart.privateName(equality, "ListEquality._elementEquality"),
    latitude: dart.privateName(geo_point, "GeoPoint.latitude"),
    longitude: dart.privateName(geo_point, "GeoPoint.longitude"),
    type: dart.privateName(platform_interface_document_change, "DocumentChangePlatform.type"),
    oldIndex: dart.privateName(platform_interface_document_change, "DocumentChangePlatform.oldIndex"),
    newIndex: dart.privateName(platform_interface_document_change, "DocumentChangePlatform.newIndex"),
    document: dart.privateName(platform_interface_document_change, "DocumentChangePlatform.document"),
    _firestore$1: dart.privateName(platform_interface_document_snapshot, "_firestore"),
    _data: dart.privateName(platform_interface_document_snapshot, "_data"),
    _pointer$3: dart.privateName(platform_interface_document_snapshot, "_pointer"),
    _delegate$7: dart.privateName(platform_interface_field_value, "_delegate"),
    docs: dart.privateName(platform_interface_query_snapshot, "QuerySnapshotPlatform.docs"),
    docChanges: dart.privateName(platform_interface_query_snapshot, "QuerySnapshotPlatform.docChanges"),
    metadata: dart.privateName(platform_interface_query_snapshot, "QuerySnapshotPlatform.metadata"),
    taskState$1: dart.privateName(platform_interface_load_bundle_task_snapshot, "LoadBundleTaskSnapshotPlatform.taskState"),
    bytesLoaded$1: dart.privateName(platform_interface_load_bundle_task_snapshot, "LoadBundleTaskSnapshotPlatform.bytesLoaded"),
    documentsLoaded$1: dart.privateName(platform_interface_load_bundle_task_snapshot, "LoadBundleTaskSnapshotPlatform.documentsLoaded"),
    totalBytes$1: dart.privateName(platform_interface_load_bundle_task_snapshot, "LoadBundleTaskSnapshotPlatform.totalBytes"),
    totalDocuments$1: dart.privateName(platform_interface_load_bundle_task_snapshot, "LoadBundleTaskSnapshotPlatform.totalDocuments"),
    hasPendingWrites: dart.privateName(snapshot_metadata, "SnapshotMetadataPlatform.hasPendingWrites"),
    isFromCache: dart.privateName(snapshot_metadata, "SnapshotMetadataPlatform.isFromCache"),
    _seconds: dart.privateName(timestamp, "_seconds"),
    _nanoseconds: dart.privateName(timestamp, "_nanoseconds"),
    $floor: dartx.floor,
    persistenceEnabled: dart.privateName(settings, "Settings.persistenceEnabled"),
    host: dart.privateName(settings, "Settings.host"),
    sslEnabled: dart.privateName(settings, "Settings.sslEnabled"),
    cacheSizeBytes: dart.privateName(settings, "Settings.cacheSizeBytes"),
    ignoreUndefinedProperties: dart.privateName(settings, "Settings.ignoreUndefinedProperties"),
    source: dart.privateName(get_options, "GetOptions.source"),
    merge: dart.privateName(set_options, "SetOptions.merge"),
    mergeFields: dart.privateName(set_options, "SetOptions.mergeFields"),
    synchronizeTabs: dart.privateName(persistence_settings, "PersistenceSettings.synchronizeTabs"),
    $updateAll: dartx.updateAll,
    data: dart.privateName(field_value_web, "FieldValueWeb.data"),
    _operation: dart.privateName(action_code_info, "_operation"),
    _data$1: dart.privateName(action_code_info, "_data"),
    androidPackageName: dart.privateName(action_code_settings, "ActionCodeSettings.androidPackageName"),
    androidMinimumVersion: dart.privateName(action_code_settings, "ActionCodeSettings.androidMinimumVersion"),
    androidInstallApp: dart.privateName(action_code_settings, "ActionCodeSettings.androidInstallApp"),
    iOSBundleId: dart.privateName(action_code_settings, "ActionCodeSettings.iOSBundleId"),
    dynamicLinkDomain: dart.privateName(action_code_settings, "ActionCodeSettings.dynamicLinkDomain"),
    handleCodeInApp: dart.privateName(action_code_settings, "ActionCodeSettings.handleCodeInApp"),
    url: dart.privateName(action_code_settings, "ActionCodeSettings.url"),
    isNewUser: dart.privateName(additional_user_info, "AdditionalUserInfo.isNewUser"),
    profile: dart.privateName(additional_user_info, "AdditionalUserInfo.profile"),
    providerId: dart.privateName(additional_user_info, "AdditionalUserInfo.providerId"),
    username: dart.privateName(additional_user_info, "AdditionalUserInfo.username"),
    providerId$1: dart.privateName(auth_credential, "AuthCredential.providerId"),
    signInMethod: dart.privateName(auth_credential, "AuthCredential.signInMethod"),
    token: dart.privateName(auth_credential, "AuthCredential.token"),
    providerId$2: dart.privateName(auth_provider, "AuthProvider.providerId"),
    email: dart.privateName(firebase_auth_exception, "FirebaseAuthException.email"),
    credential$1: dart.privateName(firebase_auth_exception, "FirebaseAuthException.credential"),
    phoneNumber: dart.privateName(firebase_auth_exception, "FirebaseAuthException.phoneNumber"),
    tenantId$1: dart.privateName(firebase_auth_exception, "FirebaseAuthException.tenantId"),
    _data$2: dart.privateName(id_token_result, "_data"),
    email$1: dart.privateName(email_auth, "EmailAuthCredential.email"),
    password: dart.privateName(email_auth, "EmailAuthCredential.password"),
    emailLink: dart.privateName(email_auth, "EmailAuthCredential.emailLink"),
    _scopes: dart.privateName(facebook_auth, "_scopes"),
    _parameters: dart.privateName(facebook_auth, "_parameters"),
    accessToken: dart.privateName(oauth, "OAuthCredential.accessToken"),
    idToken: dart.privateName(oauth, "OAuthCredential.idToken"),
    secret: dart.privateName(oauth, "OAuthCredential.secret"),
    rawNonce: dart.privateName(oauth, "OAuthCredential.rawNonce"),
    _scopes$1: dart.privateName(github_auth, "_scopes"),
    _parameters$1: dart.privateName(github_auth, "_parameters"),
    _scopes$2: dart.privateName(google_auth, "_scopes"),
    _parameters$2: dart.privateName(google_auth, "_parameters"),
    _scopes$3: dart.privateName(oauth, "_scopes"),
    _parameters$3: dart.privateName(oauth, "_parameters"),
    verificationId$1: dart.privateName(phone_auth, "PhoneAuthCredential.verificationId"),
    smsCode: dart.privateName(phone_auth, "PhoneAuthCredential.smsCode"),
    _parameters$4: dart.privateName(twitter_auth, "_parameters"),
    _data$3: dart.privateName(user_info, "_data"),
    _creationTimestamp: dart.privateName(user_metadata, "_creationTimestamp"),
    _lastSignInTime: dart.privateName(user_metadata, "_lastSignInTime"),
    apiKey$1: dart.privateName(messages$46pigeon, "PigeonFirebaseOptions.apiKey"),
    appId$1: dart.privateName(messages$46pigeon, "PigeonFirebaseOptions.appId"),
    messagingSenderId$1: dart.privateName(messages$46pigeon, "PigeonFirebaseOptions.messagingSenderId"),
    projectId$1: dart.privateName(messages$46pigeon, "PigeonFirebaseOptions.projectId"),
    authDomain$1: dart.privateName(messages$46pigeon, "PigeonFirebaseOptions.authDomain"),
    databaseURL$1: dart.privateName(messages$46pigeon, "PigeonFirebaseOptions.databaseURL"),
    storageBucket$1: dart.privateName(messages$46pigeon, "PigeonFirebaseOptions.storageBucket"),
    measurementId$1: dart.privateName(messages$46pigeon, "PigeonFirebaseOptions.measurementId"),
    trackingId$1: dart.privateName(messages$46pigeon, "PigeonFirebaseOptions.trackingId"),
    deepLinkURLScheme$1: dart.privateName(messages$46pigeon, "PigeonFirebaseOptions.deepLinkURLScheme"),
    androidClientId$1: dart.privateName(messages$46pigeon, "PigeonFirebaseOptions.androidClientId"),
    iosClientId$1: dart.privateName(messages$46pigeon, "PigeonFirebaseOptions.iosClientId"),
    iosBundleId$1: dart.privateName(messages$46pigeon, "PigeonFirebaseOptions.iosBundleId"),
    appGroupId$1: dart.privateName(messages$46pigeon, "PigeonFirebaseOptions.appGroupId"),
    name$4: dart.privateName(messages$46pigeon, "PigeonInitializeResponse.name"),
    options$1: dart.privateName(messages$46pigeon, "PigeonInitializeResponse.options"),
    isAutomaticDataCollectionEnabled: dart.privateName(messages$46pigeon, "PigeonInitializeResponse.isAutomaticDataCollectionEnabled"),
    pluginConstants: dart.privateName(messages$46pigeon, "PigeonInitializeResponse.pluginConstants"),
    _binaryMessenger: dart.privateName(messages$46pigeon, "_binaryMessenger"),
    _future: dart.privateName(storage, "_future"),
    __ReferenceWeb__ref: dart.privateName(reference_web, "_#ReferenceWeb#_ref"),
    _cache$1: dart.privateName(reference_web, "_cache"),
    _path$1: dart.privateName(reference_web, "_path"),
    _ref: dart.privateName(reference_web, "_ref"),
    storage: dart.privateName(platform_interface_reference, "ReferencePlatform.storage"),
    _pointer$4: dart.privateName(platform_interface_reference, "_pointer"),
    _value: dart.privateName(digest_sink, "_value"),
    _extended$2: dart.privateName(sha512_slowsinks, "_extended"),
    _nums: dart.privateName(sha512_slowsinks, "_nums"),
    _digest$1: dart.privateName(sha512_slowsinks, "_digest"),
    _shr: dart.privateName(sha512_slowsinks, "_shr"),
    _shl: dart.privateName(sha512_slowsinks, "_shl"),
    _or: dart.privateName(sha512_slowsinks, "_or"),
    _xor: dart.privateName(sha512_slowsinks, "_xor"),
    _add: dart.privateName(sha512_slowsinks, "_add"),
    _addTo2: dart.privateName(sha512_slowsinks, "_addTo2"),
    _rotr: dart.privateName(sha512_slowsinks, "_rotr"),
    _bsig0$1: dart.privateName(sha512_slowsinks, "_bsig0"),
    _bsig1$1: dart.privateName(sha512_slowsinks, "_bsig1"),
    _ssig0$1: dart.privateName(sha512_slowsinks, "_ssig0"),
    _ssig1$1: dart.privateName(sha512_slowsinks, "_ssig1"),
    _ch$1: dart.privateName(sha512_slowsinks, "_ch"),
    _maj$1: dart.privateName(sha512_slowsinks, "_maj"),
    digestBytes: dart.privateName(sha512_slowsinks, "Sha384Sink.digestBytes"),
    digestBytes$1: dart.privateName(sha512_slowsinks, "Sha512Sink.digestBytes"),
    digestBytes$2: dart.privateName(sha512_slowsinks, "Sha512224Sink.digestBytes"),
    digestBytes$3: dart.privateName(sha512_slowsinks, "Sha512256Sink.digestBytes"),
    key$1: dart.privateName(frame$, "Frame.key"),
    value$1: dart.privateName(frame$, "Frame.value"),
    deleted$1: dart.privateName(frame$, "Frame.deleted"),
    lazy$2: dart.privateName(frame$, "Frame.lazy"),
    length: dart.privateName(frame$, "Frame.length"),
    offset: dart.privateName(frame$, "Frame.offset"),
    added: dart.privateName(keystore$, "KeyTransaction.added"),
    deleted$2: dart.privateName(keystore$, "KeyTransaction.deleted"),
    transactions: dart.privateName(keystore$, "Keystore.transactions"),
    _deletedEntries: dart.privateName(keystore$, "_deletedEntries"),
    _autoIncrement: dart.privateName(keystore$, "_autoIncrement"),
    _box$3: dart.privateName(keystore$, "_box"),
    _notifier: dart.privateName(keystore$, "_notifier"),
    _store: dart.privateName(keystore$, "_store"),
    _streamController: dart.privateName(change_notifier$, "_streamController"),
    typeId$5: dart.privateName(ignored_type_adapter, "IgnoredTypeAdapter.typeId"),
    settings: dart.privateName(method_channel_firestore, "MethodChannelFirebaseFirestore.settings"),
    StandardMethodCodec_messageCodec: dart.privateName(message_codecs, "StandardMethodCodec.messageCodec"),
    MethodChannel__binaryMessenger: dart.privateName(platform_channel, "MethodChannel._binaryMessenger"),
    MethodChannel_codec: dart.privateName(platform_channel, "MethodChannel.codec"),
    MethodChannel_name: dart.privateName(platform_channel, "MethodChannel.name"),
    currentUser: dart.privateName(method_channel_firebase_auth, "MethodChannelFirebaseAuth.currentUser"),
    languageCode: dart.privateName(method_channel_firebase_auth, "MethodChannelFirebaseAuth.languageCode"),
    _handleIdTokenChangesListener: dart.privateName(method_channel_firebase_auth, "_handleIdTokenChangesListener"),
    _handleAuthStateChangesListener: dart.privateName(method_channel_firebase_auth, "_handleAuthStateChangesListener"),
    _createBroadcastStream: dart.privateName(method_channel_firebase_auth, "_createBroadcastStream")
  };
  var S = {
    _ValueWrapper_value: dart.privateName(method_channel_firebase_auth, "_ValueWrapper.value"),
    _withChannelDefaults: dart.privateName(method_channel_firebase_auth, "_withChannelDefaults"),
    value$2: dart.privateName(method_channel_firebase_auth, "_ValueWrapper.value"),
    scheme: dart.privateName(authentication_challenge, "AuthenticationChallenge.scheme"),
    parameters$1: dart.privateName(authentication_challenge, "AuthenticationChallenge.parameters"),
    type$1: dart.privateName(media_type, "MediaType.type"),
    subtype: dart.privateName(media_type, "MediaType.subtype"),
    parameters$2: dart.privateName(media_type, "MediaType.parameters"),
    $replaceAllMapped: dartx.replaceAllMapped,
    _metadata: dart.privateName(full_metadata, "_metadata"),
    maxResults: dart.privateName(list_options, "ListOptions.maxResults"),
    pageToken: dart.privateName(list_options, "ListOptions.pageToken"),
    storage$1: dart.privateName(platform_interface_list_result, "ListResultPlatform.storage"),
    nextPageToken: dart.privateName(platform_interface_list_result, "ListResultPlatform.nextPageToken"),
    _state: dart.privateName(platform_interface_task_snapshot, "_state"),
    _data$4: dart.privateName(platform_interface_task_snapshot, "_data"),
    cacheControl: dart.privateName(settable_metadata, "SettableMetadata.cacheControl"),
    contentDisposition: dart.privateName(settable_metadata, "SettableMetadata.contentDisposition"),
    contentEncoding: dart.privateName(settable_metadata, "SettableMetadata.contentEncoding"),
    contentLanguage: dart.privateName(settable_metadata, "SettableMetadata.contentLanguage"),
    contentType: dart.privateName(settable_metadata, "SettableMetadata.contentType"),
    customMetadata: dart.privateName(settable_metadata, "SettableMetadata.customMetadata"),
    _reference: dart.privateName(task_web, "_reference"),
    _task: dart.privateName(task_web, "_task"),
    _cache$2: dart.privateName(metadata_cache, "_cache"),
    _offset: dart.privateName(binary_reader_impl, "_offset"),
    _buffer: dart.privateName(binary_reader_impl, "_buffer"),
    _byteData: dart.privateName(binary_reader_impl, "_byteData"),
    _bufferLength: dart.privateName(binary_reader_impl, "_bufferLength"),
    _bufferLimit: dart.privateName(binary_reader_impl, "_bufferLimit"),
    _typeRegistry: dart.privateName(binary_reader_impl, "_typeRegistry"),
    _requireBytes: dart.privateName(binary_reader_impl, "_requireBytes"),
    _limitAvailableBytes: dart.privateName(binary_reader_impl, "_limitAvailableBytes"),
    _resetLimit: dart.privateName(binary_reader_impl, "_resetLimit"),
    $getInt32: dartx.getInt32,
    $toInt: dartx.toInt,
    $getFloat64: dartx.getFloat64,
    _head: dart.privateName(indexable_skip_list, "_head"),
    _height: dart.privateName(indexable_skip_list, "_height"),
    _length: dart.privateName(indexable_skip_list, "_length"),
    _comparator: dart.privateName(indexable_skip_list, "_comparator"),
    _random: dart.privateName(indexable_skip_list, "_random"),
    _getNode: dart.privateName(indexable_skip_list, "_getNode"),
    _getNodeAt: dart.privateName(indexable_skip_list, "_getNodeAt"),
    value$3: dart.privateName(indexable_skip_list, "_Node.value"),
    node: dart.privateName(indexable_skip_list, "_Iterator.node"),
    $createObjectStore: dartx.createObjectStore,
    __MethodChannelLoadBundleTask_stream: dart.privateName(method_channel_load_bundle_task, "_#MethodChannelLoadBundleTask#stream"),
    _pointer$5: dart.privateName(method_channel_collection_reference, "MethodChannelCollectionReference._pointer"),
    _pointer$6: dart.privateName(method_channel_collection_reference, "_pointer"),
    isCollectionGroupQuery$1: dart.privateName(method_channel_query, "MethodChannelQuery.isCollectionGroupQuery"),
    _pointer$7: dart.privateName(method_channel_query, "_pointer"),
    _copyWithParameters$1: dart.privateName(method_channel_query, "_copyWithParameters"),
    __MethodChannelDocumentReference__pointer: dart.privateName(method_channel_document_reference, "_#MethodChannelDocumentReference#_pointer"),
    _pointer$8: dart.privateName(method_channel_document_reference, "_pointer"),
    appName: dart.privateName(method_channel_transaction, "MethodChannelTransaction.appName"),
    __MethodChannelTransaction__transactionId: dart.privateName(method_channel_transaction, "_#MethodChannelTransaction#_transactionId"),
    __MethodChannelTransaction__firestore: dart.privateName(method_channel_transaction, "_#MethodChannelTransaction#_firestore"),
    _commands: dart.privateName(method_channel_transaction, "_commands"),
    _firestore$2: dart.privateName(method_channel_transaction, "_firestore"),
    _transactionId: dart.privateName(method_channel_transaction, "_transactionId"),
    _writes: dart.privateName(method_channel_write_batch, "_writes"),
    _committed: dart.privateName(method_channel_write_batch, "_committed"),
    _firestore$3: dart.privateName(method_channel_write_batch, "_firestore"),
    _assertNotCommitted: dart.privateName(method_channel_write_batch, "_assertNotCommitted"),
    type$2: dart.privateName(method_channel_field_value, "MethodChannelFieldValue.type"),
    value$4: dart.privateName(method_channel_field_value, "MethodChannelFieldValue.value"),
    _withChannelDefaults$1: dart.privateName(method_channel_user, "_withChannelDefaults"),
    $substring: dartx.substring,
    _decode: dart.privateName(decoder, "_decode"),
    _state$1: dart.privateName(decoder, "_state"),
    ___Sink__size: dart.privateName(decoder, "_#_Sink#_size"),
    _sink$1: dart.privateName(decoder, "_sink"),
    _size: dart.privateName(decoder, "_size"),
    _close: dart.privateName(decoder, "_close"),
    _digitForByte: dart.privateName(decoder, "_digitForByte"),
    _State__name: dart.privateName(decoder, "_State._name"),
    $toRadixString: dartx.toRadixString,
    $toUpperCase: dartx.toUpperCase,
    _name$1: dart.privateName(decoder, "_State._name"),
    _name$2: dart.privateName(decoder, "_name"),
    _sink$2: dart.privateName(encoder, "_sink"),
    maxOperationRetryTime: dart.privateName(method_channel_firebase_storage, "MethodChannelFirebaseStorage.maxOperationRetryTime"),
    maxUploadRetryTime: dart.privateName(method_channel_firebase_storage, "MethodChannelFirebaseStorage.maxUploadRetryTime"),
    maxDownloadRetryTime: dart.privateName(method_channel_firebase_storage, "MethodChannelFirebaseStorage.maxDownloadRetryTime"),
    _handleTaskStateChange: dart.privateName(method_channel_firebase_storage, "_handleTaskStateChange"),
    _sendTaskException: dart.privateName(method_channel_firebase_storage, "_sendTaskException"),
    _path$2: dart.privateName(pointer$, "_path"),
    message$2: dart.privateName(exception, "ClientException.message"),
    uri: dart.privateName(exception, "ClientException.uri"),
    _defaultEncoding: dart.privateName(request$, "_defaultEncoding"),
    _bodyBytes: dart.privateName(request$, "_bodyBytes"),
    _contentType: dart.privateName(request$, "_contentType"),
    _checkFinalized: dart.privateName(request$, "_checkFinalized"),
    method: dart.privateName(base_request, "BaseRequest.method"),
    url$1: dart.privateName(base_request, "BaseRequest.url"),
    headers: dart.privateName(base_request, "BaseRequest.headers"),
    _contentLength: dart.privateName(base_request, "_contentLength"),
    _persistentConnection: dart.privateName(base_request, "_persistentConnection"),
    _followRedirects: dart.privateName(base_request, "_followRedirects"),
    _maxRedirects: dart.privateName(base_request, "_maxRedirects"),
    _finalized: dart.privateName(base_request, "_finalized"),
    _checkFinalized$1: dart.privateName(base_request, "_checkFinalized"),
    StreamView__stream: dart.privateName(async, "StreamView._stream"),
    bodyBytes: dart.privateName(response$, "Response.bodyBytes"),
    request: dart.privateName(base_response, "BaseResponse.request"),
    statusCode: dart.privateName(base_response, "BaseResponse.statusCode"),
    reasonPhrase: dart.privateName(base_response, "BaseResponse.reasonPhrase"),
    contentLength: dart.privateName(base_response, "BaseResponse.contentLength"),
    headers$1: dart.privateName(base_response, "BaseResponse.headers"),
    isRedirect: dart.privateName(base_response, "BaseResponse.isRedirect"),
    persistentConnection: dart.privateName(base_response, "BaseResponse.persistentConnection"),
    _controller: dart.privateName(streamed_request, "_controller"),
    _sendUnstreamed: dart.privateName(base_client, "_sendUnstreamed"),
    _checkResponseSuccess: dart.privateName(base_client, "_checkResponseSuccess"),
    Utf8Codec__allowMalformed: dart.privateName(convert, "Utf8Codec._allowMalformed"),
    field: dart.privateName(multipart_file, "MultipartFile.field"),
    length$1: dart.privateName(multipart_file, "MultipartFile.length"),
    filename: dart.privateName(multipart_file, "MultipartFile.filename"),
    contentType$1: dart.privateName(multipart_file, "MultipartFile.contentType"),
    _isFinalized: dart.privateName(multipart_file, "_isFinalized"),
    _stream: dart.privateName(multipart_file, "_stream"),
    fields: dart.privateName(multipart_request, "MultipartRequest.fields"),
    files: dart.privateName(multipart_request, "MultipartRequest.files"),
    _headerForField: dart.privateName(multipart_request, "_headerForField"),
    _headerForFile: dart.privateName(multipart_request, "_headerForFile"),
    _boundaryString: dart.privateName(multipart_request, "_boundaryString"),
    _finalize: dart.privateName(multipart_request, "_finalize"),
    $entries: dartx.entries,
    _browserEncode: dart.privateName(multipart_request, "_browserEncode"),
    stream: dart.privateName(streamed_response, "StreamedResponse.stream"),
    _items: dart.privateName(list_result_web, "_items"),
    _prefixes: dart.privateName(list_result_web, "_prefixes"),
    _table: dart.privateName(typed_queue, "_TypedQueue._table"),
    _head$1: dart.privateName(typed_queue, "_TypedQueue._head"),
    _tail: dart.privateName(typed_queue, "_TypedQueue._tail"),
    _table$1: dart.privateName(typed_queue, "_table"),
    _head$2: dart.privateName(typed_queue, "_head"),
    _tail$1: dart.privateName(typed_queue, "_tail"),
    _createBuffer: dart.privateName(typed_queue, "_createBuffer"),
    _createList: dart.privateName(typed_queue, "_createList"),
    _writeToList: dart.privateName(typed_queue, "_writeToList"),
    _growAtCapacity: dart.privateName(typed_queue, "_growAtCapacity"),
    _growTo: dart.privateName(typed_queue, "_growTo"),
    _defaultValue: dart.privateName(typed_queue, "_defaultValue"),
    _add$1: dart.privateName(typed_queue, "_add"),
    _add$2: dart.privateName(queue_list, "_add"),
    _head$3: dart.privateName(queue_list, "_head"),
    _writeToList$1: dart.privateName(queue_list, "_writeToList"),
    _grow: dart.privateName(typed_queue, "_grow"),
    _grow$1: dart.privateName(queue_list, "_grow"),
    _preGrow: dart.privateName(typed_queue, "_preGrow"),
    _preGrow$1: dart.privateName(queue_list, "_preGrow"),
    _table$2: dart.privateName(queue_list, "_table"),
    _tail$2: dart.privateName(queue_list, "_tail"),
    _head_: dart.privateName(typed_queue, "_head="),
    _table_: dart.privateName(typed_queue, "_table="),
    _tail_: dart.privateName(typed_queue, "_tail="),
    objectStoreName: dart.privateName(storage_backend_js, "StorageBackendJs.objectStoreName"),
    supportsCompaction$1: dart.privateName(storage_backend_js, "StorageBackendJs.supportsCompaction"),
    _db$1: dart.privateName(storage_backend_js, "_db"),
    _cipher$2: dart.privateName(storage_backend_js, "_cipher"),
    _registry: dart.privateName(storage_backend_js, "_registry"),
    _isEncoded: dart.privateName(storage_backend_js, "_isEncoded"),
    $onError: dartx.onError,
    $getAll: dartx.getAll,
    storage$2: dart.privateName(method_channel_task_snapshot, "MethodChannelTaskSnapshot.storage"),
    _data$5: dart.privateName(method_channel_task_snapshot, "_data"),
    withCredentials: dart.privateName(browser_client, "BrowserClient.withCredentials"),
    _xhrs: dart.privateName(browser_client, "_xhrs"),
    $responseType: dartx.responseType,
    $onLoad: dartx.onLoad,
    $response: dartx.response,
    $responseHeaders: dartx.responseHeaders,
    Latin1Codec__allowInvalid: dart.privateName(convert, "Latin1Codec._allowInvalid"),
    _reference$1: dart.privateName(task_snapshot_web, "_reference"),
    _snapshot: dart.privateName(task_snapshot_web, "_snapshot"),
    _buffer$1: dart.privateName(typed_buffer, "_buffer"),
    _length$1: dart.privateName(typed_buffer, "_length"),
    _typedBuffer: dart.privateName(typed_buffer, "_typedBuffer"),
    _defaultValue$1: dart.privateName(typed_buffer, "_defaultValue"),
    _createBuffer$1: dart.privateName(typed_buffer, "_createBuffer"),
    _createBiggerBuffer: dart.privateName(typed_buffer, "_createBiggerBuffer"),
    _grow$2: dart.privateName(typed_buffer, "_grow"),
    _add$3: dart.privateName(typed_buffer, "_add"),
    _addAll: dart.privateName(typed_buffer, "_addAll"),
    _insertKnownLength: dart.privateName(typed_buffer, "_insertKnownLength"),
    _ensureCapacity: dart.privateName(typed_buffer, "_ensureCapacity"),
    _setRange: dart.privateName(typed_buffer, "_setRange"),
    $elementSizeInBytes: dartx.elementSizeInBytes,
    $insertAll: dartx.insertAll,
    _buffer$2: dart.privateName(binary_writer_impl, "_buffer"),
    _byteDataInstance: dart.privateName(binary_writer_impl, "_byteDataInstance"),
    _offset$1: dart.privateName(binary_writer_impl, "_offset"),
    _typeRegistry$1: dart.privateName(binary_writer_impl, "_typeRegistry"),
    _byteData$1: dart.privateName(binary_writer_impl, "_byteData"),
    _increaseBufferSize: dart.privateName(binary_writer_impl, "_increaseBufferSize"),
    _reserveBytes: dart.privateName(binary_writer_impl, "_reserveBytes"),
    _addBytes: dart.privateName(binary_writer_impl, "_addBytes"),
    $setInt32: dartx.setInt32,
    $toDouble: dartx.toDouble,
    $setFloat64: dartx.setFloat64,
    _writeList: dart.privateName(binary_writer_impl, "_writeList"),
    _items$1: dart.privateName(method_channel_list_result, "_items"),
    _prefixes$1: dart.privateName(method_channel_list_result, "_prefixes"),
    storage$3: dart.privateName(method_channel_task, "MethodChannelTask.storage"),
    _exception: dart.privateName(method_channel_task, "_exception"),
    __MethodChannelTask__stackTrace: dart.privateName(method_channel_task, "_#MethodChannelTask#_stackTrace"),
    _didComplete: dart.privateName(method_channel_task, "_didComplete"),
    _completer: dart.privateName(method_channel_task, "_completer"),
    __MethodChannelTask__stream: dart.privateName(method_channel_task, "_#MethodChannelTask#_stream"),
    __MethodChannelTask__initialTaskCompleter: dart.privateName(method_channel_task, "_#MethodChannelTask#_initialTaskCompleter"),
    __MethodChannelTask__snapshot: dart.privateName(method_channel_task, "_#MethodChannelTask#_snapshot"),
    _handle: dart.privateName(method_channel_task, "_handle"),
    _initialTask: dart.privateName(method_channel_task, "_initialTask"),
    _initialTaskCompleter: dart.privateName(method_channel_task, "_initialTaskCompleter"),
    _snapshot$1: dart.privateName(method_channel_task, "_snapshot"),
    _stackTrace: dart.privateName(method_channel_task, "_stackTrace"),
    _stream$1: dart.privateName(method_channel_task, "_stream")
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(main.main, T$.VoidTovoid());
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [S$.EdgeInsets_bottom]: 16,
        [S$.EdgeInsets_right]: 0,
        [S$.EdgeInsets_top]: 16,
        [S$.EdgeInsets_left]: 0
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: convert.Utf8Decoder.prototype,
        [S$.Utf8Decoder__allowMalformed]: false
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: convert.Utf8Encoder.prototype
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: hive.HiveStorageBackendPreference.prototype,
        [S$._Enum__name]: "native",
        [S$._Enum_index]: 0
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: hive.HiveStorageBackendPreference.prototype,
        [S$._Enum__name]: "webWorker",
        [S$._Enum_index]: 1
      });
    },
    get C4() {
      return C[4] = dart.constList([C[5] || CT.C5, C[6] || CT.C6], hive.HiveStorageBackendPreference);
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [S$.EdgeInsets_bottom]: 0,
        [S$.EdgeInsets_right]: 10,
        [S$.EdgeInsets_top]: 0,
        [S$.EdgeInsets_left]: 10
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: core.Duration.prototype,
        [S$.Duration__duration]: 30000000
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: settings.Settings.prototype,
        [S$.Settings_ignoreUndefinedProperties]: false,
        [S$.Settings_cacheSizeBytes]: null,
        [S$.Settings_sslEnabled]: null,
        [S$.Settings_host]: null,
        [S$.Settings_persistenceEnabled]: null
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: source.Source.prototype,
        [S$._Enum__name]: "serverAndCache",
        [S$._Enum_index]: 0
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: get_options.GetOptions.prototype,
        [S$.GetOptions_source]: C[11] || CT.C11
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: core.Object.prototype
      });
    },
    get C13() {
      return C[13] = dart.fn(firebase_core_web._createFromJsApp, T$.AppToFirebaseAppPlatform());
    },
    get C14() {
      return C[14] = dart.fn(firebase_core_web._handleException, T$.ObjectAndStackTraceToNever());
    },
    get C15() {
      return C[15] = dart.constList([0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512, 3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934, 4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918000, 2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117], core.int);
    },
    get C16() {
      return C[16] = dart.fn(default_key_comparator.defaultKeyComparator, T$.dynamicAnddynamicToint());
    },
    get C17() {
      return C[17] = dart.fn(default_compaction_strategy.defaultCompactionStrategy, T$.intAndintTobool());
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: type_registry_impl._NullTypeRegistry.prototype
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: source.Source.prototype,
        [S$._Enum__name]: "cache",
        [S$._Enum_index]: 2
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: source.Source.prototype,
        [S$._Enum__name]: "server",
        [S$._Enum_index]: 1
      });
    },
    get C21() {
      return C[21] = dart.fn(firebase_core.FirebaseApp['_#_#tearOff'], T$.FirebaseAppPlatformToFirebaseApp());
    },
    get C22() {
      return C[22] = dart.const(new _js_helper.PrivateSymbol.new('_pointer', S$._pointer));
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: T$.DefaultEqualityOfNever().prototype
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: equality.DeepCollectionEquality.prototype,
        [S$.DeepCollectionEquality__unordered]: false,
        [S$.DeepCollectionEquality__base]: C[24] || CT.C24
      });
    },
    get C25() {
      return C[25] = dart.fn(utils$.jsify, T$.ObjectNTodynamic());
    },
    get C26() {
      return C[26] = dart.fn(firestore.DocumentSnapshot.getInstance, T$.DocumentSnapshotJsImplToDocumentSnapshot());
    },
    get C27() {
      return C[27] = dart.fn(firestore.QuerySnapshot.getInstance, T$.QuerySnapshotJsImplToQuerySnapshot());
    },
    get C28() {
      return C[28] = dart.fn(firestore.DocumentReference.getInstance, T$.DocumentReferenceJsImplToDocumentReference());
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: platform_interface_recaptcha_verifier_factory.RecaptchaVerifierSize.prototype,
        [S$._Enum__name]: "compact",
        [S$._Enum_index]: 1
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: platform_interface_recaptcha_verifier_factory.RecaptchaVerifierSize.prototype,
        [S$._Enum__name]: "normal",
        [S$._Enum_index]: 0
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: platform_interface_recaptcha_verifier_factory.RecaptchaVerifierTheme.prototype,
        [S$._Enum__name]: "dark",
        [S$._Enum_index]: 1
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: platform_interface_recaptcha_verifier_factory.RecaptchaVerifierTheme.prototype,
        [S$._Enum__name]: "light",
        [S$._Enum_index]: 0
      });
    },
    get C33() {
      return C[33] = dart.fn(auth$.UserCredential['_#fromJsObject#tearOff'], T$.UserCredentialJsImplToUserCredential());
    },
    get C34() {
      return C[34] = dart.fn(auth$.ConfirmationResult['_#fromJsObject#tearOff'], T$.ConfirmationResultJsImplToConfirmationResult());
    },
    get C35() {
      return C[35] = dart.fn(auth$.IdTokenResult['_#_fromJsObject#tearOff'], T$.IdTokenResultImplToIdTokenResult());
    },
    get C37() {
      return C[37] = dart.fn(core.List['_#from#tearOff'], T$.Iterable__ToListOfE());
    },
    get C36() {
      return C[36] = dart.const(dart.gbind(C[37] || CT.C37, core.String));
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: types.Persistence.prototype,
        [S$._Enum__name]: "LOCAL",
        [S$._Enum_index]: 0
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: types.Persistence.prototype,
        [S$._Enum__name]: "SESSION",
        [S$._Enum_index]: 2
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: types.Persistence.prototype,
        [S$._Enum__name]: "NONE",
        [S$._Enum_index]: 1
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: equality.MapEquality.prototype,
        [S$.MapEquality__valueEquality]: C[24] || CT.C24,
        [S$.MapEquality__keyEquality]: C[24] || CT.C24
      });
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: core.Duration.prototype,
        [S$.Duration__duration]: 600000000
      });
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: core.Duration.prototype,
        [S$.Duration__duration]: 120000000
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: typed_data.Endian.prototype,
        [S$.Endian__littleEndian]: false
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: md5._MD5.prototype,
        [S$.blockSize]: 64
      });
    },
    get C46() {
      return C[46] = dart.constList([3614090360, 3905402710, 606105819, 3250441966, 4118548399, 1200080426, 2821735955, 4249261313, 1770035416, 2336552879, 4294925233, 2304563134, 1804603682, 4254626195, 2792965006, 1236535329, 4129170786, 3225465664, 643717713, 3921069994, 3593408605, 38016083, 3634488961, 3889429448, 568446438, 3275163606, 4107603335, 1163531501, 2850285829, 4243563512, 1735328473, 2368359562, 4294588738, 2272392833, 1839030562, 4259657740, 2763975236, 1272893353, 4139469664, 3200236656, 681279174, 3936430074, 3572445317, 76029189, 3654602809, 3873151461, 530742520, 3299628645, 4096336452, 1126891415, 2878612391, 4237533241, 1700485571, 2399980690, 4293915773, 2240044497, 1873313359, 4264355552, 2734768916, 1309151649, 4149444226, 3174756917, 718787259, 3951481745], core.int);
    },
    get C47() {
      return C[47] = dart.constList([7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21], core.int);
    },
    get C48() {
      return C[48] = dart.const({
        __proto__: sha1._Sha1.prototype,
        [S$.blockSize$1]: 64
      });
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: sha256._Sha256.prototype,
        [S$.blockSize$2]: 64
      });
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: sha256._Sha224.prototype,
        [S$.blockSize$3]: 64
      });
    },
    get C51() {
      return C[51] = dart.constList([1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298], core.int);
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: sha512._Sha384.prototype,
        [S$.blockSize$4]: 128
      });
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: sha512._Sha512.prototype,
        [S$.blockSize$5]: 128
      });
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: sha512._Sha512224.prototype,
        [S$.blockSize$6]: 128
      });
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: sha512._Sha512256.prototype,
        [S$.blockSize$7]: 128
      });
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: equality.ListEquality.prototype,
        [S$.ListEquality__elementEquality]: C[24] || CT.C24
      });
    },
    get C58() {
      return C[58] = dart.const({
        __proto__: platform_interface_document_change.DocumentChangeType.prototype,
        [S$._Enum__name]: "added",
        [S$._Enum_index]: 0
      });
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: platform_interface_document_change.DocumentChangeType.prototype,
        [S$._Enum__name]: "modified",
        [S$._Enum_index]: 1
      });
    },
    get C60() {
      return C[60] = dart.const({
        __proto__: platform_interface_document_change.DocumentChangeType.prototype,
        [S$._Enum__name]: "removed",
        [S$._Enum_index]: 2
      });
    },
    get C57() {
      return C[57] = dart.constList([C[58] || CT.C58, C[59] || CT.C59, C[60] || CT.C60], platform_interface_document_change.DocumentChangeType);
    },
    get C61() {
      return C[61] = dart.constList([C[11] || CT.C11, C[20] || CT.C20, C[19] || CT.C19], source.Source);
    },
    get C63() {
      return C[63] = dart.const({
        __proto__: load_bundle_task_state.LoadBundleTaskState.prototype,
        [S$._Enum__name]: "running",
        [S$._Enum_index]: 0
      });
    },
    get C64() {
      return C[64] = dart.const({
        __proto__: load_bundle_task_state.LoadBundleTaskState.prototype,
        [S$._Enum__name]: "success",
        [S$._Enum_index]: 1
      });
    },
    get C65() {
      return C[65] = dart.const({
        __proto__: load_bundle_task_state.LoadBundleTaskState.prototype,
        [S$._Enum__name]: "error",
        [S$._Enum_index]: 2
      });
    },
    get C62() {
      return C[62] = dart.constList([C[63] || CT.C63, C[64] || CT.C64, C[65] || CT.C65], load_bundle_task_state.LoadBundleTaskState);
    },
    get C66() {
      return C[66] = dart.fn(internals$._testException, T$.ObjectNTobool());
    },
    get C67() {
      return C[67] = dart.fn(decode_utility.DecodeUtility.valueDecode, T$.dynamicTodynamic());
    },
    get C68() {
      return C[68] = dart.fn(encode_utility.EncodeUtility.valueEncode, T$.dynamicTodynamic());
    },
    get C70() {
      return C[70] = dart.const({
        __proto__: action_code_info.ActionCodeInfoOperation.prototype,
        [S$._Enum__name]: "unknown",
        [S$._Enum_index]: 0
      });
    },
    get C71() {
      return C[71] = dart.const({
        __proto__: action_code_info.ActionCodeInfoOperation.prototype,
        [S$._Enum__name]: "passwordReset",
        [S$._Enum_index]: 1
      });
    },
    get C72() {
      return C[72] = dart.const({
        __proto__: action_code_info.ActionCodeInfoOperation.prototype,
        [S$._Enum__name]: "verifyEmail",
        [S$._Enum_index]: 2
      });
    },
    get C73() {
      return C[73] = dart.const({
        __proto__: action_code_info.ActionCodeInfoOperation.prototype,
        [S$._Enum__name]: "recoverEmail",
        [S$._Enum_index]: 3
      });
    },
    get C74() {
      return C[74] = dart.const({
        __proto__: action_code_info.ActionCodeInfoOperation.prototype,
        [S$._Enum__name]: "emailSignIn",
        [S$._Enum_index]: 4
      });
    },
    get C75() {
      return C[75] = dart.const({
        __proto__: action_code_info.ActionCodeInfoOperation.prototype,
        [S$._Enum__name]: "verifyAndChangeEmail",
        [S$._Enum_index]: 5
      });
    },
    get C76() {
      return C[76] = dart.const({
        __proto__: action_code_info.ActionCodeInfoOperation.prototype,
        [S$._Enum__name]: "revertSecondFactorAddition",
        [S$._Enum_index]: 6
      });
    },
    get C69() {
      return C[69] = dart.constList([C[70] || CT.C70, C[71] || CT.C71, C[72] || CT.C72, C[73] || CT.C73, C[74] || CT.C74, C[75] || CT.C75, C[76] || CT.C76], action_code_info.ActionCodeInfoOperation);
    },
    get C77() {
      return C[77] = dart.constList([C[30] || CT.C30, C[29] || CT.C29], platform_interface_recaptcha_verifier_factory.RecaptchaVerifierSize);
    },
    get C78() {
      return C[78] = dart.constList([C[32] || CT.C32, C[31] || CT.C31], platform_interface_recaptcha_verifier_factory.RecaptchaVerifierTheme);
    },
    get C79() {
      return C[79] = dart.constList([C[38] || CT.C38, C[40] || CT.C40, C[39] || CT.C39], types.Persistence);
    },
    get C80() {
      return C[80] = dart.const({
        __proto__: messages$46pigeon._FirebaseCoreHostApiCodec.prototype
      });
    },
    get C81() {
      return C[81] = dart.const({
        __proto__: messages$46pigeon._FirebaseAppHostApiCodec.prototype
      });
    },
    get C82() {
      return C[82] = dart.const({
        __proto__: test_api._TestFirebaseCoreHostApiCodec.prototype
      });
    },
    get C83() {
      return C[83] = dart.const({
        __proto__: test_api._TestFirebaseAppHostApiCodec.prototype
      });
    },
    get C85() {
      return C[85] = dart.const({
        __proto__: storage.TaskState.prototype,
        [S$._Enum__name]: "RUNNING",
        [S$._Enum_index]: 0
      });
    },
    get C86() {
      return C[86] = dart.const({
        __proto__: storage.TaskState.prototype,
        [S$._Enum__name]: "PAUSED",
        [S$._Enum_index]: 1
      });
    },
    get C87() {
      return C[87] = dart.const({
        __proto__: storage.TaskState.prototype,
        [S$._Enum__name]: "SUCCESS",
        [S$._Enum_index]: 2
      });
    },
    get C88() {
      return C[88] = dart.const({
        __proto__: storage.TaskState.prototype,
        [S$._Enum__name]: "CANCELED",
        [S$._Enum_index]: 3
      });
    },
    get C89() {
      return C[89] = dart.const({
        __proto__: storage.TaskState.prototype,
        [S$._Enum__name]: "ERROR",
        [S$._Enum_index]: 4
      });
    },
    get C84() {
      return C[84] = dart.constList([C[85] || CT.C85, C[86] || CT.C86, C[87] || CT.C87, C[88] || CT.C88, C[89] || CT.C89], storage.TaskState);
    },
    get C90() {
      return C[90] = dart.fn(storage.FullMetadata.getInstance, T$.FullMetadataJsImplToFullMetadata());
    },
    get C91() {
      return C[91] = dart.fn(storage.ListResult.getInstance, T$.ListResultJsImplToListResult());
    },
    get C92() {
      return C[92] = dart.fn(storage.UploadTaskSnapshot.getInstance, T$.UploadTaskSnapshotJsImplToUploadTaskSnapshot());
    },
    get C93() {
      return C[93] = dart.fn(http.readBytes, T$.Uri__ToFutureOfUint8List());
    },
    get C94() {
      return C[94] = dart.constList([99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22], core.int);
    },
    get C95() {
      return C[95] = dart.constList([82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125], core.int);
    },
    get C96() {
      return C[96] = dart.constList([1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145], core.int);
    },
    get C97() {
      return C[97] = dart.constList([2774754246, 2222750968, 2574743534, 2373680118, 234025727, 3177933782, 2976870366, 1422247313, 1345335392, 50397442, 2842126286, 2099981142, 436141799, 1658312629, 3870010189, 2591454956, 1170918031, 2642575903, 1086966153, 2273148410, 368769775, 3948501426, 3376891790, 200339707, 3970805057, 1742001331, 4255294047, 3937382213, 3214711843, 4154762323, 2524082916, 1539358875, 3266819957, 486407649, 2928907069, 1780885068, 1513502316, 1094664062, 49805301, 1338821763, 1546925160, 4104496465, 887481809, 150073849, 2473685474, 1943591083, 1395732834, 1058346282, 201589768, 1388824469, 1696801606, 1589887901, 672667696, 2711000631, 251987210, 3046808111, 151455502, 907153956, 2608889883, 1038279391, 652995533, 1764173646, 3451040383, 2675275242, 453576978, 2659418909, 1949051992, 773462580, 756751158, 2993581788, 3998898868, 4221608027, 4132590244, 1295727478, 1641469623, 3467883389, 2066295122, 1055122397, 1898917726, 2542044179, 4115878822, 1758581177, 0, 753790401, 1612718144, 536673507, 3367088505, 3982187446, 3194645204, 1187761037, 3653156455, 1262041458, 3729410708, 3561770136, 3898103984, 1255133061, 1808847035, 720367557, 3853167183, 385612781, 3309519750, 3612167578, 1429418854, 2491778321, 3477423498, 284817897, 100794884, 2172616702, 4031795360, 1144798328, 3131023141, 3819481163, 4082192802, 4272137053, 3225436288, 2324664069, 2912064063, 3164445985, 1211644016, 83228145, 3753688163, 3249976951, 1977277103, 1663115586, 806359072, 452984805, 250868733, 1842533055, 1288555905, 336333848, 890442534, 804056259, 3781124030, 2727843637, 3427026056, 957814574, 1472513171, 4071073621, 2189328124, 1195195770, 2892260552, 3881655738, 723065138, 2507371494, 2690670784, 2558624025, 3511635870, 2145180835, 1713513028, 2116692564, 2878378043, 2206763019, 3393603212, 703524551, 3552098411, 1007948840, 2044649127, 3797835452, 487262998, 1994120109, 1004593371, 1446130276, 1312438900, 503974420, 3679013266, 168166924, 1814307912, 3831258296, 1573044895, 1859376061, 4021070915, 2791465668, 2828112185, 2761266481, 937747667, 2339994098, 854058965, 1137232011, 1496790894, 3077402074, 2358086913, 1691735473, 3528347292, 3769215305, 3027004632, 4199962284, 133494003, 636152527, 2942657994, 2390391540, 3920539207, 403179536, 3585784431, 2289596656, 1864705354, 1915629148, 605822008, 4054230615, 3350508659, 1371981463, 602466507, 2094914977, 2624877800, 555687742, 3712699286, 3703422305, 2257292045, 2240449039, 2423288032, 1111375484, 3300242801, 2858837708, 3628615824, 84083462, 32962295, 302911004, 2741068226, 1597322602, 4183250862, 3501832553, 2441512471, 1489093017, 656219450, 3114180135, 954327513, 335083755, 3013122091, 856756514, 3144247762, 1893325225, 2307821063, 2811532339, 3063651117, 572399164, 2458355477, 552200649, 1238290055, 4283782570, 2015897680, 2061492133, 2408352771, 4171342169, 2156497161, 386731290, 3669999461, 837215959, 3326231172, 3093850320, 3275833730, 2962856233, 1999449434, 286199582, 3417354363, 4233385128, 3602627437, 974525996], core.int);
    },
    get C98() {
      return C[98] = dart.constList([1667483301, 2088564868, 2004348569, 2071721613, 4076011277, 1802229437, 1869602481, 3318059348, 808476752, 16843267, 1734856361, 724260477, 4278118169, 3621238114, 2880130534, 1987505306, 3402272581, 2189565853, 3385428288, 2105408135, 4210749205, 1499050731, 1195871945, 4042324747, 2913812972, 3570709351, 2728550397, 2947499498, 2627478463, 2762232823, 1920132246, 3233848155, 3082253762, 4261273884, 2475900334, 640044138, 909536346, 1061125697, 4160222466, 3435955023, 875849820, 2779075060, 3857043764, 4059166984, 1903288979, 3638078323, 825320019, 353708607, 67373068, 3351745874, 589514341, 3284376926, 404238376, 2526427041, 84216335, 2593796021, 117902857, 303178806, 2155879323, 3806519101, 3958099238, 656887401, 2998042573, 1970662047, 151589403, 2206408094, 741103732, 437924910, 454768173, 1852759218, 1515893998, 2694863867, 1381147894, 993752653, 3604395873, 3014884814, 690573947, 3823361342, 791633521, 2223248279, 1397991157, 3520182632, 0, 3991781676, 538984544, 4244431647, 2981198280, 1532737261, 1785386174, 3419114822, 3200149465, 960066123, 1246401758, 1280088276, 1482207464, 3486483786, 3503340395, 4025468202, 2863288293, 4227591446, 1128498885, 1296931543, 859006549, 2240090516, 1162185423, 4193904912, 33686534, 2139094657, 1347461360, 1010595908, 2678007226, 2829601763, 1364304627, 2745392638, 1077969088, 2408514954, 2459058093, 2644320700, 943222856, 4126535940, 3166462943, 3065411521, 3671764853, 555827811, 269492272, 4294960410, 4092853518, 3537026925, 3452797260, 202119188, 320022069, 3974939439, 1600110305, 2543269282, 1145342156, 387395129, 3301217111, 2812761586, 2122251394, 1027439175, 1684326572, 1566423783, 421081643, 1936975509, 1616953504, 2172721560, 1330618065, 3705447295, 572671078, 707417214, 2425371563, 2290617219, 1179028682, 4008625961, 3099093971, 336865340, 3739133817, 1583267042, 185275933, 3688607094, 3772832571, 842163286, 976909390, 168432670, 1229558491, 101059594, 606357612, 1549580516, 3267534685, 3553869166, 2896970735, 1650640038, 2442213800, 2509582756, 3840201527, 2038035083, 3890730290, 3368586051, 926379609, 1835915959, 2374828428, 3587551588, 1313774802, 2846444000, 1819072692, 1448520954, 4109693703, 3941256997, 1701169839, 2054878350, 2930657257, 134746136, 3132780501, 2021191816, 623200879, 774790258, 471611428, 2795919345, 3031724999, 3334903633, 3907570467, 3722289532, 1953818780, 522141217, 1263245021, 3183305180, 2341145990, 2324303749, 1886445712, 1044282434, 3048567236, 1718013098, 1212715224, 50529797, 4143380225, 235805714, 1633796771, 892693087, 1465364217, 3115936208, 2256934801, 3250690392, 488454695, 2661164985, 3789674808, 4177062675, 2560109491, 286335539, 1768542907, 3654920560, 2391672713, 2492740519, 2610638262, 505297954, 2273777042, 3924412704, 3469641545, 1431677695, 673730680, 3755976058, 2357986191, 2711706104, 2307459456, 218962455, 3216991706, 3873888049, 1111655622, 1751699640, 1094812355, 2576951728, 757946999, 252648977, 2964356043, 1414834428, 3149622742, 370551866], core.int);
    },
    get C99() {
      return C[99] = dart.constList([1673962851, 2096661628, 2012125559, 2079755643, 4076801522, 1809235307, 1876865391, 3314635973, 811618352, 16909057, 1741597031, 727088427, 4276558334, 3618988759, 2874009259, 1995217526, 3398387146, 2183110018, 3381215433, 2113570685, 4209972730, 1504897881, 1200539975, 4042984432, 2906778797, 3568527316, 2724199842, 2940594863, 2619588508, 2756966308, 1927583346, 3231407040, 3077948087, 4259388669, 2470293139, 642542118, 913070646, 1065238847, 4160029431, 3431157708, 879254580, 2773611685, 3855693029, 4059629809, 1910674289, 3635114968, 828527409, 355090197, 67636228, 3348452039, 591815971, 3281870531, 405809176, 2520228246, 84545285, 2586817946, 118360327, 304363026, 2149292928, 3806281186, 3956090603, 659450151, 2994720178, 1978310517, 152181513, 2199756419, 743994412, 439627290, 456535323, 1859957358, 1521806938, 2690382752, 1386542674, 997608763, 3602342358, 3011366579, 693271337, 3822927587, 794718511, 2215876484, 1403450707, 3518589137, 0, 3988860141, 541089824, 4242743292, 2977548465, 1538714971, 1792327274, 3415033547, 3194476990, 963791673, 1251270218, 1285084236, 1487988824, 3481619151, 3501943760, 4022676207, 2857362858, 4226619131, 1132905795, 1301993293, 862344499, 2232521861, 1166724933, 4192801017, 33818114, 2147385727, 1352724560, 1014514748, 2670049951, 2823545768, 1369633617, 2740846243, 1082179648, 2399505039, 2453646738, 2636233885, 946882616, 4126213365, 3160661948, 3061301686, 3668932058, 557998881, 270544912, 4293204735, 4093447923, 3535760850, 3447803085, 202904588, 321271059, 3972214764, 1606345055, 2536874647, 1149815876, 388905239, 3297990596, 2807427751, 2130477694, 1031423805, 1690872932, 1572530013, 422718233, 1944491379, 1623236704, 2165938305, 1335808335, 3701702620, 574907938, 710180394, 2419829648, 2282455944, 1183631942, 4006029806, 3094074296, 338181140, 3735517662, 1589437022, 185998603, 3685578459, 3772464096, 845436466, 980700730, 169090570, 1234361161, 101452294, 608726052, 1555620956, 3265224130, 3552407251, 2890133420, 1657054818, 2436475025, 2503058581, 3839047652, 2045938553, 3889509095, 3364570056, 929978679, 1843050349, 2365688973, 3585172693, 1318900302, 2840191145, 1826141292, 1454176854, 4109567988, 3939444202, 1707781989, 2062847610, 2923948462, 135272456, 3127891386, 2029029496, 625635109, 777810478, 473441308, 2790781350, 3027486644, 3331805638, 3905627112, 3718347997, 1961401460, 524165407, 1268178251, 3177307325, 2332919435, 2316273034, 1893765232, 1048330814, 3044132021, 1724688998, 1217452104, 50726147, 4143383030, 236720654, 1640145761, 896163637, 1471084887, 3110719673, 2249691526, 3248052417, 490350365, 2653403550, 3789109473, 4176155640, 2553000856, 287453969, 1775418217, 3651760345, 2382858638, 2486413204, 2603464347, 507257374, 2266337927, 3922272489, 3464972750, 1437269845, 676362280, 3752164063, 2349043596, 2707028129, 2299101321, 219813645, 3211123391, 3872862694, 1115997762, 1758509160, 1099088705, 2569646233, 760903469, 253628687, 2960903088, 1420360788, 3144537787, 371997206], core.int);
    },
    get C100() {
      return C[100] = dart.constList([3332727651, 4169432188, 4003034999, 4136467323, 4279104242, 3602738027, 3736170351, 2438251973, 1615867952, 33751297, 3467208551, 1451043627, 3877240574, 3043153879, 1306962859, 3969545846, 2403715786, 530416258, 2302724553, 4203183485, 4011195130, 3001768281, 2395555655, 4211863792, 1106029997, 3009926356, 1610457762, 1173008303, 599760028, 1408738468, 3835064946, 2606481600, 1975695287, 3776773629, 1034851219, 1282024998, 1817851446, 2118205247, 4110612471, 2203045068, 1750873140, 1374987685, 3509904869, 4178113009, 3801313649, 2876496088, 1649619249, 708777237, 135005188, 2505230279, 1181033251, 2640233411, 807933976, 933336726, 168756485, 800430746, 235472647, 607523346, 463175808, 3745374946, 3441880043, 1315514151, 2144187058, 3936318837, 303761673, 496927619, 1484008492, 875436570, 908925723, 3702681198, 3035519578, 1543217312, 2767606354, 1984772923, 3076642518, 2110698419, 1383803177, 3711886307, 1584475951, 328696964, 2801095507, 3110654417, 0, 3240947181, 1080041504, 3810524412, 2043195825, 3069008731, 3569248874, 2370227147, 1742323390, 1917532473, 2497595978, 2564049996, 2968016984, 2236272591, 3144405200, 3307925487, 1340451498, 3977706491, 2261074755, 2597801293, 1716859699, 294946181, 2328839493, 3910203897, 67502594, 4269899647, 2700103760, 2017737788, 632987551, 1273211048, 2733855057, 1576969123, 2160083008, 92966799, 1068339858, 566009245, 1883781176, 4043634165, 1675607228, 2009183926, 2943736538, 1113792801, 540020752, 3843751935, 4245615603, 3211645650, 2169294285, 403966988, 641012499, 3274697964, 3202441055, 899848087, 2295088196, 775493399, 2472002756, 1441965991, 4236410494, 2051489085, 3366741092, 3135724893, 841685273, 3868554099, 3231735904, 429425025, 2664517455, 2743065820, 1147544098, 1417554474, 1001099408, 193169544, 2362066502, 3341414126, 1809037496, 675025940, 2809781982, 3168951902, 371002123, 2910247899, 3678134496, 1683370546, 1951283770, 337512970, 2463844681, 201983494, 1215046692, 3101973596, 2673722050, 3178157011, 1139780780, 3299238498, 967348625, 832869781, 3543655652, 4069226873, 3576883175, 2336475336, 1851340599, 3669454189, 25988493, 2976175573, 2631028302, 1239460265, 3635702892, 2902087254, 4077384948, 3475368682, 3400492389, 4102978170, 1206496942, 270010376, 1876277946, 4035475576, 1248797989, 1550986798, 941890588, 1475454630, 1942467764, 2538718918, 3408128232, 2709315037, 3902567540, 1042358047, 2531085131, 1641856445, 226921355, 260409994, 3767562352, 2084716094, 1908716981, 3433719398, 2430093384, 100991747, 4144101110, 470945294, 3265487201, 1784624437, 2935576407, 1775286713, 395413126, 2572730817, 975641885, 666476190, 3644383713, 3943954680, 733190296, 573772049, 3535497577, 2842745305, 126455438, 866620564, 766942107, 1008868894, 361924487, 3374377449, 2269761230, 2868860245, 1350051880, 2776293343, 59739276, 1509466529, 159418761, 437718285, 1708834751, 3610371814, 2227585602, 3501746280, 2193834305, 699439513, 1517759789, 504434447, 2076946608, 2835108948, 1842789307, 742004246], core.int);
    },
    get C101() {
      return C[101] = dart.constList([1353184337, 1399144830, 3282310938, 2522752826, 3412831035, 4047871263, 2874735276, 2466505547, 1442459680, 4134368941, 2440481928, 625738485, 4242007375, 3620416197, 2151953702, 2409849525, 1230680542, 1729870373, 2551114309, 3787521629, 41234371, 317738113, 2744600205, 3338261355, 3881799427, 2510066197, 3950669247, 3663286933, 763608788, 3542185048, 694804553, 1154009486, 1787413109, 2021232372, 1799248025, 3715217703, 3058688446, 397248752, 1722556617, 3023752829, 407560035, 2184256229, 1613975959, 1165972322, 3765920945, 2226023355, 480281086, 2485848313, 1483229296, 436028815, 2272059028, 3086515026, 601060267, 3791801202, 1468997603, 715871590, 120122290, 63092015, 2591802758, 2768779219, 4068943920, 2997206819, 3127509762, 1552029421, 723308426, 2461301159, 4042393587, 2715969870, 3455375973, 3586000134, 526529745, 2331944644, 2639474228, 2689987490, 853641733, 1978398372, 971801355, 2867814464, 111112542, 1360031421, 4186579262, 1023860118, 2919579357, 1186850381, 3045938321, 90031217, 1876166148, 4279586912, 620468249, 2548678102, 3426959497, 2006899047, 3175278768, 2290845959, 945494503, 3689859193, 1191869601, 3910091388, 3374220536, 0, 2206629897, 1223502642, 2893025566, 1316117100, 4227796733, 1446544655, 517320253, 658058550, 1691946762, 564550760, 3511966619, 976107044, 2976320012, 266819475, 3533106868, 2660342555, 1338359936, 2720062561, 1766553434, 370807324, 179999714, 3844776128, 1138762300, 488053522, 185403662, 2915535858, 3114841645, 3366526484, 2233069911, 1275557295, 3151862254, 4250959779, 2670068215, 3170202204, 3309004356, 880737115, 1982415755, 3703972811, 1761406390, 1676797112, 3403428311, 277177154, 1076008723, 538035844, 2099530373, 4164795346, 288553390, 1839278535, 1261411869, 4080055004, 3964831245, 3504587127, 1813426987, 2579067049, 4199060497, 577038663, 3297574056, 440397984, 3626794326, 4019204898, 3343796615, 3251714265, 4272081548, 906744984, 3481400742, 685669029, 646887386, 2764025151, 3835509292, 227702864, 2613862250, 1648787028, 3256061430, 3904428176, 1593260334, 4121936770, 3196083615, 2090061929, 2838353263, 3004310991, 999926984, 2809993232, 1852021992, 2075868123, 158869197, 4095236462, 28809964, 2828685187, 1701746150, 2129067946, 147831841, 3873969647, 3650873274, 3459673930, 3557400554, 3598495785, 2947720241, 824393514, 815048134, 3227951669, 935087732, 2798289660, 2966458592, 366520115, 1251476721, 4158319681, 240176511, 804688151, 2379631990, 1303441219, 1414376140, 3741619940, 3820343710, 461924940, 3089050817, 2136040774, 82468509, 1563790337, 1937016826, 776014843, 1511876531, 1389550482, 861278441, 323475053, 2355222426, 2047648055, 2383738969, 2302415851, 3995576782, 902390199, 3991215329, 1018251130, 1507840668, 1064563285, 2043548696, 3208103795, 3939366739, 1537932639, 342834655, 2262516856, 2180231114, 1053059257, 741614648, 1598071746, 1925389590, 203809468, 2336832552, 1100287487, 1895934009, 3736275976, 2632234200, 2428589668, 1636092795, 1890988757, 1952214088, 1113045200], core.int);
    },
    get C102() {
      return C[102] = dart.constList([2817806672, 1698790995, 2752977603, 1579629206, 1806384075, 1167925233, 1492823211, 65227667, 4197458005, 1836494326, 1993115793, 1275262245, 3622129660, 3408578007, 1144333952, 2741155215, 1521606217, 465184103, 250234264, 3237895649, 1966064386, 4031545618, 2537983395, 4191382470, 1603208167, 2626819477, 2054012907, 1498584538, 2210321453, 561273043, 1776306473, 3368652356, 2311222634, 2039411832, 1045993835, 1907959773, 1340194486, 2911432727, 2887829862, 986611124, 1256153880, 823846274, 860985184, 2136171077, 2003087840, 2926295940, 2692873756, 722008468, 1749577816, 4249194265, 1826526343, 4168831671, 3547573027, 38499042, 2401231703, 2874500650, 686535175, 3266653955, 2076542618, 137876389, 2267558130, 2780767154, 1778582202, 2182540636, 483363371, 3027871634, 4060607472, 3798552225, 4107953613, 3188000469, 1647628575, 4272342154, 1395537053, 1442030240, 3783918898, 3958809717, 3968011065, 4016062634, 2675006982, 275692881, 2317434617, 115185213, 88006062, 3185986886, 2371129781, 1573155077, 3557164143, 357589247, 4221049124, 3921532567, 1128303052, 2665047927, 1122545853, 2341013384, 1528424248, 4006115803, 175939911, 256015593, 512030921, 0, 2256537987, 3979031112, 1880170156, 1918528590, 4279172603, 948244310, 3584965918, 959264295, 3641641572, 2791073825, 1415289809, 775300154, 1728711857, 3881276175, 2532226258, 2442861470, 3317727311, 551313826, 1266113129, 437394454, 3130253834, 715178213, 3760340035, 387650077, 218697227, 3347837613, 2830511545, 2837320904, 435246981, 125153100, 3717852859, 1618977789, 637663135, 4117912764, 996558021, 2130402100, 692292470, 3324234716, 4243437160, 4058298467, 3694254026, 2237874704, 580326208, 298222624, 608863613, 1035719416, 855223825, 2703869805, 798891339, 817028339, 1384517100, 3821107152, 380840812, 3111168409, 1217663482, 1693009698, 2365368516, 1072734234, 746411736, 2419270383, 1313441735, 3510163905, 2731183358, 198481974, 2180359887, 3732579624, 2394413606, 3215802276, 2637835492, 2457358349, 3428805275, 1182684258, 328070850, 3101200616, 4147719774, 2948825845, 2153619390, 2479909244, 768962473, 304467891, 2578237499, 2098729127, 1671227502, 3141262203, 2015808777, 408514292, 3080383489, 2588902312, 1855317605, 3875515006, 3485212936, 3893751782, 2615655129, 913263310, 161475284, 2091919830, 2997105071, 591342129, 2493892144, 1721906624, 3159258167, 3397581990, 3499155632, 3634836245, 2550460746, 3672916471, 1355644686, 4136703791, 3595400845, 2968470349, 1303039060, 76997855, 3050413795, 2288667675, 523026872, 1365591679, 3932069124, 898367837, 1955068531, 1091304238, 493335386, 3537605202, 1443948851, 1205234963, 1641519756, 211892090, 351820174, 1007938441, 665439982, 3378624309, 3843875309, 2974251580, 3755121753, 1945261375, 3457423481, 935818175, 3455538154, 2868731739, 1866325780, 3678697606, 4088384129, 3295197502, 874788908, 1084473951, 3273463410, 635616268, 1228679307, 2500722497, 27801969, 3003910366, 3837057180, 3243664528, 2227927905, 3056784752, 1550600308, 1471729730], core.int);
    },
    get C103() {
      return C[103] = dart.constList([4098969767, 1098797925, 387629988, 658151006, 2872822635, 2636116293, 4205620056, 3813380867, 807425530, 1991112301, 3431502198, 49620300, 3847224535, 717608907, 891715652, 1656065955, 2984135002, 3123013403, 3930429454, 4267565504, 801309301, 1283527408, 1183687575, 3547055865, 2399397727, 2450888092, 1841294202, 1385552473, 3201576323, 1951978273, 3762891113, 3381544136, 3262474889, 2398386297, 1486449470, 3106397553, 3787372111, 2297436077, 550069932, 3464344634, 3747813450, 451248689, 1368875059, 1398949247, 1689378935, 1807451310, 2180914336, 150574123, 1215322216, 1167006205, 3734275948, 2069018616, 1940595667, 1265820162, 534992783, 1432758955, 3954313000, 3039757250, 3313932923, 936617224, 674296455, 3206787749, 50510442, 384654466, 3481938716, 2041025204, 133427442, 1766760930, 3664104948, 84334014, 886120290, 2797898494, 775200083, 4087521365, 2315596513, 4137973227, 2198551020, 1614850799, 1901987487, 1857900816, 557775242, 3717610758, 1054715397, 3863824061, 1418835341, 3295741277, 100954068, 1348534037, 2551784699, 3184957417, 1082772547, 3647436702, 3903896898, 2298972299, 434583643, 3363429358, 2090944266, 1115482383, 2230896926, 0, 2148107142, 724715757, 287222896, 1517047410, 251526143, 2232374840, 2923241173, 758523705, 252339417, 1550328230, 1536938324, 908343854, 168604007, 1469255655, 4004827798, 2602278545, 3229634501, 3697386016, 2002413899, 303830554, 2481064634, 2696996138, 574374880, 454171927, 151915277, 2347937223, 3056449960, 504678569, 4049044761, 1974422535, 2582559709, 2141453664, 33005350, 1918680309, 1715782971, 4217058430, 1133213225, 600562886, 3988154620, 3837289457, 836225756, 1665273989, 2534621218, 3330547729, 1250262308, 3151165501, 4188934450, 700935585, 2652719919, 3000824624, 2249059410, 3245854947, 3005967382, 1890163129, 2484206152, 3913753188, 4238918796, 4037024319, 2102843436, 857927568, 1233635150, 953795025, 3398237858, 3566745099, 4121350017, 2057644254, 3084527246, 2906629311, 976020637, 2018512274, 1600822220, 2119459398, 2381758995, 3633375416, 959340279, 3280139695, 1570750080, 3496574099, 3580864813, 634368786, 2898803609, 403744637, 2632478307, 1004239803, 650971512, 1500443672, 2599158199, 1334028442, 2514904430, 4289363686, 3156281551, 368043752, 3887782299, 1867173430, 2682967049, 2955531900, 2754719666, 1059729699, 2781229204, 2721431654, 1316239292, 2197595850, 2430644432, 2805143000, 82922136, 3963746266, 3447656016, 2434215926, 1299615190, 4014165424, 2865517645, 2531581700, 3516851125, 1783372680, 750893087, 1699118929, 1587348714, 2348899637, 2281337716, 201010753, 1739807261, 3683799762, 283718486, 3597472583, 3617229921, 2704767500, 4166618644, 334203196, 2848910887, 1639396809, 484568549, 1199193265, 3533461983, 4065673075, 337148366, 3346251575, 4149471949, 4250885034, 1038029935, 1148749531, 2949284339, 1756970692, 607661108, 2747424576, 488010435, 3803974693, 1009290057, 234832277, 2822336769, 201907891, 3034094820, 1449431233, 3413860740, 852848822, 1816687708, 3100656215], core.int);
    },
    get C104() {
      return C[104] = dart.constList([1364240372, 2119394625, 449029143, 982933031, 1003187115, 535905693, 2896910586, 1267925987, 542505520, 2918608246, 2291234508, 4112862210, 1341970405, 3319253802, 645940277, 3046089570, 3729349297, 627514298, 1167593194, 1575076094, 3271718191, 2165502028, 2376308550, 1808202195, 65494927, 362126482, 3219880557, 2514114898, 3559752638, 1490231668, 1227450848, 2386872521, 1969916354, 4101536142, 2573942360, 668823993, 3199619041, 4028083592, 3378949152, 2108963534, 1662536415, 3850514714, 2539664209, 1648721747, 2984277860, 3146034795, 4263288961, 4187237128, 1884842056, 2400845125, 2491903198, 1387788411, 2871251827, 1927414347, 3814166303, 1714072405, 2986813675, 788775605, 2258271173, 3550808119, 821200680, 598910399, 45771267, 3982262806, 2318081231, 2811409529, 4092654087, 1319232105, 1707996378, 114671109, 3508494900, 3297443494, 882725678, 2728416755, 87220618, 2759191542, 188345475, 1084944224, 1577492337, 3176206446, 1056541217, 2520581853, 3719169342, 1296481766, 2444594516, 1896177092, 74437638, 1627329872, 421854104, 3600279997, 2311865152, 1735892697, 2965193448, 126389129, 3879230233, 2044456648, 2705787516, 2095648578, 4173930116, 0, 159614592, 843640107, 514617361, 1817080410, 4261150478, 257308805, 1025430958, 908540205, 174381327, 1747035740, 2614187099, 607792694, 212952842, 2467293015, 3033700078, 463376795, 2152711616, 1638015196, 1516850039, 471210514, 3792353939, 3236244128, 1011081250, 303896347, 235605257, 4071475083, 767142070, 348694814, 1468340721, 2940995445, 4005289369, 2751291519, 4154402305, 1555887474, 1153776486, 1530167035, 2339776835, 3420243491, 3060333805, 3093557732, 3620396081, 1108378979, 322970263, 2216694214, 2239571018, 3539484091, 2920362745, 3345850665, 491466654, 3706925234, 233591430, 2010178497, 728503987, 2845423984, 301615252, 1193436393, 2831453436, 2686074864, 1457007741, 586125363, 2277985865, 3653357880, 2365498058, 2553678804, 2798617077, 2770919034, 3659959991, 1067761581, 753179962, 1343066744, 1788595295, 1415726718, 4139914125, 2431170776, 777975609, 2197139395, 2680062045, 1769771984, 1873358293, 3484619301, 3359349164, 279411992, 3899548572, 3682319163, 3439949862, 1861490777, 3959535514, 2208864847, 3865407125, 2860443391, 554225596, 4024887317, 3134823399, 1255028335, 3939764639, 701922480, 833598116, 707863359, 3325072549, 901801634, 1949809742, 4238789250, 3769684112, 857069735, 4048197636, 1106762476, 2131644621, 389019281, 1989006925, 1129165039, 3428076970, 3839820950, 2665723345, 1276872810, 3250069292, 1182749029, 2634345054, 22885772, 4201870471, 4214112523, 3009027431, 2454901467, 3912455696, 1829980118, 2592891351, 930745505, 1502483704, 3951639571, 3471714217, 3073755489, 3790464284, 2050797895, 2623135698, 1430221810, 410635796, 1941911495, 1407897079, 1599843069, 3742658365, 2022103876, 3397514159, 3107898472, 942421028, 3261022371, 376619805, 3154912738, 680216892, 4282488077, 963707304, 148812556, 3634160820, 1687208278, 2069988555, 3580933682, 1215585388, 3494008760], core.int);
    },
    get C105() {
      return C[105] = dart.constList([], frame$.Frame);
    },
    get C107() {
      return C[107] = dart.const({
        __proto__: field_path_type.FieldPathType.prototype,
        [S$._Enum__name]: "documentId",
        [S$._Enum_index]: 0
      });
    },
    get C106() {
      return C[106] = dart.constList([C[107] || CT.C107], field_path_type.FieldPathType);
    },
    get C109() {
      return C[109] = dart.const({
        __proto__: firestore_message_codec.FirestoreMessageCodec.prototype
      });
    },
    get C108() {
      return C[108] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [S$.StandardMethodCodec_messageCodec]: C[109] || CT.C109
      });
    },
    get C110() {
      return C[110] = dart.fn(exception$.convertPlatformException, T$.ObjectAndStackTraceToNever());
    },
    get C111() {
      return C[111] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [S$.MethodChannel__binaryMessenger]: null,
        [S$.MethodChannel_codec]: C[108] || CT.C108,
        [S$.MethodChannel_name]: "plugins.flutter.io/firebase_firestore"
      });
    },
    get C112() {
      return C[112] = dart.const({
        __proto__: T$._ValueWrapperOfUserPlatform().prototype,
        [S._ValueWrapper_value]: null
      });
    },
    get C115() {
      return C[115] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C114() {
      return C[114] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [S$.StandardMethodCodec_messageCodec]: C[115] || CT.C115
      });
    },
    get C113() {
      return C[113] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [S$.MethodChannel__binaryMessenger]: null,
        [S$.MethodChannel_codec]: C[114] || CT.C114,
        [S$.MethodChannel_name]: "plugins.flutter.io/firebase_auth"
      });
    },
    get C116() {
      return C[116] = dart.const({
        __proto__: chunked_coding.ChunkedCodingCodec.prototype
      });
    },
    get C117() {
      return C[117] = dart.constList(["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"], core.String);
    },
    get C118() {
      return C[118] = dart.constList(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], core.String);
    },
    get C120() {
      return C[120] = dart.const({
        __proto__: put_string_format.PutStringFormat.prototype,
        [S$._Enum__name]: "raw",
        [S$._Enum_index]: 0
      });
    },
    get C121() {
      return C[121] = dart.const({
        __proto__: put_string_format.PutStringFormat.prototype,
        [S$._Enum__name]: "base64",
        [S$._Enum_index]: 1
      });
    },
    get C122() {
      return C[122] = dart.const({
        __proto__: put_string_format.PutStringFormat.prototype,
        [S$._Enum__name]: "base64Url",
        [S$._Enum_index]: 2
      });
    },
    get C123() {
      return C[123] = dart.const({
        __proto__: put_string_format.PutStringFormat.prototype,
        [S$._Enum__name]: "dataUrl",
        [S$._Enum_index]: 3
      });
    },
    get C119() {
      return C[119] = dart.constList([C[120] || CT.C120, C[121] || CT.C121, C[122] || CT.C122, C[123] || CT.C123], put_string_format.PutStringFormat);
    },
    get C125() {
      return C[125] = dart.const({
        __proto__: task_state.TaskState.prototype,
        [S$._Enum__name]: "paused",
        [S$._Enum_index]: 0
      });
    },
    get C126() {
      return C[126] = dart.const({
        __proto__: task_state.TaskState.prototype,
        [S$._Enum__name]: "running",
        [S$._Enum_index]: 1
      });
    },
    get C127() {
      return C[127] = dart.const({
        __proto__: task_state.TaskState.prototype,
        [S$._Enum__name]: "success",
        [S$._Enum_index]: 2
      });
    },
    get C128() {
      return C[128] = dart.const({
        __proto__: task_state.TaskState.prototype,
        [S$._Enum__name]: "canceled",
        [S$._Enum_index]: 3
      });
    },
    get C129() {
      return C[129] = dart.const({
        __proto__: task_state.TaskState.prototype,
        [S$._Enum__name]: "error",
        [S$._Enum_index]: 4
      });
    },
    get C124() {
      return C[124] = dart.constList([C[125] || CT.C125, C[126] || CT.C126, C[127] || CT.C127, C[128] || CT.C128, C[129] || CT.C129], task_state.TaskState);
    },
    get C130() {
      return C[130] = dart.const(new _js_helper.PrivateSymbol.new('_pointer', S._pointer$6));
    },
    get C132() {
      return C[132] = dart.const({
        __proto__: method_channel_field_value.FieldValueType.prototype,
        [S$._Enum__name]: "arrayUnion",
        [S$._Enum_index]: 0
      });
    },
    get C133() {
      return C[133] = dart.const({
        __proto__: method_channel_field_value.FieldValueType.prototype,
        [S$._Enum__name]: "arrayRemove",
        [S$._Enum_index]: 1
      });
    },
    get C134() {
      return C[134] = dart.const({
        __proto__: method_channel_field_value.FieldValueType.prototype,
        [S$._Enum__name]: "delete",
        [S$._Enum_index]: 2
      });
    },
    get C135() {
      return C[135] = dart.const({
        __proto__: method_channel_field_value.FieldValueType.prototype,
        [S$._Enum__name]: "serverTimestamp",
        [S$._Enum_index]: 3
      });
    },
    get C136() {
      return C[136] = dart.const({
        __proto__: method_channel_field_value.FieldValueType.prototype,
        [S$._Enum__name]: "incrementDouble",
        [S$._Enum_index]: 4
      });
    },
    get C137() {
      return C[137] = dart.const({
        __proto__: method_channel_field_value.FieldValueType.prototype,
        [S$._Enum__name]: "incrementInteger",
        [S$._Enum_index]: 5
      });
    },
    get C131() {
      return C[131] = dart.constMap(method_channel_field_value.FieldValueType, core.int, [C[132] || CT.C132, 132, C[133] || CT.C133, 133, C[134] || CT.C134, 134, C[135] || CT.C135, 135, C[136] || CT.C136, 137, C[137] || CT.C137, 138]);
    },
    get C138() {
      return C[138] = dart.constMap(field_path_type.FieldPathType, core.int, [C[107] || CT.C107, 139]);
    },
    get C139() {
      return C[139] = dart.constList([C[132] || CT.C132, C[133] || CT.C133, C[134] || CT.C134, C[135] || CT.C135, C[136] || CT.C136, C[137] || CT.C137], method_channel_field_value.FieldValueType);
    },
    get C140() {
      return C[140] = dart.const({
        __proto__: decoder._State.prototype,
        [S._State__name]: "boundary"
      });
    },
    get C141() {
      return C[141] = dart.const({
        __proto__: decoder._State.prototype,
        [S._State__name]: "size"
      });
    },
    get C142() {
      return C[142] = dart.const({
        __proto__: decoder._State.prototype,
        [S._State__name]: "size before LF"
      });
    },
    get C143() {
      return C[143] = dart.const({
        __proto__: decoder._State.prototype,
        [S._State__name]: "body"
      });
    },
    get C144() {
      return C[144] = dart.const({
        __proto__: decoder._State.prototype,
        [S._State__name]: "body before CR"
      });
    },
    get C145() {
      return C[145] = dart.const({
        __proto__: decoder._State.prototype,
        [S._State__name]: "body before LF"
      });
    },
    get C146() {
      return C[146] = dart.const({
        __proto__: decoder._State.prototype,
        [S._State__name]: "end before CR"
      });
    },
    get C147() {
      return C[147] = dart.const({
        __proto__: decoder._State.prototype,
        [S._State__name]: "end before LF"
      });
    },
    get C148() {
      return C[148] = dart.const({
        __proto__: decoder._State.prototype,
        [S._State__name]: "end"
      });
    },
    get C149() {
      return C[149] = dart.const({
        __proto__: decoder.ChunkedCodingDecoder.prototype
      });
    },
    get C150() {
      return C[150] = dart.constList([], core.int);
    },
    get C151() {
      return C[151] = dart.const({
        __proto__: encoder.ChunkedCodingEncoder.prototype
      });
    },
    get C152() {
      return C[152] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [S$.MethodChannel__binaryMessenger]: null,
        [S$.MethodChannel_codec]: C[114] || CT.C114,
        [S$.MethodChannel_name]: "plugins.flutter.io/firebase_storage"
      });
    },
    get C154() {
      return C[154] = dart.const({
        __proto__: T$._EmptyStreamOfListOfint().prototype
      });
    },
    get C153() {
      return C[153] = dart.const({
        __proto__: byte_stream.ByteStream.prototype,
        [S.StreamView__stream]: C[154] || CT.C154
      });
    },
    get C155() {
      return C[155] = dart.constMap(core.String, core.String, []);
    },
    get C156() {
      return C[156] = dart.const({
        __proto__: convert.Utf8Codec.prototype,
        [S.Utf8Codec__allowMalformed]: false
      });
    },
    get C157() {
      return C[157] = dart.constList([13, 10], core.int);
    },
    get C158() {
      return C[158] = dart.const(new _js_helper.PrivateSymbol.new('_add', S._add$1));
    },
    get C159() {
      return C[159] = dart.const(new _js_helper.PrivateSymbol.new('_head', S._head$2));
    },
    get C160() {
      return C[160] = dart.const(new _js_helper.PrivateSymbol.new('_writeToList', S._writeToList));
    },
    get C161() {
      return C[161] = dart.const(new _js_helper.PrivateSymbol.new('_grow', S._grow));
    },
    get C162() {
      return C[162] = dart.const(new _js_helper.PrivateSymbol.new('_preGrow', S._preGrow));
    },
    get C163() {
      return C[163] = dart.const(new _js_helper.PrivateSymbol.new('_table', S._table$1));
    },
    get C164() {
      return C[164] = dart.const(new _js_helper.PrivateSymbol.new('_tail', S._tail$1));
    },
    get C165() {
      return C[165] = dart.const(new _js_helper.PrivateSymbol.new('_head=', S._head_));
    },
    get C166() {
      return C[166] = dart.const(new _js_helper.PrivateSymbol.new('_table=', S._table_));
    },
    get C167() {
      return C[167] = dart.const(new _js_helper.PrivateSymbol.new('_tail=', S._tail_));
    },
    get C168() {
      return C[168] = dart.constList([144, 169], core.int);
    },
    get C169() {
      return C[169] = dart.const({
        __proto__: convert.Latin1Codec.prototype,
        [S.Latin1Codec__allowInvalid]: false
      });
    },
    get C170() {
      return C[170] = dart.constList([43, 95, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], core.int);
    }
  }, false);
  var C = Array(171).fill(void 0);
  var I = [
    "file:///zapp/project/lib/main.dart",
    "package:hive/hive.dart",
    "package:hive_flutter/hive_flutter.dart",
    "file:///zapp/project/lib/firstlime.dart",
    "file:///zapp/project/lib/mainpage.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/plugin_platform_interface-2.1.2/lib/plugin_platform_interface.dart",
    "package:plugin_platform_interface/plugin_platform_interface.dart",
    "package:cloud_firestore_platform_interface/src/platform_interface/platform_interface_firestore.dart",
    "package:cloud_firestore_web/cloud_firestore_web.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_web-4.0.0/lib/firebase_auth_web.dart",
    "package:firebase_auth_platform_interface/src/platform_interface/platform_interface_firebase_auth.dart",
    "package:firebase_auth_web/firebase_auth_web.dart",
    "package:firebase_core_platform_interface/firebase_core_platform_interface.dart",
    "package:firebase_core_web/firebase_core_web.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/firebase_core_web-1.7.0/lib/src/firebase_core_web.dart",
    "package:hive/src/crypto/aes_cbc_pkcs7.dart",
    "package:hive/src/crypto/crc32.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/hive_impl.dart",
    "package:hive/src/registry/type_registry_impl.dart",
    "package:hive/src/hive_impl.dart",
    "package:hive/src/object/hive_collection_mixin.dart",
    "package:hive/src/util/delegating_list_view_mixin.dart",
    "package:hive/src/object/hive_list_impl.dart",
    "package:hive/src/object/hive_object.dart",
    "package:hive/src/box_collection/box_collection_indexed_db.dart",
    "package:hive_flutter/src/stub/path_provider.dart",
    "package:cloud_firestore_platform_interface/src/platform_interface/platform_interface_load_bundle_task.dart",
    "package:cloud_firestore_web/src/load_bundle_task_web.dart",
    "package:firebase_core/firebase_core.dart",
    "package:cloud_firestore_platform_interface/src/platform_interface/platform_interface_query.dart",
    "package:cloud_firestore_web/src/query_web.dart",
    "package:cloud_firestore_web/src/collection_reference_web.dart",
    "package:cloud_firestore_platform_interface/src/platform_interface/platform_interface_field_value_factory.dart",
    "package:cloud_firestore_web/src/field_value_factory_web.dart",
    "package:cloud_firestore_platform_interface/src/platform_interface/platform_interface_document_reference.dart",
    "package:cloud_firestore_web/src/document_reference_web.dart",
    "package:cloud_firestore_platform_interface/src/platform_interface/platform_interface_transaction.dart",
    "package:cloud_firestore_web/src/transaction_web.dart",
    "package:cloud_firestore_platform_interface/src/platform_interface/platform_interface_write_batch.dart",
    "package:cloud_firestore_web/src/write_batch_web.dart",
    "package:firebase_core_web/src/interop/utils/js.dart",
    "package:cloud_firestore_web/src/interop/firestore.dart",
    "package:firebase_auth_platform_interface/src/platform_interface/platform_interface_confirmation_result.dart",
    "package:firebase_auth_web/src/firebase_auth_web_confirmation_result.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_web-4.0.0/lib/src/firebase_auth_web_recaptcha_verifier_factory.dart",
    "package:firebase_auth_platform_interface/src/platform_interface/platform_interface_recaptcha_verifier_factory.dart",
    "package:firebase_auth_web/src/firebase_auth_web_recaptcha_verifier_factory.dart",
    "package:firebase_auth_platform_interface/src/platform_interface/platform_interface_user.dart",
    "package:firebase_auth_web/src/firebase_auth_web_user.dart",
    "package:firebase_auth_platform_interface/src/platform_interface/platform_interface_user_credential.dart",
    "package:firebase_auth_web/src/firebase_auth_web_user_credential.dart",
    "package:firebase_auth_web/src/interop/auth.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_web-4.0.0/lib/src/interop/auth.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/firebase_core_platform_interface-4.4.3/lib/src/method_channel/method_channel_firebase.dart",
    "package:firebase_storage_platform_interface/src/platform_interface/platform_interface_firebase_storage.dart",
    "package:firebase_storage_web/src/firebase_storage_web.dart",
    "package:crypto/src/digest.dart",
    "package:crypto/src/hash.dart",
    "package:crypto/src/hmac.dart",
    "package:crypto/src/md5.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/crypto-3.0.3/lib/src/md5.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/crypto-3.0.3/lib/src/hash_sink.dart",
    "package:crypto/src/hash_sink.dart",
    "package:crypto/src/sha1.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/crypto-3.0.3/lib/src/sha1.dart",
    "package:crypto/src/sha256.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/crypto-3.0.3/lib/src/sha256.dart",
    "package:crypto/src/sha512.dart",
    "package:hive/src/crypto/aes_engine.dart",
    "package:hive/src/adapters/big_int_adapter.dart",
    "package:hive/src/adapters/date_time_adapter.dart",
    "package:hive/src/backend/storage_backend.dart",
    "package:hive/src/backend/storage_backend_memory.dart",
    "package:hive/src/box/box_base_impl.dart",
    "package:hive/src/box/box_impl.dart",
    "package:hive/src/box/lazy_box_impl.dart",
    "package:hive/src/box_collection/box_collection_stub.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/internal/pointer.dart",
    "package:cloud_firestore_platform_interface/src/internal/pointer.dart",
    "package:cloud_firestore_platform_interface/src/blob.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/field_path.dart",
    "package:cloud_firestore_platform_interface/src/field_path.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/geo_point.dart",
    "package:cloud_firestore_platform_interface/src/geo_point.dart",
    "package:cloud_firestore_platform_interface/src/platform_interface/platform_interface_collection_reference.dart",
    "package:cloud_firestore_platform_interface/src/platform_interface/platform_interface_document_change.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/platform_interface/platform_interface_document_snapshot.dart",
    "package:cloud_firestore_platform_interface/src/platform_interface/platform_interface_document_snapshot.dart",
    "package:cloud_firestore_platform_interface/src/platform_interface/platform_interface_field_value.dart",
    "package:cloud_firestore_platform_interface/src/platform_interface/platform_interface_query_snapshot.dart",
    "package:cloud_firestore_platform_interface/src/platform_interface/platform_interface_load_bundle_task_snapshot.dart",
    "package:cloud_firestore_platform_interface/src/snapshot_metadata.dart",
    "package:cloud_firestore_platform_interface/src/source.dart",
    "package:cloud_firestore_platform_interface/src/load_bundle_task_state.dart",
    "package:cloud_firestore_platform_interface/src/timestamp.dart",
    "package:cloud_firestore_platform_interface/src/settings.dart",
    "package:cloud_firestore_platform_interface/src/get_options.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/set_options.dart",
    "package:cloud_firestore_platform_interface/src/set_options.dart",
    "package:cloud_firestore_platform_interface/src/persistence_settings.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/firebase_core-1.19.2/lib/src/internals.dart",
    "package:cloud_firestore_web/src/utils/decode_utility.dart",
    "package:cloud_firestore_web/src/field_value_web.dart",
    "package:cloud_firestore_web/src/utils/encode_utility.dart",
    "package:firebase_auth_platform_interface/src/action_code_info.dart",
    "package:firebase_auth_platform_interface/src/action_code_settings.dart",
    "package:firebase_auth_platform_interface/src/additional_user_info.dart",
    "package:firebase_auth_platform_interface/src/auth_credential.dart",
    "package:firebase_auth_platform_interface/src/auth_provider.dart",
    "package:firebase_auth_platform_interface/src/firebase_auth_exception.dart",
    "package:firebase_auth_platform_interface/src/id_token_result.dart",
    "package:firebase_auth_platform_interface/src/providers/email_auth.dart",
    "package:firebase_auth_platform_interface/src/providers/facebook_auth.dart",
    "package:firebase_auth_platform_interface/src/providers/oauth.dart",
    "package:firebase_auth_platform_interface/src/providers/github_auth.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_platform_interface-6.3.2/lib/src/providers/google_auth.dart",
    "package:firebase_auth_platform_interface/src/providers/google_auth.dart",
    "package:firebase_auth_platform_interface/src/providers/phone_auth.dart",
    "package:firebase_auth_platform_interface/src/providers/saml_auth.dart",
    "package:firebase_auth_platform_interface/src/providers/twitter_auth.dart",
    "package:firebase_auth_platform_interface/src/types.dart",
    "package:firebase_auth_platform_interface/src/user_info.dart",
    "package:firebase_auth_platform_interface/src/user_metadata.dart",
    "package:firebase_core_platform_interface/src/pigeon/messages.pigeon.dart",
    "package:firebase_core_platform_interface/src/pigeon/mocks.dart",
    "package:firebase_core_platform_interface/src/pigeon/test_api.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/firebase_core_platform_interface-4.4.3/lib/src/pigeon/test_api.dart",
    "package:firebase_core_web/src/interop/app.dart",
    "package:firebase_storage_web/src/interop/storage.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/firebase_storage_web-3.3.0/lib/src/reference_web.dart",
    "package:firebase_storage_platform_interface/src/platform_interface/platform_interface_reference.dart",
    "package:firebase_storage_web/src/reference_web.dart",
    "package:crypto/src/digest_sink.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/crypto-3.0.3/lib/src/sha512_slowsinks.dart",
    "package:crypto/src/sha512_slowsinks.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/binary/frame.dart",
    "package:hive/src/binary/frame.dart",
    "package:hive/src/binary/frame_helper.dart",
    "package:hive/src/box/keystore.dart",
    "package:hive/src/box/change_notifier.dart",
    "package:hive/src/adapters/ignored_type_adapter.dart",
    "package:hive/src/backend/js/backend_manager.dart",
    "package:cloud_firestore_platform_interface/src/internal/field_path_type.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/method_channel/method_channel_firestore.dart",
    "package:cloud_firestore_platform_interface/src/method_channel/method_channel_firestore.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/method_channel/method_channel_field_value_factory.dart",
    "package:cloud_firestore_platform_interface/src/method_channel/method_channel_field_value_factory.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_platform_interface-6.3.2/lib/src/method_channel/method_channel_firebase_auth.dart",
    "package:firebase_auth_platform_interface/src/method_channel/method_channel_firebase_auth.dart",
    "package:http_parser/src/authentication_challenge.dart",
    "package:http_parser/src/case_insensitive_map.dart",
    "package:http_parser/src/chunked_coding.dart",
    "package:http_parser/src/media_type.dart",
    "package:firebase_storage_platform_interface/src/full_metadata.dart",
    "package:firebase_storage_platform_interface/src/list_options.dart",
    "package:firebase_storage_platform_interface/src/platform_interface/platform_interface_list_result.dart",
    "package:firebase_storage_platform_interface/src/platform_interface/platform_interface_task.dart",
    "package:firebase_storage_platform_interface/src/platform_interface/platform_interface_task_snapshot.dart",
    "package:firebase_storage_platform_interface/src/put_string_format.dart",
    "package:firebase_storage_platform_interface/src/settable_metadata.dart",
    "package:firebase_storage_platform_interface/src/task_state.dart",
    "package:firebase_storage_web/src/task_web.dart",
    "package:firebase_storage_web/src/utils/metadata_cache.dart",
    "package:hive/src/binary/binary_reader_impl.dart",
    "package:hive/src/util/indexable_skip_list.dart",
    "package:hive/src/backend/js/native/backend_manager.dart",
    "package:cloud_firestore_platform_interface/src/method_channel/method_channel_load_bundle_task.dart",
    "package:cloud_firestore_platform_interface/src/method_channel/method_channel_query_snapshot.dart",
    "package:cloud_firestore_platform_interface/src/method_channel/method_channel_query.dart",
    "package:cloud_firestore_platform_interface/src/method_channel/method_channel_collection_reference.dart",
    "package:cloud_firestore_platform_interface/src/method_channel/method_channel_document_reference.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/method_channel/method_channel_transaction.dart",
    "package:cloud_firestore_platform_interface/src/method_channel/method_channel_transaction.dart",
    "package:cloud_firestore_platform_interface/src/method_channel/method_channel_write_batch.dart",
    "package:cloud_firestore_platform_interface/src/method_channel/utils/firestore_message_codec.dart",
    "package:cloud_firestore_platform_interface/src/method_channel/method_channel_field_value.dart",
    "package:firebase_auth_platform_interface/src/method_channel/method_channel_user.dart",
    "package:firebase_auth_platform_interface/src/method_channel/method_channel_user_credential.dart",
    "package:http_parser/src/chunked_coding/decoder.dart",
    "package:http_parser/src/chunked_coding/encoder.dart",
    "package:firebase_storage_platform_interface/src/method_channel/method_channel_firebase_storage.dart",
    "package:firebase_storage_platform_interface/src/internal/pointer.dart",
    "package:http/src/client.dart",
    "package:http/src/exception.dart",
    "package:http/src/base_request.dart",
    "package:http/src/request.dart",
    "package:http/src/base_response.dart",
    "package:http/src/response.dart",
    "package:http/src/streamed_request.dart",
    "package:http/src/base_client.dart",
    "package:http/src/byte_stream.dart",
    "package:http/src/multipart_file.dart",
    "package:http/src/multipart_request.dart",
    "package:http/src/streamed_response.dart",
    "package:firebase_storage_web/src/list_result_web.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/typed_data-1.3.1/lib/src/typed_queue.dart",
    "package:typed_data/src/typed_queue.dart",
    "package:hive/src/backend/js/native/storage_backend_js.dart",
    "package:cloud_firestore_platform_interface/src/method_channel/method_channel_document_change.dart",
    "package:cloud_firestore_platform_interface/src/method_channel/utils/auto_id_generator.dart",
    "package:firebase_storage_platform_interface/src/method_channel/method_channel_reference.dart",
    "package:firebase_storage_platform_interface/src/method_channel/method_channel_task_snapshot.dart",
    "package:http/src/browser_client.dart",
    "package:firebase_storage_web/src/task_snapshot_web.dart",
    "package:typed_data/src/typed_buffer.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/binary/binary_writer_impl.dart",
    "package:hive/src/binary/binary_writer_impl.dart",
    "package:firebase_storage_platform_interface/src/method_channel/method_channel_list_result.dart",
    "package:firebase_storage_platform_interface/src/method_channel/method_channel_task.dart"
  ];
  $46zapp_entry.runAppGuarded = function runAppGuarded() {
    async.runZonedGuarded(core.Null, dart.fn(() => {
      if (T$.ListOfStringTodynamic().is(C[0] || CT.C0)) {
        T$.ListOfStringTodynamic().as(C[0] || CT.C0)(T$.JSArrayOfString().of([]));
      } else {
        (C[0] || CT.C0)();
      }
      if (js.context.hasProperty("__notifyFlutterRendered")) {
        async.Future.delayed(new core.Duration.new({milliseconds: 250})).then(core.Null, dart.fn(_ => {
          js.context.callMethod("__notifyFlutterRendered", [false]);
        }, T$.dynamicToNull()));
      }
    }, T$.VoidToNull()), dart.fn((e, stackTrace) => {
      if (js.context.hasProperty("zappHandlerUserError")) {
        js.context.callMethod("zappHandlerUserError", [e[S$.$toString](), stackTrace.toString()]);
      }
    }, T$.ObjectAndStackTraceTovoid()), {zoneSpecification: new async._ZoneSpecification.new({print: dart.fn((self, parent, zone, line) => {
          if (js.context.hasProperty("zappHandlerUserPrint")) {
            js.context.callMethod("zappHandlerUserPrint", [line]);
          }
        }, T$.ZoneAndZoneDelegateAndZone__Tovoid())})});
  };
  $46zapp_entry.main = function main$() {
    return async.async(dart.void, function* main() {
      yield ui.webOnlyWarmupEngine({runApp: dart.fn(() => {
          $46zapp_entry.runAppGuarded();
        }, T$.VoidToNull()), registerPlugins: dart.fn(() => {
          web_plugin_registrant.registerPlugins();
        }, T$.VoidToNull())});
    });
  };
  main.MyApp = class MyApp extends framework.StatelessWidget {
    build(context) {
      return new app.MaterialApp.new({title: "User Login Page", theme: theme_data.ThemeData.new({primarySwatch: colors.Colors.deepPurple, useMaterial3: true}), debugShowCheckedModeBanner: false, home: new main.CheckFirstTimeLogin.new()});
    }
    static ['_#new#tearOff']() {
      return new main.MyApp.new();
    }
  };
  (main.MyApp.new = function() {
    main.MyApp.__proto__.new.call(this);
    ;
  }).prototype = main.MyApp.prototype;
  dart.addTypeTests(main.MyApp);
  dart.addTypeCaches(main.MyApp);
  dart.setMethodSignature(main.MyApp, () => ({
    __proto__: dart.getMethods(main.MyApp.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.MyApp, I[0]);
  main.CheckFirstTimeLogin = class CheckFirstTimeLogin extends framework.StatelessWidget {
    build(context) {
      let userBox = hive.Hive.box(core.String, "userBox");
      let isFirstTimeLogin = userBox.get("username") == null;
      return isFirstTimeLogin ? new main.FirstTimeLoginPage.new() : new mainpage.MyApp2.new();
    }
    static ['_#new#tearOff']() {
      return new main.CheckFirstTimeLogin.new();
    }
  };
  (main.CheckFirstTimeLogin.new = function() {
    main.CheckFirstTimeLogin.__proto__.new.call(this);
    ;
  }).prototype = main.CheckFirstTimeLogin.prototype;
  dart.addTypeTests(main.CheckFirstTimeLogin);
  dart.addTypeCaches(main.CheckFirstTimeLogin);
  dart.setMethodSignature(main.CheckFirstTimeLogin, () => ({
    __proto__: dart.getMethods(main.CheckFirstTimeLogin.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.CheckFirstTimeLogin, I[0]);
  main.FirstTimeLoginPage = class FirstTimeLoginPage extends framework.StatelessWidget {
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Welcome!")}), body: new single_child_scroll_view.SingleChildScrollView.new({padding: new edge_insets.EdgeInsets.all(20), child: new basic.Column.new({mainAxisAlignment: flex.MainAxisAlignment.center, children: T$.JSArrayOfWidget().of([new basic.SizedBox.new({height: 100}), new text_field.TextField.new({controller: this[S$._usernameController], decoration: new input_decorator.InputDecoration.new({labelText: "Enter your username", border: new input_border.OutlineInputBorder.new({borderRadius: new border_radius.BorderRadius.circular(12)})})}), new basic.SizedBox.new({height: 20}), new basic.SizedBox.new({width: 1 / 0, child: new outlined_button.OutlinedButton.new({onPressed: dart.fn(() => {
                    let username = this[S$._usernameController].text;
                    if (username[S$.$isNotEmpty]) {
                      let userBox = hive.Hive.box(core.String, "userBox");
                      userBox.put("username", username);
                      navigator.Navigator.pushReplacement(dart.dynamic, T$.ObjectN(), context, new page.MaterialPageRoute.new({builder: dart.fn(context => new main.SecondPage.new(), T$.BuildContextToSecondPage())}));
                    }
                  }, T$.VoidTovoid()), child: new basic.Padding.new({padding: C[1] || CT.C1, child: new text.Text.new("Let's Get Started", {style: new text_style.TextStyle.new({fontSize: 20})})}), style: elevated_button.ElevatedButton.styleFrom({shape: new rounded_rectangle_border.RoundedRectangleBorder.new({borderRadius: new border_radius.BorderRadius.circular(20)})})})})])})})});
    }
    static ['_#new#tearOff']() {
      return new main.FirstTimeLoginPage.new();
    }
  };
  (main.FirstTimeLoginPage.new = function() {
    this[S$._usernameController] = new editable_text.TextEditingController.new();
    main.FirstTimeLoginPage.__proto__.new.call(this);
    ;
  }).prototype = main.FirstTimeLoginPage.prototype;
  dart.addTypeTests(main.FirstTimeLoginPage);
  dart.addTypeCaches(main.FirstTimeLoginPage);
  dart.setMethodSignature(main.FirstTimeLoginPage, () => ({
    __proto__: dart.getMethods(main.FirstTimeLoginPage.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.FirstTimeLoginPage, I[0]);
  dart.setFieldSignature(main.FirstTimeLoginPage, () => ({
    __proto__: dart.getFields(main.FirstTimeLoginPage.__proto__),
    [S$._usernameController]: dart.finalFieldType(editable_text.TextEditingController)
  }));
  main.SecondPage = class SecondPage extends framework.StatelessWidget {
    build(context) {
      let userBox = hive.Hive.box(core.String, "userBox");
      let username = userBox.get("username", {defaultValue: ""});
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Welcome " + dart.str(username))}), body: new basic.Center.new({child: new text.Text.new("This is the second page. You have logged in before as " + dart.str(username), {textAlign: ui.TextAlign.center})})});
    }
    static ['_#new#tearOff']() {
      return new main.SecondPage.new();
    }
  };
  (main.SecondPage.new = function() {
    main.SecondPage.__proto__.new.call(this);
    ;
  }).prototype = main.SecondPage.prototype;
  dart.addTypeTests(main.SecondPage);
  dart.addTypeCaches(main.SecondPage);
  dart.setMethodSignature(main.SecondPage, () => ({
    __proto__: dart.getMethods(main.SecondPage.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.SecondPage, I[0]);
  main.main = function main$0() {
    return async.async(dart.void, function* main$() {
      yield hive_flutter['HiveX|initFlutter'](hive.Hive);
      yield hive.Hive.openBox(core.String, "userBox");
      binding.runApp(new main.MyApp.new());
    });
  };
  web_plugin_registrant.registerPlugins = function registerPlugins(pluginRegistrar = null) {
    let t0;
    let registrar = (t0 = pluginRegistrar, t0 == null ? plugin_registry.webPluginRegistrar : t0);
    cloud_firestore_web.FirebaseFirestoreWeb.registerWith(registrar);
    firebase_auth_web.FirebaseAuthWeb.registerWith(registrar);
    firebase_core_web.FirebaseCoreWeb.registerWith(registrar);
    firebase_storage_web$.FirebaseStorageWeb.registerWith(registrar);
    registrar.registerMessageHandler();
  };
  hive.HiveField = class HiveField extends core.Object {
    get index() {
      return this[S$.index];
    }
    set index(value) {
      super.index = value;
    }
    get defaultValue() {
      return this[S$.defaultValue];
    }
    set defaultValue(value) {
      super.defaultValue = value;
    }
    static ['_#new#tearOff'](index, opts) {
      let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : null;
      return new hive.HiveField.new(index, {defaultValue: defaultValue});
    }
  };
  (hive.HiveField.new = function(index, opts) {
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : null;
    this[S$.index] = index;
    this[S$.defaultValue] = defaultValue;
    ;
  }).prototype = hive.HiveField.prototype;
  dart.addTypeTests(hive.HiveField);
  dart.addTypeCaches(hive.HiveField);
  dart.setLibraryUri(hive.HiveField, I[1]);
  dart.setFieldSignature(hive.HiveField, () => ({
    __proto__: dart.getFields(hive.HiveField.__proto__),
    index: dart.finalFieldType(core.int),
    defaultValue: dart.finalFieldType(dart.dynamic)
  }));
  hive.HiveType = class HiveType extends core.Object {
    get typeId() {
      return this[S$.typeId];
    }
    set typeId(value) {
      super.typeId = value;
    }
    get adapterName() {
      return this[S$.adapterName];
    }
    set adapterName(value) {
      super.adapterName = value;
    }
    static ['_#new#tearOff'](opts) {
      let typeId = opts && 'typeId' in opts ? opts.typeId : null;
      let adapterName = opts && 'adapterName' in opts ? opts.adapterName : null;
      return new hive.HiveType.new({typeId: typeId, adapterName: adapterName});
    }
  };
  (hive.HiveType.new = function(opts) {
    let typeId = opts && 'typeId' in opts ? opts.typeId : null;
    let adapterName = opts && 'adapterName' in opts ? opts.adapterName : null;
    this[S$.typeId] = typeId;
    this[S$.adapterName] = adapterName;
    ;
  }).prototype = hive.HiveType.prototype;
  dart.addTypeTests(hive.HiveType);
  dart.addTypeCaches(hive.HiveType);
  dart.setLibraryUri(hive.HiveType, I[1]);
  dart.setFieldSignature(hive.HiveType, () => ({
    __proto__: dart.getFields(hive.HiveType.__proto__),
    typeId: dart.finalFieldType(core.int),
    adapterName: dart.finalFieldType(dart.nullable(core.String))
  }));
  hive.BinaryReader = class BinaryReader extends core.Object {};
  (hive.BinaryReader.new = function() {
    ;
  }).prototype = hive.BinaryReader.prototype;
  dart.addTypeTests(hive.BinaryReader);
  dart.addTypeCaches(hive.BinaryReader);
  dart.setLibraryUri(hive.BinaryReader, I[1]);
  dart.setStaticFieldSignature(hive.BinaryReader, () => ['utf8Decoder']);
  dart.defineLazy(hive.BinaryReader, {
    /*hive.BinaryReader.utf8Decoder*/get utf8Decoder() {
      return C[2] || CT.C2;
    }
  }, false);
  hive.BinaryWriter = class BinaryWriter extends core.Object {};
  (hive.BinaryWriter.new = function() {
    ;
  }).prototype = hive.BinaryWriter.prototype;
  dart.addTypeTests(hive.BinaryWriter);
  dart.addTypeCaches(hive.BinaryWriter);
  dart.setLibraryUri(hive.BinaryWriter, I[1]);
  dart.setStaticFieldSignature(hive.BinaryWriter, () => ['utf8Encoder']);
  dart.defineLazy(hive.BinaryWriter, {
    /*hive.BinaryWriter.utf8Encoder*/get utf8Encoder() {
      return C[3] || CT.C3;
    }
  }, false);
  const _is_Box_default = Symbol('_is_Box_default');
  hive.Box$ = dart.generic(E => {
    class Box extends core.Object {}
    (Box.new = function() {
      ;
    }).prototype = Box.prototype;
    dart.addTypeTests(Box);
    Box.prototype[_is_Box_default] = true;
    dart.addTypeCaches(Box);
    Box[dart.implements] = () => [hive.BoxBase$(E)];
    dart.setLibraryUri(Box, I[1]);
    return Box;
  });
  hive.Box = hive.Box$();
  dart.addTypeTests(hive.Box, _is_Box_default);
  hive.BoxEvent = class BoxEvent extends core.Object {
    get key() {
      return this[S$.key];
    }
    set key(value) {
      super.key = value;
    }
    get value() {
      return this[S$.value];
    }
    set value(value) {
      super.value = value;
    }
    get deleted() {
      return this[S$.deleted];
    }
    set deleted(value) {
      super.deleted = value;
    }
    static ['_#new#tearOff'](key, value, deleted) {
      return new hive.BoxEvent.new(key, value, deleted);
    }
    _equals(other) {
      if (other == null) return false;
      if (hive.BoxEvent.is(other)) {
        return dart.equals(other.key, this.key) && dart.equals(other.value, this.value);
      }
      return false;
    }
    get hashCode() {
      return (this[S$.$runtimeType].hashCode ^ dart.hashCode(this.key) ^ dart.hashCode(this.value)) >>> 0;
    }
  };
  (hive.BoxEvent.new = function(key, value, deleted) {
    this[S$.key] = key;
    this[S$.value] = value;
    this[S$.deleted] = deleted;
    ;
  }).prototype = hive.BoxEvent.prototype;
  dart.addTypeTests(hive.BoxEvent);
  dart.addTypeCaches(hive.BoxEvent);
  dart.setMethodSignature(hive.BoxEvent, () => ({
    __proto__: dart.getMethods(hive.BoxEvent.__proto__),
    _equals: dart.fnType(core.bool, [dart.dynamic]),
    [S$.$_equals]: dart.fnType(core.bool, [dart.dynamic])
  }));
  dart.setLibraryUri(hive.BoxEvent, I[1]);
  dart.setFieldSignature(hive.BoxEvent, () => ({
    __proto__: dart.getFields(hive.BoxEvent.__proto__),
    key: dart.finalFieldType(dart.dynamic),
    value: dart.finalFieldType(dart.dynamic),
    deleted: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(hive.BoxEvent, ['_equals']);
  dart.defineExtensionAccessors(hive.BoxEvent, ['hashCode']);
  const _is_BoxBase_default = Symbol('_is_BoxBase_default');
  hive.BoxBase$ = dart.generic(E => {
    class BoxBase extends core.Object {}
    (BoxBase.new = function() {
      ;
    }).prototype = BoxBase.prototype;
    dart.addTypeTests(BoxBase);
    BoxBase.prototype[_is_BoxBase_default] = true;
    dart.addTypeCaches(BoxBase);
    dart.setLibraryUri(BoxBase, I[1]);
    return BoxBase;
  });
  hive.BoxBase = hive.BoxBase$();
  dart.addTypeTests(hive.BoxBase, _is_BoxBase_default);
  const _is_LazyBox_default = Symbol('_is_LazyBox_default');
  hive.LazyBox$ = dart.generic(E => {
    class LazyBox extends hive.BoxBase$(E) {}
    (LazyBox.new = function() {
      ;
    }).prototype = LazyBox.prototype;
    dart.addTypeTests(LazyBox);
    LazyBox.prototype[_is_LazyBox_default] = true;
    dart.addTypeCaches(LazyBox);
    dart.setLibraryUri(LazyBox, I[1]);
    return LazyBox;
  });
  hive.LazyBox = hive.LazyBox$();
  dart.addTypeTests(hive.LazyBox, _is_LazyBox_default);
  hive.HiveAesCipher = class HiveAesCipher extends core.Object {
    get [S$._cipher]() {
      let t0;
      t0 = this[S$.__HiveAesCipher__cipher];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("_cipher")) : t0;
    }
    set [S$._cipher](_cipher$35param) {
      if (this[S$.__HiveAesCipher__cipher] == null)
        this[S$.__HiveAesCipher__cipher] = _cipher$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("_cipher"));
    }
    get [S$._keyCrc]() {
      let t0;
      t0 = this[S$.__HiveAesCipher__keyCrc];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("_keyCrc")) : t0;
    }
    set [S$._keyCrc](_keyCrc$35param) {
      if (this[S$.__HiveAesCipher__keyCrc] == null)
        this[S$.__HiveAesCipher__keyCrc] = _keyCrc$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("_keyCrc"));
    }
    static ['_#new#tearOff'](key) {
      return new hive.HiveAesCipher.new(key);
    }
    calculateKeyCrc() {
      return this[S$._keyCrc];
    }
    decrypt(inp, inpOff, inpLength, out, outOff) {
      let iv = extensions['Uint8ListX|view'](inp, inpOff, 16);
      return this[S$._cipher].decrypt(iv, inp, inpOff + 16, inpLength - 16, out, 0);
    }
    generateIv() {
      return extensions['RandomX|nextBytes'](hive.HiveAesCipher._ivRandom, 16);
    }
    encrypt(inp, inpOff, inpLength, out, outOff) {
      let iv = this.generateIv();
      out[S$.$setAll](outOff, iv);
      let len = this[S$._cipher].encrypt(iv, inp, 0, inpLength, out, outOff + 16);
      return len + 16;
    }
    maxEncryptedSize(inp) {
      return inp[S$.$length] + 32;
    }
  };
  (hive.HiveAesCipher.new = function(key) {
    this[S$.__HiveAesCipher__cipher] = null;
    this[S$.__HiveAesCipher__keyCrc] = null;
    if (key[S$.$length] !== 32 || key[S$.$any](dart.fn(it => it < 0 || it > 255, T$.intTobool()))) {
      dart.throw(new core.ArgumentError.new("The encryption key has to be a 32 byte (256 bit) array."));
    }
    let keyBytes = _native_typed_data.NativeUint8List.fromList(key);
    this[S$._cipher] = new aes_cbc_pkcs7.AesCbcPkcs7.new(keyBytes);
    this[S$._keyCrc] = crc32.Crc32.compute(typed_data.Uint8List.as(sha256.sha256.convert(keyBytes).bytes));
  }).prototype = hive.HiveAesCipher.prototype;
  dart.addTypeTests(hive.HiveAesCipher);
  dart.addTypeCaches(hive.HiveAesCipher);
  hive.HiveAesCipher[dart.implements] = () => [hive.HiveCipher];
  dart.setMethodSignature(hive.HiveAesCipher, () => ({
    __proto__: dart.getMethods(hive.HiveAesCipher.__proto__),
    calculateKeyCrc: dart.fnType(core.int, []),
    decrypt: dart.fnType(core.int, [typed_data.Uint8List, core.int, core.int, typed_data.Uint8List, core.int]),
    generateIv: dart.fnType(typed_data.Uint8List, []),
    encrypt: dart.fnType(core.int, [typed_data.Uint8List, core.int, core.int, typed_data.Uint8List, core.int]),
    maxEncryptedSize: dart.fnType(core.int, [typed_data.Uint8List])
  }));
  dart.setGetterSignature(hive.HiveAesCipher, () => ({
    __proto__: dart.getGetters(hive.HiveAesCipher.__proto__),
    [S$._cipher]: aes_cbc_pkcs7.AesCbcPkcs7,
    [S$._keyCrc]: core.int
  }));
  dart.setSetterSignature(hive.HiveAesCipher, () => ({
    __proto__: dart.getSetters(hive.HiveAesCipher.__proto__),
    [S$._cipher]: aes_cbc_pkcs7.AesCbcPkcs7,
    [S$._keyCrc]: core.int
  }));
  dart.setLibraryUri(hive.HiveAesCipher, I[1]);
  dart.setFieldSignature(hive.HiveAesCipher, () => ({
    __proto__: dart.getFields(hive.HiveAesCipher.__proto__),
    [S$.__HiveAesCipher__cipher]: dart.fieldType(dart.nullable(aes_cbc_pkcs7.AesCbcPkcs7)),
    [S$.__HiveAesCipher__keyCrc]: dart.fieldType(dart.nullable(core.int))
  }));
  dart.setStaticFieldSignature(hive.HiveAesCipher, () => ['_ivRandom']);
  dart.defineLazy(hive.HiveAesCipher, {
    /*hive.HiveAesCipher._ivRandom*/get _ivRandom() {
      return math.Random.secure();
    }
  }, false);
  hive.HiveCipher = class HiveCipher extends core.Object {};
  (hive.HiveCipher.new = function() {
    ;
  }).prototype = hive.HiveCipher.prototype;
  dart.addTypeTests(hive.HiveCipher);
  dart.addTypeCaches(hive.HiveCipher);
  dart.setLibraryUri(hive.HiveCipher, I[1]);
  hive.HiveInterface = class HiveInterface extends core.Object {};
  (hive.HiveInterface.new = function() {
    ;
  }).prototype = hive.HiveInterface.prototype;
  dart.addTypeTests(hive.HiveInterface);
  dart.addTypeCaches(hive.HiveInterface);
  hive.HiveInterface[dart.implements] = () => [hive.TypeRegistry];
  dart.setLibraryUri(hive.HiveInterface, I[1]);
  hive.HiveError = class HiveError extends core.Error {
    get message() {
      return this[S$.message];
    }
    set message(value) {
      super.message = value;
    }
    static ['_#new#tearOff'](message) {
      return new hive.HiveError.new(message);
    }
    toString() {
      return "HiveError: " + this.message;
    }
  };
  (hive.HiveError.new = function(message) {
    this[S$.message] = message;
    hive.HiveError.__proto__.new.call(this);
    ;
  }).prototype = hive.HiveError.prototype;
  dart.addTypeTests(hive.HiveError);
  dart.addTypeCaches(hive.HiveError);
  dart.setLibraryUri(hive.HiveError, I[1]);
  dart.setFieldSignature(hive.HiveError, () => ({
    __proto__: dart.getFields(hive.HiveError.__proto__),
    message: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(hive.HiveError, ['toString']);
  const _is_HiveCollection_default = Symbol('_is_HiveCollection_default');
  hive.HiveCollection$ = dart.generic(E => {
    class HiveCollection extends core.Object {
      [Symbol.iterator]() {
        return new dart.JsIterator(this[S$.$iterator]);
      }
    }
    (HiveCollection.new = function() {
      ;
    }).prototype = HiveCollection.prototype;
    HiveCollection.prototype[dart.isList] = true;
    dart.addTypeTests(HiveCollection);
    HiveCollection.prototype[_is_HiveCollection_default] = true;
    dart.addTypeCaches(HiveCollection);
    HiveCollection[dart.implements] = () => [core.List$(E)];
    dart.setLibraryUri(HiveCollection, I[1]);
    return HiveCollection;
  });
  hive.HiveCollection = hive.HiveCollection$();
  dart.addTypeTests(hive.HiveCollection, _is_HiveCollection_default);
  const _is_HiveList_default = Symbol('_is_HiveList_default');
  hive.HiveList$ = dart.generic(E => {
    class HiveList extends hive.HiveCollection$(E) {
      static new(box, opts) {
        let objects = opts && 'objects' in opts ? opts.objects : null;
        return new (hive_list_impl.HiveListImpl$(E)).new(box, {objects: objects});
      }
      static ['_#new#tearOff'](E, box, opts) {
        let objects = opts && 'objects' in opts ? opts.objects : null;
        return hive.HiveList$(E).new(box, {objects: objects});
      }
    }
    HiveList.prototype[dart.isList] = true;
    dart.addTypeTests(HiveList);
    HiveList.prototype[_is_HiveList_default] = true;
    dart.addTypeCaches(HiveList);
    HiveList[dart.implements] = () => [core.List$(E)];
    dart.setStaticMethodSignature(HiveList, () => ['new']);
    dart.setLibraryUri(HiveList, I[1]);
    return HiveList;
  });
  hive.HiveList = hive.HiveList$();
  dart.addTypeTests(hive.HiveList, _is_HiveList_default);
  hive.HiveStorageBackendPreference = class HiveStorageBackendPreference extends core._Enum {
    [S$._enumToString]() {
      return "HiveStorageBackendPreference." + this[S$._name];
    }
  };
  (hive.HiveStorageBackendPreference.new = function(index, name) {
    hive.HiveStorageBackendPreference.__proto__.new.call(this, index, name);
    ;
  }).prototype = hive.HiveStorageBackendPreference.prototype;
  dart.addTypeTests(hive.HiveStorageBackendPreference);
  dart.addTypeCaches(hive.HiveStorageBackendPreference);
  dart.setMethodSignature(hive.HiveStorageBackendPreference, () => ({
    __proto__: dart.getMethods(hive.HiveStorageBackendPreference.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(hive.HiveStorageBackendPreference, I[1]);
  dart.setStaticFieldSignature(hive.HiveStorageBackendPreference, () => ['values', 'native', 'webWorker']);
  dart.defineLazy(hive.HiveStorageBackendPreference, {
    /*hive.HiveStorageBackendPreference.values*/get values() {
      return C[4] || CT.C4;
    },
    /*hive.HiveStorageBackendPreference.native*/get native() {
      return C[5] || CT.C5;
    },
    /*hive.HiveStorageBackendPreference.webWorker*/get webWorker() {
      return C[6] || CT.C6;
    }
  }, false);
  const _is_TypeAdapter_default = Symbol('_is_TypeAdapter_default');
  hive.TypeAdapter$ = dart.generic(T => {
    class TypeAdapter extends core.Object {}
    (TypeAdapter.new = function() {
      ;
    }).prototype = TypeAdapter.prototype;
    dart.addTypeTests(TypeAdapter);
    TypeAdapter.prototype[_is_TypeAdapter_default] = true;
    dart.addTypeCaches(TypeAdapter);
    dart.setLibraryUri(TypeAdapter, I[1]);
    return TypeAdapter;
  });
  hive.TypeAdapter = hive.TypeAdapter$();
  dart.addTypeTests(hive.TypeAdapter, _is_TypeAdapter_default);
  hive.TypeRegistry = class TypeRegistry extends core.Object {};
  (hive.TypeRegistry.new = function() {
    ;
  }).prototype = hive.TypeRegistry.prototype;
  dart.addTypeTests(hive.TypeRegistry);
  dart.addTypeCaches(hive.TypeRegistry);
  dart.setLibraryUri(hive.TypeRegistry, I[1]);
  dart.defineLazy(hive, {
    /*hive.Hive*/get Hive() {
      return new hive_impl.HiveImpl.new();
    }
  }, false);
  const _is__BoxListenable_default = Symbol('_is__BoxListenable_default');
  hive_flutter._BoxListenable$ = dart.generic((T, B) => {
    class _BoxListenable extends change_notifier.ValueListenable$(B) {
      static ['_#new#tearOff'](T, B, box, keys) {
        return new (hive_flutter._BoxListenable$(T, B)).new(box, keys);
      }
      addListener(listener) {
        if (this[S$._listeners][S$.$isEmpty]) {
          if (this.keys != null) {
            this[S$._subscription] = this.box.watch().listen(dart.fn(event => {
              if (dart.nullCheck(this.keys).contains(event.key)) {
                for (let listener of this[S$._listeners]) {
                  listener();
                }
              }
            }, T$.BoxEventTovoid()));
          } else {
            this[S$._subscription] = this.box.watch().listen(dart.fn(_ => {
              for (let listener of this[S$._listeners]) {
                listener();
              }
            }, T$.BoxEventTovoid()));
          }
        }
        this[S$._listeners][S$.$add](listener);
      }
      removeListener(listener) {
        let t2;
        this[S$._listeners][S$.$remove](listener);
        if (this[S$._listeners][S$.$isEmpty]) {
          t2 = this[S$._subscription];
          t2 == null ? null : t2.cancel();
          this[S$._subscription] = null;
        }
      }
      get value() {
        return this.box;
      }
    }
    (_BoxListenable.new = function(box, keys) {
      this[S$._listeners] = T$.JSArrayOfVoidTovoid().of([]);
      this[S$._subscription] = null;
      this.box = box;
      this.keys = keys;
      _BoxListenable.__proto__.new.call(this);
      ;
    }).prototype = _BoxListenable.prototype;
    dart.addTypeTests(_BoxListenable);
    _BoxListenable.prototype[_is__BoxListenable_default] = true;
    dart.addTypeCaches(_BoxListenable);
    dart.setMethodSignature(_BoxListenable, () => ({
      __proto__: dart.getMethods(_BoxListenable.__proto__),
      addListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
      removeListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])])
    }));
    dart.setGetterSignature(_BoxListenable, () => ({
      __proto__: dart.getGetters(_BoxListenable.__proto__),
      value: B
    }));
    dart.setLibraryUri(_BoxListenable, I[2]);
    dart.setFieldSignature(_BoxListenable, () => ({
      __proto__: dart.getFields(_BoxListenable.__proto__),
      box: dart.finalFieldType(B),
      keys: dart.finalFieldType(dart.nullable(core.Set)),
      [S$._listeners]: dart.finalFieldType(core.List$(dart.fnType(dart.void, []))),
      [S$._subscription]: dart.fieldType(dart.nullable(async.StreamSubscription))
    }));
    return _BoxListenable;
  });
  hive_flutter._BoxListenable = hive_flutter._BoxListenable$();
  dart.addTypeTests(hive_flutter._BoxListenable, _is__BoxListenable_default);
  hive_flutter.WatchBoxBuilder = class WatchBoxBuilder extends framework.StatefulWidget {
    get box() {
      return this[S$.box];
    }
    set box(value) {
      super.box = value;
    }
    get builder() {
      return this[S$.builder];
    }
    set builder(value) {
      super.builder = value;
    }
    get watchKeys() {
      return this[S$.watchKeys];
    }
    set watchKeys(value) {
      super.watchKeys = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let box = opts && 'box' in opts ? opts.box : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let watchKeys = opts && 'watchKeys' in opts ? opts.watchKeys : null;
      return new hive_flutter.WatchBoxBuilder.new({key: key, box: box, builder: builder, watchKeys: watchKeys});
    }
    createState() {
      return new hive_flutter._WatchBoxBuilderState.new();
    }
  };
  (hive_flutter.WatchBoxBuilder.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let box = opts && 'box' in opts ? opts.box : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let watchKeys = opts && 'watchKeys' in opts ? opts.watchKeys : null;
    this[S$.box] = box;
    this[S$.builder] = builder;
    this[S$.watchKeys] = watchKeys;
    hive_flutter.WatchBoxBuilder.__proto__.new.call(this, {key: key});
    ;
  }).prototype = hive_flutter.WatchBoxBuilder.prototype;
  dart.addTypeTests(hive_flutter.WatchBoxBuilder);
  dart.addTypeCaches(hive_flutter.WatchBoxBuilder);
  dart.setMethodSignature(hive_flutter.WatchBoxBuilder, () => ({
    __proto__: dart.getMethods(hive_flutter.WatchBoxBuilder.__proto__),
    createState: dart.fnType(hive_flutter._WatchBoxBuilderState, [])
  }));
  dart.setLibraryUri(hive_flutter.WatchBoxBuilder, I[2]);
  dart.setFieldSignature(hive_flutter.WatchBoxBuilder, () => ({
    __proto__: dart.getFields(hive_flutter.WatchBoxBuilder.__proto__),
    box: dart.finalFieldType(hive.Box),
    builder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, hive.Box])),
    watchKeys: dart.finalFieldType(dart.nullable(core.List$(core.String)))
  }));
  hive_flutter._WatchBoxBuilderState = class _WatchBoxBuilderState extends framework.State$(hive_flutter.WatchBoxBuilder) {
    initState() {
      super.initState();
      this[S$._subscribe]();
    }
    didUpdateWidget(oldWidget) {
      hive_flutter.WatchBoxBuilder.as(oldWidget);
      super.didUpdateWidget(oldWidget);
      if (!this.widget.box[S$.$_equals](oldWidget.box)) {
        this[S$._unsubscribe]();
        this[S$._subscribe]();
      }
    }
    [S$._subscribe]() {
      this.subscription = this.widget.box.watch().listen(dart.fn(event => {
        if (this.widget.watchKeys != null && !dart.nullCheck(this.widget.watchKeys)[S$.$contains](event.key)) {
          return;
        }
        this.setState(dart.fn(() => {
        }, T$.VoidTovoid()));
      }, T$.BoxEventTovoid()));
    }
    [S$._unsubscribe]() {
      let t2;
      t2 = this.subscription;
      t2 == null ? null : t2.cancel();
    }
    build(context) {
      let t4, t3, t2;
      t2 = this.widget;
      t3 = context;
      t4 = this.widget.box;
      return t2.builder(t3, t4);
    }
    dispose() {
      this[S$._unsubscribe]();
      super.dispose();
    }
    static ['_#new#tearOff']() {
      return new hive_flutter._WatchBoxBuilderState.new();
    }
  };
  (hive_flutter._WatchBoxBuilderState.new = function() {
    this.subscription = null;
    hive_flutter._WatchBoxBuilderState.__proto__.new.call(this);
    ;
  }).prototype = hive_flutter._WatchBoxBuilderState.prototype;
  dart.addTypeTests(hive_flutter._WatchBoxBuilderState);
  dart.addTypeCaches(hive_flutter._WatchBoxBuilderState);
  dart.setMethodSignature(hive_flutter._WatchBoxBuilderState, () => ({
    __proto__: dart.getMethods(hive_flutter._WatchBoxBuilderState.__proto__),
    [S$._subscribe]: dart.fnType(dart.void, []),
    [S$._unsubscribe]: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(hive_flutter._WatchBoxBuilderState, I[2]);
  dart.setFieldSignature(hive_flutter._WatchBoxBuilderState, () => ({
    __proto__: dart.getFields(hive_flutter._WatchBoxBuilderState.__proto__),
    subscription: dart.fieldType(dart.nullable(async.StreamSubscription))
  }));
  hive_flutter['BoxX|listenable'] = function BoxX$124listenable(T, $this, opts) {
    let t3;
    let keys = opts && 'keys' in opts ? opts.keys : null;
    return new (hive_flutter._BoxListenable$(dart.dynamic, hive.Box$(T))).new($this, (t3 = keys, t3 == null ? null : t3[S$.$toSet]()));
  };
  hive_flutter['BoxX|get#listenable'] = function BoxX$124get$35listenable(T, $this) {
    return dart.fn(opts => {
      let keys = opts && 'keys' in opts ? opts.keys : null;
      return hive_flutter['BoxX|listenable'](T, $this, {keys: keys});
    }, dart.fnType(change_notifier.ValueListenable$(hive.Box$(T)), [], {keys: T$.ListN()}, {}));
  };
  hive_flutter['LazyBoxX|listenable'] = function LazyBoxX$124listenable(T, $this, opts) {
    let t5;
    let keys = opts && 'keys' in opts ? opts.keys : null;
    return new (hive_flutter._BoxListenable$(dart.dynamic, hive.LazyBox$(T))).new($this, (t5 = keys, t5 == null ? null : t5[S$.$toSet]()));
  };
  hive_flutter['LazyBoxX|get#listenable'] = function LazyBoxX$124get$35listenable(T, $this) {
    return dart.fn(opts => {
      let keys = opts && 'keys' in opts ? opts.keys : null;
      return hive_flutter['LazyBoxX|listenable'](T, $this, {keys: keys});
    }, dart.fnType(change_notifier.ValueListenable$(hive.LazyBox$(T)), [], {keys: T$.ListN()}, {}));
  };
  hive_flutter['HiveX|initFlutter'] = function HiveX$124initFlutter($this, subDir = null) {
    return async.async(dart.void, function* HiveX$124initFlutter() {
      binding.WidgetsFlutterBinding.ensureInitialized();
      return;
      let appDir = (yield path_provider.getApplicationDocumentsDirectory());
      $this.init(path.join(appDir.path, subDir));
    });
  };
  hive_flutter['HiveX|get#initFlutter'] = function HiveX$124get$35initFlutter($this) {
    return dart.fn((subDir = null) => hive_flutter['HiveX|initFlutter']($this, subDir), T$.StringNToFutureOfvoid());
  };
  firstlime.BoardMoneyPage = class BoardMoneyPage extends framework.StatefulWidget {
    createState() {
      return new firstlime._BoardMoneyPageState.new();
    }
    static ['_#new#tearOff']() {
      return new firstlime.BoardMoneyPage.new();
    }
  };
  (firstlime.BoardMoneyPage.new = function() {
    firstlime.BoardMoneyPage.__proto__.new.call(this);
    ;
  }).prototype = firstlime.BoardMoneyPage.prototype;
  dart.addTypeTests(firstlime.BoardMoneyPage);
  dart.addTypeCaches(firstlime.BoardMoneyPage);
  dart.setMethodSignature(firstlime.BoardMoneyPage, () => ({
    __proto__: dart.getMethods(firstlime.BoardMoneyPage.__proto__),
    createState: dart.fnType(firstlime._BoardMoneyPageState, [])
  }));
  dart.setLibraryUri(firstlime.BoardMoneyPage, I[3]);
  firstlime._BoardMoneyPageState = class _BoardMoneyPageState extends framework.State$(firstlime.BoardMoneyPage) {
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Board Money"), actions: T$.JSArrayOfWidget().of([new icon_button.IconButton.new({icon: new icon.Icon.new(icons.Icons.account_circle), onPressed: dart.fn(() => {
                bottom_sheet.showModalBottomSheet(dart.dynamic, {context: context, builder: dart.fn(context => new safe_area.SafeArea.new({child: new basic.Column.new({mainAxisSize: flex.MainAxisSize.min, children: T$.JSArrayOfWidget().of([new list_tile.ListTile.new({title: new text.Text.new("Edit Username"), onTap: dart.fn(() => {
                            navigator.Navigator.pop(T$.ObjectN(), context);
                          }, T$.VoidTovoid())}), new list_tile.ListTile.new({title: new text.Text.new("Logout"), onTap: dart.fn(() => {
                            navigator.Navigator.pop(T$.ObjectN(), context);
                          }, T$.VoidTovoid())})])})}), T$.BuildContextToSafeArea())});
              }, T$.VoidTovoid())})])}), body: new basic.Center.new({child: new basic.Column.new({mainAxisAlignment: flex.MainAxisAlignment.center, children: T$.JSArrayOfWidget().of([new elevated_button.ElevatedButton.new({child: new text.Text.new("Create Board"), onPressed: dart.fn(() => {
                }, T$.VoidTovoid())}), new basic.SizedBox.new({height: 20}), new elevated_button.ElevatedButton.new({child: new text.Text.new("Join Board"), onPressed: dart.fn(() => {
                }, T$.VoidTovoid())})])})})});
    }
    static ['_#new#tearOff']() {
      return new firstlime._BoardMoneyPageState.new();
    }
  };
  (firstlime._BoardMoneyPageState.new = function() {
    firstlime._BoardMoneyPageState.__proto__.new.call(this);
    ;
  }).prototype = firstlime._BoardMoneyPageState.prototype;
  dart.addTypeTests(firstlime._BoardMoneyPageState);
  dart.addTypeCaches(firstlime._BoardMoneyPageState);
  dart.setMethodSignature(firstlime._BoardMoneyPageState, () => ({
    __proto__: dart.getMethods(firstlime._BoardMoneyPageState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(firstlime._BoardMoneyPageState, I[3]);
  mainpage.MyApp2 = class MyApp2 extends framework.StatelessWidget {
    build(context) {
      return new app.MaterialApp.new({title: "Board Money", theme: theme_data.ThemeData.new({primarySwatch: colors.Colors.deepPurple, useMaterial3: true}), debugShowCheckedModeBanner: false, home: new mainpage.MainPage.new()});
    }
    static ['_#new#tearOff']() {
      return new mainpage.MyApp2.new();
    }
  };
  (mainpage.MyApp2.new = function() {
    mainpage.MyApp2.__proto__.new.call(this);
    ;
  }).prototype = mainpage.MyApp2.prototype;
  dart.addTypeTests(mainpage.MyApp2);
  dart.addTypeCaches(mainpage.MyApp2);
  dart.setMethodSignature(mainpage.MyApp2, () => ({
    __proto__: dart.getMethods(mainpage.MyApp2.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(mainpage.MyApp2, I[4]);
  mainpage.MainPage = class MainPage extends framework.StatelessWidget {
    [S$._showBottomSheet](context) {
      bottom_sheet.showModalBottomSheet(dart.dynamic, {context: context, builder: dart.fn(context => new container.Container.new({padding: new edge_insets.EdgeInsets.all(16), child: new basic.Column.new({mainAxisSize: flex.MainAxisSize.min, crossAxisAlignment: flex.CrossAxisAlignment.stretch, children: T$.JSArrayOfWidget().of([new text.Text.new("Edit Username", {style: new text_style.TextStyle.new({fontSize: 20, fontWeight: ui.FontWeight.bold}), textAlign: ui.TextAlign.center}), new basic.SizedBox.new({height: 20}), new text_field.TextField.new({decoration: new input_decorator.InputDecoration.new({labelText: "Enter your username", border: new input_border.OutlineInputBorder.new()})}), new basic.SizedBox.new({height: 20}), new elevated_button.ElevatedButton.new({onPressed: dart.fn(() => {
                  navigator.Navigator.pop(T$.ObjectN(), context);
                }, T$.VoidTovoid()), child: new text.Text.new("Save")})])})}), T$.BuildContextToContainer())});
    }
    build(context) {
      let userBox = hive.Hive.box(core.String, "userBox");
      let username = userBox.get("username", {defaultValue: ""});
      core.print(username);
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Board Money"), actions: T$.JSArrayOfWidget().of([new icon_button.IconButton.new({icon: new icon.Icon.new(icons.Icons.account_circle), onPressed: dart.fn(() => {
                this[S$._showBottomSheet](context);
              }, T$.VoidTovoid())})])}), body: new basic.Padding.new({padding: C[7] || CT.C7, child: new basic.Center.new({child: new basic.Column.new({mainAxisAlignment: flex.MainAxisAlignment.center, children: T$.JSArrayOfWidget().of([new basic.SizedBox.new({width: 1 / 0, height: 80, child: new outlined_button.OutlinedButton.new({onPressed: dart.fn(() => {
                      navigator.Navigator.push(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new mainpage.CreatePage.new(), T$.BuildContextToCreatePage())}));
                    }, T$.VoidTovoid()), child: new text.Text.new("Create", {style: new text_style.TextStyle.new({fontSize: 24})})})}), new basic.SizedBox.new({height: 20}), new basic.SizedBox.new({width: 1 / 0, height: 80, child: new outlined_button.OutlinedButton.new({onPressed: dart.fn(() => {
                      navigator.Navigator.push(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new mainpage.JoinPage.new(), T$.BuildContextToJoinPage())}));
                    }, T$.VoidTovoid()), child: new text.Text.new("Join", {style: new text_style.TextStyle.new({fontSize: 24})})})})])})})})});
    }
    static ['_#new#tearOff']() {
      return new mainpage.MainPage.new();
    }
  };
  (mainpage.MainPage.new = function() {
    mainpage.MainPage.__proto__.new.call(this);
    ;
  }).prototype = mainpage.MainPage.prototype;
  dart.addTypeTests(mainpage.MainPage);
  dart.addTypeCaches(mainpage.MainPage);
  dart.setMethodSignature(mainpage.MainPage, () => ({
    __proto__: dart.getMethods(mainpage.MainPage.__proto__),
    [S$._showBottomSheet]: dart.fnType(dart.void, [framework.BuildContext]),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(mainpage.MainPage, I[4]);
  mainpage.CreatePage = class CreatePage extends framework.StatelessWidget {
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Create")}), body: new basic.Center.new({child: new text.Text.new("Create Page")})});
    }
    static ['_#new#tearOff']() {
      return new mainpage.CreatePage.new();
    }
  };
  (mainpage.CreatePage.new = function() {
    mainpage.CreatePage.__proto__.new.call(this);
    ;
  }).prototype = mainpage.CreatePage.prototype;
  dart.addTypeTests(mainpage.CreatePage);
  dart.addTypeCaches(mainpage.CreatePage);
  dart.setMethodSignature(mainpage.CreatePage, () => ({
    __proto__: dart.getMethods(mainpage.CreatePage.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(mainpage.CreatePage, I[4]);
  mainpage.JoinPage = class JoinPage extends framework.StatelessWidget {
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Join")}), body: new basic.Center.new({child: new text.Text.new("Join Page")})});
    }
    static ['_#new#tearOff']() {
      return new mainpage.JoinPage.new();
    }
  };
  (mainpage.JoinPage.new = function() {
    mainpage.JoinPage.__proto__.new.call(this);
    ;
  }).prototype = mainpage.JoinPage.prototype;
  dart.addTypeTests(mainpage.JoinPage);
  dart.addTypeCaches(mainpage.JoinPage);
  dart.setMethodSignature(mainpage.JoinPage, () => ({
    __proto__: dart.getMethods(mainpage.JoinPage.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(mainpage.JoinPage, I[4]);
  plugin_platform_interface.PlatformInterface = class PlatformInterface extends core.Object {
    static verify(instance, token) {
      plugin_platform_interface.PlatformInterface._verify(instance, token, {preventConstObject: true});
    }
    static verifyToken(instance, token) {
      plugin_platform_interface.PlatformInterface._verify(instance, token, {preventConstObject: false});
    }
    static _verify(instance, token, opts) {
      let preventConstObject = opts && 'preventConstObject' in opts ? opts.preventConstObject : null;
      if (plugin_platform_interface.MockPlatformInterfaceMixin.is(instance)) {
        let assertionsEnabled = false;
        if (!dart.fn(() => {
          assertionsEnabled = true;
          return true;
        }, T$.VoidTobool())()) dart.assertFailed(null, I[5], 81, 14, "() {\n        assertionsEnabled = true;\n        return true;\n      }()");
        if (!assertionsEnabled) {
          dart.throw(new core.AssertionError.new("`MockPlatformInterfaceMixin` is not intended for use in release builds."));
        }
        return;
      }
      if (preventConstObject && instance[S$._instanceToken] === (C[12] || CT.C12)) {
        dart.throw(new core.AssertionError.new("`const Object()` cannot be used as the token."));
      }
      if (token !== instance[S$._instanceToken]) {
        dart.throw(new core.AssertionError.new("Platform interfaces must not be implemented with `implements`"));
      }
    }
  };
  (plugin_platform_interface.PlatformInterface.new = function(opts) {
    let token = opts && 'token' in opts ? opts.token : null;
    this[S$._instanceToken] = token;
    ;
  }).prototype = plugin_platform_interface.PlatformInterface.prototype;
  dart.addTypeTests(plugin_platform_interface.PlatformInterface);
  dart.addTypeCaches(plugin_platform_interface.PlatformInterface);
  dart.setStaticMethodSignature(plugin_platform_interface.PlatformInterface, () => ['verify', 'verifyToken', '_verify']);
  dart.setLibraryUri(plugin_platform_interface.PlatformInterface, I[6]);
  dart.setFieldSignature(plugin_platform_interface.PlatformInterface, () => ({
    __proto__: dart.getFields(plugin_platform_interface.PlatformInterface.__proto__),
    [S$._instanceToken]: dart.finalFieldType(dart.nullable(core.Object))
  }));
  platform_interface_firestore.FirebaseFirestorePlatform = class FirebaseFirestorePlatform extends plugin_platform_interface.PlatformInterface {
    get appInstance() {
      return this[S$.appInstance];
    }
    set appInstance(value) {
      super.appInstance = value;
    }
    get app() {
      let t8;
      t8 = this.appInstance;
      return t8 == null ? firebase_core.Firebase.app() : t8;
    }
    static instanceFor(opts) {
      let app = opts && 'app' in opts ? opts.app : null;
      return platform_interface_firestore.FirebaseFirestorePlatform.instance.delegateFor({app: app});
    }
    static ['_#instanceFor#tearOff'](opts) {
      let app = opts && 'app' in opts ? opts.app : null;
      return platform_interface_firestore.FirebaseFirestorePlatform.instanceFor({app: app});
    }
    static get instance() {
      let t8;
      t8 = platform_interface_firestore.FirebaseFirestorePlatform._instance;
      return t8 == null ? platform_interface_firestore.FirebaseFirestorePlatform._instance = new method_channel_firestore.MethodChannelFirebaseFirestore.new({app: firebase_core.Firebase.app()}) : t8;
    }
    static set instance(instance) {
      plugin_platform_interface.PlatformInterface.verifyToken(instance, platform_interface_firestore.FirebaseFirestorePlatform._token);
      platform_interface_firestore.FirebaseFirestorePlatform._instance = instance;
    }
    delegateFor(opts) {
      let app = opts && 'app' in opts ? opts.app : null;
      dart.throw(new core.UnimplementedError.new("delegateFor() is not implemented"));
    }
    useEmulator(host, port) {
      dart.throw(new core.UnimplementedError.new("useEmulator() is not implemented"));
    }
    batch() {
      dart.throw(new core.UnimplementedError.new("batch() is not implemented"));
    }
    clearPersistence() {
      dart.throw(new core.UnimplementedError.new("clearPersistence() is not implemented"));
    }
    enablePersistence(persistenceSettings = null) {
      return async.async(dart.void, function* enablePersistence() {
        dart.throw(new core.UnimplementedError.new("enablePersistence() is not implemented"));
      });
    }
    collection(collectionPath) {
      dart.throw(new core.UnimplementedError.new("collection() is not implemented"));
    }
    collectionGroup(collectionPath) {
      dart.throw(new core.UnimplementedError.new("collectionGroup() is not implemented"));
    }
    disableNetwork() {
      dart.throw(new core.UnimplementedError.new("disableNetwork() is not implemented"));
    }
    doc(documentPath) {
      dart.throw(new core.UnimplementedError.new("doc() is not implemented"));
    }
    enableNetwork() {
      dart.throw(new core.UnimplementedError.new("enableNetwork() is not implemented"));
    }
    snapshotsInSync() {
      dart.throw(new core.UnimplementedError.new("snapshotsInSync() is not implemented"));
    }
    loadBundle(bundle) {
      dart.throw(new core.UnimplementedError.new("loadBundle() is not implemented"));
    }
    namedQueryGet(name, opts) {
      let options = opts && 'options' in opts ? opts.options : C[10] || CT.C10;
      dart.throw(new core.UnimplementedError.new("namedQueryGet() is not implemented"));
    }
    runTransaction(T, transactionHandler, opts) {
      let timeout = opts && 'timeout' in opts ? opts.timeout : C[8] || CT.C8;
      dart.throw(new core.UnimplementedError.new("runTransaction() is not implemented"));
    }
    get settings() {
      dart.throw(new core.UnimplementedError.new("settings getter is not implemented"));
    }
    set settings(settings) {
      dart.throw(new core.UnimplementedError.new("settings setter is not implemented"));
    }
    terminate() {
      dart.throw(new core.UnimplementedError.new("terminate() is not implemented"));
    }
    waitForPendingWrites() {
      dart.throw(new core.UnimplementedError.new("waitForPendingWrites() is not implemented"));
    }
    _equals(other) {
      if (other == null) return false;
      return platform_interface_firestore.FirebaseFirestorePlatform.is(other) && other.app.name === this.app.name;
    }
    get hashCode() {
      return this.toString()[S$.$hashCode];
    }
    toString() {
      return dart.str(dart.wrapType(platform_interface_firestore.FirebaseFirestorePlatform)) + "(app: " + this.app.name + ")";
    }
  };
  (platform_interface_firestore.FirebaseFirestorePlatform.new = function(opts) {
    let appInstance = opts && 'appInstance' in opts ? opts.appInstance : null;
    this[S$.appInstance] = appInstance;
    platform_interface_firestore.FirebaseFirestorePlatform.__proto__.new.call(this, {token: platform_interface_firestore.FirebaseFirestorePlatform._token});
    ;
  }).prototype = platform_interface_firestore.FirebaseFirestorePlatform.prototype;
  dart.addTypeTests(platform_interface_firestore.FirebaseFirestorePlatform);
  dart.addTypeCaches(platform_interface_firestore.FirebaseFirestorePlatform);
  dart.setMethodSignature(platform_interface_firestore.FirebaseFirestorePlatform, () => ({
    __proto__: dart.getMethods(platform_interface_firestore.FirebaseFirestorePlatform.__proto__),
    delegateFor: dart.fnType(platform_interface_firestore.FirebaseFirestorePlatform, [], {}, {app: firebase_core.FirebaseApp}),
    useEmulator: dart.fnType(dart.void, [core.String, core.int]),
    batch: dart.fnType(platform_interface_write_batch.WriteBatchPlatform, []),
    clearPersistence: dart.fnType(async.Future$(dart.void), []),
    enablePersistence: dart.fnType(async.Future$(dart.void), [], [dart.nullable(persistence_settings.PersistenceSettings)]),
    collection: dart.fnType(platform_interface_collection_reference.CollectionReferencePlatform, [core.String]),
    collectionGroup: dart.fnType(platform_interface_query.QueryPlatform, [core.String]),
    disableNetwork: dart.fnType(async.Future$(dart.void), []),
    doc: dart.fnType(platform_interface_document_reference.DocumentReferencePlatform, [core.String]),
    enableNetwork: dart.fnType(async.Future$(dart.void), []),
    snapshotsInSync: dart.fnType(async.Stream$(dart.void), []),
    loadBundle: dart.fnType(platform_interface_load_bundle_task.LoadBundleTaskPlatform, [typed_data.Uint8List]),
    namedQueryGet: dart.fnType(async.Future$(platform_interface_query_snapshot.QuerySnapshotPlatform), [core.String], {options: get_options.GetOptions}, {}),
    runTransaction: dart.gFnType(T => [async.Future$(dart.nullable(T)), [dart.fnType(dart.nullable(async.Future$(dart.nullable(T))), [platform_interface_transaction.TransactionPlatform])], {timeout: core.Duration}, {}], T => [dart.nullable(core.Object)]),
    terminate: dart.fnType(async.Future$(dart.void), []),
    waitForPendingWrites: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setStaticMethodSignature(platform_interface_firestore.FirebaseFirestorePlatform, () => ['instanceFor']);
  dart.setGetterSignature(platform_interface_firestore.FirebaseFirestorePlatform, () => ({
    __proto__: dart.getGetters(platform_interface_firestore.FirebaseFirestorePlatform.__proto__),
    app: firebase_core.FirebaseApp,
    settings: settings.Settings
  }));
  dart.setSetterSignature(platform_interface_firestore.FirebaseFirestorePlatform, () => ({
    __proto__: dart.getSetters(platform_interface_firestore.FirebaseFirestorePlatform.__proto__),
    settings: settings.Settings
  }));
  dart.setStaticGetterSignature(platform_interface_firestore.FirebaseFirestorePlatform, () => ['instance']);
  dart.setStaticSetterSignature(platform_interface_firestore.FirebaseFirestorePlatform, () => ['instance']);
  dart.setLibraryUri(platform_interface_firestore.FirebaseFirestorePlatform, I[7]);
  dart.setFieldSignature(platform_interface_firestore.FirebaseFirestorePlatform, () => ({
    __proto__: dart.getFields(platform_interface_firestore.FirebaseFirestorePlatform.__proto__),
    appInstance: dart.finalFieldType(dart.nullable(firebase_core.FirebaseApp))
  }));
  dart.setStaticFieldSignature(platform_interface_firestore.FirebaseFirestorePlatform, () => ['_token', '_instance']);
  dart.defineExtensionMethods(platform_interface_firestore.FirebaseFirestorePlatform, ['_equals', 'toString']);
  dart.defineExtensionAccessors(platform_interface_firestore.FirebaseFirestorePlatform, ['hashCode']);
  dart.defineLazy(platform_interface_firestore.FirebaseFirestorePlatform, {
    /*platform_interface_firestore.FirebaseFirestorePlatform._token*/get _token() {
      return new core.Object.new();
    },
    /*platform_interface_firestore.FirebaseFirestorePlatform._instance*/get _instance() {
      return null;
    },
    set _instance(value) {}
  }, false);
  cloud_firestore_web.FirebaseFirestoreWeb = class FirebaseFirestoreWeb extends platform_interface_firestore.FirebaseFirestorePlatform {
    get [S$._delegate]() {
      let t8;
      t8 = this[S$._webFirestore];
      return t8 == null ? this[S$._webFirestore] = firestore.getFirestoreInstance(core$.app(this.app.name), this[S$._settings]) : t8;
    }
    static registerWith(registrar) {
      firebase_core_web.FirebaseCoreWeb.registerService("firestore");
      platform_interface_firestore.FirebaseFirestorePlatform.instance = new cloud_firestore_web.FirebaseFirestoreWeb.new();
    }
    static ['_#new#tearOff'](opts) {
      let app = opts && 'app' in opts ? opts.app : null;
      return new cloud_firestore_web.FirebaseFirestoreWeb.new({app: app});
    }
    delegateFor(opts) {
      let app = opts && 'app' in opts ? opts.app : null;
      return new cloud_firestore_web.FirebaseFirestoreWeb.new({app: app});
    }
    collection(collectionPath) {
      return new collection_reference_web.CollectionReferenceWeb.new(this, this[S$._delegate], collectionPath);
    }
    batch() {
      return new write_batch_web.WriteBatchWeb.new(this[S$._delegate]);
    }
    clearPersistence() {
      return internals.convertWebExceptions(T$.FutureOfvoid(), dart.bind(this[S$._delegate], 'clearPersistence'));
    }
    useEmulator(host, port) {
      return this[S$._delegate].useEmulator(host, port);
    }
    collectionGroup(collectionPath) {
      return new query_web.QueryWeb.new(this, collectionPath, this[S$._delegate].collectionGroup(collectionPath), {isCollectionGroupQuery: true});
    }
    disableNetwork() {
      return internals.convertWebExceptions(T$.FutureOfvoid(), dart.bind(this[S$._delegate], 'disableNetwork'));
    }
    doc(documentPath) {
      return new document_reference_web.DocumentReferenceWeb.new(this, this[S$._delegate], documentPath);
    }
    enableNetwork() {
      return internals.convertWebExceptions(T$.FutureOfvoid(), dart.bind(this[S$._delegate], 'enableNetwork'));
    }
    snapshotsInSync() {
      return this[S$._delegate].snapshotsInSync();
    }
    runTransaction(T, transactionHandler, opts) {
      let timeout = opts && 'timeout' in opts ? opts.timeout : C[8] || CT.C8;
      return async.async(dart.nullable(T), (function* runTransaction() {
        yield internals.convertWebExceptions(async.Future, dart.fn(() => this[S$._delegate].runTransaction(dart.fn(transaction => async.async(dart.nullable(T), (function*() {
          return transactionHandler(new transaction_web.TransactionWeb.new(this, this[S$._delegate], dart.nullCheck(transaction)));
        }).bind(this)), dart.fnType(async.Future$(dart.nullable(T)), [T$.TransactionN()]))).timeout(timeout), T$.VoidToFuture()));
        return null;
      }).bind(this));
    }
    get settings() {
      return C[9] || CT.C9;
    }
    set settings(settings) {
      let cacheSizeBytes = null;
      if (settings.cacheSizeBytes == null) {
        cacheSizeBytes = 40000000;
      } else if (settings.cacheSizeBytes === -1) {
        cacheSizeBytes = -1;
      } else {
        cacheSizeBytes = settings.cacheSizeBytes;
      }
      if (settings.host != null && settings.sslEnabled != null) {
        this[S$._settings] = {cacheSizeBytes: cacheSizeBytes, host: settings.host, ssl: settings.sslEnabled, ignoreUndefinedProperties: settings.ignoreUndefinedProperties};
      } else {
        this[S$._settings] = {cacheSizeBytes: cacheSizeBytes, ignoreUndefinedProperties: settings.ignoreUndefinedProperties};
      }
    }
    enablePersistence(settings = null) {
      if (settings != null) {
        let interopSettings = {synchronizeTabs: settings.synchronizeTabs};
        return internals.convertWebExceptions(T$.FutureOfvoid(), dart.fn(() => this[S$._delegate].enablePersistence(interopSettings), T$.VoidToFutureOfvoid()));
      }
      return internals.convertWebExceptions(T$.FutureOfvoid(), dart.bind(this[S$._delegate], 'enablePersistence'));
    }
    terminate() {
      return internals.convertWebExceptions(T$.FutureOfvoid(), dart.bind(this[S$._delegate], 'terminate'));
    }
    waitForPendingWrites() {
      return internals.convertWebExceptions(T$.FutureOfvoid(), dart.bind(this[S$._delegate], 'waitForPendingWrites'));
    }
    loadBundle(bundle) {
      return new load_bundle_task_web.LoadBundleTaskWeb.new(this[S$._delegate].loadBundle(bundle));
    }
    namedQueryGet(name, opts) {
      let options = opts && 'options' in opts ? opts.options : C[10] || CT.C10;
      return async.async(platform_interface_query_snapshot.QuerySnapshotPlatform, (function* namedQueryGet() {
        let query = (yield this[S$._delegate].namedQuery(name));
        let snapshot = (yield query.get(web_utils.convertGetOptions(options)));
        return web_utils.convertWebQuerySnapshot(this, snapshot);
      }).bind(this));
    }
  };
  (cloud_firestore_web.FirebaseFirestoreWeb.new = function(opts) {
    let app = opts && 'app' in opts ? opts.app : null;
    this[S$._webFirestore] = null;
    this[S$._settings] = null;
    cloud_firestore_web.FirebaseFirestoreWeb.__proto__.new.call(this, {appInstance: app});
    platform_interface_field_value_factory.FieldValueFactoryPlatform.instance = new field_value_factory_web.FieldValueFactoryWeb.new();
  }).prototype = cloud_firestore_web.FirebaseFirestoreWeb.prototype;
  dart.addTypeTests(cloud_firestore_web.FirebaseFirestoreWeb);
  dart.addTypeCaches(cloud_firestore_web.FirebaseFirestoreWeb);
  dart.setMethodSignature(cloud_firestore_web.FirebaseFirestoreWeb, () => ({
    __proto__: dart.getMethods(cloud_firestore_web.FirebaseFirestoreWeb.__proto__),
    runTransaction: dart.gFnType(T => [async.Future$(dart.nullable(T)), [dart.fnType(dart.nullable(async.Future$(dart.nullable(T))), [platform_interface_transaction.TransactionPlatform])], {timeout: core.Duration}, {}], T => [dart.nullable(core.Object)])
  }));
  dart.setStaticMethodSignature(cloud_firestore_web.FirebaseFirestoreWeb, () => ['registerWith']);
  dart.setGetterSignature(cloud_firestore_web.FirebaseFirestoreWeb, () => ({
    __proto__: dart.getGetters(cloud_firestore_web.FirebaseFirestoreWeb.__proto__),
    [S$._delegate]: firestore.Firestore
  }));
  dart.setLibraryUri(cloud_firestore_web.FirebaseFirestoreWeb, I[8]);
  dart.setFieldSignature(cloud_firestore_web.FirebaseFirestoreWeb, () => ({
    __proto__: dart.getFields(cloud_firestore_web.FirebaseFirestoreWeb.__proto__),
    [S$._webFirestore]: dart.fieldType(dart.nullable(firestore.Firestore)),
    [S$._settings]: dart.fieldType(dart.nullable(dart.packageJSType("Settings", false)))
  }));
  platform_interface_firebase_auth.FirebaseAuthPlatform = class FirebaseAuthPlatform extends plugin_platform_interface.PlatformInterface {
    get appInstance() {
      return this[S$.appInstance$1];
    }
    set appInstance(value) {
      super.appInstance = value;
    }
    get tenantId() {
      return this[S$.tenantId];
    }
    set tenantId(value) {
      this[S$.tenantId] = value;
    }
    get app() {
      if (this.appInstance == null) {
        return firebase_core.Firebase.app();
      }
      return dart.nullCheck(this.appInstance);
    }
    static ['_#instanceFor#tearOff'](opts) {
      let app = opts && 'app' in opts ? opts.app : null;
      let pluginConstants = opts && 'pluginConstants' in opts ? opts.pluginConstants : null;
      return platform_interface_firebase_auth.FirebaseAuthPlatform.instanceFor({app: app, pluginConstants: pluginConstants});
    }
    static instanceFor(opts) {
      let app = opts && 'app' in opts ? opts.app : null;
      let pluginConstants = opts && 'pluginConstants' in opts ? opts.pluginConstants : null;
      return platform_interface_firebase_auth.FirebaseAuthPlatform.instance.delegateFor({app: app}).setInitialValues({languageCode: T$.StringN().as(pluginConstants[S$.$_get]("APP_LANGUAGE_CODE")), currentUser: pluginConstants[S$.$_get]("APP_CURRENT_USER") == null ? null : T$.LinkedHashMapOfString$dynamic().from(core.Map.as(pluginConstants[S$.$_get]("APP_CURRENT_USER")))});
    }
    static get instance() {
      platform_interface_firebase_auth.FirebaseAuthPlatform._instance == null ? platform_interface_firebase_auth.FirebaseAuthPlatform._instance = method_channel_firebase_auth.MethodChannelFirebaseAuth.instance : null;
      return dart.nullCheck(platform_interface_firebase_auth.FirebaseAuthPlatform._instance);
    }
    static set instance(instance) {
      plugin_platform_interface.PlatformInterface.verifyToken(instance, platform_interface_firebase_auth.FirebaseAuthPlatform._token);
      platform_interface_firebase_auth.FirebaseAuthPlatform._instance = instance;
    }
    delegateFor(opts) {
      let app = opts && 'app' in opts ? opts.app : null;
      dart.throw(new core.UnimplementedError.new("delegateFor() is not implemented"));
    }
    setInitialValues(opts) {
      let currentUser = opts && 'currentUser' in opts ? opts.currentUser : null;
      let languageCode = opts && 'languageCode' in opts ? opts.languageCode : null;
      dart.throw(new core.UnimplementedError.new("setInitialValues() is not implemented"));
    }
    get currentUser() {
      dart.throw(new core.UnimplementedError.new("get.currentUser is not implemented"));
    }
    set currentUser(userPlatform) {
      dart.throw(new core.UnimplementedError.new("set.currentUser is not implemented"));
    }
    get languageCode() {
      dart.throw(new core.UnimplementedError.new("languageCode is not implemented"));
    }
    sendAuthChangesEvent(appName, userPlatform) {
      dart.throw(new core.UnimplementedError.new("sendAuthChangesEvent() is not implemented"));
    }
    useAuthEmulator(host, port) {
      dart.throw(new core.UnimplementedError.new("useAuthEmulator() is not implemented"));
    }
    applyActionCode(code) {
      dart.throw(new core.UnimplementedError.new("applyActionCode() is not implemented"));
    }
    checkActionCode(code) {
      dart.throw(new core.UnimplementedError.new("checkActionCode() is not implemented"));
    }
    confirmPasswordReset(code, newPassword) {
      dart.throw(new core.UnimplementedError.new("confirmPasswordReset() is not implemented"));
    }
    createUserWithEmailAndPassword(email, password) {
      dart.throw(new core.UnimplementedError.new("createUserWithEmailAndPassword() is not implemented"));
    }
    fetchSignInMethodsForEmail(email) {
      dart.throw(new core.UnimplementedError.new("fetchSignInMethodsForEmail() is not implemented"));
    }
    getRedirectResult() {
      dart.throw(new core.UnimplementedError.new("getRedirectResult() is not implemented"));
    }
    isSignInWithEmailLink(emailLink) {
      return (emailLink[S$.$contains]("mode=signIn") || emailLink[S$.$contains]("mode%3DsignIn")) && (emailLink[S$.$contains]("oobCode=") || emailLink[S$.$contains]("oobCode%3D"));
    }
    authStateChanges() {
      dart.throw(new core.UnimplementedError.new("authStateChanges() is not implemented"));
    }
    idTokenChanges() {
      dart.throw(new core.UnimplementedError.new("idTokenChanges() is not implemented"));
    }
    userChanges() {
      dart.throw(new core.UnimplementedError.new("userChanges() is not implemented"));
    }
    sendPasswordResetEmail(email, actionCodeSettings = null) {
      dart.throw(new core.UnimplementedError.new("sendPasswordResetEmail() is not implemented"));
    }
    sendSignInLinkToEmail(email, actionCodeSettings) {
      dart.throw(new core.UnimplementedError.new("sendSignInLinkToEmail() is not implemented"));
    }
    setLanguageCode(languageCode) {
      dart.throw(new core.UnimplementedError.new("setLanguageCode() is not implemented"));
    }
    setSettings(opts) {
      let appVerificationDisabledForTesting = opts && 'appVerificationDisabledForTesting' in opts ? opts.appVerificationDisabledForTesting : null;
      let userAccessGroup = opts && 'userAccessGroup' in opts ? opts.userAccessGroup : null;
      let phoneNumber = opts && 'phoneNumber' in opts ? opts.phoneNumber : null;
      let smsCode = opts && 'smsCode' in opts ? opts.smsCode : null;
      let forceRecaptchaFlow = opts && 'forceRecaptchaFlow' in opts ? opts.forceRecaptchaFlow : null;
      dart.throw(new core.UnimplementedError.new("setSettings() is not implemented"));
    }
    setPersistence(persistence) {
      return async.async(dart.void, function* setPersistence() {
        dart.throw(new core.UnimplementedError.new("setPersistence() is not implemented"));
      });
    }
    signInAnonymously() {
      return async.async(platform_interface_user_credential.UserCredentialPlatform, function* signInAnonymously() {
        dart.throw(new core.UnimplementedError.new("signInAnonymously() is not implemented"));
      });
    }
    signInWithCredential(credential) {
      return async.async(platform_interface_user_credential.UserCredentialPlatform, function* signInWithCredential() {
        dart.throw(new core.UnimplementedError.new("signInWithCredential() is not implemented"));
      });
    }
    signInWithCustomToken(token) {
      return async.async(platform_interface_user_credential.UserCredentialPlatform, function* signInWithCustomToken() {
        dart.throw(new core.UnimplementedError.new("signInWithCustomToken() is not implemented"));
      });
    }
    signInWithEmailAndPassword(email, password) {
      return async.async(platform_interface_user_credential.UserCredentialPlatform, function* signInWithEmailAndPassword() {
        dart.throw(new core.UnimplementedError.new("signInWithEmailAndPassword() is not implemented"));
      });
    }
    signInWithEmailLink(email, emailLink) {
      return async.async(platform_interface_user_credential.UserCredentialPlatform, function* signInWithEmailLink() {
        dart.throw(new core.UnimplementedError.new("signInWithEmailLink() is not implemented"));
      });
    }
    signInWithAuthProvider(provider) {
      return async.async(platform_interface_user_credential.UserCredentialPlatform, function* signInWithAuthProvider() {
        dart.throw(new core.UnimplementedError.new("signInWithAuthProvider() is not implemented"));
      });
    }
    signInWithPhoneNumber(phoneNumber, applicationVerifier) {
      return async.async(platform_interface_confirmation_result.ConfirmationResultPlatform, function* signInWithPhoneNumber() {
        dart.throw(new core.UnimplementedError.new("signInWithPhoneNumber() is not implemented"));
      });
    }
    signInWithPopup(provider) {
      dart.throw(new core.UnimplementedError.new("signInWithPopup() is not implemented"));
    }
    signInWithRedirect(provider) {
      dart.throw(new core.UnimplementedError.new("signInWithRedirect() is not implemented"));
    }
    signOut() {
      return async.async(dart.void, function* signOut() {
        dart.throw(new core.UnimplementedError.new("signOut() is not implemented"));
      });
    }
    verifyPasswordResetCode(code) {
      dart.throw(new core.UnimplementedError.new("verifyPasswordResetCode() is not implemented"));
    }
    verifyPhoneNumber(opts) {
      let phoneNumber = opts && 'phoneNumber' in opts ? opts.phoneNumber : null;
      let verificationCompleted = opts && 'verificationCompleted' in opts ? opts.verificationCompleted : null;
      let verificationFailed = opts && 'verificationFailed' in opts ? opts.verificationFailed : null;
      let codeSent = opts && 'codeSent' in opts ? opts.codeSent : null;
      let codeAutoRetrievalTimeout = opts && 'codeAutoRetrievalTimeout' in opts ? opts.codeAutoRetrievalTimeout : null;
      let timeout = opts && 'timeout' in opts ? opts.timeout : C[8] || CT.C8;
      let forceResendingToken = opts && 'forceResendingToken' in opts ? opts.forceResendingToken : null;
      let autoRetrievedSmsCodeForTesting = opts && 'autoRetrievedSmsCodeForTesting' in opts ? opts.autoRetrievedSmsCodeForTesting : null;
      dart.throw(new core.UnimplementedError.new("verifyPhoneNumber() is not implemented"));
    }
  };
  (platform_interface_firebase_auth.FirebaseAuthPlatform.new = function(opts) {
    let appInstance = opts && 'appInstance' in opts ? opts.appInstance : null;
    this[S$.tenantId] = null;
    this[S$.appInstance$1] = appInstance;
    platform_interface_firebase_auth.FirebaseAuthPlatform.__proto__.new.call(this, {token: platform_interface_firebase_auth.FirebaseAuthPlatform._token});
    ;
  }).prototype = platform_interface_firebase_auth.FirebaseAuthPlatform.prototype;
  dart.addTypeTests(platform_interface_firebase_auth.FirebaseAuthPlatform);
  dart.addTypeCaches(platform_interface_firebase_auth.FirebaseAuthPlatform);
  dart.setMethodSignature(platform_interface_firebase_auth.FirebaseAuthPlatform, () => ({
    __proto__: dart.getMethods(platform_interface_firebase_auth.FirebaseAuthPlatform.__proto__),
    delegateFor: dart.fnType(platform_interface_firebase_auth.FirebaseAuthPlatform, [], {}, {app: firebase_core.FirebaseApp}),
    setInitialValues: dart.fnType(platform_interface_firebase_auth.FirebaseAuthPlatform, [], {currentUser: dart.nullable(core.Map$(core.String, dart.dynamic)), languageCode: dart.nullable(core.String)}, {}),
    sendAuthChangesEvent: dart.fnType(dart.void, [core.String, dart.nullable(platform_interface_user.UserPlatform)]),
    useAuthEmulator: dart.fnType(async.Future$(dart.void), [core.String, core.int]),
    applyActionCode: dart.fnType(async.Future$(dart.void), [core.String]),
    checkActionCode: dart.fnType(async.Future$(action_code_info.ActionCodeInfo), [core.String]),
    confirmPasswordReset: dart.fnType(async.Future$(dart.void), [core.String, core.String]),
    createUserWithEmailAndPassword: dart.fnType(async.Future$(platform_interface_user_credential.UserCredentialPlatform), [core.String, core.String]),
    fetchSignInMethodsForEmail: dart.fnType(async.Future$(core.List$(core.String)), [core.String]),
    getRedirectResult: dart.fnType(async.Future$(platform_interface_user_credential.UserCredentialPlatform), []),
    isSignInWithEmailLink: dart.fnType(core.bool, [core.String]),
    authStateChanges: dart.fnType(async.Stream$(dart.nullable(platform_interface_user.UserPlatform)), []),
    idTokenChanges: dart.fnType(async.Stream$(dart.nullable(platform_interface_user.UserPlatform)), []),
    userChanges: dart.fnType(async.Stream$(dart.nullable(platform_interface_user.UserPlatform)), []),
    sendPasswordResetEmail: dart.fnType(async.Future$(dart.void), [core.String], [dart.nullable(action_code_settings.ActionCodeSettings)]),
    sendSignInLinkToEmail: dart.fnType(async.Future$(dart.void), [core.String, action_code_settings.ActionCodeSettings]),
    setLanguageCode: dart.fnType(async.Future$(dart.void), [dart.nullable(core.String)]),
    setSettings: dart.fnType(async.Future$(dart.void), [], {appVerificationDisabledForTesting: dart.nullable(core.bool), forceRecaptchaFlow: dart.nullable(core.bool), phoneNumber: dart.nullable(core.String), smsCode: dart.nullable(core.String), userAccessGroup: dart.nullable(core.String)}, {}),
    setPersistence: dart.fnType(async.Future$(dart.void), [types.Persistence]),
    signInAnonymously: dart.fnType(async.Future$(platform_interface_user_credential.UserCredentialPlatform), []),
    signInWithCredential: dart.fnType(async.Future$(platform_interface_user_credential.UserCredentialPlatform), [auth_credential.AuthCredential]),
    signInWithCustomToken: dart.fnType(async.Future$(platform_interface_user_credential.UserCredentialPlatform), [core.String]),
    signInWithEmailAndPassword: dart.fnType(async.Future$(platform_interface_user_credential.UserCredentialPlatform), [core.String, core.String]),
    signInWithEmailLink: dart.fnType(async.Future$(platform_interface_user_credential.UserCredentialPlatform), [core.String, core.String]),
    signInWithAuthProvider: dart.fnType(async.Future$(platform_interface_user_credential.UserCredentialPlatform), [auth_provider.AuthProvider]),
    signInWithPhoneNumber: dart.fnType(async.Future$(platform_interface_confirmation_result.ConfirmationResultPlatform), [core.String, platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform]),
    signInWithPopup: dart.fnType(async.Future$(platform_interface_user_credential.UserCredentialPlatform), [auth_provider.AuthProvider]),
    signInWithRedirect: dart.fnType(async.Future$(dart.void), [auth_provider.AuthProvider]),
    signOut: dart.fnType(async.Future$(dart.void), []),
    verifyPasswordResetCode: dart.fnType(async.Future$(core.String), [core.String]),
    verifyPhoneNumber: dart.fnType(async.Future$(dart.void), [], {autoRetrievedSmsCodeForTesting: dart.nullable(core.String), forceResendingToken: dart.nullable(core.int), timeout: core.Duration}, {codeAutoRetrievalTimeout: dart.fnType(dart.void, [core.String]), codeSent: dart.fnType(dart.void, [core.String, dart.nullable(core.int)]), phoneNumber: core.String, verificationCompleted: dart.fnType(dart.void, [phone_auth.PhoneAuthCredential]), verificationFailed: dart.fnType(dart.void, [firebase_auth_exception.FirebaseAuthException])})
  }));
  dart.setStaticMethodSignature(platform_interface_firebase_auth.FirebaseAuthPlatform, () => ['instanceFor']);
  dart.setGetterSignature(platform_interface_firebase_auth.FirebaseAuthPlatform, () => ({
    __proto__: dart.getGetters(platform_interface_firebase_auth.FirebaseAuthPlatform.__proto__),
    app: firebase_core.FirebaseApp,
    currentUser: dart.nullable(platform_interface_user.UserPlatform),
    languageCode: dart.nullable(core.String)
  }));
  dart.setSetterSignature(platform_interface_firebase_auth.FirebaseAuthPlatform, () => ({
    __proto__: dart.getSetters(platform_interface_firebase_auth.FirebaseAuthPlatform.__proto__),
    currentUser: dart.nullable(platform_interface_user.UserPlatform)
  }));
  dart.setStaticGetterSignature(platform_interface_firebase_auth.FirebaseAuthPlatform, () => ['instance']);
  dart.setStaticSetterSignature(platform_interface_firebase_auth.FirebaseAuthPlatform, () => ['instance']);
  dart.setLibraryUri(platform_interface_firebase_auth.FirebaseAuthPlatform, I[10]);
  dart.setFieldSignature(platform_interface_firebase_auth.FirebaseAuthPlatform, () => ({
    __proto__: dart.getFields(platform_interface_firebase_auth.FirebaseAuthPlatform.__proto__),
    appInstance: dart.finalFieldType(dart.nullable(firebase_core.FirebaseApp)),
    tenantId: dart.fieldType(dart.nullable(core.String))
  }));
  dart.setStaticFieldSignature(platform_interface_firebase_auth.FirebaseAuthPlatform, () => ['_token', '_instance']);
  dart.defineLazy(platform_interface_firebase_auth.FirebaseAuthPlatform, {
    /*platform_interface_firebase_auth.FirebaseAuthPlatform._token*/get _token() {
      return new core.Object.new();
    },
    /*platform_interface_firebase_auth.FirebaseAuthPlatform._instance*/get _instance() {
      return null;
    },
    set _instance(value) {}
  }, false);
  firebase_auth_web.FirebaseAuthWeb = class FirebaseAuthWeb extends platform_interface_firebase_auth.FirebaseAuthPlatform {
    static ['_#_#tearOff']() {
      return new firebase_auth_web.FirebaseAuthWeb.__();
    }
    static ['_#new#tearOff'](opts) {
      let app = opts && 'app' in opts ? opts.app : null;
      return new firebase_auth_web.FirebaseAuthWeb.new({app: app});
    }
    static registerWith(registrar) {
      firebase_core_web.FirebaseCoreWeb.registerService("auth");
      platform_interface_firebase_auth.FirebaseAuthPlatform.instance = firebase_auth_web.FirebaseAuthWeb.instance;
      platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform.instance = firebase_auth_web_recaptcha_verifier_factory.RecaptchaVerifierFactoryWeb.instance;
    }
    static get instance() {
      return new firebase_auth_web.FirebaseAuthWeb.__();
    }
    get [S$._delegate$1]() {
      let t8;
      t8 = this[S$._webAuth];
      return t8 == null ? this[S$._webAuth] = auth$.getAuthInstance(core$.app(this.app.name)) : t8;
    }
    delegateFor(opts) {
      let app = opts && 'app' in opts ? opts.app : null;
      return new firebase_auth_web.FirebaseAuthWeb.new({app: app});
    }
    setInitialValues(opts) {
      let currentUser = opts && 'currentUser' in opts ? opts.currentUser : null;
      let languageCode = opts && 'languageCode' in opts ? opts.languageCode : null;
      return this;
    }
    get currentUser() {
      let webCurrentUser = this[S$._delegate$1].currentUser;
      if (webCurrentUser == null) {
        return null;
      }
      return new firebase_auth_web_user.UserWeb.new(this, dart.nullCheck(this[S$._delegate$1].currentUser));
    }
    set currentUser(value) {
      super.currentUser = value;
    }
    get tenantId() {
      return this[S$._delegate$1].tenantId;
    }
    set tenantId(tenantId) {
      this[S$._delegate$1].tenantId = tenantId;
    }
    sendAuthChangesEvent(appName, userPlatform) {
      if (!(firebase_auth_web.FirebaseAuthWeb._userChangesListeners[S$.$_get](appName) != null)) dart.assertFailed(null, I[9], 138, 12, "_userChangesListeners[appName] != null");
      dart.nullCheck(firebase_auth_web.FirebaseAuthWeb._userChangesListeners[S$.$_get](appName)).add(userPlatform);
    }
    applyActionCode(code) {
      return async.async(dart.void, (function* applyActionCode() {
        try {
          yield this[S$._delegate$1].applyActionCode(code);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(web_utils$.getFirebaseAuthException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    checkActionCode(code) {
      return async.async(action_code_info.ActionCodeInfo, (function* checkActionCode() {
        try {
          return dart.nullCheck(web_utils$.convertWebActionCodeInfo(yield this[S$._delegate$1].checkActionCode(code)));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(web_utils$.getFirebaseAuthException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    confirmPasswordReset(code, newPassword) {
      return async.async(dart.void, (function* confirmPasswordReset() {
        try {
          yield this[S$._delegate$1].confirmPasswordReset(code, newPassword);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(web_utils$.getFirebaseAuthException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    createUserWithEmailAndPassword(email, password) {
      return async.async(platform_interface_user_credential.UserCredentialPlatform, (function* createUserWithEmailAndPassword() {
        try {
          return new firebase_auth_web_user_credential.UserCredentialWeb.new(this, yield this[S$._delegate$1].createUserWithEmailAndPassword(email, password));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(web_utils$.getFirebaseAuthException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    fetchSignInMethodsForEmail(email) {
      return async.async(T$.ListOfString(), (function* fetchSignInMethodsForEmail() {
        try {
          return yield this[S$._delegate$1].fetchSignInMethodsForEmail(email);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(web_utils$.getFirebaseAuthException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    getRedirectResult() {
      return async.async(platform_interface_user_credential.UserCredentialPlatform, (function* getRedirectResult() {
        try {
          return new firebase_auth_web_user_credential.UserCredentialWeb.new(this, yield this[S$._delegate$1].getRedirectResult());
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(web_utils$.getFirebaseAuthException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    authStateChanges() {
      return new (T$._AsyncStarImplOfUserPlatformN()).new((function* authStateChanges(stream) {
        yield this[S$._initialized].future;
        if (stream.add(this.currentUser)) return;
        yield;
        if (stream.addStream(dart.nullCheck(firebase_auth_web.FirebaseAuthWeb._authStateChangesListeners[S$.$_get](this.app.name)).stream)) return;
        yield;
      }).bind(this)).stream;
    }
    idTokenChanges() {
      return new (T$._AsyncStarImplOfUserPlatformN()).new((function* idTokenChanges(stream) {
        yield this[S$._initialized].future;
        if (stream.add(this.currentUser)) return;
        yield;
        if (stream.addStream(dart.nullCheck(firebase_auth_web.FirebaseAuthWeb._idTokenChangesListeners[S$.$_get](this.app.name)).stream)) return;
        yield;
      }).bind(this)).stream;
    }
    userChanges() {
      return new (T$._AsyncStarImplOfUserPlatformN()).new((function* userChanges(stream) {
        yield this[S$._initialized].future;
        if (stream.add(this.currentUser)) return;
        yield;
        if (stream.addStream(dart.nullCheck(firebase_auth_web.FirebaseAuthWeb._userChangesListeners[S$.$_get](this.app.name)).stream)) return;
        yield;
      }).bind(this)).stream;
    }
    sendPasswordResetEmail(email, actionCodeSettings = null) {
      return async.async(dart.void, (function* sendPasswordResetEmail() {
        try {
          yield this[S$._delegate$1].sendPasswordResetEmail(email, web_utils$.convertPlatformActionCodeSettings(actionCodeSettings));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(web_utils$.getFirebaseAuthException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    sendSignInLinkToEmail(email, actionCodeSettings = null) {
      return async.async(dart.void, (function* sendSignInLinkToEmail() {
        try {
          yield this[S$._delegate$1].sendSignInLinkToEmail(email, web_utils$.convertPlatformActionCodeSettings(actionCodeSettings));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(web_utils$.getFirebaseAuthException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    get languageCode() {
      return this[S$._delegate$1].languageCode;
    }
    setLanguageCode(languageCode) {
      return async.async(dart.void, (function* setLanguageCode() {
        this[S$._delegate$1].languageCode = languageCode;
      }).bind(this));
    }
    setSettings(opts) {
      let appVerificationDisabledForTesting = opts && 'appVerificationDisabledForTesting' in opts ? opts.appVerificationDisabledForTesting : null;
      let userAccessGroup = opts && 'userAccessGroup' in opts ? opts.userAccessGroup : null;
      let phoneNumber = opts && 'phoneNumber' in opts ? opts.phoneNumber : null;
      let smsCode = opts && 'smsCode' in opts ? opts.smsCode : null;
      let forceRecaptchaFlow = opts && 'forceRecaptchaFlow' in opts ? opts.forceRecaptchaFlow : null;
      return async.async(dart.void, (function* setSettings() {
        this[S$._delegate$1].settings.appVerificationDisabledForTesting = appVerificationDisabledForTesting;
      }).bind(this));
    }
    setPersistence(persistence) {
      return async.async(dart.void, (function* setPersistence() {
        try {
          return this[S$._delegate$1].setPersistence(persistence);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(web_utils$.getFirebaseAuthException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    signInAnonymously() {
      return async.async(platform_interface_user_credential.UserCredentialPlatform, (function* signInAnonymously() {
        try {
          return new firebase_auth_web_user_credential.UserCredentialWeb.new(this, yield this[S$._delegate$1].signInAnonymously());
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(web_utils$.getFirebaseAuthException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    signInWithCredential(credential) {
      return async.async(platform_interface_user_credential.UserCredentialPlatform, (function* signInWithCredential() {
        try {
          return new firebase_auth_web_user_credential.UserCredentialWeb.new(this, yield this[S$._delegate$1].signInWithCredential(dart.nullCheck(web_utils$.convertPlatformCredential(credential))));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(web_utils$.getFirebaseAuthException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    signInWithCustomToken(token) {
      return async.async(platform_interface_user_credential.UserCredentialPlatform, (function* signInWithCustomToken() {
        try {
          return new firebase_auth_web_user_credential.UserCredentialWeb.new(this, yield this[S$._delegate$1].signInWithCustomToken(token));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(web_utils$.getFirebaseAuthException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    signInWithEmailAndPassword(email, password) {
      return async.async(platform_interface_user_credential.UserCredentialPlatform, (function* signInWithEmailAndPassword() {
        try {
          return new firebase_auth_web_user_credential.UserCredentialWeb.new(this, yield this[S$._delegate$1].signInWithEmailAndPassword(email, password));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(web_utils$.getFirebaseAuthException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    signInWithEmailLink(email, emailLink) {
      return async.async(platform_interface_user_credential.UserCredentialPlatform, (function* signInWithEmailLink() {
        try {
          return new firebase_auth_web_user_credential.UserCredentialWeb.new(this, yield this[S$._delegate$1].signInWithEmailLink(email, emailLink));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(web_utils$.getFirebaseAuthException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    signInWithPhoneNumber(phoneNumber, applicationVerifier) {
      return async.async(platform_interface_confirmation_result.ConfirmationResultPlatform, (function* signInWithPhoneNumber() {
        try {
          let verifier = auth$.RecaptchaVerifier.as(applicationVerifier.delegate);
          return new firebase_auth_web_confirmation_result.ConfirmationResultWeb.new(this, yield this[S$._delegate$1].signInWithPhoneNumber(phoneNumber, verifier));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(web_utils$.getFirebaseAuthException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    signInWithPopup(provider) {
      return async.async(platform_interface_user_credential.UserCredentialPlatform, (function* signInWithPopup() {
        try {
          return new firebase_auth_web_user_credential.UserCredentialWeb.new(this, yield this[S$._delegate$1].signInWithPopup(web_utils$.convertPlatformAuthProvider(provider)));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(web_utils$.getFirebaseAuthException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    signInWithRedirect(provider) {
      return async.async(dart.void, (function* signInWithRedirect() {
        try {
          return this[S$._delegate$1].signInWithRedirect(web_utils$.convertPlatformAuthProvider(provider));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(web_utils$.getFirebaseAuthException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    signOut() {
      return async.async(dart.void, (function* signOut() {
        try {
          yield this[S$._delegate$1].signOut();
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(web_utils$.getFirebaseAuthException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    useAuthEmulator(host, port) {
      return async.async(dart.void, (function* useAuthEmulator() {
        try {
          this[S$._delegate$1].useAuthEmulator("http://" + host + ":" + dart.str(port));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(web_utils$.getFirebaseAuthException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    verifyPasswordResetCode(code) {
      return async.async(core.String, (function* verifyPasswordResetCode() {
        try {
          return yield this[S$._delegate$1].verifyPasswordResetCode(code);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(web_utils$.getFirebaseAuthException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    verifyPhoneNumber(opts) {
      let phoneNumber = opts && 'phoneNumber' in opts ? opts.phoneNumber : null;
      let verificationCompleted = opts && 'verificationCompleted' in opts ? opts.verificationCompleted : null;
      let verificationFailed = opts && 'verificationFailed' in opts ? opts.verificationFailed : null;
      let codeSent = opts && 'codeSent' in opts ? opts.codeSent : null;
      let codeAutoRetrievalTimeout = opts && 'codeAutoRetrievalTimeout' in opts ? opts.codeAutoRetrievalTimeout : null;
      let autoRetrievedSmsCodeForTesting = opts && 'autoRetrievedSmsCodeForTesting' in opts ? opts.autoRetrievedSmsCodeForTesting : null;
      let timeout = opts && 'timeout' in opts ? opts.timeout : C[8] || CT.C8;
      let forceResendingToken = opts && 'forceResendingToken' in opts ? opts.forceResendingToken : null;
      dart.throw(new core.UnimplementedError.new("verifyPhoneNumber() is not supported on the web. Please use `signInWithPhoneNumber` instead."));
    }
  };
  (firebase_auth_web.FirebaseAuthWeb.__ = function() {
    this[S$._initialized] = T$.CompleterOfvoid().new();
    this[S$._webAuth] = null;
    firebase_auth_web.FirebaseAuthWeb.__proto__.new.call(this, {appInstance: null});
    ;
  }).prototype = firebase_auth_web.FirebaseAuthWeb.prototype;
  (firebase_auth_web.FirebaseAuthWeb.new = function(opts) {
    let app = opts && 'app' in opts ? opts.app : null;
    this[S$._initialized] = T$.CompleterOfvoid().new();
    this[S$._webAuth] = null;
    firebase_auth_web.FirebaseAuthWeb.__proto__.new.call(this, {appInstance: app});
    firebase_auth_web.FirebaseAuthWeb._userChangesListeners[S$.$_set](app.name, T$.StreamControllerOfUserPlatformN().broadcast());
    firebase_auth_web.FirebaseAuthWeb._authStateChangesListeners[S$.$_set](app.name, T$.StreamControllerOfUserPlatformN().broadcast());
    firebase_auth_web.FirebaseAuthWeb._idTokenChangesListeners[S$.$_set](app.name, T$.StreamControllerOfUserPlatformN().broadcast());
    this[S$._delegate$1].onAuthStateChanged.map(T$.UserWebN(), dart.fn(webUser => {
      if (!this[S$._initialized].isCompleted) {
        this[S$._initialized].complete();
      }
      if (webUser == null) {
        return null;
      } else {
        return new firebase_auth_web_user.UserWeb.new(this, webUser);
      }
    }, T$.UserNToUserWebN())).listen(dart.fn(webUser => {
      dart.nullCheck(firebase_auth_web.FirebaseAuthWeb._authStateChangesListeners[S$.$_get](app.name)).add(webUser);
    }, T$.UserWebNTovoid()));
    this[S$._delegate$1].onIdTokenChanged.map(T$.UserWebN(), dart.fn(webUser => {
      if (webUser == null) {
        return null;
      } else {
        return new firebase_auth_web_user.UserWeb.new(this, webUser);
      }
    }, T$.UserNToUserWebN())).listen(dart.fn(webUser => {
      dart.nullCheck(firebase_auth_web.FirebaseAuthWeb._idTokenChangesListeners[S$.$_get](app.name)).add(webUser);
      dart.nullCheck(firebase_auth_web.FirebaseAuthWeb._userChangesListeners[S$.$_get](app.name)).add(webUser);
    }, T$.UserWebNTovoid()));
  }).prototype = firebase_auth_web.FirebaseAuthWeb.prototype;
  dart.addTypeTests(firebase_auth_web.FirebaseAuthWeb);
  dart.addTypeCaches(firebase_auth_web.FirebaseAuthWeb);
  dart.setMethodSignature(firebase_auth_web.FirebaseAuthWeb, () => ({
    __proto__: dart.getMethods(firebase_auth_web.FirebaseAuthWeb.__proto__),
    setInitialValues: dart.fnType(firebase_auth_web.FirebaseAuthWeb, [], {currentUser: dart.nullable(core.Map$(core.String, dart.dynamic)), languageCode: dart.nullable(core.String)}, {}),
    sendSignInLinkToEmail: dart.fnType(async.Future$(dart.void), [core.String], [dart.nullable(action_code_settings.ActionCodeSettings)])
  }));
  dart.setStaticMethodSignature(firebase_auth_web.FirebaseAuthWeb, () => ['registerWith']);
  dart.setGetterSignature(firebase_auth_web.FirebaseAuthWeb, () => ({
    __proto__: dart.getGetters(firebase_auth_web.FirebaseAuthWeb.__proto__),
    [S$._delegate$1]: auth$.Auth,
    tenantId: dart.nullable(core.String),
    languageCode: core.String
  }));
  dart.setSetterSignature(firebase_auth_web.FirebaseAuthWeb, () => ({
    __proto__: dart.getSetters(firebase_auth_web.FirebaseAuthWeb.__proto__),
    tenantId: dart.nullable(core.String)
  }));
  dart.setStaticGetterSignature(firebase_auth_web.FirebaseAuthWeb, () => ['instance']);
  dart.setLibraryUri(firebase_auth_web.FirebaseAuthWeb, I[11]);
  dart.setFieldSignature(firebase_auth_web.FirebaseAuthWeb, () => ({
    __proto__: dart.getFields(firebase_auth_web.FirebaseAuthWeb.__proto__),
    [S$._initialized]: dart.fieldType(async.Completer$(dart.void)),
    [S$._webAuth]: dart.fieldType(dart.nullable(auth$.Auth))
  }));
  dart.setStaticFieldSignature(firebase_auth_web.FirebaseAuthWeb, () => ['_authStateChangesListeners', '_idTokenChangesListeners', '_userChangesListeners']);
  dart.defineLazy(firebase_auth_web.FirebaseAuthWeb, {
    /*firebase_auth_web.FirebaseAuthWeb._authStateChangesListeners*/get _authStateChangesListeners() {
      return new (T$.IdentityMapOfString$StreamControllerOfUserPlatformN()).new();
    },
    set _authStateChangesListeners(value) {},
    /*firebase_auth_web.FirebaseAuthWeb._idTokenChangesListeners*/get _idTokenChangesListeners() {
      return new (T$.IdentityMapOfString$StreamControllerOfUserPlatformN()).new();
    },
    set _idTokenChangesListeners(value) {},
    /*firebase_auth_web.FirebaseAuthWeb._userChangesListeners*/get _userChangesListeners() {
      return new (T$.IdentityMapOfString$StreamControllerOfUserPlatformN()).new();
    },
    set _userChangesListeners(value) {}
  }, false);
  firebase_core_platform_interface.FirebaseAppPlatform = class FirebaseAppPlatform extends plugin_platform_interface.PlatformInterface {
    get name() {
      return this[S$.name];
    }
    set name(value) {
      super.name = value;
    }
    get options() {
      return this[S$.options];
    }
    set options(value) {
      super.options = value;
    }
    static ['_#new#tearOff'](name, options) {
      return new firebase_core_platform_interface.FirebaseAppPlatform.new(name, options);
    }
    static verifyExtends(instance) {
      plugin_platform_interface.PlatformInterface.verifyToken(instance, firebase_core_platform_interface.FirebaseAppPlatform._token);
    }
    get [S$._isDefault]() {
      return this.name === "[DEFAULT]";
    }
    get isAutomaticDataCollectionEnabled() {
      dart.throw(new core.UnimplementedError.new("isAutomaticDataCollectionEnabled has not been implemented."));
    }
    delete() {
      return async.async(dart.void, function* $delete() {
        dart.throw(new core.UnimplementedError.new("delete() has not been implemented."));
      });
    }
    setAutomaticDataCollectionEnabled(enabled) {
      return async.async(dart.void, function* setAutomaticDataCollectionEnabled() {
        dart.throw(new core.UnimplementedError.new("setAutomaticDataCollectionEnabled() has not been implemented."));
      });
    }
    setAutomaticResourceManagementEnabled(enabled) {
      return async.async(dart.void, function* setAutomaticResourceManagementEnabled() {
        dart.throw(new core.UnimplementedError.new("setAutomaticResourceManagementEnabled() has not been implemented."));
      });
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!firebase_core_platform_interface.FirebaseAppPlatform.is(other)) return false;
      return other.name === this.name && other.options._equals(this.options);
    }
    get hashCode() {
      return core.Object.hash(this.name, this.options);
    }
    toString() {
      return dart.str(dart.wrapType(firebase_core_platform_interface.FirebaseAppPlatform)) + "(" + this.name + ")";
    }
  };
  (firebase_core_platform_interface.FirebaseAppPlatform.new = function(name, options) {
    this[S$.name] = name;
    this[S$.options] = options;
    firebase_core_platform_interface.FirebaseAppPlatform.__proto__.new.call(this, {token: firebase_core_platform_interface.FirebaseAppPlatform._token});
    ;
  }).prototype = firebase_core_platform_interface.FirebaseAppPlatform.prototype;
  dart.addTypeTests(firebase_core_platform_interface.FirebaseAppPlatform);
  dart.addTypeCaches(firebase_core_platform_interface.FirebaseAppPlatform);
  dart.setMethodSignature(firebase_core_platform_interface.FirebaseAppPlatform, () => ({
    __proto__: dart.getMethods(firebase_core_platform_interface.FirebaseAppPlatform.__proto__),
    delete: dart.fnType(async.Future$(dart.void), []),
    setAutomaticDataCollectionEnabled: dart.fnType(async.Future$(dart.void), [core.bool]),
    setAutomaticResourceManagementEnabled: dart.fnType(async.Future$(dart.void), [core.bool])
  }));
  dart.setStaticMethodSignature(firebase_core_platform_interface.FirebaseAppPlatform, () => ['verifyExtends']);
  dart.setGetterSignature(firebase_core_platform_interface.FirebaseAppPlatform, () => ({
    __proto__: dart.getGetters(firebase_core_platform_interface.FirebaseAppPlatform.__proto__),
    [S$._isDefault]: core.bool,
    isAutomaticDataCollectionEnabled: core.bool
  }));
  dart.setLibraryUri(firebase_core_platform_interface.FirebaseAppPlatform, I[12]);
  dart.setFieldSignature(firebase_core_platform_interface.FirebaseAppPlatform, () => ({
    __proto__: dart.getFields(firebase_core_platform_interface.FirebaseAppPlatform.__proto__),
    name: dart.finalFieldType(core.String),
    options: dart.finalFieldType(firebase_core_platform_interface.FirebaseOptions)
  }));
  dart.setStaticFieldSignature(firebase_core_platform_interface.FirebaseAppPlatform, () => ['_token']);
  dart.defineExtensionMethods(firebase_core_platform_interface.FirebaseAppPlatform, ['_equals', 'toString']);
  dart.defineExtensionAccessors(firebase_core_platform_interface.FirebaseAppPlatform, ['hashCode']);
  dart.defineLazy(firebase_core_platform_interface.FirebaseAppPlatform, {
    /*firebase_core_platform_interface.FirebaseAppPlatform._token*/get _token() {
      return new core.Object.new();
    }
  }, false);
  firebase_core_web.FirebaseAppWeb = class FirebaseAppWeb extends firebase_core_platform_interface.FirebaseAppPlatform {
    static ['_#_#tearOff'](name, options) {
      return new firebase_core_web.FirebaseAppWeb.__(name, options);
    }
    delete() {
      return async.async(dart.void, (function* $delete() {
        yield core$.app(this.name).delete();
      }).bind(this));
    }
    get isAutomaticDataCollectionEnabled() {
      return this[S$._isAutomaticDataCollectionEnabled];
    }
    setAutomaticDataCollectionEnabled(enabled) {
      this[S$._isAutomaticDataCollectionEnabled] = enabled;
      return T$.FutureOfvoid().value();
    }
    setAutomaticResourceManagementEnabled(enabled) {
      return T$.FutureOfvoid().value();
    }
  };
  (firebase_core_web.FirebaseAppWeb.__ = function(name, options) {
    this[S$._isAutomaticDataCollectionEnabled] = false;
    firebase_core_web.FirebaseAppWeb.__proto__.new.call(this, name, options);
    ;
  }).prototype = firebase_core_web.FirebaseAppWeb.prototype;
  dart.addTypeTests(firebase_core_web.FirebaseAppWeb);
  dart.addTypeCaches(firebase_core_web.FirebaseAppWeb);
  dart.setLibraryUri(firebase_core_web.FirebaseAppWeb, I[13]);
  dart.setFieldSignature(firebase_core_web.FirebaseAppWeb, () => ({
    __proto__: dart.getFields(firebase_core_web.FirebaseAppWeb.__proto__),
    [S$._isAutomaticDataCollectionEnabled]: dart.fieldType(core.bool)
  }));
  firebase_core_web.FirebaseWebService = class FirebaseWebService extends core.Object {
    get name() {
      return this[S$.name$1];
    }
    set name(value) {
      this[S$.name$1] = value;
    }
    get override() {
      return this[S$.override];
    }
    set override(value) {
      this[S$.override] = value;
    }
    static ['_#_#tearOff'](name, override = null) {
      return new firebase_core_web.FirebaseWebService.__(name, override);
    }
  };
  (firebase_core_web.FirebaseWebService.__ = function(name, override = null) {
    this[S$.name$1] = name;
    this[S$.override] = override;
    ;
  }).prototype = firebase_core_web.FirebaseWebService.prototype;
  dart.addTypeTests(firebase_core_web.FirebaseWebService);
  dart.addTypeCaches(firebase_core_web.FirebaseWebService);
  dart.setLibraryUri(firebase_core_web.FirebaseWebService, I[13]);
  dart.setFieldSignature(firebase_core_web.FirebaseWebService, () => ({
    __proto__: dart.getFields(firebase_core_web.FirebaseWebService.__proto__),
    name: dart.fieldType(core.String),
    override: dart.fieldType(dart.nullable(core.String))
  }));
  firebase_core_platform_interface.FirebasePlatform = class FirebasePlatform extends plugin_platform_interface.PlatformInterface {
    static get instance() {
      return firebase_core_platform_interface.FirebasePlatform._instance;
    }
    static set instance(instance) {
      plugin_platform_interface.PlatformInterface.verifyToken(instance, firebase_core_platform_interface.FirebasePlatform._token);
      firebase_core_platform_interface.FirebasePlatform._instance = instance;
    }
    get apps() {
      dart.throw(new core.UnimplementedError.new("apps has not been implemented."));
    }
    initializeApp(opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let options = opts && 'options' in opts ? opts.options : null;
      dart.throw(new core.UnimplementedError.new("initializeApp() has not been implemented."));
    }
    app(name = "[DEFAULT]") {
      dart.throw(new core.UnimplementedError.new("app() has not been implemented."));
    }
  };
  (firebase_core_platform_interface.FirebasePlatform.new = function() {
    firebase_core_platform_interface.FirebasePlatform.__proto__.new.call(this, {token: firebase_core_platform_interface.FirebasePlatform._token});
    ;
  }).prototype = firebase_core_platform_interface.FirebasePlatform.prototype;
  dart.addTypeTests(firebase_core_platform_interface.FirebasePlatform);
  dart.addTypeCaches(firebase_core_platform_interface.FirebasePlatform);
  dart.setMethodSignature(firebase_core_platform_interface.FirebasePlatform, () => ({
    __proto__: dart.getMethods(firebase_core_platform_interface.FirebasePlatform.__proto__),
    initializeApp: dart.fnType(async.Future$(firebase_core_platform_interface.FirebaseAppPlatform), [], {name: dart.nullable(core.String), options: dart.nullable(firebase_core_platform_interface.FirebaseOptions)}, {}),
    app: dart.fnType(firebase_core_platform_interface.FirebaseAppPlatform, [], [core.String])
  }));
  dart.setGetterSignature(firebase_core_platform_interface.FirebasePlatform, () => ({
    __proto__: dart.getGetters(firebase_core_platform_interface.FirebasePlatform.__proto__),
    apps: core.List$(firebase_core_platform_interface.FirebaseAppPlatform)
  }));
  dart.setStaticGetterSignature(firebase_core_platform_interface.FirebasePlatform, () => ['instance']);
  dart.setStaticSetterSignature(firebase_core_platform_interface.FirebasePlatform, () => ['instance']);
  dart.setLibraryUri(firebase_core_platform_interface.FirebasePlatform, I[12]);
  dart.setStaticFieldSignature(firebase_core_platform_interface.FirebasePlatform, () => ['_token', '_instance']);
  dart.defineLazy(firebase_core_platform_interface.FirebasePlatform, {
    /*firebase_core_platform_interface.FirebasePlatform._token*/get _token() {
      return new core.Object.new();
    },
    /*firebase_core_platform_interface.FirebasePlatform._instance*/get _instance() {
      return new firebase_core_platform_interface.MethodChannelFirebase.new();
    },
    set _instance(value) {}
  }, false);
  firebase_core_web.FirebaseCoreWeb = class FirebaseCoreWeb extends firebase_core_platform_interface.FirebasePlatform {
    static registerService(service) {
      firebase_core_web.FirebaseCoreWeb._services[S$.$putIfAbsent](service, dart.fn(() => new firebase_core_web.FirebaseWebService.__(service), T$.VoidToFirebaseWebService()));
    }
    static registerWith(registrar) {
      firebase_core_platform_interface.FirebasePlatform.instance = new firebase_core_web.FirebaseCoreWeb.new();
    }
    get [S$._firebaseSDKVersion]() {
      let t28;
      return core.String.as((t28 = js.context._get("flutterfire_web_sdk_version"), t28 == null ? "9.9.0" : t28));
    }
    get [S$._ignoredServiceScripts]() {
      try {
        let ignored = js.JsObject.fromBrowserObject(core.Object.as(js.context._get("flutterfire_ignore_scripts")));
        if (core.Iterable.is(ignored)) {
          return core.Iterable.as(ignored)[S$.$map](core.String, dart.fn(e => dart.toString(e), T$.dynamicToString()))[S$.$toList]({growable: false});
        }
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Object.is(e)) {
        } else
          throw e$;
      }
      return T$.JSArrayOfString().of([]);
    }
    [S$._injectSrcScript](src, windowVar) {
      return async.async(dart.void, function* _injectSrcScript() {
        let script = html.ScriptElement.new();
        script[S$.$type] = "text/javascript";
        script.crossOrigin = "anonymous";
        script[S$.$text] = "      window.ff_trigger_" + windowVar + " = async (callback) => {\n        callback(await import(\"" + src + "\"));\n      };\n    ";
        if (!(html.document[S$.$head] != null)) dart.assertFailed(null, I[14], 90, 12, "document.head != null");
        dart.nullCheck(html.document[S$.$head])[S$.$append](script);
        let completer = async.Completer.new();
        js.context.callMethod("ff_trigger_" + windowVar, [dart.fn(module => {
            js.context._set(windowVar, module);
            js.context.deleteProperty("ff_trigger_" + windowVar);
            completer.complete();
          }, T$.dynamicToNull())]);
        yield completer.future;
      });
    }
    [S$._initializeCore]() {
      return async.async(dart.void, (function* _initializeCore() {
        if (js.context._get("firebase_core") != null) {
          return;
        }
        let version = this[S$._firebaseSDKVersion];
        let ignored = this[S$._ignoredServiceScripts];
        yield async.Future.wait(dart.void, firebase_core_web.FirebaseCoreWeb._services[S$.$values][S$.$map](T$.FutureOfvoid(), dart.fn(service => {
          let t29, t29$;
          if (ignored[S$.$contains]((t29 = service.override, t29 == null ? service.name : t29))) {
            return async.Future.value();
          }
          return this[S$._injectSrcScript]("https://www.gstatic.com/firebasejs/" + version + "/firebase-" + service.name + ".js", "firebase_" + dart.str((t29$ = service.override, t29$ == null ? service.name : t29$)));
        }, T$.FirebaseWebServiceToFutureOfvoid())));
      }).bind(this));
    }
    get apps() {
      return firebase_core_web.guardNotInitialized(T$.ListOfFirebaseAppPlatform(), dart.fn(() => core$.apps[S$.$map](firebase_core_platform_interface.FirebaseAppPlatform, C[13] || CT.C13)[S$.$toList]({growable: false}), T$.VoidToListOfFirebaseAppPlatform()));
    }
    initializeApp(opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let options = opts && 'options' in opts ? opts.options : null;
      return async.async(firebase_core_platform_interface.FirebaseAppPlatform, (function* initializeApp() {
        yield this[S$._initializeCore]();
        firebase_core_web.guardNotInitialized(core.String, dart.fn(() => dart.global.firebase_core.SDK_VERSION, T$.VoidToString()));
        if (!dart.fn(() => {
          if (dart.global.firebase_core.SDK_VERSION !== "9.9.0") {
            core.print("            WARNING: FlutterFire for Web is explicitly tested against Firebase JS SDK version \"" + "9.9.0" + "\"\n            but your currently specifying \"" + dart.global.firebase_core.SDK_VERSION + "\" by either the imported Firebase JS SDKs in your web/index.html\n            file or by providing an override - this may lead to unexpected issues in your application. It is recommended that you change all of the versions of the\n            Firebase JS SDK version \"" + "9.9.0" + "\":\n\n            If you override the version manually:\n              change:\n                <script>window.flutterfire_web_sdk_version = '" + dart.global.firebase_core.SDK_VERSION + "';</script>\n              to:\n                <script>window.flutterfire_web_sdk_version = '" + "9.9.0" + "';</script>\n\n            If you import the Firebase scripts in index.html, instead allow FlutterFire to manage this for you by removing\n            any Firebase scripts in your web/index.html file:\n                e.g. remove: <script src=\"https://www.gstatic.com/firebasejs/" + dart.global.firebase_core.SDK_VERSION + "/firebase-app.js\"></script>\n          ");
          }
          return true;
        }, T$.VoidTobool())()) dart.assertFailed(null, I[14], 153, 7, "() {\n        if (firebase.SDK_VERSION != supportedFirebaseJsSdkVersion) {\n          // ignore: avoid_print\n          print(\n            '''\n            WARNING: FlutterFire for Web is explicitly tested against Firebase JS SDK version \"$supportedFirebaseJsSdkVersion\"\n            but your currently specifying \"${firebase.SDK_VERSION}\" by either the imported Firebase JS SDKs in your web/index.html\n            file or by providing an override - this may lead to unexpected issues in your application. It is recommended that you change all of the versions of the\n            Firebase JS SDK version \"$supportedFirebaseJsSdkVersion\":\n\n            If you override the version manually:\n              change:\n                <script>window.flutterfire_web_sdk_version = '${firebase.SDK_VERSION}';</script>\n              to:\n                <script>window.flutterfire_web_sdk_version = '$supportedFirebaseJsSdkVersion';</script>\n\n            If you import the Firebase scripts in index.html, instead allow FlutterFire to manage this for you by removing\n            any Firebase scripts in your web/index.html file:\n                e.g. remove: <script src=\"https://www.gstatic.com/firebasejs/${firebase.SDK_VERSION}/firebase-app.js\"></script>\n          ''',\n          );\n        }\n\n        return true;\n      }()");
        let app = null;
        if (name == null || name === "[DEFAULT]") {
          let defaultAppExists = false;
          try {
            app = core$.app();
            defaultAppExists = true;
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (core.Object.is(e)) {
            } else
              throw e$;
          }
          if (defaultAppExists) {
            if (options != null) {
              if (options.apiKey !== dart.nullCheck(app).options.apiKey || options.databaseURL !== app.options.databaseURL || options.storageBucket !== app.options.storageBucket) {
                dart.throw(firebase_core_platform_interface.duplicateApp("[DEFAULT]"));
              }
            }
          } else {
            if (!(options != null)) dart.assertFailed("FirebaseOptions cannot be null when creating the default app.", I[14], 207, 11, "options != null");
            app = core$.initializeApp({apiKey: dart.nullCheck(options).apiKey, authDomain: options.authDomain, databaseURL: options.databaseURL, projectId: options.projectId, storageBucket: options.storageBucket, messagingSenderId: options.messagingSenderId, appId: options.appId, measurementId: options.measurementId});
          }
        }
        if (name != null && name !== "[DEFAULT]") {
          if (!(options != null)) dart.assertFailed("FirebaseOptions cannot be null when creating a secondary Firebase app.", I[14], 229, 9, "options != null");
          try {
            app = core$.initializeApp({name: name, apiKey: dart.nullCheck(options).apiKey, authDomain: options.authDomain, databaseURL: options.databaseURL, projectId: options.projectId, storageBucket: options.storageBucket, messagingSenderId: options.messagingSenderId, appId: options.appId, measurementId: options.measurementId});
          } catch (e$0) {
            let e = dart.getThrown(e$0);
            if (core.Object.is(e)) {
              if (firebase_core_web._getJSErrorCode(e) === "app/duplicate-app") {
                dart.throw(firebase_core_platform_interface.duplicateApp(name));
              }
              dart.throw(firebase_core_web._catchJSError(e));
            } else
              throw e$0;
          }
        }
        return firebase_core_web._createFromJsApp(dart.nullCheck(app));
      }).bind(this));
    }
    app(name = "[DEFAULT]") {
      let app = null;
      try {
        app = firebase_core_web.guardNotInitialized(app$.App, dart.fn(() => core$.app(name), T$.VoidToApp()));
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Object.is(e)) {
          if (firebase_core_web._getJSErrorCode(e) === "app/no-app") {
            dart.throw(firebase_core_platform_interface.noAppExists(name));
          }
          dart.throw(firebase_core_web._catchJSError(e));
        } else
          throw e$;
      }
      return firebase_core_web._createFromJsApp(app);
    }
    static ['_#new#tearOff']() {
      return new firebase_core_web.FirebaseCoreWeb.new();
    }
  };
  (firebase_core_web.FirebaseCoreWeb.new = function() {
    firebase_core_web.FirebaseCoreWeb.__proto__.new.call(this);
    ;
  }).prototype = firebase_core_web.FirebaseCoreWeb.prototype;
  dart.addTypeTests(firebase_core_web.FirebaseCoreWeb);
  dart.addTypeCaches(firebase_core_web.FirebaseCoreWeb);
  dart.setMethodSignature(firebase_core_web.FirebaseCoreWeb, () => ({
    __proto__: dart.getMethods(firebase_core_web.FirebaseCoreWeb.__proto__),
    [S$._injectSrcScript]: dart.fnType(async.Future$(dart.void), [core.String, core.String]),
    [S$._initializeCore]: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setStaticMethodSignature(firebase_core_web.FirebaseCoreWeb, () => ['registerService', 'registerWith']);
  dart.setGetterSignature(firebase_core_web.FirebaseCoreWeb, () => ({
    __proto__: dart.getGetters(firebase_core_web.FirebaseCoreWeb.__proto__),
    [S$._firebaseSDKVersion]: core.String,
    [S$._ignoredServiceScripts]: core.List$(core.String)
  }));
  dart.setLibraryUri(firebase_core_web.FirebaseCoreWeb, I[13]);
  dart.setStaticFieldSignature(firebase_core_web.FirebaseCoreWeb, () => ['_services']);
  dart.defineLazy(firebase_core_web.FirebaseCoreWeb, {
    /*firebase_core_web.FirebaseCoreWeb._services*/get _services() {
      return new (T$.IdentityMapOfString$FirebaseWebService()).from(["core", new firebase_core_web.FirebaseWebService.__("app", "core"), "app-check", new firebase_core_web.FirebaseWebService.__("app-check", "app_check"), "remote-config", new firebase_core_web.FirebaseWebService.__("remote-config", "remote_config")]);
    },
    set _services(value) {}
  }, false);
  firebase_core_web._createFromJsApp = function _createFromJsApp(jsApp) {
    return new firebase_core_web.FirebaseAppWeb.__(jsApp.name, firebase_core_web._createFromJsOptions(jsApp.options));
  };
  firebase_core_web._createFromJsOptions = function _createFromJsOptions(options) {
    return new firebase_core_platform_interface.FirebaseOptions.new({apiKey: options.apiKey, authDomain: options.authDomain, databaseURL: options.databaseURL, projectId: options.projectId, storageBucket: options.storageBucket, messagingSenderId: options.messagingSenderId, appId: options.appId, measurementId: options.measurementId});
  };
  firebase_core_web._getJSErrorCode = function _getJSErrorCode(e) {
    let t32;
    if (dart.equals(js_util.getProperty(dart.dynamic, core.Object.as(e), "name"), "FirebaseError")) {
      t32 = js_util.getProperty(T$.StringN(), core.Object.as(e), "code");
      return t32 == null ? "" : t32;
    }
    return "";
  };
  firebase_core_web._catchJSError = function _catchJSError(e) {
    let t32;
    if (dart.equals(js_util.getProperty(dart.dynamic, core.Object.as(e), "name"), "FirebaseError")) {
      let rawCode = js_util.getProperty(core.String, core.Object.as(e), "code");
      let code = rawCode;
      let message = (t32 = js_util.getProperty(T$.StringN(), core.Object.as(e), "message"), t32 == null ? "" : t32);
      if (code[S$.$contains]("/")) {
        let chunks = code[S$.$split]("/");
        code = chunks[S$.$_get](chunks[S$.$length] - 1);
      }
      return new firebase_core_platform_interface.FirebaseException.new({plugin: "core", code: code, message: message[S$.$replaceAll](" (" + rawCode + ")", "")});
    }
    dart.throw(e);
  };
  firebase_core_web._handleException = function _handleException(exception, stackTrace) {
    if (exception[S$.$toString]()[S$.$contains]("of undefined")) {
      dart.throw(firebase_core_platform_interface.coreNotInitialized());
    }
    core.Error.throwWithStackTrace(exception, stackTrace);
  };
  firebase_core_web.guardNotInitialized = function guardNotInitialized(R, cb) {
    try {
      let value = cb();
      if (async.Future.is(value)) {
        return R.as(value.catchError(C[14] || CT.C14));
      }
      return value;
    } catch (e) {
      let error = dart.getThrown(e);
      let stackTrace = dart.stackTrace(e);
      if (core.Object.is(error)) {
        firebase_core_web._handleException(error, stackTrace);
      } else
        throw e;
    }
  };
  dart.defineLazy(firebase_core_web, {
    /*firebase_core_web.supportedFirebaseJsSdkVersion*/get supportedFirebaseJsSdkVersion() {
      return "9.9.0";
    }
  }, false);
  default_compaction_strategy.defaultCompactionStrategy = function defaultCompactionStrategy(entries, deletedEntries) {
    return deletedEntries > 60 && deletedEntries / entries > 0.15;
  };
  dart.defineLazy(default_compaction_strategy, {
    /*default_compaction_strategy._deletedRatio*/get _deletedRatio() {
      return 0.15;
    },
    /*default_compaction_strategy._deletedThreshold*/get _deletedThreshold() {
      return 60;
    }
  }, false);
  default_key_comparator.defaultKeyComparator = function defaultKeyComparator(k1, k2) {
    if (core.int.is(k1)) {
      if (core.int.is(k2)) {
        if (dart.notNull(k1) > dart.notNull(k2)) {
          return 1;
        } else if (dart.notNull(k1) < dart.notNull(k2)) {
          return -1;
        } else {
          return 0;
        }
      } else {
        return -1;
      }
    } else if (typeof k2 == 'string') {
      return core.String.as(k1)[S$.$compareTo](k2);
    } else {
      return 1;
    }
  };
  aes_cbc_pkcs7.AesCbcPkcs7 = class AesCbcPkcs7 extends core.Object {
    get [S$._encryptionKey]() {
      let t34, t33;
      t33 = this[S$.__AesCbcPkcs7__encryptionKey];
      return t33 == null ? (t34 = aes_engine.AesEngine.generateWorkingKey(this[S$._keyBytes], true), this[S$.__AesCbcPkcs7__encryptionKey] == null ? this[S$.__AesCbcPkcs7__encryptionKey] = t34 : dart.throw(new _internal.LateError.fieldADI("_encryptionKey"))) : t33;
    }
    get [S$._decryptionKey]() {
      let t34, t33;
      t33 = this[S$.__AesCbcPkcs7__decryptionKey];
      return t33 == null ? (t34 = aes_engine.AesEngine.generateWorkingKey(this[S$._keyBytes], false), this[S$.__AesCbcPkcs7__decryptionKey] == null ? this[S$.__AesCbcPkcs7__decryptionKey] = t34 : dart.throw(new _internal.LateError.fieldADI("_decryptionKey"))) : t33;
    }
    static ['_#new#tearOff'](_keyBytes) {
      return new aes_cbc_pkcs7.AesCbcPkcs7.new(_keyBytes);
    }
    encrypt(iv, inp, inpOff, inpLength, out, outOff) {
      let t34, t33, t34$, t33$;
      let cbcV = _native_typed_data.NativeUint8List.fromList(iv);
      let inputBlocks = ((inpLength + 16) / 16)[S$.$truncate]();
      let remaining = inpLength[S$.$modulo](16);
      let offset = 0;
      for (let i = 0; i < inputBlocks - 1; i = i + 1) {
        for (let i = 0; i < 16; i = i + 1) {
          t33 = cbcV;
          t34 = i;
          t33[S$.$_set](t34, (t33[S$.$_get](t34) ^ inp[S$.$_get](inpOff + offset + i)) >>> 0);
        }
        aes_engine.AesEngine.encryptBlock(this[S$._encryptionKey], cbcV, 0, out, outOff + offset);
        cbcV[S$.$setRange](0, 16, out, outOff + offset);
        offset = offset + 16;
      }
      let lastInputBlock = aes_cbc_pkcs7.AesCbcPkcs7._lastInputBlockBuffer;
      lastInputBlock[S$.$setRange](0, remaining, inp, inpOff + offset);
      lastInputBlock[S$.$fillRange](remaining, 16, 16 - remaining);
      for (let i = 0; i < 16; i = i + 1) {
        t33$ = cbcV;
        t34$ = i;
        t33$[S$.$_set](t34$, (t33$[S$.$_get](t34$) ^ lastInputBlock[S$.$_get](i)) >>> 0);
      }
      aes_engine.AesEngine.encryptBlock(this[S$._encryptionKey], cbcV, 0, out, outOff + offset);
      return offset + 16;
    }
    decrypt(iv, inp, inpOff, inpLength, out, outOff) {
      let t34, t33, t34$, t33$;
      let inputBlocks = ((inpLength + 16 - 1) / 16)[S$.$truncate]();
      let offset = 0;
      aes_engine.AesEngine.decryptBlock(this[S$._decryptionKey], inp, inpOff, out, outOff);
      for (let i = 0; i < 16; i = i + 1) {
        t33 = out;
        t34 = outOff + i;
        t33[S$.$_set](t34, (t33[S$.$_get](t34) ^ iv[S$.$_get](i)) >>> 0);
      }
      offset = offset + 16;
      for (let i = 0; i < inputBlocks - 1; i = i + 1) {
        aes_engine.AesEngine.decryptBlock(this[S$._decryptionKey], inp, inpOff + offset, out, outOff + offset);
        for (let i = 0; i < 16; i = i + 1) {
          t33$ = out;
          t34$ = outOff + offset + i;
          t33$[S$.$_set](t34$, (t33$[S$.$_get](t34$) ^ inp[S$.$_get](inpOff - 16 + offset + i)) >>> 0);
        }
        offset = offset + 16;
      }
      let lastDecryptedByte = out[S$.$_get](outOff + offset - 1);
      if (lastDecryptedByte > 16) {
        dart.throw(new core.ArgumentError.new("Invalid or corrupted pad block"));
      }
      for (let i = 0; i < lastDecryptedByte; i = i + 1) {
        if (out[S$.$_get](outOff + offset - i - 1) !== lastDecryptedByte) {
          dart.throw(new core.ArgumentError.new("Invalid or corrupted pad block"));
        }
      }
      return offset - lastDecryptedByte;
    }
  };
  (aes_cbc_pkcs7.AesCbcPkcs7.new = function(_keyBytes) {
    this[S$.__AesCbcPkcs7__encryptionKey] = null;
    this[S$.__AesCbcPkcs7__decryptionKey] = null;
    this[S$._keyBytes] = _keyBytes;
    ;
  }).prototype = aes_cbc_pkcs7.AesCbcPkcs7.prototype;
  dart.addTypeTests(aes_cbc_pkcs7.AesCbcPkcs7);
  dart.addTypeCaches(aes_cbc_pkcs7.AesCbcPkcs7);
  dart.setMethodSignature(aes_cbc_pkcs7.AesCbcPkcs7, () => ({
    __proto__: dart.getMethods(aes_cbc_pkcs7.AesCbcPkcs7.__proto__),
    encrypt: dart.fnType(core.int, [typed_data.Uint8List, typed_data.Uint8List, core.int, core.int, typed_data.Uint8List, core.int]),
    decrypt: dart.fnType(core.int, [typed_data.Uint8List, typed_data.Uint8List, core.int, core.int, typed_data.Uint8List, core.int])
  }));
  dart.setGetterSignature(aes_cbc_pkcs7.AesCbcPkcs7, () => ({
    __proto__: dart.getGetters(aes_cbc_pkcs7.AesCbcPkcs7.__proto__),
    [S$._encryptionKey]: core.List$(typed_data.Uint32List),
    [S$._decryptionKey]: core.List$(typed_data.Uint32List)
  }));
  dart.setLibraryUri(aes_cbc_pkcs7.AesCbcPkcs7, I[15]);
  dart.setFieldSignature(aes_cbc_pkcs7.AesCbcPkcs7, () => ({
    __proto__: dart.getFields(aes_cbc_pkcs7.AesCbcPkcs7.__proto__),
    [S$._keyBytes]: dart.finalFieldType(typed_data.Uint8List),
    [S$.__AesCbcPkcs7__encryptionKey]: dart.fieldType(dart.nullable(core.List$(typed_data.Uint32List))),
    [S$.__AesCbcPkcs7__decryptionKey]: dart.fieldType(dart.nullable(core.List$(typed_data.Uint32List)))
  }));
  dart.setStaticFieldSignature(aes_cbc_pkcs7.AesCbcPkcs7, () => ['_lastInputBlockBuffer']);
  dart.defineLazy(aes_cbc_pkcs7.AesCbcPkcs7, {
    /*aes_cbc_pkcs7.AesCbcPkcs7._lastInputBlockBuffer*/get _lastInputBlockBuffer() {
      return _native_typed_data.NativeUint8List.new(16);
    }
  }, false);
  crc32.Crc32 = class Crc32 extends core.Object {
    static compute(bytes, opts) {
      let crc = opts && 'crc' in opts ? opts.crc : 0;
      let offset = opts && 'offset' in opts ? opts.offset : 0;
      let length = opts && 'length' in opts ? opts.length : null;
      crc = (crc ^ 4294967295) >>> 0;
      length == null ? length = bytes[S$.$length] : null;
      for (let i = offset; i < offset + dart.notNull(length); i = i + 1) {
        crc = (crc32.Crc32._table[S$.$_get]((crc ^ bytes[S$.$_get](i)) & 255) ^ crc[S$.$rightShift](8)) >>> 0;
      }
      return (crc ^ 4294967295) >>> 0;
    }
    static ['_#new#tearOff']() {
      return new crc32.Crc32.new();
    }
  };
  (crc32.Crc32.new = function() {
    ;
  }).prototype = crc32.Crc32.prototype;
  dart.addTypeTests(crc32.Crc32);
  dart.addTypeCaches(crc32.Crc32);
  dart.setStaticMethodSignature(crc32.Crc32, () => ['compute']);
  dart.setLibraryUri(crc32.Crc32, I[16]);
  dart.setStaticFieldSignature(crc32.Crc32, () => ['_table']);
  dart.defineLazy(crc32.Crc32, {
    /*crc32.Crc32._table*/get _table() {
      return C[15] || CT.C15;
    }
  }, false);
  type_registry_impl.TypeRegistryImpl = class TypeRegistryImpl extends core.Object {
    findAdapterForValue(value) {
      let match = null;
      for (let adapter of this[S$._typeAdapters][S$.$values]) {
        if (adapter.matchesRuntimeType(value)) {
          return adapter;
        }
        if (adapter.matchesType(value) && match == null) {
          match = adapter;
        }
      }
      return match;
    }
    findAdapterForTypeId(typeId) {
      return this[S$._typeAdapters][S$.$_get](typeId);
    }
    registerAdapter(T, adapter, opts) {
      let internal = opts && 'internal' in opts ? opts.internal : false;
      let override = opts && 'override' in opts ? opts.override : false;
      if (dart.wrapType(T)._equals(dart.wrapType(dart.dynamic)) || dart.wrapType(T)._equals(dart.wrapType(core.Object))) {
        core.print("Registering type adapters for dynamic type is must be avoided, " + "otherwise all the write requests to Hive will be handled by given " + "adapter. Please explicitly provide adapter type on registerAdapter " + "method to avoid this kind of issues. For example if you want to " + "register MyTypeAdapter for MyType class you can call like this: " + "registerAdapter<MyType>(MyTypeAdapter())");
      }
      let typeId = adapter.typeId;
      if (!internal) {
        if (typeId < 0 || typeId > 223) {
          dart.throw(new hive.HiveError.new("TypeId " + dart.str(typeId) + " not allowed."));
        }
        typeId = typeId + 32;
        let oldAdapter = this.findAdapterForTypeId(typeId);
        if (oldAdapter != null) {
          if (override) {
            core.print("You are trying to override " + dart.runtimeType(oldAdapter).toString() + "with " + adapter[S$.$runtimeType].toString() + " for typeId: " + dart.str(adapter.typeId) + ". Please note that overriding adapters might " + "cause weird errors. Try to avoid overriding adapters unless not " + "required.");
          } else {
            dart.throw(new hive.HiveError.new("There is already a TypeAdapter for " + "typeId " + dart.str(typeId - 32) + "."));
          }
        }
      }
      let resolved = new (type_registry_impl.ResolvedAdapter$(T)).new(adapter, typeId);
      this[S$._typeAdapters][S$.$_set](typeId, resolved);
    }
    isAdapterRegistered(typeId, opts) {
      let internal = opts && 'internal' in opts ? opts.internal : false;
      if (!internal) {
        if (typeId < 0 || typeId > 223) {
          dart.throw(new hive.HiveError.new("TypeId " + dart.str(typeId) + " not allowed."));
        }
        typeId = typeId + 32;
      }
      return this.findAdapterForTypeId(typeId) != null;
    }
    resetAdapters() {
      this[S$._typeAdapters][S$.$clear]();
    }
    ignoreTypeId(T, typeId) {
      this.registerAdapter(dart.nullable(T), new (ignored_type_adapter.IgnoredTypeAdapter$(T)).new(typeId));
    }
    static ['_#new#tearOff']() {
      return new type_registry_impl.TypeRegistryImpl.new();
    }
  };
  (type_registry_impl.TypeRegistryImpl.new = function() {
    this[S$._typeAdapters] = new (T$.IdentityMapOfint$ResolvedAdapter()).new();
    ;
  }).prototype = type_registry_impl.TypeRegistryImpl.prototype;
  dart.addTypeTests(type_registry_impl.TypeRegistryImpl);
  dart.addTypeCaches(type_registry_impl.TypeRegistryImpl);
  type_registry_impl.TypeRegistryImpl[dart.implements] = () => [hive.TypeRegistry];
  dart.setMethodSignature(type_registry_impl.TypeRegistryImpl, () => ({
    __proto__: dart.getMethods(type_registry_impl.TypeRegistryImpl.__proto__),
    findAdapterForValue: dart.fnType(dart.nullable(type_registry_impl.ResolvedAdapter), [dart.dynamic]),
    findAdapterForTypeId: dart.fnType(dart.nullable(type_registry_impl.ResolvedAdapter), [core.int]),
    registerAdapter: dart.gFnType(T => [dart.void, [hive.TypeAdapter$(T)], {internal: core.bool, override: core.bool}, {}], T => [dart.nullable(core.Object)]),
    isAdapterRegistered: dart.fnType(core.bool, [core.int], {internal: core.bool}, {}),
    resetAdapters: dart.fnType(dart.void, []),
    ignoreTypeId: dart.gFnType(T => [dart.void, [core.int]], T => [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(type_registry_impl.TypeRegistryImpl, I[18]);
  dart.setFieldSignature(type_registry_impl.TypeRegistryImpl, () => ({
    __proto__: dart.getFields(type_registry_impl.TypeRegistryImpl.__proto__),
    [S$._typeAdapters]: dart.finalFieldType(core.Map$(core.int, type_registry_impl.ResolvedAdapter))
  }));
  dart.setStaticFieldSignature(type_registry_impl.TypeRegistryImpl, () => ['nullImpl', 'reservedTypeIds']);
  dart.defineLazy(type_registry_impl.TypeRegistryImpl, {
    /*type_registry_impl.TypeRegistryImpl.nullImpl*/get nullImpl() {
      return C[18] || CT.C18;
    },
    /*type_registry_impl.TypeRegistryImpl.reservedTypeIds*/get reservedTypeIds() {
      return 32;
    }
  }, false);
  hive_impl.HiveImpl = class HiveImpl extends type_registry_impl.TypeRegistryImpl {
    get homePath() {
      return this[S$.homePath];
    }
    set homePath(value) {
      this[S$.homePath] = value;
    }
    static ['_#new#tearOff']() {
      return new hive_impl.HiveImpl.new();
    }
    get [S$._manager]() {
      let t33;
      t33 = this[S$._managerOverride];
      return t33 == null ? hive_impl.HiveImpl._defaultBackendManager : t33;
    }
    [S$._registerDefaultAdapters]() {
      this.registerAdapter(core.DateTime, new date_time_adapter.DateTimeWithTimezoneAdapter.new(), {internal: true});
      this.registerAdapter(date_time_adapter.DateTimeWithoutTZ, new (T$.DateTimeAdapterOfDateTimeWithoutTZ()).new(), {internal: true});
      this.registerAdapter(core.BigInt, new big_int_adapter.BigIntAdapter.new(), {internal: true});
    }
    init(path, opts) {
      let backendPreference = opts && 'backendPreference' in opts ? opts.backendPreference : C[5] || CT.C5;
      this.homePath = path;
      this[S$._managerOverride] = backend_manager.BackendManager.select(backendPreference);
    }
    [S$._openBox](E, name, lazy, cipher, comparator, compaction, recovery, path, bytes, collection) {
      return async.async(hive.BoxBase$(E), (function* _openBox() {
        let t33, t34;
        if (!(path == null || bytes == null)) dart.assertFailed(null, I[17], 72, 12, "path == null || bytes == null");
        if (!(name.length <= 255 && extensions['StringX|get#isAscii'](name))) dart.assertFailed("Box names need to be ASCII Strings with a max length of 255.", I[17], 73, 12, "name.length <= 255 && name.isAscii");
        name = name[S$.$toLowerCase]();
        if (this.isBoxOpen(name)) {
          if (lazy) {
            return this.lazyBox(E, name);
          } else {
            return this.box(E, name);
          }
        } else {
          if (this[S$._openingBoxes][S$.$containsKey](name)) {
            yield this[S$._openingBoxes][S$.$_get](name);
            if (lazy) {
              return this.lazyBox(E, name);
            } else {
              return this.box(E, name);
            }
          }
          let completer = async.Completer.new();
          this[S$._openingBoxes][S$.$_set](name, completer.future);
          let newBox = null;
          try {
            let backend = null;
            if (bytes != null) {
              backend = new storage_backend_memory.StorageBackendMemory.new(bytes, cipher);
            } else {
              backend = (yield this[S$._manager].open(name, (t33 = path, t33 == null ? this.homePath : t33), recovery, cipher, collection));
            }
            if (lazy) {
              newBox = new (lazy_box_impl.LazyBoxImpl$(E)).new(this, name, comparator, compaction, backend);
            } else {
              newBox = new (box_impl.BoxImpl$(E)).new(this, name, comparator, compaction, backend);
            }
            yield newBox.initialize();
            this[S$._boxes][S$.$_set](name, newBox);
            completer.complete();
            return newBox;
          } catch (e) {
            let error = dart.getThrown(e);
            let stackTrace = dart.stackTrace(e);
            if (core.Object.is(error)) {
              t34 = newBox;
              t34 == null ? null : t34.close();
              completer.completeError(error, stackTrace);
              dart.rethrow(e);
            } else
              throw e;
          } finally {
            this[S$._openingBoxes][S$.$remove](name);
          }
        }
      }).bind(this));
    }
    openBox(E, name, opts) {
      let encryptionCipher = opts && 'encryptionCipher' in opts ? opts.encryptionCipher : null;
      let keyComparator = opts && 'keyComparator' in opts ? opts.keyComparator : C[16] || CT.C16;
      let compactionStrategy = opts && 'compactionStrategy' in opts ? opts.compactionStrategy : C[17] || CT.C17;
      let crashRecovery = opts && 'crashRecovery' in opts ? opts.crashRecovery : true;
      let path = opts && 'path' in opts ? opts.path : null;
      let bytes = opts && 'bytes' in opts ? opts.bytes : null;
      let collection = opts && 'collection' in opts ? opts.collection : null;
      let encryptionKey = opts && 'encryptionKey' in opts ? opts.encryptionKey : null;
      return async.async(hive.Box$(E), (function* openBox() {
        if (encryptionKey != null) {
          encryptionCipher = new hive.HiveAesCipher.new(encryptionKey);
        }
        return hive.Box$(E).as(yield this[S$._openBox](E, name, false, encryptionCipher, keyComparator, compactionStrategy, crashRecovery, path, bytes, collection));
      }).bind(this));
    }
    openLazyBox(E, name, opts) {
      let encryptionCipher = opts && 'encryptionCipher' in opts ? opts.encryptionCipher : null;
      let keyComparator = opts && 'keyComparator' in opts ? opts.keyComparator : C[16] || CT.C16;
      let compactionStrategy = opts && 'compactionStrategy' in opts ? opts.compactionStrategy : C[17] || CT.C17;
      let crashRecovery = opts && 'crashRecovery' in opts ? opts.crashRecovery : true;
      let path = opts && 'path' in opts ? opts.path : null;
      let collection = opts && 'collection' in opts ? opts.collection : null;
      let encryptionKey = opts && 'encryptionKey' in opts ? opts.encryptionKey : null;
      return async.async(hive.LazyBox$(E), (function* openLazyBox() {
        if (encryptionKey != null) {
          encryptionCipher = new hive.HiveAesCipher.new(encryptionKey);
        }
        return hive.LazyBox$(E).as(yield this[S$._openBox](E, name, true, encryptionCipher, keyComparator, compactionStrategy, crashRecovery, path, null, collection));
      }).bind(this));
    }
    [S$._getBoxInternal](E, name, lazy = null) {
      let lowerCaseName = name[S$.$toLowerCase]();
      let box = this[S$._boxes][S$.$_get](lowerCaseName);
      if (box != null) {
        if ((lazy == null || box.lazy === lazy) && box.valueType._equals(dart.wrapType(E))) {
          return hive.BoxBase$(E).as(box);
        } else {
          let typeName = hive.LazyBox.is(box) ? "LazyBox<" + dart.str(box.valueType) + ">" : "Box<" + dart.str(box.valueType) + ">";
          dart.throw(new hive.HiveError.new("The box \"" + lowerCaseName + "\" is already open " + "and of type " + typeName + "."));
        }
      } else {
        dart.throw(new hive.HiveError.new("Box not found. Did you forget to call Hive.openBox()?"));
      }
    }
    getBoxWithoutCheckInternal(name) {
      let lowerCaseName = name[S$.$toLowerCase]();
      return this[S$._boxes][S$.$_get](lowerCaseName);
    }
    box(E, name) {
      return hive.Box$(E).as(this[S$._getBoxInternal](E, name, false));
    }
    lazyBox(E, name) {
      return hive.LazyBox$(E).as(this[S$._getBoxInternal](E, name, true));
    }
    isBoxOpen(name) {
      return this[S$._boxes][S$.$containsKey](name[S$.$toLowerCase]());
    }
    close() {
      let closeFutures = this[S$._boxes][S$.$values][S$.$map](T$.FutureOfvoid(), dart.fn(box => box.close(), T$.BoxBaseImplToFutureOfvoid()));
      return async.Future.wait(dart.void, closeFutures);
    }
    unregisterBox(name) {
      name = name[S$.$toLowerCase]();
      this[S$._openingBoxes][S$.$remove](name);
      this[S$._boxes][S$.$remove](name);
    }
    deleteBoxFromDisk(name, opts) {
      let path = opts && 'path' in opts ? opts.path : null;
      let collection = opts && 'collection' in opts ? opts.collection : null;
      return async.async(dart.void, (function* deleteBoxFromDisk() {
        let t34;
        let lowerCaseName = name[S$.$toLowerCase]();
        let box = this[S$._boxes][S$.$_get](lowerCaseName);
        if (box != null) {
          yield box.deleteFromDisk();
        } else {
          yield this[S$._manager].deleteBox(lowerCaseName, (t34 = path, t34 == null ? this.homePath : t34), collection);
        }
      }).bind(this));
    }
    deleteFromDisk() {
      let deleteFutures = this[S$._boxes][S$.$values][S$.$toList]()[S$.$map](T$.FutureOfvoid(), dart.fn(box => box.deleteFromDisk(), T$.BoxBaseImplToFutureOfvoid()));
      return async.Future.wait(dart.void, deleteFutures);
    }
    generateSecureKey() {
      return extensions['RandomX|nextBytes'](this[S$._secureRandom], 32);
    }
    boxExists(name, opts) {
      let path = opts && 'path' in opts ? opts.path : null;
      let collection = opts && 'collection' in opts ? opts.collection : null;
      return async.async(core.bool, (function* boxExists() {
        let t34;
        let lowerCaseName = name[S$.$toLowerCase]();
        return yield this[S$._manager].boxExists(lowerCaseName, (t34 = path, t34 == null ? this.homePath : t34), collection);
      }).bind(this));
    }
  };
  (hive_impl.HiveImpl.new = function() {
    this[S$._boxes] = new (T$.IdentityMapOfString$BoxBaseImpl()).new();
    this[S$._openingBoxes] = new (T$.IdentityMapOfString$Future()).new();
    this[S$._managerOverride] = null;
    this[S$._secureRandom] = math.Random.secure();
    this[S$.homePath] = null;
    hive_impl.HiveImpl.__proto__.new.call(this);
    this[S$._registerDefaultAdapters]();
  }).prototype = hive_impl.HiveImpl.prototype;
  dart.addTypeTests(hive_impl.HiveImpl);
  dart.addTypeCaches(hive_impl.HiveImpl);
  hive_impl.HiveImpl[dart.implements] = () => [hive.HiveInterface];
  dart.setMethodSignature(hive_impl.HiveImpl, () => ({
    __proto__: dart.getMethods(hive_impl.HiveImpl.__proto__),
    [S$._registerDefaultAdapters]: dart.fnType(dart.void, []),
    init: dart.fnType(dart.void, [dart.nullable(core.String)], {backendPreference: hive.HiveStorageBackendPreference}, {}),
    [S$._openBox]: dart.gFnType(E => [async.Future$(hive.BoxBase$(E)), [core.String, core.bool, dart.nullable(hive.HiveCipher), dart.fnType(core.int, [dart.dynamic, dart.dynamic]), dart.fnType(core.bool, [core.int, core.int]), core.bool, dart.nullable(core.String), dart.nullable(typed_data.Uint8List), dart.nullable(core.String)]], E => [dart.nullable(core.Object)]),
    openBox: dart.gFnType(E => [async.Future$(hive.Box$(E)), [core.String], {bytes: dart.nullable(typed_data.Uint8List), collection: dart.nullable(core.String), compactionStrategy: dart.fnType(core.bool, [core.int, core.int]), crashRecovery: core.bool, encryptionCipher: dart.nullable(hive.HiveCipher), encryptionKey: dart.nullable(core.List$(core.int)), keyComparator: dart.fnType(core.int, [dart.dynamic, dart.dynamic]), path: dart.nullable(core.String)}, {}], E => [dart.nullable(core.Object)]),
    openLazyBox: dart.gFnType(E => [async.Future$(hive.LazyBox$(E)), [core.String], {collection: dart.nullable(core.String), compactionStrategy: dart.fnType(core.bool, [core.int, core.int]), crashRecovery: core.bool, encryptionCipher: dart.nullable(hive.HiveCipher), encryptionKey: dart.nullable(core.List$(core.int)), keyComparator: dart.fnType(core.int, [dart.dynamic, dart.dynamic]), path: dart.nullable(core.String)}, {}], E => [dart.nullable(core.Object)]),
    [S$._getBoxInternal]: dart.gFnType(E => [hive.BoxBase$(E), [core.String], [dart.nullable(core.bool)]], E => [dart.nullable(core.Object)]),
    getBoxWithoutCheckInternal: dart.fnType(dart.nullable(hive.BoxBase), [core.String]),
    box: dart.gFnType(E => [hive.Box$(E), [core.String]], E => [dart.nullable(core.Object)]),
    lazyBox: dart.gFnType(E => [hive.LazyBox$(E), [core.String]], E => [dart.nullable(core.Object)]),
    isBoxOpen: dart.fnType(core.bool, [core.String]),
    close: dart.fnType(async.Future$(dart.void), []),
    unregisterBox: dart.fnType(dart.void, [core.String]),
    deleteBoxFromDisk: dart.fnType(async.Future$(dart.void), [core.String], {collection: dart.nullable(core.String), path: dart.nullable(core.String)}, {}),
    deleteFromDisk: dart.fnType(async.Future$(dart.void), []),
    generateSecureKey: dart.fnType(core.List$(core.int), []),
    boxExists: dart.fnType(async.Future$(core.bool), [core.String], {collection: dart.nullable(core.String), path: dart.nullable(core.String)}, {})
  }));
  dart.setGetterSignature(hive_impl.HiveImpl, () => ({
    __proto__: dart.getGetters(hive_impl.HiveImpl.__proto__),
    [S$._manager]: storage_backend.BackendManagerInterface
  }));
  dart.setLibraryUri(hive_impl.HiveImpl, I[19]);
  dart.setFieldSignature(hive_impl.HiveImpl, () => ({
    __proto__: dart.getFields(hive_impl.HiveImpl.__proto__),
    [S$._boxes]: dart.finalFieldType(collection.HashMap$(core.String, box_base_impl.BoxBaseImpl)),
    [S$._openingBoxes]: dart.finalFieldType(collection.HashMap$(core.String, async.Future)),
    [S$._managerOverride]: dart.fieldType(dart.nullable(storage_backend.BackendManagerInterface)),
    [S$._secureRandom]: dart.finalFieldType(math.Random),
    homePath: dart.fieldType(dart.nullable(core.String))
  }));
  dart.setStaticFieldSignature(hive_impl.HiveImpl, () => ['_defaultBackendManager']);
  dart.defineLazy(hive_impl.HiveImpl, {
    /*hive_impl.HiveImpl._defaultBackendManager*/get _defaultBackendManager() {
      return backend_manager.BackendManager.select();
    }
  }, false);
  const _is_HiveCollectionMixin_default = Symbol('_is_HiveCollectionMixin_default');
  hive_collection_mixin.HiveCollectionMixin$ = dart.generic(E => {
    var __t$LinkedMapOfdynamic$E = () => (__t$LinkedMapOfdynamic$E = dart.constFn(_js_helper.LinkedMap$(dart.dynamic, E)))();
    class HiveCollectionMixin extends core.Object {
      get keys() {
        return new _js_helper.SyncIterable.new((function* keys() {
          for (let value of this) {
            yield value.key;
          }
        }).bind(this));
      }
      deleteAllFromHive() {
        return this.box.deleteAll(this.keys);
      }
      deleteFirstFromHive() {
        return this[S$.$first].delete();
      }
      deleteLastFromHive() {
        return this[S$.$last].delete();
      }
      deleteFromHive(index) {
        return this[S$.$_get](index).delete();
      }
      toMap() {
        let map = new (__t$LinkedMapOfdynamic$E()).new();
        for (let item of this) {
          map[S$.$_set](item.key, item);
        }
        return map;
      }
      [Symbol.iterator]() {
        return new dart.JsIterator(this[S$.$iterator]);
      }
    }
    (HiveCollectionMixin.new = function() {
      ;
    }).prototype = HiveCollectionMixin.prototype;
    dart.addTypeTests(HiveCollectionMixin);
    HiveCollectionMixin.prototype[_is_HiveCollectionMixin_default] = true;
    dart.addTypeCaches(HiveCollectionMixin);
    HiveCollectionMixin[dart.implements] = () => [hive.HiveCollection$(E)];
    dart.setMethodSignature(HiveCollectionMixin, () => ({
      __proto__: dart.getMethods(HiveCollectionMixin.__proto__),
      deleteAllFromHive: dart.fnType(async.Future$(dart.void), []),
      deleteFirstFromHive: dart.fnType(async.Future$(dart.void), []),
      deleteLastFromHive: dart.fnType(async.Future$(dart.void), []),
      deleteFromHive: dart.fnType(async.Future$(dart.void), [core.int]),
      toMap: dart.fnType(core.Map$(dart.dynamic, E), [])
    }));
    dart.setGetterSignature(HiveCollectionMixin, () => ({
      __proto__: dart.getGetters(HiveCollectionMixin.__proto__),
      keys: core.Iterable
    }));
    dart.setLibraryUri(HiveCollectionMixin, I[20]);
    return HiveCollectionMixin;
  });
  hive_collection_mixin.HiveCollectionMixin = hive_collection_mixin.HiveCollectionMixin$();
  dart.addTypeTests(hive_collection_mixin.HiveCollectionMixin, _is_HiveCollectionMixin_default);
  const _is_DelegatingListViewMixin_default = Symbol('_is_DelegatingListViewMixin_default');
  delegating_list_view_mixin.DelegatingListViewMixin$ = dart.generic(E => {
    var __t$ListOfE = () => (__t$ListOfE = dart.constFn(core.List$(E)))();
    var __t$VoidToE = () => (__t$VoidToE = dart.constFn(dart.fnType(E, [])))();
    var __t$VoidToNE = () => (__t$VoidToNE = dart.constFn(dart.nullable(__t$VoidToE())))();
    var __t$IterableOfE = () => (__t$IterableOfE = dart.constFn(core.Iterable$(E)))();
    var __t$EAndEToE = () => (__t$EAndEToE = dart.constFn(dart.fnType(E, [E, E])))();
    class DelegatingListViewMixin extends core.Object {
      get first() {
        return this.delegate[S$.$first];
      }
      get last() {
        return this.delegate[S$.$last];
      }
      get length() {
        return this.delegate[S$.$length];
      }
      ['+'](other) {
        __t$ListOfE().as(other);
        return this.delegate[S$.$plus](other);
      }
      _get(index) {
        return this.delegate[S$.$_get](index);
      }
      any(test) {
        return this.delegate[S$.$any](test);
      }
      asMap() {
        return this.delegate[S$.$asMap]();
      }
      cast(R) {
        return this.delegate[S$.$cast](R);
      }
      contains(element) {
        return this.delegate[S$.$contains](element);
      }
      elementAt(index) {
        return this.delegate[S$.$elementAt](index);
      }
      every(test) {
        return this.delegate[S$.$every](test);
      }
      expand(T, f) {
        return this.delegate[S$.$expand](T, f);
      }
      firstWhere(test, opts) {
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        __t$VoidToNE().as(orElse);
        return this.delegate[S$.$firstWhere](test, {orElse: orElse});
      }
      fold(T, initialValue, combine) {
        return this.delegate[S$.$fold](T, initialValue, combine);
      }
      followedBy(other) {
        __t$IterableOfE().as(other);
        return this.delegate[S$.$followedBy](other);
      }
      forEach(f) {
        return this.delegate[S$.$forEach](f);
      }
      getRange(start, end) {
        return this.delegate[S$.$getRange](start, end);
      }
      indexOf(element, start = 0) {
        return this.delegate[S$.$indexOf](E.as(element), start);
      }
      indexWhere(test, start = 0) {
        return this.delegate[S$.$indexWhere](test, start);
      }
      get isEmpty() {
        return this.delegate[S$.$isEmpty];
      }
      get isNotEmpty() {
        return this.delegate[S$.$isNotEmpty];
      }
      get iterator() {
        return this.delegate[S$.$iterator];
      }
      [Symbol.iterator]() {
        return new dart.JsIterator(this[S$.$iterator]);
      }
      join(separator = "") {
        return this.delegate[S$.$join](separator);
      }
      lastIndexOf(element, start = null) {
        return this.delegate[S$.$lastIndexOf](E.as(element), start);
      }
      lastIndexWhere(test, start = null) {
        return this.delegate[S$.$lastIndexWhere](test, start);
      }
      lastWhere(test, opts) {
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        __t$VoidToNE().as(orElse);
        return this.delegate[S$.$lastWhere](test, {orElse: orElse});
      }
      map(T, f) {
        return this.delegate[S$.$map](T, f);
      }
      reduce(combine) {
        __t$EAndEToE().as(combine);
        return this.delegate[S$.$reduce](combine);
      }
      get reversed() {
        return this.delegate[S$.$reversed];
      }
      get single() {
        return this.delegate[S$.$single];
      }
      singleWhere(test, opts) {
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        __t$VoidToNE().as(orElse);
        return this.delegate[S$.$singleWhere](test, {orElse: orElse});
      }
      skip(count) {
        return this.delegate[S$.$skip](count);
      }
      skipWhile(test) {
        return this.delegate[S$.$skipWhile](test);
      }
      sublist(start, end = null) {
        return this.delegate[S$.$sublist](start, end);
      }
      take(count) {
        return this.delegate[S$.$take](count);
      }
      takeWhile(test) {
        return this.delegate[S$.$takeWhile](test);
      }
      toList(opts) {
        let growable = opts && 'growable' in opts ? opts.growable : true;
        return this.delegate[S$.$toList]({growable: growable});
      }
      toSet() {
        return this.delegate[S$.$toSet]();
      }
      where(test) {
        return this.delegate[S$.$where](test);
      }
      whereType(T) {
        return this.delegate[S$.$whereType](T);
      }
    }
    (DelegatingListViewMixin.new = function() {
      ;
    }).prototype = DelegatingListViewMixin.prototype;
    DelegatingListViewMixin.prototype[dart.isList] = true;
    dart.addTypeTests(DelegatingListViewMixin);
    DelegatingListViewMixin.prototype[_is_DelegatingListViewMixin_default] = true;
    dart.addTypeCaches(DelegatingListViewMixin);
    DelegatingListViewMixin[dart.implements] = () => [core.List$(E)];
    dart.setMethodSignature(DelegatingListViewMixin, () => ({
      __proto__: dart.getMethods(DelegatingListViewMixin.__proto__),
      '+': dart.fnType(core.List$(E), [dart.nullable(core.Object)]),
      [S$.$plus]: dart.fnType(core.List$(E), [dart.nullable(core.Object)]),
      _get: dart.fnType(E, [core.int]),
      [S$.$_get]: dart.fnType(E, [core.int]),
      any: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
      [S$.$any]: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
      asMap: dart.fnType(core.Map$(core.int, E), []),
      [S$.$asMap]: dart.fnType(core.Map$(core.int, E), []),
      cast: dart.gFnType(R => [core.List$(R), []], R => [dart.nullable(core.Object)]),
      [S$.$cast]: dart.gFnType(R => [core.List$(R), []], R => [dart.nullable(core.Object)]),
      contains: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      [S$.$contains]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      elementAt: dart.fnType(E, [core.int]),
      [S$.$elementAt]: dart.fnType(E, [core.int]),
      every: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
      [S$.$every]: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
      expand: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(core.Iterable$(T), [E])]], T => [dart.nullable(core.Object)]),
      [S$.$expand]: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(core.Iterable$(T), [E])]], T => [dart.nullable(core.Object)]),
      firstWhere: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      [S$.$firstWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      fold: dart.gFnType(T => [T, [T, dart.fnType(T, [T, E])]], T => [dart.nullable(core.Object)]),
      [S$.$fold]: dart.gFnType(T => [T, [T, dart.fnType(T, [T, E])]], T => [dart.nullable(core.Object)]),
      followedBy: dart.fnType(core.Iterable$(E), [dart.nullable(core.Object)]),
      [S$.$followedBy]: dart.fnType(core.Iterable$(E), [dart.nullable(core.Object)]),
      forEach: dart.fnType(dart.void, [dart.fnType(dart.void, [E])]),
      [S$.$forEach]: dart.fnType(dart.void, [dart.fnType(dart.void, [E])]),
      getRange: dart.fnType(core.Iterable$(E), [core.int, core.int]),
      [S$.$getRange]: dart.fnType(core.Iterable$(E), [core.int, core.int]),
      indexOf: dart.fnType(core.int, [dart.nullable(core.Object)], [core.int]),
      [S$.$indexOf]: dart.fnType(core.int, [dart.nullable(core.Object)], [core.int]),
      indexWhere: dart.fnType(core.int, [dart.fnType(core.bool, [E])], [core.int]),
      [S$.$indexWhere]: dart.fnType(core.int, [dart.fnType(core.bool, [E])], [core.int]),
      join: dart.fnType(core.String, [], [core.String]),
      [S$.$join]: dart.fnType(core.String, [], [core.String]),
      lastIndexOf: dart.fnType(core.int, [dart.nullable(core.Object)], [dart.nullable(core.int)]),
      [S$.$lastIndexOf]: dart.fnType(core.int, [dart.nullable(core.Object)], [dart.nullable(core.int)]),
      lastIndexWhere: dart.fnType(core.int, [dart.fnType(core.bool, [E])], [dart.nullable(core.int)]),
      [S$.$lastIndexWhere]: dart.fnType(core.int, [dart.fnType(core.bool, [E])], [dart.nullable(core.int)]),
      lastWhere: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      [S$.$lastWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      map: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)]),
      [S$.$map]: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)]),
      reduce: dart.fnType(E, [dart.nullable(core.Object)]),
      [S$.$reduce]: dart.fnType(E, [dart.nullable(core.Object)]),
      singleWhere: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      [S$.$singleWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      skip: dart.fnType(core.Iterable$(E), [core.int]),
      [S$.$skip]: dart.fnType(core.Iterable$(E), [core.int]),
      skipWhile: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      [S$.$skipWhile]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      sublist: dart.fnType(core.List$(E), [core.int], [dart.nullable(core.int)]),
      [S$.$sublist]: dart.fnType(core.List$(E), [core.int], [dart.nullable(core.int)]),
      take: dart.fnType(core.Iterable$(E), [core.int]),
      [S$.$take]: dart.fnType(core.Iterable$(E), [core.int]),
      takeWhile: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      [S$.$takeWhile]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      toList: dart.fnType(core.List$(E), [], {growable: core.bool}, {}),
      [S$.$toList]: dart.fnType(core.List$(E), [], {growable: core.bool}, {}),
      toSet: dart.fnType(core.Set$(E), []),
      [S$.$toSet]: dart.fnType(core.Set$(E), []),
      where: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      [S$.$where]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      whereType: dart.gFnType(T => [core.Iterable$(T), []], T => [dart.nullable(core.Object)]),
      [S$.$whereType]: dart.gFnType(T => [core.Iterable$(T), []], T => [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(DelegatingListViewMixin, () => ({
      __proto__: dart.getGetters(DelegatingListViewMixin.__proto__),
      first: E,
      [S$.$first]: E,
      last: E,
      [S$.$last]: E,
      length: core.int,
      [S$.$length]: core.int,
      isEmpty: core.bool,
      [S$.$isEmpty]: core.bool,
      isNotEmpty: core.bool,
      [S$.$isNotEmpty]: core.bool,
      iterator: core.Iterator$(E),
      [S$.$iterator]: core.Iterator$(E),
      reversed: core.Iterable$(E),
      [S$.$reversed]: core.Iterable$(E),
      single: E,
      [S$.$single]: E
    }));
    dart.setLibraryUri(DelegatingListViewMixin, I[21]);
    dart.defineExtensionMethods(DelegatingListViewMixin, [
      '+',
      '_get',
      'any',
      'asMap',
      'cast',
      'contains',
      'elementAt',
      'every',
      'expand',
      'firstWhere',
      'fold',
      'followedBy',
      'forEach',
      'getRange',
      'indexOf',
      'indexWhere',
      'join',
      'lastIndexOf',
      'lastIndexWhere',
      'lastWhere',
      'map',
      'reduce',
      'singleWhere',
      'skip',
      'skipWhile',
      'sublist',
      'take',
      'takeWhile',
      'toList',
      'toSet',
      'where',
      'whereType'
    ]);
    dart.defineExtensionAccessors(DelegatingListViewMixin, [
      'first',
      'last',
      'length',
      'isEmpty',
      'isNotEmpty',
      'iterator',
      'reversed',
      'single'
    ]);
    return DelegatingListViewMixin;
  });
  delegating_list_view_mixin.DelegatingListViewMixin = delegating_list_view_mixin.DelegatingListViewMixin$();
  dart.addTypeTests(delegating_list_view_mixin.DelegatingListViewMixin, _is_DelegatingListViewMixin_default);
  const _is_HiveListImpl_default = Symbol('_is_HiveListImpl_default');
  hive_list_impl.HiveListImpl$ = dart.generic(E => {
    var __t$JSArrayOfE = () => (__t$JSArrayOfE = dart.constFn(_interceptors.JSArray$(E)))();
    var __t$IterableOfE = () => (__t$IterableOfE = dart.constFn(core.Iterable$(E)))();
    const Object_HiveCollectionMixin$36 = class Object_HiveCollectionMixin extends core.Object {};
    (Object_HiveCollectionMixin$36.new = function() {
    }).prototype = Object_HiveCollectionMixin$36.prototype;
    dart.applyMixin(Object_HiveCollectionMixin$36, hive_collection_mixin.HiveCollectionMixin$(E));
    const Object_ListMixin$36 = class Object_ListMixin extends Object_HiveCollectionMixin$36 {};
    (Object_ListMixin$36.new = function() {
    }).prototype = Object_ListMixin$36.prototype;
    dart.applyMixin(Object_ListMixin$36, collection.ListMixin$(E));
    const Object_DelegatingListViewMixin$36 = class Object_DelegatingListViewMixin extends Object_ListMixin$36 {};
    (Object_DelegatingListViewMixin$36.new = function() {
    }).prototype = Object_DelegatingListViewMixin$36.prototype;
    dart.applyMixin(Object_DelegatingListViewMixin$36, delegating_list_view_mixin.DelegatingListViewMixin$(E));
    class HiveListImpl extends Object_DelegatingListViewMixin$36 {
      get boxName() {
        return this[S$.boxName];
      }
      set boxName(value) {
        super.boxName = value;
      }
      static ['_#new#tearOff'](E, box, opts) {
        let objects = opts && 'objects' in opts ? opts.objects : null;
        return new (hive_list_impl.HiveListImpl$(E)).new(box, {objects: objects});
      }
      static ['_#lazy#tearOff'](E, boxName, keys) {
        return new (hive_list_impl.HiveListImpl$(E)).lazy(boxName, keys);
      }
      get keys() {
        if (this[S$._delegate$2] == null) {
          return dart.nullCheck(this[S$._keys]);
        } else {
          return super.keys;
        }
      }
      get box() {
        if (this[S$._box] == null) {
          let box = hive_impl.HiveImpl.as(this[S$._hive]).getBoxWithoutCheckInternal(this.boxName);
          if (box == null) {
            dart.throw(new hive.HiveError.new("To use this list, you have to open the box \"" + this.boxName + "\" first."));
          } else if (!hive.Box.is(box)) {
            dart.throw(new hive.HiveError.new("The box \"" + this.boxName + "\" is a lazy box. " + "You can only use HiveLists with normal boxes."));
          } else {
            this[S$._box] = box;
          }
        }
        return dart.nullCheck(this[S$._box]);
      }
      get delegate() {
        if (this[S$._disposed]) {
          dart.throw(new hive.HiveError.new("HiveList has already been disposed."));
        }
        if (this[S$._invalidated]) {
          let retained = __t$JSArrayOfE().of([]);
          for (let obj of dart.nullCheck(this[S$._delegate$2])) {
            if (hive_object['HiveObjectInternal|isInHiveList'](obj, this)) {
              retained[S$.$add](obj);
            }
          }
          this[S$._delegate$2] = retained;
          this[S$._invalidated] = false;
        } else if (this[S$._delegate$2] == null) {
          let list = __t$JSArrayOfE().of([]);
          for (let key of dart.nullCheck(this[S$._keys])) {
            if (this.box.containsKey(key)) {
              let obj = E.as(this.box.get(key));
              hive_object['HiveObjectInternal|linkHiveList'](obj, this);
              list[S$.$add](obj);
            }
          }
          this[S$._delegate$2] = list;
        }
        return dart.nullCheck(this[S$._delegate$2]);
      }
      dispose() {
        if (this[S$._delegate$2] != null) {
          for (let element of dart.nullCheck(this[S$._delegate$2])) {
            hive_object['HiveObjectInternal|unlinkHiveList'](element, this);
          }
          this[S$._delegate$2] = null;
        }
        this[S$._disposed] = true;
      }
      invalidate() {
        if (this[S$._delegate$2] != null) {
          this[S$._invalidated] = true;
        }
      }
      [S$._checkElementIsValid](obj) {
        if (!dart.equals(obj.box, this.box)) {
          dart.throw(new hive.HiveError.new("HiveObjects needs to be in the box \"" + this.boxName + "\"."));
        }
      }
      set length(newLength) {
        if (newLength < this.delegate[S$.$length]) {
          for (let i = newLength; i < this.delegate[S$.$length]; i = i + 1) {
            hive_object['HiveObjectInternal|unlinkHiveList'](this.delegate[S$.$_get](i), this);
          }
        }
        this.delegate[S$.$length] = newLength;
      }
      get length() {
        return super.length;
      }
      _set(index, value$) {
        let value = value$;
        E.as(value);
        this[S$._checkElementIsValid](value);
        hive_object['HiveObjectInternal|linkHiveList'](value, this);
        let oldValue = this.delegate[S$.$_get](index);
        this.delegate[S$.$_set](index, value);
        hive_object['HiveObjectInternal|unlinkHiveList'](oldValue, this);
        return value$;
      }
      add(element) {
        E.as(element);
        this[S$._checkElementIsValid](element);
        hive_object['HiveObjectInternal|linkHiveList'](element, this);
        this.delegate[S$.$add](element);
      }
      addAll(iterable) {
        __t$IterableOfE().as(iterable);
        for (let element of iterable) {
          this[S$._checkElementIsValid](element);
          hive_object['HiveObjectInternal|linkHiveList'](element, this);
        }
        this.delegate[S$.$addAll](iterable);
      }
      castHiveList(T) {
        if (this[S$._delegate$2] != null) {
          return new (hive_list_impl.HiveListImpl$(T)).new(this.box, {objects: dart.nullCheck(this[S$._delegate$2])[S$.$cast](T)});
        } else {
          return new (hive_list_impl.HiveListImpl$(T)).lazy(this.boxName, this[S$._keys]);
        }
      }
      set debugHive(hive) {
        return this[S$._hive] = hive;
      }
    }
    (HiveListImpl.new = function(box, opts) {
      let objects = opts && 'objects' in opts ? opts.objects : null;
      this[S$._hive] = hive.Hive;
      this[S$._invalidated] = false;
      this[S$._disposed] = false;
      this[S$.boxName] = box.name;
      this[S$._keys] = null;
      this[S$._delegate$2] = __t$JSArrayOfE().of([]);
      this[S$._box] = box;
      if (objects != null) {
        this.addAll(objects);
      }
    }).prototype = HiveListImpl.prototype;
    (HiveListImpl.lazy = function(boxName, keys) {
      this[S$._hive] = hive.Hive;
      this[S$._invalidated] = false;
      this[S$._disposed] = false;
      this[S$._box] = null;
      this[S$._delegate$2] = null;
      this[S$.boxName] = boxName;
      this[S$._keys] = keys;
      ;
    }).prototype = HiveListImpl.prototype;
    dart.addTypeTests(HiveListImpl);
    HiveListImpl.prototype[_is_HiveListImpl_default] = true;
    dart.addTypeCaches(HiveListImpl);
    HiveListImpl[dart.implements] = () => [hive.HiveList$(E)];
    dart.setMethodSignature(HiveListImpl, () => ({
      __proto__: dart.getMethods(HiveListImpl.__proto__),
      dispose: dart.fnType(dart.void, []),
      invalidate: dart.fnType(dart.void, []),
      [S$._checkElementIsValid]: dart.fnType(dart.void, [E]),
      _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [S$.$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      castHiveList: dart.gFnType(T => [hive.HiveList$(T), []], T => [hive_object.HiveObjectMixin])
    }));
    dart.setGetterSignature(HiveListImpl, () => ({
      __proto__: dart.getGetters(HiveListImpl.__proto__),
      box: hive.Box,
      delegate: core.List$(E)
    }));
    dart.setSetterSignature(HiveListImpl, () => ({
      __proto__: dart.getSetters(HiveListImpl.__proto__),
      length: core.int,
      [S$.$length]: core.int,
      debugHive: hive.HiveInterface
    }));
    dart.setLibraryUri(HiveListImpl, I[22]);
    dart.setFieldSignature(HiveListImpl, () => ({
      __proto__: dart.getFields(HiveListImpl.__proto__),
      boxName: dart.finalFieldType(core.String),
      [S$._keys]: dart.finalFieldType(dart.nullable(core.List)),
      [S$._hive]: dart.fieldType(hive.HiveInterface),
      [S$._delegate$2]: dart.fieldType(dart.nullable(core.List$(E))),
      [S$._box]: dart.fieldType(dart.nullable(hive.Box)),
      [S$._invalidated]: dart.fieldType(core.bool),
      [S$._disposed]: dart.fieldType(core.bool)
    }));
    dart.defineExtensionMethods(HiveListImpl, ['_set', 'add', 'addAll']);
    dart.defineExtensionAccessors(HiveListImpl, ['length']);
    return HiveListImpl;
  });
  hive_list_impl.HiveListImpl = hive_list_impl.HiveListImpl$();
  dart.addTypeTests(hive_list_impl.HiveListImpl, _is_HiveListImpl_default);
  hive_object.HiveObjectMixin = class HiveObjectMixin extends core.Object {};
  hive_object.HiveObjectMixin[dart.mixinOn] = Object => class HiveObjectMixin extends Object {
    get [S$._box$2]() {
      return this[S$._box$1];
    }
    set [S$._box$2](value) {
      this[S$._box$1] = value;
    }
    get [S$._key$1]() {
      return this[S$._key];
    }
    set [S$._key$1](value) {
      this[S$._key] = value;
    }
    get [S$._hiveLists$1]() {
      return this[S$._hiveLists];
    }
    set [S$._hiveLists$1](value) {
      super[S$._hiveLists$1] = value;
    }
    get box() {
      return this[S$._box$2];
    }
    get key() {
      return this[S$._key$1];
    }
    [S$._requireInitialized]() {
      if (this[S$._box$2] == null) {
        dart.throw(new hive.HiveError.new("This object is currently not in a box."));
      }
    }
    save() {
      this[S$._requireInitialized]();
      return dart.nullCheck(this[S$._box$2]).put(this[S$._key$1], this);
    }
    delete() {
      this[S$._requireInitialized]();
      return dart.nullCheck(this[S$._box$2]).delete(this[S$._key$1]);
    }
    get isInBox() {
      if (this[S$._box$2] != null) {
        if (dart.nullCheck(this[S$._box$2]).lazy) {
          return dart.nullCheck(this[S$._box$2]).containsKey(this[S$._key$1]);
        } else {
          return true;
        }
      }
      return false;
    }
  };
  (hive_object.HiveObjectMixin[dart.mixinNew] = function() {
    this[S$._box$1] = null;
    this[S$._key] = null;
    this[S$._hiveLists] = new (T$.LinkedMapOfHiveListOfHiveObjectMixin$int()).new();
  }).prototype = hive_object.HiveObjectMixin.prototype;
  dart.addTypeTests(hive_object.HiveObjectMixin);
  dart.addTypeCaches(hive_object.HiveObjectMixin);
  hive_object.HiveObjectMixin[dart.implements] = () => [core.Object];
  dart.setMethodSignature(hive_object.HiveObjectMixin, () => ({
    __proto__: dart.getMethods(hive_object.HiveObjectMixin.__proto__),
    [S$._requireInitialized]: dart.fnType(dart.void, []),
    save: dart.fnType(async.Future$(dart.void), []),
    delete: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setGetterSignature(hive_object.HiveObjectMixin, () => ({
    __proto__: dart.getGetters(hive_object.HiveObjectMixin.__proto__),
    box: dart.nullable(hive.BoxBase),
    key: dart.dynamic,
    isInBox: core.bool
  }));
  dart.setLibraryUri(hive_object.HiveObjectMixin, I[23]);
  dart.setFieldSignature(hive_object.HiveObjectMixin, () => ({
    __proto__: dart.getFields(hive_object.HiveObjectMixin.__proto__),
    [S$._box$2]: dart.fieldType(dart.nullable(hive.BoxBase)),
    [S$._key$1]: dart.fieldType(dart.dynamic),
    [S$._hiveLists$1]: dart.finalFieldType(core.Map$(hive.HiveList$(hive_object.HiveObjectMixin), core.int))
  }));
  const Object_HiveObjectMixin$36 = class Object_HiveObjectMixin extends core.Object {};
  (Object_HiveObjectMixin$36.new = function() {
    hive_object.HiveObjectMixin[dart.mixinNew].call(this);
  }).prototype = Object_HiveObjectMixin$36.prototype;
  dart.applyMixin(Object_HiveObjectMixin$36, hive_object.HiveObjectMixin);
  hive_object.HiveObject = class HiveObject extends Object_HiveObjectMixin$36 {};
  (hive_object.HiveObject.new = function() {
    hive_object.HiveObject.__proto__.new.call(this);
    ;
  }).prototype = hive_object.HiveObject.prototype;
  dart.addTypeTests(hive_object.HiveObject);
  dart.addTypeCaches(hive_object.HiveObject);
  dart.setLibraryUri(hive_object.HiveObject, I[23]);
  hive_object['HiveObjectInternal|init'] = function HiveObjectInternal$124init($this, key, box) {
    if ($this[S$._box$2] != null) {
      if (!dart.equals($this[S$._box$2], box)) {
        dart.throw(new hive.HiveError.new("The same instance of an HiveObject cannot " + "be stored in two different boxes."));
      } else if (!dart.equals($this[S$._key$1], key)) {
        dart.throw(new hive.HiveError.new("The same instance of an HiveObject cannot " + "be stored with two different keys (\"" + dart.str($this[S$._key$1]) + "\" and \"" + dart.str(key) + "\")."));
      }
    }
    $this[S$._box$2] = box;
    $this[S$._key$1] = key;
  };
  hive_object['HiveObjectInternal|get#init'] = function HiveObjectInternal$124get$35init($this) {
    return dart.fn((key, box) => hive_object['HiveObjectInternal|init']($this, key, box), T$.dynamicAndBoxBaseTovoid());
  };
  hive_object['HiveObjectInternal|dispose'] = function HiveObjectInternal$124dispose($this) {
    for (let list of $this[S$._hiveLists$1][S$.$keys]) {
      T$.HiveListImplOfHiveObjectMixin().as(list).invalidate();
    }
    $this[S$._hiveLists$1][S$.$clear]();
    $this[S$._box$2] = null;
    $this[S$._key$1] = null;
  };
  hive_object['HiveObjectInternal|get#dispose'] = function HiveObjectInternal$124get$35dispose($this) {
    return dart.fn(() => hive_object['HiveObjectInternal|dispose']($this), T$.VoidTovoid());
  };
  hive_object['HiveObjectInternal|linkHiveList'] = function HiveObjectInternal$124linkHiveList($this, list) {
    let t39;
    $this[S$._requireInitialized]();
    $this[S$._hiveLists$1][S$.$_set](list, dart.notNull((t39 = $this[S$._hiveLists$1][S$.$_get](list), t39 == null ? 0 : t39)) + 1);
  };
  hive_object['HiveObjectInternal|get#linkHiveList'] = function HiveObjectInternal$124get$35linkHiveList($this) {
    return dart.fn(list => hive_object['HiveObjectInternal|linkHiveList']($this, list), T$.HiveListOfHiveObjectMixinTovoid());
  };
  hive_object['HiveObjectInternal|unlinkHiveList'] = function HiveObjectInternal$124unlinkHiveList($this, list) {
    let t43, t42, t41;
    let currentIndex = dart.nullCheck($this[S$._hiveLists$1][S$.$_get](list));
    let newIndex = (t41 = $this[S$._hiveLists$1], t42 = list, t43 = currentIndex - 1, t41[S$.$_set](t42, t43), t43);
    if (newIndex <= 0) {
      $this[S$._hiveLists$1][S$.$remove](list);
    }
  };
  hive_object['HiveObjectInternal|get#unlinkHiveList'] = function HiveObjectInternal$124get$35unlinkHiveList($this) {
    return dart.fn(list => hive_object['HiveObjectInternal|unlinkHiveList']($this, list), T$.HiveListOfHiveObjectMixinTovoid());
  };
  hive_object['HiveObjectInternal|isInHiveList'] = function HiveObjectInternal$124isInHiveList($this, list) {
    return $this[S$._hiveLists$1][S$.$containsKey](list);
  };
  hive_object['HiveObjectInternal|get#isInHiveList'] = function HiveObjectInternal$124get$35isInHiveList($this) {
    return dart.fn(list => hive_object['HiveObjectInternal|isInHiveList']($this, list), T$.HiveListOfHiveObjectMixinTobool());
  };
  hive_object['HiveObjectInternal|get#debugHiveLists'] = function HiveObjectInternal$124get$35debugHiveLists($this) {
    return $this[S$._hiveLists$1];
  };
  extensions['StringX|get#isAscii'] = function StringX$124get$35isAscii($this) {
    for (let cu of $this[S$.$codeUnits]) {
      if (cu > 127) return false;
    }
    return true;
  };
  extensions['ListIntX|readUint32'] = function ListIntX$124readUint32($this, offset) {
    return ($this[S$.$_get](offset) | $this[S$.$_get](offset + 1) << 8 >>> 0 | $this[S$.$_get](offset + 2) << 16 >>> 0 | $this[S$.$_get](offset + 3) << 24 >>> 0) >>> 0;
  };
  extensions['ListIntX|get#readUint32'] = function ListIntX$124get$35readUint32($this) {
    return dart.fn(offset => extensions['ListIntX|readUint32']($this, offset), T$.intToint());
  };
  extensions['ListIntX|writeUint32'] = function ListIntX$124writeUint32($this, offset, value) {
    $this[S$.$_set](offset, value);
    $this[S$.$_set](offset + 1, value[S$.$rightShift](8));
    $this[S$.$_set](offset + 2, value[S$.$rightShift](16));
    $this[S$.$_set](offset + 3, value[S$.$rightShift](24));
  };
  extensions['ListIntX|get#writeUint32'] = function ListIntX$124get$35writeUint32($this) {
    return dart.fn((offset, value) => extensions['ListIntX|writeUint32']($this, offset, value), T$.intAndintTovoid());
  };
  extensions['Uint8ListX|view'] = function Uint8ListX$124view($this, offset, bytes) {
    return typed_data.Uint8List.view($this[S$.$buffer], $this[S$.$offsetInBytes] + offset, bytes);
  };
  extensions['Uint8ListX|get#view'] = function Uint8ListX$124get$35view($this) {
    return dart.fn((offset, bytes) => extensions['Uint8ListX|view']($this, offset, bytes), T$.intAndintToUint8List());
  };
  extensions['RandomX|nextBytes'] = function RandomX$124nextBytes($this, bytes) {
    let buffer = _native_typed_data.NativeUint8List.new(bytes);
    for (let i = 0; i < bytes; i = i + 1) {
      buffer[S$.$_set](i, $this.nextInt(255 + 1));
    }
    return buffer;
  };
  extensions['RandomX|get#nextBytes'] = function RandomX$124get$35nextBytes($this) {
    return dart.fn(bytes => extensions['RandomX|nextBytes']($this, bytes), T$.intToUint8List());
  };
  box_collection_indexed_db.BoxCollection = class BoxCollection extends core.Object {
    get boxNames() {
      return this[S$.boxNames];
    }
    set boxNames(value) {
      super.boxNames = value;
    }
    static ['_#new#tearOff'](_db, boxNames) {
      return new box_collection_indexed_db.BoxCollection.new(_db, boxNames);
    }
    static open(name, boxNames, opts) {
      let path = opts && 'path' in opts ? opts.path : null;
      let key = opts && 'key' in opts ? opts.key : null;
      return async.async(box_collection_indexed_db.BoxCollection, function* open() {
        let factory = html.window[S$.$indexedDB];
        if (factory == null) {
          dart.throw(core.Exception.new("Unable to open FluffyBox collection - IndexedDB not supported in this browser!"));
        }
        let _db = (yield factory[S$.$open](name, {version: 1, onUpgradeNeeded: dart.fn(event => {
            let _db = event[S$.$target][S$.$result];
            for (let name of boxNames) {
              dart.dsend(_db, 'createObjectStore', [name], {autoIncrement: true});
            }
          }, T$.VersionChangeEventTovoid())}));
        return new box_collection_indexed_db.BoxCollection.new(_db, boxNames);
      });
    }
    get name() {
      return dart.nullCheck(this[S$._db].name);
    }
    openBox(V, name, opts) {
      let preload = opts && 'preload' in opts ? opts.preload : false;
      let boxCreator = opts && 'boxCreator' in opts ? opts.boxCreator : null;
      return async.async(box_collection_indexed_db.CollectionBox$(V), (function* openBox() {
        let t54, t54$;
        if (!this.boxNames.contains(name)) {
          dart.throw(core.Exception.new("Box with name " + name + " is not in the known box names of this collection."));
        }
        let i = this[S$._openBoxes][S$.$indexWhere](dart.fn(box => box.name === name, T$.CollectionBoxTobool()));
        if (i !== -1) {
          return box_collection_indexed_db.CollectionBox$(V).as(this[S$._openBoxes][S$.$_get](i));
        }
        let box = (t54$ = dart.nullable(box_collection_indexed_db.CollectionBox$(V)).as((t54 = boxCreator, t54 == null ? null : t54(name, this))), t54$ == null ? new (box_collection_indexed_db.CollectionBox$(V)).new(name, this) : t54$);
        if (preload) {
          box[S$._cache][S$.$addAll](yield box.getAllValues());
        }
        this[S$._openBoxes][S$.$add](box);
        return box;
      }).bind(this));
    }
    transaction(action, opts) {
      let boxNames = opts && 'boxNames' in opts ? opts.boxNames : null;
      let readOnly = opts && 'readOnly' in opts ? opts.readOnly : false;
      return async.async(dart.void, (function* transaction() {
        let t54;
        boxNames == null ? boxNames = this.boxNames[S$.$toList]() : null;
        if (this[S$._txnCache] != null) {
          yield action();
          return;
        }
        this[S$._txnCache] = T$.JSArrayOfTransactionToFutureOfvoid().of([]);
        yield action();
        let cache = T$.ListOfTransactionToFutureOfvoid().from((t54 = this[S$._txnCache], t54 == null ? [] : t54));
        this[S$._txnCache] = null;
        if (cache[S$.$isEmpty]) return;
        let txn = this[S$._db][S$.$transaction](boxNames, readOnly ? "readonly" : "readwrite");
        for (let fun of cache) {
          fun(txn);
        }
        yield txn[S$.$completed];
        return;
      }).bind(this));
    }
    close() {
      return this[S$._db].close();
    }
    deleteFromDisk() {
      return async.async(dart.void, (function* deleteFromDisk() {
        let factory = html.window[S$.$indexedDB];
        for (let box of this[S$._openBoxes]) {
          box[S$._cache][S$.$clear]();
          box[S$._cachedKeys] = null;
        }
        this[S$._openBoxes][S$.$clear]();
        this[S$._db].close();
        if (factory == null || this[S$._db].name == null) {
          dart.throw(core.Exception.new("Unable to delete fluffybox collection"));
        }
        factory[S$.$deleteDatabase](dart.nullCheck(this[S$._db].name));
      }).bind(this));
    }
  };
  (box_collection_indexed_db.BoxCollection.new = function(_db, boxNames) {
    this[S$._openBoxes] = T$.JSArrayOfCollectionBox().of([]);
    this[S$._txnCache] = null;
    this[S$._db] = _db;
    this[S$.boxNames] = boxNames;
    ;
  }).prototype = box_collection_indexed_db.BoxCollection.prototype;
  dart.addTypeTests(box_collection_indexed_db.BoxCollection);
  dart.addTypeCaches(box_collection_indexed_db.BoxCollection);
  box_collection_indexed_db.BoxCollection[dart.implements] = () => [box_collection_stub.BoxCollection];
  dart.setMethodSignature(box_collection_indexed_db.BoxCollection, () => ({
    __proto__: dart.getMethods(box_collection_indexed_db.BoxCollection.__proto__),
    openBox: dart.gFnType(V => [async.Future$(box_collection_indexed_db.CollectionBox$(V)), [core.String], {boxCreator: dart.nullable(dart.fnType(box_collection_stub.CollectionBox$(V), [core.String, box_collection_indexed_db.BoxCollection])), preload: core.bool}, {}], V => [dart.nullable(core.Object)]),
    transaction: dart.fnType(async.Future$(dart.void), [dart.fnType(async.Future$(dart.void), [])], {boxNames: dart.nullable(core.List$(core.String)), readOnly: core.bool}, {}),
    close: dart.fnType(dart.void, []),
    deleteFromDisk: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setStaticMethodSignature(box_collection_indexed_db.BoxCollection, () => ['open']);
  dart.setGetterSignature(box_collection_indexed_db.BoxCollection, () => ({
    __proto__: dart.getGetters(box_collection_indexed_db.BoxCollection.__proto__),
    name: core.String
  }));
  dart.setLibraryUri(box_collection_indexed_db.BoxCollection, I[24]);
  dart.setFieldSignature(box_collection_indexed_db.BoxCollection, () => ({
    __proto__: dart.getFields(box_collection_indexed_db.BoxCollection.__proto__),
    [S$._db]: dart.finalFieldType(indexed_db.Database),
    boxNames: dart.finalFieldType(core.Set$(core.String)),
    [S$._openBoxes]: dart.finalFieldType(core.List$(box_collection_indexed_db.CollectionBox)),
    [S$._txnCache]: dart.fieldType(dart.nullable(core.List$(dart.fnType(async.Future$(dart.void), [indexed_db.Transaction]))))
  }));
  const _is_CollectionBox_default = Symbol('_is_CollectionBox_default');
  box_collection_indexed_db.CollectionBox$ = dart.generic(V => {
    var __t$VN = () => (__t$VN = dart.constFn(dart.nullable(V)))();
    var __t$IdentityMapOfString$VN = () => (__t$IdentityMapOfString$VN = dart.constFn(_js_helper.IdentityMap$(core.String, __t$VN())))();
    var __t$IdentityMapOfString$V = () => (__t$IdentityMapOfString$V = dart.constFn(_js_helper.IdentityMap$(core.String, V)))();
    var __t$MapOfString$V = () => (__t$MapOfString$V = dart.constFn(core.Map$(core.String, V)))();
    var __t$StringToVN = () => (__t$StringToVN = dart.constFn(dart.fnType(__t$VN(), [core.String])))();
    var __t$ListOfVN = () => (__t$ListOfVN = dart.constFn(core.List$(__t$VN())))();
    class CollectionBox extends core.Object {
      get name() {
        return this[S$.name$2];
      }
      set name(value) {
        super.name = value;
      }
      get boxCollection() {
        return this[S$.boxCollection];
      }
      set boxCollection(value) {
        super.boxCollection = value;
      }
      static ['_#new#tearOff'](V, name, boxCollection) {
        return new (box_collection_indexed_db.CollectionBox$(V)).new(name, boxCollection);
      }
      getAllKeys(txn = null) {
        return async.async(T$.ListOfString(), (function* getAllKeys() {
          let cachedKey = this[S$._cachedKeys];
          if (cachedKey != null) return cachedKey[S$.$toList]();
          txn == null ? txn = this.boxCollection[S$._db][S$.$transaction](this.name, "readonly") : null;
          let store = txn[S$.$objectStore](this.name);
          let request = store[S$.$getAllKeys](null);
          yield request[S$.$onSuccess].first;
          let keys = T$.ListOfString().from(core.Iterable.as(dart.dgsend(request[S$.$result], [core.String], 'cast', [])));
          this[S$._cachedKeys] = keys[S$.$toSet]();
          return keys;
        }).bind(this));
      }
      getAllValues(txn = null) {
        return async.async(__t$MapOfString$V(), (function* getAllValues() {
          txn == null ? txn = this.boxCollection[S$._db][S$.$transaction](this.name, "readonly") : null;
          let store = txn[S$.$objectStore](this.name);
          let map = new (__t$IdentityMapOfString$V()).new();
          let cursorStream = store[S$.$openCursor]({autoAdvance: true});
          let iter = async.StreamIterator.new(cursorStream);
          try {
            while (yield iter.moveNext()) {
              let cursor = iter.current;
              {
                map[S$.$_set](core.String.as(cursor.key), V.as(cursor[S$.$value]));
              }
            }
          } finally {
            yield iter.cancel();
          }
          return map;
        }).bind(this));
      }
      get(key, txn = null) {
        return async.async(__t$VN(), (function* get() {
          if (this[S$._cache][S$.$containsKey](key)) return this[S$._cache][S$.$_get](key);
          txn == null ? txn = this.boxCollection[S$._db][S$.$transaction](this.name, "readonly") : null;
          let store = txn[S$.$objectStore](this.name);
          this[S$._cache][S$.$_set](key, __t$VN().as(yield store[S$.$getObject](key)));
          return this[S$._cache][S$.$_get](key);
        }).bind(this));
      }
      getAll(keys, txn = null) {
        return async.async(__t$ListOfVN(), (function* getAll() {
          if (!keys[S$.$any](dart.fn(key => !this[S$._cache][S$.$containsKey](key), T$.StringTobool()))) {
            return keys[S$.$map](__t$VN(), dart.fn(key => this[S$._cache][S$.$_get](key), __t$StringToVN()))[S$.$toList]();
          }
          txn == null ? txn = this.boxCollection[S$._db][S$.$transaction](this.name, "readonly") : null;
          let store = txn[S$.$objectStore](this.name);
          let list = (yield async.Future.wait(dart.dynamic, keys[S$.$map](async.Future, dart.bind(store, S$.$getObject))));
          for (let i = 0; i < keys[S$.$length]; i = i + 1) {
            this[S$._cache][S$.$_set](keys[S$.$_get](i), __t$VN().as(list[S$.$_get](i)));
          }
          return list[S$.$cast](__t$VN());
        }).bind(this));
      }
      put(key, val, transaction = null) {
        V.as(val);
        return async.async(dart.void, (function* put() {
          let t54, t54$;
          let txn = null;
          if (indexed_db.Transaction.is(transaction)) {
            txn = transaction;
          }
          if (val == null) {
            return this.delete(key, txn);
          }
          let txnCache = this.boxCollection[S$._txnCache];
          if (txnCache != null) {
            txnCache[S$.$add](dart.fn(txn => this.put(key, val, txn), T$.TransactionToFutureOfvoid()));
            this[S$._cache][S$.$_set](key, val);
            t54 = this[S$._cachedKeys];
            t54 == null ? null : t54.add(key);
            return;
          }
          txn == null ? txn = this.boxCollection[S$._db][S$.$transaction](this.name, "readwrite") : null;
          let store = txn[S$.$objectStore](this.name);
          yield store[S$.$put](val, key);
          this[S$._cache][S$.$_set](key, val);
          t54$ = this[S$._cachedKeys];
          t54$ == null ? null : t54$.add(key);
          return;
        }).bind(this));
      }
      delete(key, txn = null) {
        return async.async(dart.void, (function* $delete() {
          let t54, t54$;
          let txnCache = this.boxCollection[S$._txnCache];
          if (txnCache != null) {
            txnCache[S$.$add](dart.fn(txn => this.delete(key, txn), T$.TransactionToFutureOfvoid()));
            this[S$._cache][S$.$_set](key, null);
            t54 = this[S$._cachedKeys];
            t54 == null ? null : t54.remove(key);
            return;
          }
          txn == null ? txn = this.boxCollection[S$._db][S$.$transaction](this.name, "readwrite") : null;
          let store = txn[S$.$objectStore](this.name);
          yield store[S$.$delete](key);
          this[S$._cache][S$.$_set](key, null);
          t54$ = this[S$._cachedKeys];
          t54$ == null ? null : t54$.remove(key);
          return;
        }).bind(this));
      }
      deleteAll(keys, txn = null) {
        return async.async(dart.void, (function* deleteAll() {
          let t54, t54$;
          let txnCache = this.boxCollection[S$._txnCache];
          if (txnCache != null) {
            txnCache[S$.$add](dart.fn(txn => this.deleteAll(keys, txn), T$.TransactionToFutureOfvoid()));
            for (let key of keys) {
              this[S$._cache][S$.$_set](key, null);
            }
            t54 = this[S$._cachedKeys];
            t54 == null ? null : t54.removeAll(keys);
            return;
          }
          txn == null ? txn = this.boxCollection[S$._db][S$.$transaction](this.name, "readwrite") : null;
          let store = txn[S$.$objectStore](this.name);
          for (let key of keys) {
            yield store[S$.$delete](key);
            this[S$._cache][S$.$_set](key, null);
            t54$ = this[S$._cachedKeys];
            t54$ == null ? null : t54$.removeAll(keys);
          }
          return;
        }).bind(this));
      }
      clear(txn = null) {
        return async.async(dart.void, (function* clear() {
          let txnCache = this.boxCollection[S$._txnCache];
          if (txnCache != null) {
            txnCache[S$.$add](dart.bind(this, 'clear'));
            this[S$._cache][S$.$clear]();
            this[S$._cachedKeys] = null;
            return;
          }
          txn == null ? txn = this.boxCollection[S$._db][S$.$transaction](this.name, "readwrite") : null;
          let store = txn[S$.$objectStore](this.name);
          yield store[S$.$clear]();
          this[S$._cache][S$.$clear]();
          this[S$._cachedKeys] = null;
          return;
        }).bind(this));
      }
      flush() {
        return T$.FutureOfvoid().value();
      }
    }
    (CollectionBox.new = function(name, boxCollection) {
      this[S$._cache] = new (__t$IdentityMapOfString$VN()).new();
      this[S$._cachedKeys] = null;
      this[S$.name$2] = name;
      this[S$.boxCollection] = boxCollection;
      if (!(typeof dart.wrapType(V) == 'string' || core.int.is(dart.wrapType(V)) || core.Object.is(dart.wrapType(V)) || T$.ListOfObjectN().is(dart.wrapType(V)) || T$.MapOfString$ObjectN().is(dart.wrapType(V)) || typeof dart.wrapType(V) == 'number')) {
        dart.throw(core.Exception.new("Value type " + dart.str(dart.wrapType(V)[S$.$runtimeType]) + " is not one of the allowed value types {String, int, double, List<Object?>, Map<String, Object?>}."));
      }
    }).prototype = CollectionBox.prototype;
    dart.addTypeTests(CollectionBox);
    CollectionBox.prototype[_is_CollectionBox_default] = true;
    dart.addTypeCaches(CollectionBox);
    CollectionBox[dart.implements] = () => [box_collection_stub.CollectionBox$(V)];
    dart.setMethodSignature(CollectionBox, () => ({
      __proto__: dart.getMethods(CollectionBox.__proto__),
      getAllKeys: dart.fnType(async.Future$(core.List$(core.String)), [], [dart.nullable(indexed_db.Transaction)]),
      getAllValues: dart.fnType(async.Future$(core.Map$(core.String, V)), [], [dart.nullable(indexed_db.Transaction)]),
      get: dart.fnType(async.Future$(dart.nullable(V)), [core.String], [dart.nullable(indexed_db.Transaction)]),
      getAll: dart.fnType(async.Future$(core.List$(dart.nullable(V))), [core.List$(core.String)], [dart.nullable(indexed_db.Transaction)]),
      put: dart.fnType(async.Future$(dart.void), [core.String, dart.nullable(core.Object)], [dart.nullable(core.Object)]),
      delete: dart.fnType(async.Future$(dart.void), [core.String], [dart.nullable(indexed_db.Transaction)]),
      deleteAll: dart.fnType(async.Future$(dart.void), [core.List$(core.String)], [dart.nullable(indexed_db.Transaction)]),
      clear: dart.fnType(async.Future$(dart.void), [], [dart.nullable(indexed_db.Transaction)]),
      flush: dart.fnType(async.Future$(dart.void), [])
    }));
    dart.setLibraryUri(CollectionBox, I[24]);
    dart.setFieldSignature(CollectionBox, () => ({
      __proto__: dart.getFields(CollectionBox.__proto__),
      name: dart.finalFieldType(core.String),
      boxCollection: dart.finalFieldType(box_collection_indexed_db.BoxCollection),
      [S$._cache]: dart.finalFieldType(core.Map$(core.String, dart.nullable(V))),
      [S$._cachedKeys]: dart.fieldType(dart.nullable(core.Set$(core.String)))
    }));
    return CollectionBox;
  });
  box_collection_indexed_db.CollectionBox = box_collection_indexed_db.CollectionBox$();
  dart.addTypeTests(box_collection_indexed_db.CollectionBox, _is_CollectionBox_default);
  path_provider.Directory = class Directory extends core.Object {};
  (path_provider.Directory.new = function() {
    ;
  }).prototype = path_provider.Directory.prototype;
  dart.addTypeTests(path_provider.Directory);
  dart.addTypeCaches(path_provider.Directory);
  dart.setLibraryUri(path_provider.Directory, I[25]);
  path_provider.getApplicationDocumentsDirectory = function getApplicationDocumentsDirectory() {
    dart.throw(new core.UnimplementedError.new("[Hive Error] Tried to use the `path_provider` package from Flutter Web."));
  };
  path.join = function join(part1, part2 = null, part3 = null, part4 = null, part5 = null, part6 = null, part7 = null, part8 = null) {
    dart.throw(new core.UnimplementedError.new("[Hive Error] Tried to use the `path` package from Flutter Web."));
  };
  cloud_firestore_platform_interface.isValidCollectionPath = function isValidCollectionPath(collectionPath) {
    return new pointer.Pointer.new(collectionPath).isCollection();
  };
  cloud_firestore_platform_interface.isValidDocumentPath = function isValidDocumentPath(documentPath) {
    return new pointer.Pointer.new(documentPath).isDocument();
  };
  internals.convertWebExceptions = function convertWebExceptions(R, cb) {
    return internals$.guardWebExceptions(R, cb, {plugin: "cloud_firestore", codeParser: dart.fn(code => code[S$.$replaceFirst]("firestore/", ""), T$.StringToString())});
  };
  const _is_LoadBundleTaskPlatform_default = Symbol('_is_LoadBundleTaskPlatform_default');
  platform_interface_load_bundle_task.LoadBundleTaskPlatform$ = dart.generic(T => {
    class LoadBundleTaskPlatform extends plugin_platform_interface.PlatformInterface {
      static verifyExtends(instance) {
        plugin_platform_interface.PlatformInterface.verifyToken(instance, platform_interface_load_bundle_task.LoadBundleTaskPlatform._token);
      }
    }
    (LoadBundleTaskPlatform.new = function() {
      LoadBundleTaskPlatform.__proto__.new.call(this, {token: platform_interface_load_bundle_task.LoadBundleTaskPlatform._token});
      ;
    }).prototype = LoadBundleTaskPlatform.prototype;
    dart.addTypeTests(LoadBundleTaskPlatform);
    LoadBundleTaskPlatform.prototype[_is_LoadBundleTaskPlatform_default] = true;
    dart.addTypeCaches(LoadBundleTaskPlatform);
    dart.setStaticMethodSignature(LoadBundleTaskPlatform, () => ['verifyExtends']);
    dart.setLibraryUri(LoadBundleTaskPlatform, I[26]);
    dart.setStaticFieldSignature(LoadBundleTaskPlatform, () => ['_token']);
    return LoadBundleTaskPlatform;
  });
  platform_interface_load_bundle_task.LoadBundleTaskPlatform = platform_interface_load_bundle_task.LoadBundleTaskPlatform$();
  dart.defineLazy(platform_interface_load_bundle_task.LoadBundleTaskPlatform, {
    /*platform_interface_load_bundle_task.LoadBundleTaskPlatform._token*/get _token() {
      return new core.Object.new();
    }
  }, false);
  dart.addTypeTests(platform_interface_load_bundle_task.LoadBundleTaskPlatform, _is_LoadBundleTaskPlatform_default);
  load_bundle_task_web.LoadBundleTaskWeb = class LoadBundleTaskWeb extends platform_interface_load_bundle_task.LoadBundleTaskPlatform {
    static ['_#new#tearOff'](task) {
      return new load_bundle_task_web.LoadBundleTaskWeb.new(task);
    }
    get stream() {
      let t54;
      t54 = this[S$.__LoadBundleTaskWeb_stream];
      return t54 == null ? dart.throw(new _internal.LateError.fieldNI("stream")) : t54;
    }
    set stream(stream$35param) {
      if (this[S$.__LoadBundleTaskWeb_stream] == null)
        this[S$.__LoadBundleTaskWeb_stream] = stream$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("stream"));
    }
  };
  (load_bundle_task_web.LoadBundleTaskWeb.new = function(task) {
    this[S$.__LoadBundleTaskWeb_stream] = null;
    load_bundle_task_web.LoadBundleTaskWeb.__proto__.new.call(this);
    this.stream = task.stream.asBroadcastStream({onListen: dart.fn(sub => sub.resume(), T$.StreamSubscriptionOfLoadBundleTaskProgressTovoid()), onCancel: dart.fn(sub => sub.pause(), T$.StreamSubscriptionOfLoadBundleTaskProgressTovoid())}).map(platform_interface_load_bundle_task_snapshot.LoadBundleTaskSnapshotPlatform, dart.fn(snapshot => {
      let data = new (T$.IdentityMapOfString$dynamic()).from(["bytesLoaded", snapshot.bytesLoaded, "documentsLoaded", snapshot.documentsLoaded, "totalBytes", snapshot.totalBytes, "totalDocuments", snapshot.totalDocuments]);
      return new platform_interface_load_bundle_task_snapshot.LoadBundleTaskSnapshotPlatform.new(snapshot.taskState, data);
    }, T$.LoadBundleTaskProgressToLoadBundleTaskSnapshotPlatform()));
  }).prototype = load_bundle_task_web.LoadBundleTaskWeb.prototype;
  dart.addTypeTests(load_bundle_task_web.LoadBundleTaskWeb);
  dart.addTypeCaches(load_bundle_task_web.LoadBundleTaskWeb);
  dart.setGetterSignature(load_bundle_task_web.LoadBundleTaskWeb, () => ({
    __proto__: dart.getGetters(load_bundle_task_web.LoadBundleTaskWeb.__proto__),
    stream: async.Stream$(platform_interface_load_bundle_task_snapshot.LoadBundleTaskSnapshotPlatform)
  }));
  dart.setSetterSignature(load_bundle_task_web.LoadBundleTaskWeb, () => ({
    __proto__: dart.getSetters(load_bundle_task_web.LoadBundleTaskWeb.__proto__),
    stream: async.Stream$(platform_interface_load_bundle_task_snapshot.LoadBundleTaskSnapshotPlatform)
  }));
  dart.setLibraryUri(load_bundle_task_web.LoadBundleTaskWeb, I[27]);
  dart.setFieldSignature(load_bundle_task_web.LoadBundleTaskWeb, () => ({
    __proto__: dart.getFields(load_bundle_task_web.LoadBundleTaskWeb.__proto__),
    [S$.__LoadBundleTaskWeb_stream]: dart.fieldType(dart.nullable(async.Stream$(platform_interface_load_bundle_task_snapshot.LoadBundleTaskSnapshotPlatform)))
  }));
  web_utils.convertWebQuerySnapshot = function convertWebQuerySnapshot(firestore, webQuerySnapshot) {
    return new platform_interface_query_snapshot.QuerySnapshotPlatform.new(webQuerySnapshot.docs[S$.$map](platform_interface_document_snapshot.DocumentSnapshotPlatform, dart.fn(webDocumentSnapshot => web_utils.convertWebDocumentSnapshot(firestore, dart.nullCheck(webDocumentSnapshot)), T$.DocumentSnapshotNToDocumentSnapshotPlatform()))[S$.$toList](), webQuerySnapshot.docChanges()[S$.$map](platform_interface_document_change.DocumentChangePlatform, dart.fn(webDocumentChange => web_utils.convertWebDocumentChange(firestore, webDocumentChange), T$.DocumentChangeToDocumentChangePlatform()))[S$.$toList](), web_utils.convertWebSnapshotMetadata(webQuerySnapshot.metadata));
  };
  web_utils.convertWebDocumentSnapshot = function convertWebDocumentSnapshot(firestore, webSnapshot) {
    return new platform_interface_document_snapshot.DocumentSnapshotPlatform.new(firestore, dart.nullCheck(webSnapshot.ref).path, new (T$.IdentityMapOfString$dynamic()).from(["data", decode_utility.DecodeUtility.decodeMapData(webSnapshot.data()), "metadata", new (T$.IdentityMapOfString$bool()).from(["hasPendingWrites", webSnapshot.metadata.hasPendingWrites, "isFromCache", webSnapshot.metadata.fromCache])]));
  };
  web_utils.convertWebDocumentChange = function convertWebDocumentChange(firestore, webDocumentChange) {
    return new platform_interface_document_change.DocumentChangePlatform.new(web_utils.convertWebDocumentChangeType(webDocumentChange.type), dart.asInt(webDocumentChange.oldIndex), dart.asInt(webDocumentChange.newIndex), web_utils.convertWebDocumentSnapshot(firestore, dart.nullCheck(webDocumentChange.doc)));
  };
  web_utils.convertWebDocumentChangeType = function convertWebDocumentChangeType(changeType) {
    switch (changeType[S$.$toLowerCase]()) {
      case "added":
        {
          return platform_interface_document_change.DocumentChangeType.added;
        }
      case "modified":
        {
          return platform_interface_document_change.DocumentChangeType.modified;
        }
      case "removed":
        {
          return platform_interface_document_change.DocumentChangeType.removed;
        }
      default:
        {
          dart.throw(new core.FallThroughError.new());
        }
    }
  };
  web_utils.convertWebSnapshotMetadata = function convertWebSnapshotMetadata(webSnapshotMetadata) {
    return new snapshot_metadata.SnapshotMetadataPlatform.new(webSnapshotMetadata.hasPendingWrites, webSnapshotMetadata.fromCache);
  };
  web_utils.convertGetOptions = function convertGetOptions(options) {
    if (options == null) return null;
    let source = null;
    switch (options.source) {
      case C[11] || CT.C11:
        {
          source = "default";
          break;
        }
      case C[19] || CT.C19:
        {
          source = "cache";
          break;
        }
      case C[20] || CT.C20:
        {
          source = "server";
          break;
        }
      default:
        {
          source = "default";
          break;
        }
    }
    return {source: source};
  };
  web_utils.convertSetOptions = function convertSetOptions(options) {
    if (options == null) return null;
    let parsedOptions = null;
    if (options.merge != null) {
      parsedOptions = {merge: options.merge};
    } else if (options.mergeFields != null) {
      parsedOptions = {mergeFields: dart.nullCheck(options.mergeFields)[S$.$map](core.String, dart.fn(e => e.components[S$.$toList]()[S$.$join]("."), T$.FieldPathToString()))[S$.$toList]()};
    }
    return parsedOptions;
  };
  web_utils.convertFieldPath = function convertFieldPath(fieldPath) {
    return new dart.global.firebase_firestore.FieldPath(fieldPath.components[S$.$toList]()[S$.$join]("."));
  };
  dart.defineLazy(web_utils, {
    /*web_utils._kChangeTypeAdded*/get _kChangeTypeAdded() {
      return "added";
    },
    /*web_utils._kChangeTypeModified*/get _kChangeTypeModified() {
      return "modified";
    },
    /*web_utils._kChangeTypeRemoved*/get _kChangeTypeRemoved() {
      return "removed";
    }
  }, false);
  firebase_core.FirebaseApp = class FirebaseApp extends core.Object {
    static ['_#_#tearOff'](_delegate) {
      return new firebase_core.FirebaseApp.__(_delegate);
    }
    delete() {
      return async.async(dart.void, (function* $delete() {
        yield this[S$._delegate$3].delete();
      }).bind(this));
    }
    get name() {
      return this[S$._delegate$3].name;
    }
    get options() {
      return this[S$._delegate$3].options;
    }
    get isAutomaticDataCollectionEnabled() {
      return this[S$._delegate$3].isAutomaticDataCollectionEnabled;
    }
    setAutomaticDataCollectionEnabled(enabled) {
      return this[S$._delegate$3].setAutomaticDataCollectionEnabled(enabled);
    }
    setAutomaticResourceManagementEnabled(enabled) {
      return this[S$._delegate$3].setAutomaticResourceManagementEnabled(enabled);
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!firebase_core.FirebaseApp.is(other)) return false;
      return other.name === this.name && other.options._equals(this.options);
    }
    get hashCode() {
      return core.Object.hash(this.name, this.options);
    }
    toString() {
      return dart.str(dart.wrapType(firebase_core.FirebaseApp)) + "(" + this.name + ")";
    }
  };
  (firebase_core.FirebaseApp.__ = function(_delegate) {
    this[S$._delegate$3] = _delegate;
    firebase_core_platform_interface.FirebaseAppPlatform.verifyExtends(this[S$._delegate$3]);
  }).prototype = firebase_core.FirebaseApp.prototype;
  dart.addTypeTests(firebase_core.FirebaseApp);
  dart.addTypeCaches(firebase_core.FirebaseApp);
  dart.setMethodSignature(firebase_core.FirebaseApp, () => ({
    __proto__: dart.getMethods(firebase_core.FirebaseApp.__proto__),
    delete: dart.fnType(async.Future$(dart.void), []),
    setAutomaticDataCollectionEnabled: dart.fnType(async.Future$(dart.void), [core.bool]),
    setAutomaticResourceManagementEnabled: dart.fnType(async.Future$(dart.void), [core.bool])
  }));
  dart.setGetterSignature(firebase_core.FirebaseApp, () => ({
    __proto__: dart.getGetters(firebase_core.FirebaseApp.__proto__),
    name: core.String,
    options: firebase_core_platform_interface.FirebaseOptions,
    isAutomaticDataCollectionEnabled: core.bool
  }));
  dart.setLibraryUri(firebase_core.FirebaseApp, I[28]);
  dart.setFieldSignature(firebase_core.FirebaseApp, () => ({
    __proto__: dart.getFields(firebase_core.FirebaseApp.__proto__),
    [S$._delegate$3]: dart.finalFieldType(firebase_core_platform_interface.FirebaseAppPlatform)
  }));
  dart.defineExtensionMethods(firebase_core.FirebaseApp, ['_equals', 'toString']);
  dart.defineExtensionAccessors(firebase_core.FirebaseApp, ['hashCode']);
  firebase_core.Firebase = class Firebase extends core.Object {
    static ['_#_#tearOff']() {
      return new firebase_core.Firebase.__();
    }
    static get _delegate() {
      let t54;
      t54 = firebase_core.Firebase.delegatePackingProperty;
      return t54 == null ? firebase_core.Firebase.delegatePackingProperty = firebase_core_platform_interface.FirebasePlatform.instance : t54;
    }
    static get apps() {
      return firebase_core.Firebase._delegate.apps[S$.$map](firebase_core.FirebaseApp, C[21] || CT.C21)[S$.$toList]({growable: false});
    }
    static initializeApp(opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let options = opts && 'options' in opts ? opts.options : null;
      return async.async(firebase_core.FirebaseApp, function* initializeApp() {
        let app = (yield firebase_core.Firebase._delegate.initializeApp({name: name, options: options}));
        return new firebase_core.FirebaseApp.__(app);
      });
    }
    static app(name = "[DEFAULT]") {
      let app = firebase_core.Firebase._delegate.app(name);
      return new firebase_core.FirebaseApp.__(app);
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!firebase_core.Firebase.is(other)) return false;
      return other.hashCode === this.hashCode;
    }
    get hashCode() {
      return this.toString()[S$.$hashCode];
    }
    toString() {
      return dart.str(dart.wrapType(firebase_core.Firebase));
    }
  };
  (firebase_core.Firebase.__ = function() {
    ;
  }).prototype = firebase_core.Firebase.prototype;
  dart.addTypeTests(firebase_core.Firebase);
  dart.addTypeCaches(firebase_core.Firebase);
  dart.setStaticMethodSignature(firebase_core.Firebase, () => ['initializeApp', 'app']);
  dart.setStaticGetterSignature(firebase_core.Firebase, () => ['_delegate', 'apps']);
  dart.setLibraryUri(firebase_core.Firebase, I[28]);
  dart.setStaticFieldSignature(firebase_core.Firebase, () => ['delegatePackingProperty']);
  dart.defineExtensionMethods(firebase_core.Firebase, ['_equals', 'toString']);
  dart.defineExtensionAccessors(firebase_core.Firebase, ['hashCode']);
  dart.defineLazy(firebase_core.Firebase, {
    /*firebase_core.Firebase.delegatePackingProperty*/get delegatePackingProperty() {
      return null;
    },
    set delegatePackingProperty(value) {}
  }, false);
  platform_interface_query.QueryPlatform = class QueryPlatform extends plugin_platform_interface.PlatformInterface {
    get firestore() {
      return this[S$.firestore];
    }
    set firestore(value) {
      super.firestore = value;
    }
    get parameters() {
      return this[S$.parameters];
    }
    set parameters(value) {
      super.parameters = value;
    }
    static verifyExtends(instance) {
      if (!platform_interface_collection_reference.CollectionReferencePlatform.is(instance)) {
        plugin_platform_interface.PlatformInterface.verifyToken(instance, platform_interface_query.QueryPlatform._token);
      }
    }
    get isCollectionGroupQuery() {
      dart.throw(new core.UnimplementedError.new("isCollectionGroupQuery is not implemented"));
    }
    endAtDocument(orders, values) {
      dart.throw(new core.UnimplementedError.new("endAtDocument() is not implemented"));
    }
    endAt(fields) {
      dart.throw(new core.UnimplementedError.new("endAt() is not implemented"));
    }
    endBeforeDocument(orders, values) {
      dart.throw(new core.UnimplementedError.new("endBeforeDocument() is not implemented"));
    }
    endBefore(fields) {
      dart.throw(new core.UnimplementedError.new("endBefore() is not implemented"));
    }
    get(options = C[10] || CT.C10) {
      dart.throw(new core.UnimplementedError.new("get() is not implemented"));
    }
    limit(limit) {
      dart.throw(new core.UnimplementedError.new("limit() is not implemented"));
    }
    limitToLast(limit) {
      dart.throw(new core.UnimplementedError.new("limitToLast() is not implemented"));
    }
    snapshots(opts) {
      let includeMetadataChanges = opts && 'includeMetadataChanges' in opts ? opts.includeMetadataChanges : false;
      dart.throw(new core.UnimplementedError.new("snapshots() is not implemented"));
    }
    orderBy(orders) {
      dart.throw(new core.UnimplementedError.new("orderBy() is not implemented"));
    }
    startAfterDocument(orders, values) {
      dart.throw(new core.UnimplementedError.new("startAfterDocument() is not implemented"));
    }
    startAfter(fields) {
      dart.throw(new core.UnimplementedError.new("startAfter() is not implemented"));
    }
    startAtDocument(orders, values) {
      dart.throw(new core.UnimplementedError.new("startAtDocument() is not implemented"));
    }
    startAt(fields) {
      dart.throw(new core.UnimplementedError.new("startAt() is not implemented"));
    }
    where(conditions) {
      dart.throw(new core.UnimplementedError.new("where() is not implemented"));
    }
  };
  (platform_interface_query.QueryPlatform.new = function(firestore, params) {
    let t56;
    this[S$.firestore] = firestore;
    this[S$.parameters] = (t56 = params, t56 == null ? platform_interface_query._initialParameters : t56);
    platform_interface_query.QueryPlatform.__proto__.new.call(this, {token: platform_interface_query.QueryPlatform._token});
    ;
  }).prototype = platform_interface_query.QueryPlatform.prototype;
  dart.addTypeTests(platform_interface_query.QueryPlatform);
  dart.addTypeCaches(platform_interface_query.QueryPlatform);
  dart.setMethodSignature(platform_interface_query.QueryPlatform, () => ({
    __proto__: dart.getMethods(platform_interface_query.QueryPlatform.__proto__),
    endAtDocument: dart.fnType(platform_interface_query.QueryPlatform, [core.List, core.List]),
    endAt: dart.fnType(platform_interface_query.QueryPlatform, [core.List]),
    endBeforeDocument: dart.fnType(platform_interface_query.QueryPlatform, [core.List, core.List]),
    endBefore: dart.fnType(platform_interface_query.QueryPlatform, [core.List]),
    get: dart.fnType(async.Future$(platform_interface_query_snapshot.QuerySnapshotPlatform), [], [get_options.GetOptions]),
    limit: dart.fnType(platform_interface_query.QueryPlatform, [core.int]),
    limitToLast: dart.fnType(platform_interface_query.QueryPlatform, [core.int]),
    snapshots: dart.fnType(async.Stream$(platform_interface_query_snapshot.QuerySnapshotPlatform), [], {includeMetadataChanges: core.bool}, {}),
    orderBy: dart.fnType(platform_interface_query.QueryPlatform, [core.List$(core.List)]),
    startAfterDocument: dart.fnType(platform_interface_query.QueryPlatform, [core.List, core.List]),
    startAfter: dart.fnType(platform_interface_query.QueryPlatform, [core.List]),
    startAtDocument: dart.fnType(platform_interface_query.QueryPlatform, [core.List, core.List]),
    startAt: dart.fnType(platform_interface_query.QueryPlatform, [core.List]),
    where: dart.fnType(platform_interface_query.QueryPlatform, [core.List$(core.List)])
  }));
  dart.setStaticMethodSignature(platform_interface_query.QueryPlatform, () => ['verifyExtends']);
  dart.setGetterSignature(platform_interface_query.QueryPlatform, () => ({
    __proto__: dart.getGetters(platform_interface_query.QueryPlatform.__proto__),
    isCollectionGroupQuery: core.bool
  }));
  dart.setLibraryUri(platform_interface_query.QueryPlatform, I[29]);
  dart.setFieldSignature(platform_interface_query.QueryPlatform, () => ({
    __proto__: dart.getFields(platform_interface_query.QueryPlatform.__proto__),
    firestore: dart.finalFieldType(platform_interface_firestore.FirebaseFirestorePlatform),
    parameters: dart.finalFieldType(core.Map$(core.String, dart.dynamic))
  }));
  dart.setStaticFieldSignature(platform_interface_query.QueryPlatform, () => ['_token']);
  dart.defineLazy(platform_interface_query.QueryPlatform, {
    /*platform_interface_query.QueryPlatform._token*/get _token() {
      return new core.Object.new();
    }
  }, false);
  query_web.QueryWeb = class QueryWeb extends platform_interface_query.QueryPlatform {
    get isCollectionGroupQuery() {
      return this[S$.isCollectionGroupQuery];
    }
    set isCollectionGroupQuery(value) {
      super.isCollectionGroupQuery = value;
    }
    static ['_#new#tearOff'](firestore, _path, _webQuery, opts) {
      let parameters = opts && 'parameters' in opts ? opts.parameters : null;
      let isCollectionGroupQuery = opts && 'isCollectionGroupQuery' in opts ? opts.isCollectionGroupQuery : false;
      return new query_web.QueryWeb.new(firestore, _path, _webQuery, {parameters: parameters, isCollectionGroupQuery: isCollectionGroupQuery});
    }
    _equals(other) {
      if (other == null) return false;
      return this[S$.$runtimeType]._equals(other[S$.$runtimeType]) && query_web.QueryWeb.is(other) && other.firestore._equals(this.firestore) && other[S$._path] === this[S$._path] && other.isCollectionGroupQuery === this.isCollectionGroupQuery && (C[23] || CT.C23).equals(other.parameters, this.parameters);
    }
    get hashCode() {
      return core.Object.hash(this[S$.$runtimeType], this.firestore, this[S$._path], this.isCollectionGroupQuery, (C[23] || CT.C23).hash(this.parameters));
    }
    [S$._copyWithParameters](parameters) {
      let t54;
      return new query_web.QueryWeb.new(this.firestore, this[S$._path], this[S$._webQuery], {isCollectionGroupQuery: this.isCollectionGroupQuery, parameters: T$.MapOfString$dynamic().unmodifiable((t54 = T$.LinkedHashMapOfString$dynamic().from(this.parameters), (() => {
          t54[S$.$addAll](parameters);
          return t54;
        })()))});
    }
    [S$._buildWebQueryWithParameters]() {
      let query = this[S$._webQuery];
      for (let t54 of core.Iterable.as(this.parameters[S$.$_get]("orderBy"))) {
        let order = core.List.as(t54);
        query = query.orderBy(encode_utility.EncodeUtility.valueEncode(order[S$.$_get](0)), dart.dtest(order[S$.$_get](1)) ? "desc" : "asc");
      }
      if (this.parameters[S$.$_get]("startAt") != null) {
        query = query.startAt({fieldValues: T$.ListN().as(encode_utility.EncodeUtility.valueEncode(this.parameters[S$.$_get]("startAt")))});
      }
      if (this.parameters[S$.$_get]("startAfter") != null) {
        query = query.startAfter({fieldValues: T$.ListN().as(encode_utility.EncodeUtility.valueEncode(this.parameters[S$.$_get]("startAfter")))});
      }
      if (this.parameters[S$.$_get]("endAt") != null) {
        query = query.endAt({fieldValues: T$.ListN().as(encode_utility.EncodeUtility.valueEncode(this.parameters[S$.$_get]("endAt")))});
      }
      if (this.parameters[S$.$_get]("endBefore") != null) {
        query = query.endBefore({fieldValues: T$.ListN().as(encode_utility.EncodeUtility.valueEncode(this.parameters[S$.$_get]("endBefore")))});
      }
      if (this.parameters[S$.$_get]("limit") != null) {
        query = query.limit(core.num.as(this.parameters[S$.$_get]("limit")));
      }
      if (this.parameters[S$.$_get]("limitToLast") != null) {
        query = query.limitToLast(core.num.as(this.parameters[S$.$_get]("limitToLast")));
      }
      for (let t55 of core.Iterable.as(this.parameters[S$.$_get]("where"))) {
        let condition = core.List.as(t55);
        let fieldPath = encode_utility.EncodeUtility.valueEncode(condition[S$.$_get](0));
        let opStr = core.String.as(condition[S$.$_get](1));
        let value = encode_utility.EncodeUtility.valueEncode(condition[S$.$_get](2));
        query = query.where(fieldPath, opStr, value);
      }
      return query;
    }
    endAtDocument(orders, values) {
      return this[S$._copyWithParameters](new (T$.IdentityMapOfString$dynamic()).from(["orderBy", orders, "endAt", values, "endBefore", null]));
    }
    endAt(fields) {
      return this[S$._copyWithParameters](new (T$.IdentityMapOfString$dynamic()).from(["endAt", fields, "endBefore", null]));
    }
    endBeforeDocument(orders, values) {
      return this[S$._copyWithParameters](new (T$.IdentityMapOfString$dynamic()).from(["orderBy", orders, "endAt", null, "endBefore", values]));
    }
    endBefore(fields) {
      return this[S$._copyWithParameters](new (T$.IdentityMapOfString$dynamic()).from(["endAt", null, "endBefore", fields]));
    }
    get(options = C[10] || CT.C10) {
      return internals.convertWebExceptions(T$.FutureOfQuerySnapshotPlatform(), dart.fn(() => async.async(platform_interface_query_snapshot.QuerySnapshotPlatform, (function*() {
        return web_utils.convertWebQuerySnapshot(this.firestore, yield this[S$._buildWebQueryWithParameters]().get(web_utils.convertGetOptions(options)));
      }).bind(this)), T$.VoidToFutureOfQuerySnapshotPlatform()));
    }
    limit(limit) {
      return this[S$._copyWithParameters](new (T$.IdentityMapOfString$dynamic()).from(["limit", limit, "limitToLast", null]));
    }
    limitToLast(limit) {
      return this[S$._copyWithParameters](new (T$.IdentityMapOfString$dynamic()).from(["limit", null, "limitToLast", limit]));
    }
    snapshots(opts) {
      let includeMetadataChanges = opts && 'includeMetadataChanges' in opts ? opts.includeMetadataChanges : false;
      let querySnapshots = null;
      if (includeMetadataChanges) {
        querySnapshots = this[S$._buildWebQueryWithParameters]().onSnapshotMetadata;
      } else {
        querySnapshots = this[S$._buildWebQueryWithParameters]().onSnapshot;
      }
      return internals.convertWebExceptions(T$.StreamOfQuerySnapshotPlatform(), dart.fn(() => querySnapshots.map(platform_interface_query_snapshot.QuerySnapshotPlatform, dart.fn(webQuerySnapshot => web_utils.convertWebQuerySnapshot(this.firestore, webQuerySnapshot), T$.QuerySnapshotToQuerySnapshotPlatform())), T$.VoidToStreamOfQuerySnapshotPlatform()));
    }
    orderBy(orders) {
      return this[S$._copyWithParameters](new (T$.IdentityMapOfString$dynamic()).from(["orderBy", orders]));
    }
    startAfterDocument(orders, values) {
      return this[S$._copyWithParameters](new (T$.IdentityMapOfString$dynamic()).from(["orderBy", orders, "startAt", null, "startAfter", values]));
    }
    startAfter(fields) {
      return this[S$._copyWithParameters](new (T$.IdentityMapOfString$dynamic()).from(["startAt", null, "startAfter", fields]));
    }
    startAtDocument(orders, values) {
      return this[S$._copyWithParameters](new (T$.IdentityMapOfString$dynamic()).from(["orderBy", orders, "startAt", values, "startAfter", null]));
    }
    startAt(fields) {
      return this[S$._copyWithParameters](new (T$.IdentityMapOfString$dynamic()).from(["startAt", fields, "startAfter", null]));
    }
    where(conditions) {
      return this[S$._copyWithParameters](new (T$.IdentityMapOfString$dynamic()).from(["where", conditions]));
    }
  };
  (query_web.QueryWeb.new = function(firestore, _path, _webQuery, opts) {
    let parameters = opts && 'parameters' in opts ? opts.parameters : null;
    let isCollectionGroupQuery = opts && 'isCollectionGroupQuery' in opts ? opts.isCollectionGroupQuery : false;
    this[S$._path] = _path;
    this[S$._webQuery] = _webQuery;
    this[S$.isCollectionGroupQuery] = isCollectionGroupQuery;
    query_web.QueryWeb.__proto__.new.call(this, firestore, parameters);
    ;
  }).prototype = query_web.QueryWeb.prototype;
  dart.addTypeTests(query_web.QueryWeb);
  dart.addTypeCaches(query_web.QueryWeb);
  dart.setMethodSignature(query_web.QueryWeb, () => ({
    __proto__: dart.getMethods(query_web.QueryWeb.__proto__),
    [S$._copyWithParameters]: dart.fnType(query_web.QueryWeb, [core.Map$(core.String, dart.dynamic)]),
    [S$._buildWebQueryWithParameters]: dart.fnType(firestore.Query$(dart.packageJSType("firebase_firestore.Query", false)), [])
  }));
  dart.setLibraryUri(query_web.QueryWeb, I[30]);
  dart.setFieldSignature(query_web.QueryWeb, () => ({
    __proto__: dart.getFields(query_web.QueryWeb.__proto__),
    [S$._webQuery]: dart.finalFieldType(firestore.Query$(dart.packageJSType("firebase_firestore.Query", false))),
    [S$._path]: dart.finalFieldType(core.String),
    isCollectionGroupQuery: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(query_web.QueryWeb, ['_equals']);
  dart.defineExtensionAccessors(query_web.QueryWeb, ['hashCode']);
  collection_reference_web.CollectionReferenceWeb = class CollectionReferenceWeb extends query_web.QueryWeb {
    static ['_#new#tearOff'](_firestorePlatform, _webFirestore, path) {
      return new collection_reference_web.CollectionReferenceWeb.new(_firestorePlatform, _webFirestore, path);
    }
    get path() {
      return this[S$._delegate$4].path;
    }
    doc(path = null) {
      let documentReference = this[S$._delegate$4].doc(path);
      return new document_reference_web.DocumentReferenceWeb.new(this[S$._firestorePlatform], this[S$._webFirestore$1], documentReference.path);
    }
    get id() {
      return this[S$._delegate$4].id;
    }
    get parent() {
      let documentReference = this[S$._delegate$4].parent;
      if (documentReference == null) {
        return null;
      }
      return new document_reference_web.DocumentReferenceWeb.new(this[S$._firestorePlatform], this[S$._webFirestore$1], documentReference.path);
    }
    get [S$._pointer$1]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[22] || CT.C22)));
    }
  };
  (collection_reference_web.CollectionReferenceWeb.new = function(_firestorePlatform, _webFirestore, path) {
    this[S$._firestorePlatform] = _firestorePlatform;
    this[S$._webFirestore$1] = _webFirestore;
    this[S$._delegate$4] = _webFirestore.collection(path);
    collection_reference_web.CollectionReferenceWeb.__proto__.new.call(this, _firestorePlatform, path, _webFirestore.collection(path));
    ;
  }).prototype = collection_reference_web.CollectionReferenceWeb.prototype;
  dart.addTypeTests(collection_reference_web.CollectionReferenceWeb);
  dart.addTypeCaches(collection_reference_web.CollectionReferenceWeb);
  collection_reference_web.CollectionReferenceWeb[dart.implements] = () => [platform_interface_collection_reference.CollectionReferencePlatform];
  dart.setMethodSignature(collection_reference_web.CollectionReferenceWeb, () => ({
    __proto__: dart.getMethods(collection_reference_web.CollectionReferenceWeb.__proto__),
    doc: dart.fnType(platform_interface_document_reference.DocumentReferencePlatform, [], [dart.nullable(core.String)])
  }));
  dart.setGetterSignature(collection_reference_web.CollectionReferenceWeb, () => ({
    __proto__: dart.getGetters(collection_reference_web.CollectionReferenceWeb.__proto__),
    path: core.String,
    id: core.String,
    parent: dart.nullable(platform_interface_document_reference.DocumentReferencePlatform),
    [S$._pointer$1]: pointer.Pointer
  }));
  dart.setLibraryUri(collection_reference_web.CollectionReferenceWeb, I[31]);
  dart.setFieldSignature(collection_reference_web.CollectionReferenceWeb, () => ({
    __proto__: dart.getFields(collection_reference_web.CollectionReferenceWeb.__proto__),
    [S$._webFirestore$1]: dart.finalFieldType(firestore.Firestore),
    [S$._firestorePlatform]: dart.finalFieldType(platform_interface_firestore.FirebaseFirestorePlatform),
    [S$._delegate$4]: dart.finalFieldType(firestore.CollectionReference$(dart.packageJSType("firebase_firestore.CollectionReference", false)))
  }));
  platform_interface_field_value_factory.FieldValueFactoryPlatform = class FieldValueFactoryPlatform extends plugin_platform_interface.PlatformInterface {
    static get instance() {
      return platform_interface_field_value_factory.FieldValueFactoryPlatform._instance;
    }
    static set instance(instance) {
      plugin_platform_interface.PlatformInterface.verifyToken(instance, platform_interface_field_value_factory.FieldValueFactoryPlatform._token);
      platform_interface_field_value_factory.FieldValueFactoryPlatform._instance = instance;
    }
    static verifyExtends(instance) {
      plugin_platform_interface.PlatformInterface.verifyToken(instance, platform_interface_field_value_factory.FieldValueFactoryPlatform._token);
    }
    arrayUnion(elements) {
      dart.throw(new core.UnimplementedError.new("arrayUnion() is not implemented"));
    }
    arrayRemove(elements) {
      dart.throw(new core.UnimplementedError.new("arrayRemove() is not implemented"));
    }
    delete() {
      dart.throw(new core.UnimplementedError.new("delete() is not implemented"));
    }
    serverTimestamp() {
      dart.throw(new core.UnimplementedError.new("serverTimestamp() is not implemented"));
    }
    increment(value) {
      dart.throw(new core.UnimplementedError.new("increment() is not implemented"));
    }
  };
  (platform_interface_field_value_factory.FieldValueFactoryPlatform.new = function() {
    platform_interface_field_value_factory.FieldValueFactoryPlatform.__proto__.new.call(this, {token: platform_interface_field_value_factory.FieldValueFactoryPlatform._token});
    ;
  }).prototype = platform_interface_field_value_factory.FieldValueFactoryPlatform.prototype;
  dart.addTypeTests(platform_interface_field_value_factory.FieldValueFactoryPlatform);
  dart.addTypeCaches(platform_interface_field_value_factory.FieldValueFactoryPlatform);
  dart.setMethodSignature(platform_interface_field_value_factory.FieldValueFactoryPlatform, () => ({
    __proto__: dart.getMethods(platform_interface_field_value_factory.FieldValueFactoryPlatform.__proto__),
    arrayUnion: dart.fnType(dart.dynamic, [core.List]),
    arrayRemove: dart.fnType(dart.dynamic, [core.List]),
    delete: dart.fnType(dart.dynamic, []),
    serverTimestamp: dart.fnType(dart.dynamic, []),
    increment: dart.fnType(dart.dynamic, [core.num])
  }));
  dart.setStaticMethodSignature(platform_interface_field_value_factory.FieldValueFactoryPlatform, () => ['verifyExtends']);
  dart.setStaticGetterSignature(platform_interface_field_value_factory.FieldValueFactoryPlatform, () => ['instance']);
  dart.setStaticSetterSignature(platform_interface_field_value_factory.FieldValueFactoryPlatform, () => ['instance']);
  dart.setLibraryUri(platform_interface_field_value_factory.FieldValueFactoryPlatform, I[32]);
  dart.setStaticFieldSignature(platform_interface_field_value_factory.FieldValueFactoryPlatform, () => ['_instance', '_token']);
  dart.defineLazy(platform_interface_field_value_factory.FieldValueFactoryPlatform, {
    /*platform_interface_field_value_factory.FieldValueFactoryPlatform._instance*/get _instance() {
      return new method_channel_field_value_factory.MethodChannelFieldValueFactory.new();
    },
    set _instance(value) {},
    /*platform_interface_field_value_factory.FieldValueFactoryPlatform._token*/get _token() {
      return new core.Object.new();
    }
  }, false);
  field_value_factory_web.FieldValueFactoryWeb = class FieldValueFactoryWeb extends platform_interface_field_value_factory.FieldValueFactoryPlatform {
    arrayRemove(elements) {
      return new field_value_web.FieldValueWeb.new(firestore.FieldValue.arrayRemove(T$.ListN().as(encode_utility.EncodeUtility.valueEncode(elements))));
    }
    arrayUnion(elements) {
      return new field_value_web.FieldValueWeb.new(firestore.FieldValue.arrayUnion(T$.ListN().as(encode_utility.EncodeUtility.valueEncode(elements))));
    }
    delete() {
      return new field_value_web.FieldValueWeb.new(firestore.FieldValue.delete());
    }
    increment(value) {
      return new field_value_web.FieldValueWeb.new(firestore.FieldValue.increment(value));
    }
    serverTimestamp() {
      return new field_value_web.FieldValueWeb.new(firestore.FieldValue.serverTimestamp());
    }
    static ['_#new#tearOff']() {
      return new field_value_factory_web.FieldValueFactoryWeb.new();
    }
  };
  (field_value_factory_web.FieldValueFactoryWeb.new = function() {
    field_value_factory_web.FieldValueFactoryWeb.__proto__.new.call(this);
    ;
  }).prototype = field_value_factory_web.FieldValueFactoryWeb.prototype;
  dart.addTypeTests(field_value_factory_web.FieldValueFactoryWeb);
  dart.addTypeCaches(field_value_factory_web.FieldValueFactoryWeb);
  dart.setMethodSignature(field_value_factory_web.FieldValueFactoryWeb, () => ({
    __proto__: dart.getMethods(field_value_factory_web.FieldValueFactoryWeb.__proto__),
    arrayRemove: dart.fnType(field_value_web.FieldValueWeb, [core.List]),
    arrayUnion: dart.fnType(field_value_web.FieldValueWeb, [core.List]),
    delete: dart.fnType(field_value_web.FieldValueWeb, []),
    increment: dart.fnType(field_value_web.FieldValueWeb, [core.num]),
    serverTimestamp: dart.fnType(field_value_web.FieldValueWeb, [])
  }));
  dart.setLibraryUri(field_value_factory_web.FieldValueFactoryWeb, I[33]);
  platform_interface_document_reference.DocumentReferencePlatform = class DocumentReferencePlatform extends plugin_platform_interface.PlatformInterface {
    get firestore() {
      return this[S$.firestore$1];
    }
    set firestore(value) {
      super.firestore = value;
    }
    static verifyExtends(instance) {
      plugin_platform_interface.PlatformInterface.verifyToken(instance, platform_interface_document_reference.DocumentReferencePlatform._token);
    }
    get path() {
      return this[S$._pointer$2].path;
    }
    get id() {
      return this[S$._pointer$2].id;
    }
    get parent() {
      return this.firestore.collection(dart.nullCheck(this[S$._pointer$2].parentPath()));
    }
    collection(collectionPath) {
      return this.firestore.collection(this[S$._pointer$2].collectionPath(collectionPath));
    }
    delete() {
      dart.throw(new core.UnimplementedError.new("delete() is not implemented"));
    }
    get(options = C[10] || CT.C10) {
      return async.async(platform_interface_document_snapshot.DocumentSnapshotPlatform, function* get() {
        dart.throw(new core.UnimplementedError.new("get() is not implemented"));
      });
    }
    snapshots(opts) {
      let includeMetadataChanges = opts && 'includeMetadataChanges' in opts ? opts.includeMetadataChanges : false;
      dart.throw(new core.UnimplementedError.new("snapshots() is not implemented"));
    }
    set(data, options = null) {
      dart.throw(new core.UnimplementedError.new("set() is not implemented"));
    }
    update(data) {
      dart.throw(new core.UnimplementedError.new("update() is not implemented"));
    }
    _equals(other) {
      if (other == null) return false;
      return platform_interface_document_reference.DocumentReferencePlatform.is(other) && other.firestore._equals(this.firestore) && other.path === this.path;
    }
    get hashCode() {
      return this.path[S$.$hashCode];
    }
    toString() {
      return dart.str(dart.wrapType(platform_interface_document_reference.DocumentReferencePlatform)) + "(" + this.path + ")";
    }
  };
  (platform_interface_document_reference.DocumentReferencePlatform.new = function(firestore, path) {
    this[S$.firestore$1] = firestore;
    this[S$._pointer$2] = new pointer.Pointer.new(path);
    platform_interface_document_reference.DocumentReferencePlatform.__proto__.new.call(this, {token: platform_interface_document_reference.DocumentReferencePlatform._token});
    ;
  }).prototype = platform_interface_document_reference.DocumentReferencePlatform.prototype;
  dart.addTypeTests(platform_interface_document_reference.DocumentReferencePlatform);
  dart.addTypeCaches(platform_interface_document_reference.DocumentReferencePlatform);
  dart.setMethodSignature(platform_interface_document_reference.DocumentReferencePlatform, () => ({
    __proto__: dart.getMethods(platform_interface_document_reference.DocumentReferencePlatform.__proto__),
    collection: dart.fnType(platform_interface_collection_reference.CollectionReferencePlatform, [core.String]),
    delete: dart.fnType(async.Future$(dart.void), []),
    get: dart.fnType(async.Future$(platform_interface_document_snapshot.DocumentSnapshotPlatform), [], [get_options.GetOptions]),
    snapshots: dart.fnType(async.Stream$(platform_interface_document_snapshot.DocumentSnapshotPlatform), [], {includeMetadataChanges: core.bool}, {}),
    set: dart.fnType(async.Future$(dart.void), [core.Map$(core.String, dart.dynamic)], [dart.nullable(set_options.SetOptions)]),
    update: dart.fnType(async.Future$(dart.void), [core.Map$(core.String, dart.dynamic)])
  }));
  dart.setStaticMethodSignature(platform_interface_document_reference.DocumentReferencePlatform, () => ['verifyExtends']);
  dart.setGetterSignature(platform_interface_document_reference.DocumentReferencePlatform, () => ({
    __proto__: dart.getGetters(platform_interface_document_reference.DocumentReferencePlatform.__proto__),
    path: core.String,
    id: core.String,
    parent: platform_interface_collection_reference.CollectionReferencePlatform
  }));
  dart.setLibraryUri(platform_interface_document_reference.DocumentReferencePlatform, I[34]);
  dart.setFieldSignature(platform_interface_document_reference.DocumentReferencePlatform, () => ({
    __proto__: dart.getFields(platform_interface_document_reference.DocumentReferencePlatform.__proto__),
    firestore: dart.finalFieldType(platform_interface_firestore.FirebaseFirestorePlatform),
    [S$._pointer$2]: dart.finalFieldType(pointer.Pointer)
  }));
  dart.setStaticFieldSignature(platform_interface_document_reference.DocumentReferencePlatform, () => ['_token']);
  dart.defineExtensionMethods(platform_interface_document_reference.DocumentReferencePlatform, ['_equals', 'toString']);
  dart.defineExtensionAccessors(platform_interface_document_reference.DocumentReferencePlatform, ['hashCode']);
  dart.defineLazy(platform_interface_document_reference.DocumentReferencePlatform, {
    /*platform_interface_document_reference.DocumentReferencePlatform._token*/get _token() {
      return new core.Object.new();
    }
  }, false);
  document_reference_web.DocumentReferenceWeb = class DocumentReferenceWeb extends platform_interface_document_reference.DocumentReferencePlatform {
    get firestoreWeb() {
      return this[S$.firestoreWeb];
    }
    set firestoreWeb(value) {
      super.firestoreWeb = value;
    }
    static ['_#new#tearOff'](firestore, firestoreWeb, path) {
      return new document_reference_web.DocumentReferenceWeb.new(firestore, firestoreWeb, path);
    }
    set(data, options = null) {
      return internals.convertWebExceptions(T$.FutureOfvoid(), dart.fn(() => this[S$._delegate$5].set(dart.nullCheck(encode_utility.EncodeUtility.encodeMapData(data)), web_utils.convertSetOptions(options)), T$.VoidToFutureOfvoid()));
    }
    update(data) {
      return internals.convertWebExceptions(T$.FutureOfvoid(), dart.fn(() => this[S$._delegate$5].update(dart.nullCheck(encode_utility.EncodeUtility.encodeMapData(data))), T$.VoidToFutureOfvoid()));
    }
    get(options = C[10] || CT.C10) {
      return async.async(platform_interface_document_snapshot.DocumentSnapshotPlatform, (function* get() {
        let documentSnapshot = (yield internals.convertWebExceptions(T$.FutureOrOfDocumentSnapshot(), dart.fn(() => this[S$._delegate$5].get(web_utils.convertGetOptions(options)), T$.VoidToFutureOfDocumentSnapshot())));
        return web_utils.convertWebDocumentSnapshot(this.firestore, documentSnapshot);
      }).bind(this));
    }
    delete() {
      return internals.convertWebExceptions(T$.FutureOfvoid(), dart.bind(this[S$._delegate$5], 'delete'));
    }
    snapshots(opts) {
      let includeMetadataChanges = opts && 'includeMetadataChanges' in opts ? opts.includeMetadataChanges : false;
      let querySnapshots = this[S$._delegate$5].onSnapshot;
      if (includeMetadataChanges) {
        querySnapshots = this[S$._delegate$5].onMetadataChangesSnapshot;
      }
      return internals.convertWebExceptions(T$.StreamOfDocumentSnapshotPlatform(), dart.fn(() => querySnapshots.map(platform_interface_document_snapshot.DocumentSnapshotPlatform, dart.fn(webSnapshot => web_utils.convertWebDocumentSnapshot(this.firestore, webSnapshot), T$.DocumentSnapshotToDocumentSnapshotPlatform())), T$.VoidToStreamOfDocumentSnapshotPlatform()));
    }
  };
  (document_reference_web.DocumentReferenceWeb.new = function(firestore, firestoreWeb, path) {
    this[S$.firestoreWeb] = firestoreWeb;
    this[S$._delegate$5] = firestoreWeb.doc(path);
    document_reference_web.DocumentReferenceWeb.__proto__.new.call(this, firestore, path);
    ;
  }).prototype = document_reference_web.DocumentReferenceWeb.prototype;
  dart.addTypeTests(document_reference_web.DocumentReferenceWeb);
  dart.addTypeCaches(document_reference_web.DocumentReferenceWeb);
  dart.setLibraryUri(document_reference_web.DocumentReferenceWeb, I[35]);
  dart.setFieldSignature(document_reference_web.DocumentReferenceWeb, () => ({
    __proto__: dart.getFields(document_reference_web.DocumentReferenceWeb.__proto__),
    firestoreWeb: dart.finalFieldType(firestore.Firestore),
    [S$._delegate$5]: dart.finalFieldType(firestore.DocumentReference)
  }));
  platform_interface_transaction.TransactionPlatform = class TransactionPlatform extends plugin_platform_interface.PlatformInterface {
    static verifyExtends(instance) {
      plugin_platform_interface.PlatformInterface.verifyToken(instance, platform_interface_transaction.TransactionPlatform._token);
    }
    get commands() {
      dart.throw(new core.UnimplementedError.new("commands is not implemented"));
    }
    get(documentPath) {
      dart.throw(new core.UnimplementedError.new("get() is not implemented"));
    }
    delete(documentPath) {
      dart.throw(new core.UnimplementedError.new("delete() is not implemented"));
    }
    update(documentPath, data) {
      dart.throw(new core.UnimplementedError.new("update() is not implemented"));
    }
    set(documentPath, data, options = null) {
      dart.throw(new core.UnimplementedError.new("set() is not implemented"));
    }
  };
  (platform_interface_transaction.TransactionPlatform.new = function() {
    platform_interface_transaction.TransactionPlatform.__proto__.new.call(this, {token: platform_interface_transaction.TransactionPlatform._token});
    ;
  }).prototype = platform_interface_transaction.TransactionPlatform.prototype;
  dart.addTypeTests(platform_interface_transaction.TransactionPlatform);
  dart.addTypeCaches(platform_interface_transaction.TransactionPlatform);
  dart.setMethodSignature(platform_interface_transaction.TransactionPlatform, () => ({
    __proto__: dart.getMethods(platform_interface_transaction.TransactionPlatform.__proto__),
    get: dart.fnType(async.Future$(platform_interface_document_snapshot.DocumentSnapshotPlatform), [core.String]),
    delete: dart.fnType(platform_interface_transaction.TransactionPlatform, [core.String]),
    update: dart.fnType(platform_interface_transaction.TransactionPlatform, [core.String, core.Map$(core.String, dart.dynamic)]),
    set: dart.fnType(platform_interface_transaction.TransactionPlatform, [core.String, core.Map$(core.String, dart.dynamic)], [dart.nullable(set_options.SetOptions)])
  }));
  dart.setStaticMethodSignature(platform_interface_transaction.TransactionPlatform, () => ['verifyExtends']);
  dart.setGetterSignature(platform_interface_transaction.TransactionPlatform, () => ({
    __proto__: dart.getGetters(platform_interface_transaction.TransactionPlatform.__proto__),
    commands: core.List$(core.Map$(core.String, dart.dynamic))
  }));
  dart.setLibraryUri(platform_interface_transaction.TransactionPlatform, I[36]);
  dart.setStaticFieldSignature(platform_interface_transaction.TransactionPlatform, () => ['_token']);
  dart.defineLazy(platform_interface_transaction.TransactionPlatform, {
    /*platform_interface_transaction.TransactionPlatform._token*/get _token() {
      return new core.Object.new();
    }
  }, false);
  transaction_web.TransactionWeb = class TransactionWeb extends platform_interface_transaction.TransactionPlatform {
    static ['_#new#tearOff'](_firestore, _webFirestoreDelegate, _webTransactionDelegate) {
      return new transaction_web.TransactionWeb.new(_firestore, _webFirestoreDelegate, _webTransactionDelegate);
    }
    delete(documentPath) {
      this[S$._webTransactionDelegate].delete(this[S$._webFirestoreDelegate].doc(documentPath));
      return this;
    }
    get(documentPath) {
      return internals.convertWebExceptions(T$.FutureOfDocumentSnapshotPlatform(), dart.fn(() => async.async(platform_interface_document_snapshot.DocumentSnapshotPlatform, (function*() {
        let webDocumentSnapshot = (yield this[S$._webTransactionDelegate].get(this[S$._webFirestoreDelegate].doc(documentPath)));
        return web_utils.convertWebDocumentSnapshot(this[S$._firestore], webDocumentSnapshot);
      }).bind(this)), T$.VoidToFutureOfDocumentSnapshotPlatform()));
    }
    set(documentPath, data, options = null) {
      this[S$._webTransactionDelegate].set(this[S$._webFirestoreDelegate].doc(documentPath), dart.nullCheck(encode_utility.EncodeUtility.encodeMapData(data)), web_utils.convertSetOptions(options));
      return this;
    }
    update(documentPath, data) {
      this[S$._webTransactionDelegate].update(this[S$._webFirestoreDelegate].doc(documentPath), dart.nullCheck(encode_utility.EncodeUtility.encodeMapData(data)));
      return this;
    }
  };
  (transaction_web.TransactionWeb.new = function(_firestore, _webFirestoreDelegate, _webTransactionDelegate) {
    this[S$._firestore] = _firestore;
    this[S$._webFirestoreDelegate] = _webFirestoreDelegate;
    this[S$._webTransactionDelegate] = _webTransactionDelegate;
    transaction_web.TransactionWeb.__proto__.new.call(this);
    ;
  }).prototype = transaction_web.TransactionWeb.prototype;
  dart.addTypeTests(transaction_web.TransactionWeb);
  dart.addTypeCaches(transaction_web.TransactionWeb);
  dart.setMethodSignature(transaction_web.TransactionWeb, () => ({
    __proto__: dart.getMethods(transaction_web.TransactionWeb.__proto__),
    delete: dart.fnType(transaction_web.TransactionWeb, [core.String]),
    set: dart.fnType(transaction_web.TransactionWeb, [core.String, core.Map$(core.String, dart.dynamic)], [dart.nullable(set_options.SetOptions)]),
    update: dart.fnType(transaction_web.TransactionWeb, [core.String, core.Map$(core.String, dart.dynamic)])
  }));
  dart.setLibraryUri(transaction_web.TransactionWeb, I[37]);
  dart.setFieldSignature(transaction_web.TransactionWeb, () => ({
    __proto__: dart.getFields(transaction_web.TransactionWeb.__proto__),
    [S$._webFirestoreDelegate]: dart.finalFieldType(firestore.Firestore),
    [S$._webTransactionDelegate]: dart.finalFieldType(firestore.Transaction),
    [S$._firestore]: dart.fieldType(platform_interface_firestore.FirebaseFirestorePlatform)
  }));
  platform_interface_write_batch.WriteBatchPlatform = class WriteBatchPlatform extends plugin_platform_interface.PlatformInterface {
    static verifyExtends(instance) {
      plugin_platform_interface.PlatformInterface.verifyToken(instance, platform_interface_write_batch.WriteBatchPlatform._token);
    }
    commit() {
      return async.async(dart.void, function* commit() {
        dart.throw(new core.UnimplementedError.new("commit() is not implemented"));
      });
    }
    delete(documentPath) {
      dart.throw(new core.UnimplementedError.new("delete() is not implemented"));
    }
    set(documentPath, data, options = null) {
      dart.throw(new core.UnimplementedError.new("set() is not implemented"));
    }
    update(documentPath, data) {
      dart.throw(new core.UnimplementedError.new("update() is not implemented"));
    }
  };
  (platform_interface_write_batch.WriteBatchPlatform.new = function() {
    platform_interface_write_batch.WriteBatchPlatform.__proto__.new.call(this, {token: platform_interface_write_batch.WriteBatchPlatform._token});
    ;
  }).prototype = platform_interface_write_batch.WriteBatchPlatform.prototype;
  dart.addTypeTests(platform_interface_write_batch.WriteBatchPlatform);
  dart.addTypeCaches(platform_interface_write_batch.WriteBatchPlatform);
  dart.setMethodSignature(platform_interface_write_batch.WriteBatchPlatform, () => ({
    __proto__: dart.getMethods(platform_interface_write_batch.WriteBatchPlatform.__proto__),
    commit: dart.fnType(async.Future$(dart.void), []),
    delete: dart.fnType(dart.void, [core.String]),
    set: dart.fnType(dart.void, [core.String, core.Map$(core.String, dart.dynamic)], [dart.nullable(set_options.SetOptions)]),
    update: dart.fnType(dart.void, [core.String, core.Map$(core.String, dart.dynamic)])
  }));
  dart.setStaticMethodSignature(platform_interface_write_batch.WriteBatchPlatform, () => ['verifyExtends']);
  dart.setLibraryUri(platform_interface_write_batch.WriteBatchPlatform, I[38]);
  dart.setStaticFieldSignature(platform_interface_write_batch.WriteBatchPlatform, () => ['_token']);
  dart.defineLazy(platform_interface_write_batch.WriteBatchPlatform, {
    /*platform_interface_write_batch.WriteBatchPlatform._token*/get _token() {
      return new core.Object.new();
    }
  }, false);
  write_batch_web.WriteBatchWeb = class WriteBatchWeb extends platform_interface_write_batch.WriteBatchPlatform {
    static ['_#new#tearOff'](_webFirestoreDelegate) {
      return new write_batch_web.WriteBatchWeb.new(_webFirestoreDelegate);
    }
    commit() {
      return internals.convertWebExceptions(T$.FutureOfvoid(), dart.bind(this[S$._webWriteBatchDelegate], 'commit'));
    }
    delete(documentPath) {
      this[S$._webWriteBatchDelegate].delete(this[S$._webFirestoreDelegate$1].doc(documentPath));
    }
    set(documentPath, data, options = null) {
      this[S$._webWriteBatchDelegate].set(this[S$._webFirestoreDelegate$1].doc(documentPath), dart.nullCheck(encode_utility.EncodeUtility.encodeMapData(data)), web_utils.convertSetOptions(options));
    }
    update(documentPath, data) {
      this[S$._webWriteBatchDelegate].update(this[S$._webFirestoreDelegate$1].doc(documentPath), dart.nullCheck(encode_utility.EncodeUtility.encodeMapData(data)));
    }
  };
  (write_batch_web.WriteBatchWeb.new = function(_webFirestoreDelegate) {
    this[S$._webFirestoreDelegate$1] = _webFirestoreDelegate;
    this[S$._webWriteBatchDelegate] = dart.nullCheck(_webFirestoreDelegate.batch());
    write_batch_web.WriteBatchWeb.__proto__.new.call(this);
    ;
  }).prototype = write_batch_web.WriteBatchWeb.prototype;
  dart.addTypeTests(write_batch_web.WriteBatchWeb);
  dart.addTypeCaches(write_batch_web.WriteBatchWeb);
  dart.setLibraryUri(write_batch_web.WriteBatchWeb, I[39]);
  dart.setFieldSignature(write_batch_web.WriteBatchWeb, () => ({
    __proto__: dart.getFields(write_batch_web.WriteBatchWeb.__proto__),
    [S$._webFirestoreDelegate$1]: dart.finalFieldType(firestore.Firestore),
    [S$._webWriteBatchDelegate]: dart.fieldType(firestore.WriteBatch)
  }));
  const _is_JsObjectWrapper_default = Symbol('_is_JsObjectWrapper_default');
  js$.JsObjectWrapper$ = dart.generic(T => {
    class JsObjectWrapper extends core.Object {
      get jsObject() {
        return this[S$.jsObject];
      }
      set jsObject(value) {
        super.jsObject = value;
      }
    }
    (JsObjectWrapper.fromJsObject = function(jsObject) {
      this[S$.jsObject] = jsObject;
      ;
    }).prototype = JsObjectWrapper.prototype;
    dart.addTypeTests(JsObjectWrapper);
    JsObjectWrapper.prototype[_is_JsObjectWrapper_default] = true;
    dart.addTypeCaches(JsObjectWrapper);
    dart.setLibraryUri(JsObjectWrapper, I[40]);
    dart.setFieldSignature(JsObjectWrapper, () => ({
      __proto__: dart.getFields(JsObjectWrapper.__proto__),
      jsObject: dart.finalFieldType(T)
    }));
    return JsObjectWrapper;
  });
  js$.JsObjectWrapper = js$.JsObjectWrapper$();
  dart.addTypeTests(js$.JsObjectWrapper, _is_JsObjectWrapper_default);
  firestore.Firestore = class Firestore extends js$.JsObjectWrapper$(dart.packageJSType("firebase_firestore.Firestore", false)) {
    get app() {
      return app$.App.getInstance(this.jsObject.app);
    }
    static getInstance(jsObject) {
      let t59, t58, t57, t56;
      t56 = firestore.Firestore._expando;
      t57 = jsObject;
      t58 = t56._get(t57);
      return t58 == null ? (t59 = new firestore.Firestore._fromJsObject(jsObject), t56._set(t57, t59), t59) : t58;
    }
    static ['_#_fromJsObject#tearOff'](jsObject) {
      return new firestore.Firestore._fromJsObject(jsObject);
    }
    batch() {
      return firestore.WriteBatch.getInstance(dart.global.firebase_firestore.writeBatch(this.jsObject));
    }
    collection(collectionPath) {
      return firestore.CollectionReference.getInstance(dart.global.firebase_firestore.collection(this.jsObject, collectionPath));
    }
    collectionGroup(collectionId) {
      return new (T$.QueryOfQueryJsImpl()).fromJsObject(dart.global.firebase_firestore.collectionGroup(this.jsObject, collectionId));
    }
    doc(documentPath) {
      return firestore.DocumentReference.getInstance(dart.global.firebase_firestore.doc(this.jsObject, documentPath));
    }
    enablePersistence(settings = null) {
      return utils.handleThenable(dart.void, dart.global.firebase_firestore.enableIndexedDbPersistence(this.jsObject, settings));
    }
    snapshotsInSync() {
      let controller = null;
      function controller$35get() {
        let t57;
        t57 = controller;
        return t57 == null ? dart.throw(new _internal.LateError.localNI("controller")) : t57;
      }
      function controller$35set(controller$35param) {
        return controller = controller$35param;
      }
      let onSnapshotsInSyncUnsubscribe = null;
      function onSnapshotsInSyncUnsubscribe$35get() {
        let t60;
        t60 = onSnapshotsInSyncUnsubscribe;
        return t60 == null ? dart.throw(new _internal.LateError.localNI("onSnapshotsInSyncUnsubscribe")) : t60;
      }
      function onSnapshotsInSyncUnsubscribe$35set(onSnapshotsInSyncUnsubscribe$35param) {
        return onSnapshotsInSyncUnsubscribe = onSnapshotsInSyncUnsubscribe$35param;
      }
      let nextWrapper = js.allowInterop(T$.ObjectNToNull(), dart.fn(noValue => {
        controller$35get().add(null);
      }, T$.ObjectNToNull()));
      const startListen = () => {
        onSnapshotsInSyncUnsubscribe$35set(dart.global.firebase_firestore.onSnapshotsInSync(this.jsObject, dart.assertInterop(nextWrapper)));
      };
      dart.fn(startListen, T$.VoidTovoid());
      function stopListen() {
        onSnapshotsInSyncUnsubscribe$35get()();
        controller$35get().close();
      }
      dart.fn(stopListen, T$.VoidTovoid());
      controller$35set(T$.StreamControllerOfvoid().broadcast({onListen: startListen, onCancel: stopListen}));
      return controller$35get().stream;
    }
    clearPersistence() {
      return utils.handleThenable(dart.void, dart.global.firebase_firestore.clearIndexedDbPersistence(this.jsObject));
    }
    runTransaction(updateFunction) {
      let updateFunctionWrap = js.allowInterop(T$.dynamicToPromiseJsImpl(), dart.fn(transaction => utils.handleFutureWithMapper(T$.ObjectN(), dart.dynamic, T$.FutureOfObjectN().as(updateFunction(firestore.Transaction.getInstance(dart.packageJSType("firebase_firestore.Transaction", false).as(transaction)))), C[25] || CT.C25), T$.dynamicToPromiseJsImpl()));
      return utils.handleThenable(dart.void, dart.global.firebase_firestore.runTransaction(this.jsObject, dart.assertInterop(updateFunctionWrap))).then(dart.dynamic, dart.fn(value => utils$.dartify(null), T$.voidTodynamic()));
    }
    useEmulator(host, port) {
      return dart.global.firebase_firestore.connectFirestoreEmulator(this.jsObject, host, port);
    }
    enableNetwork() {
      return utils.handleThenable(dart.dynamic, dart.global.firebase_firestore.enableNetwork(this.jsObject));
    }
    disableNetwork() {
      return utils.handleThenable(dart.dynamic, dart.global.firebase_firestore.disableNetwork(this.jsObject));
    }
    terminate() {
      return utils.handleThenable(dart.void, dart.global.firebase_firestore.terminate(this.jsObject));
    }
    waitForPendingWrites() {
      return utils.handleThenable(dart.void, dart.global.firebase_firestore.waitForPendingWrites(this.jsObject));
    }
    loadBundle(bundle) {
      return firestore.LoadBundleTask.getInstance(dart.global.firebase_firestore.loadBundle(this.jsObject, bundle));
    }
    namedQuery(name) {
      return async.async(T$.QueryOfQueryJsImpl(), (function* namedQuery() {
        let query = (yield utils.handleThenable(dart.nullable(dart.packageJSType("firebase_firestore.Query", false)), dart.global.firebase_firestore.namedQuery(this.jsObject, name)));
        if (query == null) {
          dart.throw(new firebase_core_platform_interface.FirebaseException.new({plugin: "cloud_firestore", message: "Named query has not been found. Please check it has been loaded properly via loadBundle().", code: "non-existent-named-query"}));
        }
        return new (T$.QueryOfQueryJsImpl()).fromJsObject(query);
      }).bind(this));
    }
    refEqual(left, right) {
      return dart.global.firebase_firestore.refEqual(left, right);
    }
  };
  (firestore.Firestore._fromJsObject = function(jsObject) {
    firestore.Firestore.__proto__.fromJsObject.call(this, jsObject);
    ;
  }).prototype = firestore.Firestore.prototype;
  dart.addTypeTests(firestore.Firestore);
  dart.addTypeCaches(firestore.Firestore);
  dart.setMethodSignature(firestore.Firestore, () => ({
    __proto__: dart.getMethods(firestore.Firestore.__proto__),
    batch: dart.fnType(dart.nullable(firestore.WriteBatch), []),
    collection: dart.fnType(firestore.CollectionReference$(dart.packageJSType("firebase_firestore.CollectionReference", false)), [core.String]),
    collectionGroup: dart.fnType(firestore.Query$(dart.packageJSType("firebase_firestore.Query", false)), [core.String]),
    doc: dart.fnType(firestore.DocumentReference, [core.String]),
    enablePersistence: dart.fnType(async.Future$(dart.void), [], [dart.nullable(dart.packageJSType("PersistenceSettings", false))]),
    snapshotsInSync: dart.fnType(async.Stream$(dart.void), []),
    clearPersistence: dart.fnType(async.Future$(dart.void), []),
    runTransaction: dart.fnType(async.Future, [dart.fnType(dart.dynamic, [dart.nullable(firestore.Transaction)])]),
    useEmulator: dart.fnType(dart.void, [core.String, core.int]),
    enableNetwork: dart.fnType(async.Future, []),
    disableNetwork: dart.fnType(async.Future, []),
    terminate: dart.fnType(async.Future$(dart.void), []),
    waitForPendingWrites: dart.fnType(async.Future$(dart.void), []),
    loadBundle: dart.fnType(firestore.LoadBundleTask, [typed_data.Uint8List]),
    namedQuery: dart.fnType(async.Future$(firestore.Query$(dart.packageJSType("firebase_firestore.Query", false))), [core.String]),
    refEqual: dart.fnType(core.bool, [dart.dynamic, dart.dynamic])
  }));
  dart.setStaticMethodSignature(firestore.Firestore, () => ['getInstance']);
  dart.setGetterSignature(firestore.Firestore, () => ({
    __proto__: dart.getGetters(firestore.Firestore.__proto__),
    app: app$.App
  }));
  dart.setLibraryUri(firestore.Firestore, I[41]);
  dart.setStaticFieldSignature(firestore.Firestore, () => ['_expando']);
  dart.defineLazy(firestore.Firestore, {
    /*firestore.Firestore._expando*/get _expando() {
      return new (T$.ExpandoOfFirestore()).new();
    }
  }, false);
  firestore.LoadBundleTask = class LoadBundleTask extends js$.JsObjectWrapper$(dart.packageJSType("firebase_firestore.LoadBundleTask", false)) {
    static ['_#_fromJsObject#tearOff'](jsObject) {
      return new firestore.LoadBundleTask._fromJsObject(jsObject);
    }
    static getInstance(jsObject) {
      let t65, t64, t63, t62;
      t62 = firestore.LoadBundleTask._expando;
      t63 = jsObject;
      t64 = t62._get(t63);
      return t64 == null ? (t65 = new firestore.LoadBundleTask._fromJsObject(jsObject), t62._set(t63, t65), t65) : t64;
    }
    get stream() {
      let controller = null;
      function controller$35get() {
        let t63;
        t63 = controller;
        return t63 == null ? dart.throw(new _internal.LateError.localNI("controller")) : t63;
      }
      function controller$35set(controller$35param) {
        return controller = controller$35param;
      }
      controller$35set(T$.StreamControllerOfLoadBundleTaskProgress().new({onListen: dart.fn(() => {
          this.jsObject.onProgress(js.allowInterop(T$.LoadBundleTaskProgressJsImplTovoid(), dart.fn(data => {
            let taskProgress = new firestore.LoadBundleTaskProgress._fromJsObject(data);
            if (load_bundle_task_state.LoadBundleTaskState.error !== taskProgress.taskState) {
              controller$35get().add(taskProgress);
            }
          }, T$.LoadBundleTaskProgressJsImplTovoid())));
          this.jsObject.then(js.allowInterop(T$.dynamicTodynamic(), dart.fn(value => {
            controller$35get().close();
          }, T$.dynamicToNull())), js.allowInterop(T$.FirestoreErrorTodynamic(), dart.fn(error => {
            controller$35get().addError(new firebase_core_platform_interface.FirebaseException.new({plugin: "cloud_firestore", message: error.message, code: "load-bundle-error", stackTrace: new core._StringStackTrace.new(error.stack)}));
            controller$35get().close();
          }, T$.FirestoreErrorToNull())));
        }, T$.VoidTovoid()), onCancel: dart.fn(() => {
          controller$35get().close();
        }, T$.VoidToNull())}));
      return controller$35get().stream;
    }
  };
  (firestore.LoadBundleTask._fromJsObject = function(jsObject) {
    firestore.LoadBundleTask.__proto__.fromJsObject.call(this, jsObject);
    ;
  }).prototype = firestore.LoadBundleTask.prototype;
  dart.addTypeTests(firestore.LoadBundleTask);
  dart.addTypeCaches(firestore.LoadBundleTask);
  dart.setStaticMethodSignature(firestore.LoadBundleTask, () => ['getInstance']);
  dart.setGetterSignature(firestore.LoadBundleTask, () => ({
    __proto__: dart.getGetters(firestore.LoadBundleTask.__proto__),
    stream: async.Stream$(firestore.LoadBundleTaskProgress)
  }));
  dart.setLibraryUri(firestore.LoadBundleTask, I[41]);
  dart.setStaticFieldSignature(firestore.LoadBundleTask, () => ['_expando']);
  dart.defineLazy(firestore.LoadBundleTask, {
    /*firestore.LoadBundleTask._expando*/get _expando() {
      return new (T$.ExpandoOfLoadBundleTask()).new();
    }
  }, false);
  firestore.LoadBundleTaskProgress = class LoadBundleTaskProgress extends js$.JsObjectWrapper$(dart.packageJSType("LoadBundleTaskProgressJsImpl", false)) {
    get taskState() {
      return this[S$.taskState];
    }
    set taskState(value) {
      super.taskState = value;
    }
    get bytesLoaded() {
      return this[S$.bytesLoaded];
    }
    set bytesLoaded(value) {
      super.bytesLoaded = value;
    }
    get documentsLoaded() {
      return this[S$.documentsLoaded];
    }
    set documentsLoaded(value) {
      super.documentsLoaded = value;
    }
    get totalBytes() {
      return this[S$.totalBytes];
    }
    set totalBytes(value) {
      super.totalBytes = value;
    }
    get totalDocuments() {
      return this[S$.totalDocuments];
    }
    set totalDocuments(value) {
      super.totalDocuments = value;
    }
    static ['_#_fromJsObject#tearOff'](jsObject) {
      return new firestore.LoadBundleTaskProgress._fromJsObject(jsObject);
    }
    static getInstance(jsObject) {
      let t68, t67, t66, t65;
      t65 = firestore.LoadBundleTaskProgress._expando;
      t66 = jsObject;
      t67 = t65._get(t66);
      return t67 == null ? (t68 = new firestore.LoadBundleTaskProgress._fromJsObject(jsObject), t65._set(t66, t68), t68) : t67;
    }
  };
  (firestore.LoadBundleTaskProgress._fromJsObject = function(jsObject) {
    this[S$.taskState] = load_bundle_task_state$.convertToTaskState(jsObject.taskState[S$.$toLowerCase]());
    this[S$.bytesLoaded] = core.int.parse(jsObject.bytesLoaded);
    this[S$.documentsLoaded] = jsObject.documentsLoaded;
    this[S$.totalBytes] = core.int.parse(jsObject.totalBytes);
    this[S$.totalDocuments] = jsObject.totalDocuments;
    firestore.LoadBundleTaskProgress.__proto__.fromJsObject.call(this, jsObject);
    ;
  }).prototype = firestore.LoadBundleTaskProgress.prototype;
  dart.addTypeTests(firestore.LoadBundleTaskProgress);
  dart.addTypeCaches(firestore.LoadBundleTaskProgress);
  dart.setStaticMethodSignature(firestore.LoadBundleTaskProgress, () => ['getInstance']);
  dart.setLibraryUri(firestore.LoadBundleTaskProgress, I[41]);
  dart.setFieldSignature(firestore.LoadBundleTaskProgress, () => ({
    __proto__: dart.getFields(firestore.LoadBundleTaskProgress.__proto__),
    taskState: dart.finalFieldType(load_bundle_task_state.LoadBundleTaskState),
    bytesLoaded: dart.finalFieldType(core.int),
    documentsLoaded: dart.finalFieldType(core.int),
    totalBytes: dart.finalFieldType(core.int),
    totalDocuments: dart.finalFieldType(core.int)
  }));
  dart.setStaticFieldSignature(firestore.LoadBundleTaskProgress, () => ['_expando']);
  dart.defineLazy(firestore.LoadBundleTaskProgress, {
    /*firestore.LoadBundleTaskProgress._expando*/get _expando() {
      return new (T$.ExpandoOfLoadBundleTaskProgress()).new();
    }
  }, false);
  firestore._Updatable = class _Updatable extends core.Object {
    [S$._wrapUpdateFunctionCall](T, jsObject, data, documentRef = null) {
      let args = [utils$.jsify(data)];
      if (documentRef != null) {
        args[S$.$insert](0, documentRef.jsObject);
      }
      return dart.nullable(T).as(utils.callMethod(core.Object.as(jsObject), "update", args));
    }
  };
  (firestore._Updatable.new = function() {
    ;
  }).prototype = firestore._Updatable.prototype;
  dart.addTypeTests(firestore._Updatable);
  dart.addTypeCaches(firestore._Updatable);
  dart.setMethodSignature(firestore._Updatable, () => ({
    __proto__: dart.getMethods(firestore._Updatable.__proto__),
    [S$._wrapUpdateFunctionCall]: dart.gFnType(T => [dart.nullable(T), [dart.dynamic, core.Map$(core.String, dart.dynamic)], [dart.nullable(firestore.DocumentReference)]], T => [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(firestore._Updatable, I[41]);
  const JsObjectWrapper__Updatable$36 = class JsObjectWrapper__Updatable extends js$.JsObjectWrapper$(dart.packageJSType("firebase_firestore.WriteBatch", false)) {};
  (JsObjectWrapper__Updatable$36.fromJsObject = function(jsObject) {
    JsObjectWrapper__Updatable$36.__proto__.fromJsObject.call(this, jsObject);
  }).prototype = JsObjectWrapper__Updatable$36.prototype;
  dart.applyMixin(JsObjectWrapper__Updatable$36, firestore._Updatable);
  firestore.WriteBatch = class WriteBatch extends JsObjectWrapper__Updatable$36 {
    static getInstance(jsObject) {
      let t68, t67, t66, t65;
      t65 = firestore.WriteBatch._expando;
      t66 = jsObject;
      t67 = t65._get(t66);
      return t67 == null ? (t68 = new firestore.WriteBatch._fromJsObject(jsObject), t65._set(t66, t68), t68) : t67;
    }
    static ['_#_fromJsObject#tearOff'](jsObject) {
      return new firestore.WriteBatch._fromJsObject(jsObject);
    }
    commit() {
      return utils.handleThenable(dart.void, this.jsObject.commit());
    }
    delete(documentRef) {
      return firestore.WriteBatch.getInstance(this.jsObject.delete(documentRef.jsObject));
    }
    set(documentRef, data, options = null) {
      let jsObjectSet = options != null ? this.jsObject.set(documentRef.jsObject, utils$.jsify(data), options) : this.jsObject.set(documentRef.jsObject, utils$.jsify(data));
      return firestore.WriteBatch.getInstance(jsObjectSet);
    }
    update(documentRef, data) {
      return firestore.WriteBatch.getInstance(dart.packageJSType("firebase_firestore.WriteBatch", false).as(this[S$._wrapUpdateFunctionCall](dart.dynamic, this.jsObject, data, documentRef)));
    }
  };
  (firestore.WriteBatch._fromJsObject = function(jsObject) {
    firestore.WriteBatch.__proto__.fromJsObject.call(this, jsObject);
    ;
  }).prototype = firestore.WriteBatch.prototype;
  dart.addTypeTests(firestore.WriteBatch);
  dart.addTypeCaches(firestore.WriteBatch);
  dart.setMethodSignature(firestore.WriteBatch, () => ({
    __proto__: dart.getMethods(firestore.WriteBatch.__proto__),
    commit: dart.fnType(async.Future$(dart.void), []),
    delete: dart.fnType(firestore.WriteBatch, [firestore.DocumentReference]),
    set: dart.fnType(firestore.WriteBatch, [firestore.DocumentReference, core.Map$(core.String, dart.dynamic)], [dart.nullable(dart.packageJSType("SetOptions", false))]),
    update: dart.fnType(firestore.WriteBatch, [firestore.DocumentReference, core.Map$(core.String, dart.dynamic)])
  }));
  dart.setStaticMethodSignature(firestore.WriteBatch, () => ['getInstance']);
  dart.setLibraryUri(firestore.WriteBatch, I[41]);
  dart.setStaticFieldSignature(firestore.WriteBatch, () => ['_expando']);
  dart.defineLazy(firestore.WriteBatch, {
    /*firestore.WriteBatch._expando*/get _expando() {
      return new (T$.ExpandoOfWriteBatch()).new();
    }
  }, false);
  const JsObjectWrapper__Updatable$36$ = class JsObjectWrapper__Updatable extends js$.JsObjectWrapper$(dart.packageJSType("firebase_firestore.DocumentReference", false)) {};
  (JsObjectWrapper__Updatable$36$.fromJsObject = function(jsObject) {
    JsObjectWrapper__Updatable$36$.__proto__.fromJsObject.call(this, jsObject);
  }).prototype = JsObjectWrapper__Updatable$36$.prototype;
  dart.applyMixin(JsObjectWrapper__Updatable$36$, firestore._Updatable);
  firestore.DocumentReference = class DocumentReference extends JsObjectWrapper__Updatable$36$ {
    get firestore() {
      return firestore.Firestore.getInstance(this.jsObject.firestore);
    }
    get id() {
      return this.jsObject.id;
    }
    get parent() {
      return firestore.CollectionReference.getInstance(this.jsObject.parent);
    }
    get path() {
      return this.jsObject.path;
    }
    static getInstance(jsObject) {
      let t68, t67, t66, t65;
      t65 = firestore.DocumentReference._expando;
      t66 = jsObject;
      t67 = t65._get(t66);
      return t67 == null ? (t68 = new firestore.DocumentReference._fromJsObject(jsObject), t65._set(t66, t68), t68) : t67;
    }
    static ['_#_fromJsObject#tearOff'](jsObject) {
      return new firestore.DocumentReference._fromJsObject(jsObject);
    }
    collection(collectionPath) {
      return firestore.CollectionReference.getInstance(dart.global.firebase_firestore.collection(this.firestore.jsObject, this.path + "/" + collectionPath));
    }
    delete() {
      return utils.handleThenable(dart.void, dart.global.firebase_firestore.deleteDoc(this.jsObject));
    }
    get(options = null) {
      if (options == null || options.source === "default") {
        return utils.handleThenable(dart.packageJSType("firebase_firestore.DocumentSnapshot", false), dart.global.firebase_firestore.getDoc(this.jsObject)).then(firestore.DocumentSnapshot, C[26] || CT.C26);
      } else if (options.source === "server") {
        return utils.handleThenable(dart.packageJSType("firebase_firestore.DocumentSnapshot", false), dart.global.firebase_firestore.getDocFromServer(this.jsObject)).then(firestore.DocumentSnapshot, C[26] || CT.C26);
      } else {
        return utils.handleThenable(dart.packageJSType("firebase_firestore.DocumentSnapshot", false), dart.global.firebase_firestore.getDocFromCache(this.jsObject)).then(firestore.DocumentSnapshot, C[26] || CT.C26);
      }
    }
    get onSnapshot() {
      return this[S$._createSnapshotStream]().stream;
    }
    get onMetadataChangesSnapshot() {
      return this[S$._createSnapshotStream]({includeMetadataChanges: true}).stream;
    }
    [S$._createSnapshotStream](options = null) {
      let onSnapshotUnsubscribe = null;
      function onSnapshotUnsubscribe$35get() {
        let t66;
        t66 = onSnapshotUnsubscribe;
        return t66 == null ? dart.throw(new _internal.LateError.localNI("onSnapshotUnsubscribe")) : t66;
      }
      function onSnapshotUnsubscribe$35set(onSnapshotUnsubscribe$35param) {
        return onSnapshotUnsubscribe = onSnapshotUnsubscribe$35param;
      }
      let controller = null;
      function controller$35get() {
        let t69;
        t69 = controller;
        return t69 == null ? dart.throw(new _internal.LateError.localNI("controller")) : t69;
      }
      function controller$35set(controller$35param) {
        return controller = controller$35param;
      }
      let nextWrapper = js.allowInterop(T$.DocumentSnapshotJsImplToNull(), dart.fn(snapshot => {
        controller$35get().add(firestore.DocumentSnapshot.getInstance(snapshot));
      }, T$.DocumentSnapshotJsImplToNull()));
      let errorWrapper = js.allowInterop(T$.dynamicTovoid(), dart.fn(e => controller$35get().addError(core.Object.as(e)), T$.dynamicTovoid()));
      const startListen = () => {
        onSnapshotUnsubscribe$35set(options != null ? dart.global.firebase_firestore.onSnapshot(this.jsObject, options, dart.assertInterop(nextWrapper), dart.assertInterop(errorWrapper)) : dart.global.firebase_firestore.onSnapshot(this.jsObject, dart.assertInterop(nextWrapper), dart.assertInterop(errorWrapper)));
      };
      dart.fn(startListen, T$.VoidTovoid());
      function stopListen() {
        onSnapshotUnsubscribe$35get()();
      }
      dart.fn(stopListen, T$.VoidTovoid());
      return controller$35set(T$.StreamControllerOfDocumentSnapshot().broadcast({onListen: startListen, onCancel: stopListen, sync: true}));
    }
    set(data, options = null) {
      let jsObjectSet = options != null ? dart.global.firebase_firestore.setDoc(this.jsObject, utils$.jsify(data), options) : dart.global.firebase_firestore.setDoc(this.jsObject, utils$.jsify(data));
      return utils.handleThenable(dart.void, jsObjectSet);
    }
    update(data) {
      return utils.handleThenable(dart.void, dart.global.firebase_firestore.updateDoc(this.jsObject, utils$.jsify(data)));
    }
  };
  (firestore.DocumentReference._fromJsObject = function(jsObject) {
    firestore.DocumentReference.__proto__.fromJsObject.call(this, jsObject);
    ;
  }).prototype = firestore.DocumentReference.prototype;
  dart.addTypeTests(firestore.DocumentReference);
  dart.addTypeCaches(firestore.DocumentReference);
  dart.setMethodSignature(firestore.DocumentReference, () => ({
    __proto__: dart.getMethods(firestore.DocumentReference.__proto__),
    collection: dart.fnType(dart.nullable(firestore.CollectionReference$(dart.packageJSType("firebase_firestore.CollectionReference", false))), [core.String]),
    delete: dart.fnType(async.Future$(dart.void), []),
    get: dart.fnType(async.Future$(firestore.DocumentSnapshot), [], [dart.nullable(dart.packageJSType("GetOptions", false))]),
    [S$._createSnapshotStream]: dart.fnType(async.StreamController$(firestore.DocumentSnapshot), [], [dart.nullable(dart.packageJSType("DocumentListenOptions", false))]),
    set: dart.fnType(async.Future$(dart.void), [core.Map$(core.String, dart.dynamic)], [dart.nullable(dart.packageJSType("SetOptions", false))]),
    update: dart.fnType(async.Future$(dart.void), [core.Map$(core.String, dart.dynamic)])
  }));
  dart.setStaticMethodSignature(firestore.DocumentReference, () => ['getInstance']);
  dart.setGetterSignature(firestore.DocumentReference, () => ({
    __proto__: dart.getGetters(firestore.DocumentReference.__proto__),
    firestore: firestore.Firestore,
    id: core.String,
    parent: dart.nullable(firestore.CollectionReference$(dart.packageJSType("firebase_firestore.CollectionReference", false))),
    path: core.String,
    onSnapshot: async.Stream$(firestore.DocumentSnapshot),
    onMetadataChangesSnapshot: async.Stream$(firestore.DocumentSnapshot)
  }));
  dart.setLibraryUri(firestore.DocumentReference, I[41]);
  dart.setStaticFieldSignature(firestore.DocumentReference, () => ['_expando']);
  dart.defineLazy(firestore.DocumentReference, {
    /*firestore.DocumentReference._expando*/get _expando() {
      return new (T$.ExpandoOfDocumentReference()).new();
    }
  }, false);
  const _is_Query_default = Symbol('_is_Query_default');
  firestore.Query$ = dart.generic(T => {
    class Query extends js$.JsObjectWrapper$(T) {
      get firestore() {
        return firestore.Firestore.getInstance(this.jsObject.firestore);
      }
      static ['_#fromJsObject#tearOff'](T, jsObject) {
        return new (firestore.Query$(T)).fromJsObject(jsObject);
      }
      endAt(opts) {
        let snapshot = opts && 'snapshot' in opts ? opts.snapshot : null;
        let fieldValues = opts && 'fieldValues' in opts ? opts.fieldValues : null;
        return new (T$.QueryOfQueryJsImpl()).fromJsObject(dart.global.firebase_firestore.query(this.jsObject, dart.packageJSType("firebase_firestore.QueryConstraint", false).as(this[S$._createQueryConstraint](dart.dynamic, dart.tearoffInterop(dart.global.firebase_firestore.endAt), snapshot, fieldValues))));
      }
      endBefore(opts) {
        let snapshot = opts && 'snapshot' in opts ? opts.snapshot : null;
        let fieldValues = opts && 'fieldValues' in opts ? opts.fieldValues : null;
        return new (T$.QueryOfQueryJsImpl()).fromJsObject(dart.global.firebase_firestore.query(this.jsObject, dart.packageJSType("firebase_firestore.QueryConstraint", false).as(this[S$._createQueryConstraint](dart.dynamic, dart.tearoffInterop(dart.global.firebase_firestore.endBefore), snapshot, fieldValues))));
      }
      get(options = null) {
        if (options == null || options.source === "default") {
          return utils.handleThenable(dart.packageJSType("firebase_firestore.QuerySnapshot", false), dart.global.firebase_firestore.getDocs(this.jsObject)).then(firestore.QuerySnapshot, C[27] || CT.C27);
        } else if (options.source === "server") {
          return utils.handleThenable(dart.packageJSType("firebase_firestore.QuerySnapshot", false), dart.global.firebase_firestore.getDocsFromServer(this.jsObject)).then(firestore.QuerySnapshot, C[27] || CT.C27);
        } else {
          return utils.handleThenable(dart.packageJSType("firebase_firestore.QuerySnapshot", false), dart.global.firebase_firestore.getDocsFromCache(this.jsObject)).then(firestore.QuerySnapshot, C[27] || CT.C27);
        }
      }
      limit(limit) {
        return new (T$.QueryOfQueryJsImpl()).fromJsObject(dart.global.firebase_firestore.query(this.jsObject, dart.global.firebase_firestore.limit(limit)));
      }
      limitToLast(limit) {
        return new (T$.QueryOfQueryJsImpl()).fromJsObject(dart.global.firebase_firestore.query(this.jsObject, dart.global.firebase_firestore.limitToLast(limit)));
      }
      get onSnapshot() {
        let t72, t71;
        t71 = this[S$.__Query_onSnapshot];
        return t71 == null ? (t72 = this[S$._createSnapshotStream](false).stream, this[S$.__Query_onSnapshot] == null ? this[S$.__Query_onSnapshot] = t72 : dart.throw(new _internal.LateError.fieldADI("onSnapshot"))) : t71;
      }
      get onSnapshotMetadata() {
        let t72, t71;
        t71 = this[S$.__Query_onSnapshotMetadata];
        return t71 == null ? (t72 = this[S$._createSnapshotStream](true).stream, this[S$.__Query_onSnapshotMetadata] == null ? this[S$.__Query_onSnapshotMetadata] = t72 : dart.throw(new _internal.LateError.fieldADI("onSnapshotMetadata"))) : t71;
      }
      [S$._createSnapshotStream](includeMetadataChanges) {
        let onSnapshotUnsubscribe = null;
        function onSnapshotUnsubscribe$35get() {
          let t72;
          t72 = onSnapshotUnsubscribe;
          return t72 == null ? dart.throw(new _internal.LateError.localNI("onSnapshotUnsubscribe")) : t72;
        }
        function onSnapshotUnsubscribe$35set(onSnapshotUnsubscribe$35param) {
          return onSnapshotUnsubscribe = onSnapshotUnsubscribe$35param;
        }
        let controller = null;
        function controller$35get() {
          let t75;
          t75 = controller;
          return t75 == null ? dart.throw(new _internal.LateError.localNI("controller")) : t75;
        }
        function controller$35set(controller$35param) {
          return controller = controller$35param;
        }
        let nextWrapper = js.allowInterop(T$.QuerySnapshotJsImplToNull(), dart.fn(snapshot => {
          controller$35get().add(new firestore.QuerySnapshot._fromJsObject(snapshot));
        }, T$.QuerySnapshotJsImplToNull()));
        let errorWrapper = js.allowInterop(T$.dynamicTovoid(), dart.fn(e => controller$35get().addError(core.Object.as(e)), T$.dynamicTovoid()));
        let options = {includeMetadataChanges: includeMetadataChanges};
        const startListen = () => {
          onSnapshotUnsubscribe$35set(dart.global.firebase_firestore.onSnapshot(this.jsObject, options, dart.assertInterop(nextWrapper), dart.assertInterop(errorWrapper)));
        };
        dart.fn(startListen, T$.VoidTovoid());
        function stopListen() {
          onSnapshotUnsubscribe$35get()();
        }
        dart.fn(stopListen, T$.VoidTovoid());
        return controller$35set(T$.StreamControllerOfQuerySnapshot().broadcast({onListen: startListen, onCancel: stopListen, sync: true}));
      }
      orderBy(fieldPath, directionStr = null) {
        let jsObjectOrderBy = directionStr != null ? dart.global.firebase_firestore.orderBy(fieldPath, directionStr) : dart.global.firebase_firestore.orderBy(fieldPath);
        return new (T$.QueryOfQueryJsImpl()).fromJsObject(dart.global.firebase_firestore.query(this.jsObject, jsObjectOrderBy));
      }
      startAfter(opts) {
        let snapshot = opts && 'snapshot' in opts ? opts.snapshot : null;
        let fieldValues = opts && 'fieldValues' in opts ? opts.fieldValues : null;
        return new (T$.QueryOfQueryJsImpl()).fromJsObject(dart.global.firebase_firestore.query(this.jsObject, dart.packageJSType("firebase_firestore.QueryConstraint", false).as(this[S$._createQueryConstraint](dart.dynamic, dart.tearoffInterop(dart.global.firebase_firestore.startAfter), snapshot, fieldValues))));
      }
      startAt(opts) {
        let snapshot = opts && 'snapshot' in opts ? opts.snapshot : null;
        let fieldValues = opts && 'fieldValues' in opts ? opts.fieldValues : null;
        return new (T$.QueryOfQueryJsImpl()).fromJsObject(dart.global.firebase_firestore.query(this.jsObject, dart.packageJSType("firebase_firestore.QueryConstraint", false).as(this[S$._createQueryConstraint](dart.dynamic, dart.tearoffInterop(dart.global.firebase_firestore.startAt), snapshot, fieldValues))));
      }
      where(fieldPath, opStr, value) {
        return new (T$.QueryOfQueryJsImpl()).fromJsObject(dart.global.firebase_firestore.query(this.jsObject, dart.global.firebase_firestore.where(fieldPath, opStr, utils$.jsify(value))));
      }
      [S$._createQueryConstraint](S, method, snapshot, fieldValues) {
        if (snapshot == null && fieldValues == null) {
          dart.throw(new core.ArgumentError.new("Please provide either snapshot or fieldValues parameter."));
        }
        let args = snapshot != null ? T$.JSArrayOfDocumentSnapshotJsImpl().of([snapshot.jsObject]) : dart.nullCheck(fieldValues)[S$.$map](dart.dynamic, C[25] || CT.C25)[S$.$toList]();
        return dart.nullable(S).as(utils.callMethod(method, "apply", core.List.as(utils$.jsify(T$.JSArrayOfListN().of([null, args])))));
      }
    }
    (Query.fromJsObject = function(jsObject) {
      this[S$.__Query_onSnapshot] = null;
      this[S$.__Query_onSnapshotMetadata] = null;
      Query.__proto__.fromJsObject.call(this, jsObject);
      ;
    }).prototype = Query.prototype;
    dart.addTypeTests(Query);
    Query.prototype[_is_Query_default] = true;
    dart.addTypeCaches(Query);
    dart.setMethodSignature(Query, () => ({
      __proto__: dart.getMethods(Query.__proto__),
      endAt: dart.fnType(firestore.Query$(dart.packageJSType("firebase_firestore.Query", false)), [], {fieldValues: dart.nullable(core.List), snapshot: dart.nullable(firestore.DocumentSnapshot)}, {}),
      endBefore: dart.fnType(firestore.Query$(dart.packageJSType("firebase_firestore.Query", false)), [], {fieldValues: dart.nullable(core.List), snapshot: dart.nullable(firestore.DocumentSnapshot)}, {}),
      get: dart.fnType(async.Future$(firestore.QuerySnapshot), [], [dart.nullable(dart.packageJSType("GetOptions", false))]),
      limit: dart.fnType(firestore.Query$(dart.packageJSType("firebase_firestore.Query", false)), [core.num]),
      limitToLast: dart.fnType(firestore.Query$(dart.packageJSType("firebase_firestore.Query", false)), [core.num]),
      [S$._createSnapshotStream]: dart.fnType(async.StreamController$(firestore.QuerySnapshot), [core.bool]),
      orderBy: dart.fnType(firestore.Query$(dart.packageJSType("firebase_firestore.Query", false)), [dart.dynamic], [dart.nullable(core.String)]),
      startAfter: dart.fnType(firestore.Query$(dart.packageJSType("firebase_firestore.Query", false)), [], {fieldValues: dart.nullable(core.List), snapshot: dart.nullable(firestore.DocumentSnapshot)}, {}),
      startAt: dart.fnType(firestore.Query$(dart.packageJSType("firebase_firestore.Query", false)), [], {fieldValues: dart.nullable(core.List), snapshot: dart.nullable(firestore.DocumentSnapshot)}, {}),
      where: dart.fnType(firestore.Query$(dart.packageJSType("firebase_firestore.Query", false)), [dart.dynamic, core.String, dart.dynamic]),
      [S$._createQueryConstraint]: dart.gFnType(S => [dart.nullable(S), [core.Function, dart.nullable(firestore.DocumentSnapshot), dart.nullable(core.List)]], S => [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(Query, () => ({
      __proto__: dart.getGetters(Query.__proto__),
      firestore: firestore.Firestore,
      onSnapshot: async.Stream$(firestore.QuerySnapshot),
      onSnapshotMetadata: async.Stream$(firestore.QuerySnapshot)
    }));
    dart.setLibraryUri(Query, I[41]);
    dart.setFieldSignature(Query, () => ({
      __proto__: dart.getFields(Query.__proto__),
      [S$.__Query_onSnapshot]: dart.fieldType(dart.nullable(async.Stream$(firestore.QuerySnapshot))),
      [S$.__Query_onSnapshotMetadata]: dart.fieldType(dart.nullable(async.Stream$(firestore.QuerySnapshot)))
    }));
    return Query;
  });
  firestore.Query = firestore.Query$();
  dart.addTypeTests(firestore.Query, _is_Query_default);
  const _is_CollectionReference_default = Symbol('_is_CollectionReference_default');
  firestore.CollectionReference$ = dart.generic(T => {
    class CollectionReference extends firestore.Query$(T) {
      get id() {
        return this.jsObject.id;
      }
      get parent() {
        return firestore.DocumentReference.getInstance(this.jsObject.parent);
      }
      get path() {
        return this.jsObject.path;
      }
      static getInstance(jsObject) {
        let t80, t79, t78, t77;
        t77 = firestore.CollectionReference._expando;
        t78 = jsObject;
        t79 = t77._get(t78);
        return t79 == null ? (t80 = new (T$.CollectionReferenceOfCollectionReferenceJsImpl())._fromJsObject(jsObject), t77._set(t78, t80), t80) : t79;
      }
      static new() {
        return new (firestore.CollectionReference$(T))._fromJsObject(new dart.global.firebase_firestore.CollectionReference());
      }
      static ['_#new#tearOff'](T) {
        return firestore.CollectionReference$(T).new();
      }
      static ['_#_fromJsObject#tearOff'](T, jsObject) {
        return new (firestore.CollectionReference$(T))._fromJsObject(jsObject);
      }
      add(data) {
        return utils.handleThenable(dart.packageJSType("firebase_firestore.DocumentReference", false), dart.global.firebase_firestore.addDoc(this.jsObject, utils$.jsify(data))).then(firestore.DocumentReference, C[28] || CT.C28);
      }
      doc(documentPath = null) {
        let ref = documentPath != null ? dart.global.firebase_firestore.doc(this.jsObject, documentPath) : dart.global.firebase_firestore.doc(this.jsObject);
        return firestore.DocumentReference.getInstance(ref);
      }
      isEqual(other) {
        return dart.global.firebase_firestore.queryEqual(this.jsObject, other.jsObject);
      }
    }
    (CollectionReference._fromJsObject = function(jsObject) {
      CollectionReference.__proto__.fromJsObject.call(this, T.as(jsObject));
      ;
    }).prototype = CollectionReference.prototype;
    dart.addTypeTests(CollectionReference);
    CollectionReference.prototype[_is_CollectionReference_default] = true;
    dart.addTypeCaches(CollectionReference);
    dart.setMethodSignature(CollectionReference, () => ({
      __proto__: dart.getMethods(CollectionReference.__proto__),
      add: dart.fnType(async.Future$(firestore.DocumentReference), [core.Map$(core.String, dart.dynamic)]),
      doc: dart.fnType(firestore.DocumentReference, [], [dart.nullable(core.String)]),
      isEqual: dart.fnType(core.bool, [firestore.CollectionReference$(dart.packageJSType("firebase_firestore.CollectionReference", false))])
    }));
    dart.setStaticMethodSignature(CollectionReference, () => ['getInstance', 'new']);
    dart.setGetterSignature(CollectionReference, () => ({
      __proto__: dart.getGetters(CollectionReference.__proto__),
      id: core.String,
      parent: dart.nullable(firestore.DocumentReference),
      path: core.String
    }));
    dart.setLibraryUri(CollectionReference, I[41]);
    dart.setStaticFieldSignature(CollectionReference, () => ['_expando']);
    return CollectionReference;
  });
  firestore.CollectionReference = firestore.CollectionReference$();
  dart.defineLazy(firestore.CollectionReference, {
    /*firestore.CollectionReference._expando*/get _expando() {
      return new (T$.ExpandoOfCollectionReferenceOfCollectionReferenceJsImpl()).new();
    }
  }, false);
  dart.addTypeTests(firestore.CollectionReference, _is_CollectionReference_default);
  firestore.DocumentChange = class DocumentChange extends js$.JsObjectWrapper$(dart.packageJSType("DocumentChangeJsImpl", false)) {
    get type() {
      return this.jsObject.type;
    }
    get doc() {
      return firestore.DocumentSnapshot.getInstance(this.jsObject.doc);
    }
    get oldIndex() {
      return this.jsObject.oldIndex;
    }
    get newIndex() {
      return this.jsObject.newIndex;
    }
    static getInstance(jsObject) {
      let t80, t79, t78, t77;
      t77 = firestore.DocumentChange._expando;
      t78 = jsObject;
      t79 = t77._get(t78);
      return t79 == null ? (t80 = new firestore.DocumentChange._fromJsObject(jsObject), t77._set(t78, t80), t80) : t79;
    }
    static ['_#_fromJsObject#tearOff'](jsObject) {
      return new firestore.DocumentChange._fromJsObject(jsObject);
    }
  };
  (firestore.DocumentChange._fromJsObject = function(jsObject) {
    firestore.DocumentChange.__proto__.fromJsObject.call(this, jsObject);
    ;
  }).prototype = firestore.DocumentChange.prototype;
  dart.addTypeTests(firestore.DocumentChange);
  dart.addTypeCaches(firestore.DocumentChange);
  dart.setStaticMethodSignature(firestore.DocumentChange, () => ['getInstance']);
  dart.setGetterSignature(firestore.DocumentChange, () => ({
    __proto__: dart.getGetters(firestore.DocumentChange.__proto__),
    type: core.String,
    doc: dart.nullable(firestore.DocumentSnapshot),
    oldIndex: core.num,
    newIndex: core.num
  }));
  dart.setLibraryUri(firestore.DocumentChange, I[41]);
  dart.setStaticFieldSignature(firestore.DocumentChange, () => ['_expando']);
  dart.defineLazy(firestore.DocumentChange, {
    /*firestore.DocumentChange._expando*/get _expando() {
      return new (T$.ExpandoOfDocumentChange()).new();
    }
  }, false);
  firestore.DocumentSnapshot = class DocumentSnapshot extends js$.JsObjectWrapper$(dart.packageJSType("firebase_firestore.DocumentSnapshot", false)) {
    get exists() {
      return this.jsObject.exists();
    }
    get id() {
      return this.jsObject.id;
    }
    get metadata() {
      return this.jsObject.metadata;
    }
    get ref() {
      return firestore.DocumentReference.getInstance(this.jsObject.ref);
    }
    static getInstance(jsObject) {
      let t80, t79, t78, t77;
      t77 = firestore.DocumentSnapshot._expando;
      t78 = jsObject;
      t79 = t77._get(t78);
      return t79 == null ? (t80 = new firestore.DocumentSnapshot._fromJsObject(jsObject), t77._set(t78, t80), t80) : t79;
    }
    static ['_#_fromJsObject#tearOff'](jsObject) {
      return new firestore.DocumentSnapshot._fromJsObject(jsObject);
    }
    data() {
      return T$.MapNOfString$dynamic().as(utils$.dartify(this.jsObject.data()));
    }
    get(fieldPath) {
      return utils$.dartify(this.jsObject.get(fieldPath));
    }
    isEqual(other) {
      return dart.global.firebase_firestore.snapshotEqual(this.jsObject, other.jsObject);
    }
  };
  (firestore.DocumentSnapshot._fromJsObject = function(jsObject) {
    firestore.DocumentSnapshot.__proto__.fromJsObject.call(this, jsObject);
    ;
  }).prototype = firestore.DocumentSnapshot.prototype;
  dart.addTypeTests(firestore.DocumentSnapshot);
  dart.addTypeCaches(firestore.DocumentSnapshot);
  dart.setMethodSignature(firestore.DocumentSnapshot, () => ({
    __proto__: dart.getMethods(firestore.DocumentSnapshot.__proto__),
    data: dart.fnType(dart.nullable(core.Map$(core.String, dart.dynamic)), []),
    get: dart.fnType(dart.dynamic, [dart.dynamic]),
    isEqual: dart.fnType(core.bool, [firestore.DocumentSnapshot])
  }));
  dart.setStaticMethodSignature(firestore.DocumentSnapshot, () => ['getInstance']);
  dart.setGetterSignature(firestore.DocumentSnapshot, () => ({
    __proto__: dart.getGetters(firestore.DocumentSnapshot.__proto__),
    exists: core.bool,
    id: core.String,
    metadata: dart.packageJSType("firebase_firestore.SnapshotMetadata", false),
    ref: dart.nullable(firestore.DocumentReference)
  }));
  dart.setLibraryUri(firestore.DocumentSnapshot, I[41]);
  dart.setStaticFieldSignature(firestore.DocumentSnapshot, () => ['_expando']);
  dart.defineLazy(firestore.DocumentSnapshot, {
    /*firestore.DocumentSnapshot._expando*/get _expando() {
      return new (T$.ExpandoOfDocumentSnapshot()).new();
    }
  }, false);
  firestore.QuerySnapshot = class QuerySnapshot extends js$.JsObjectWrapper$(dart.packageJSType("firebase_firestore.QuerySnapshot", false)) {
    docChanges(options = null) {
      let changes = options != null ? this.jsObject.docChanges(dart.nullable(dart.packageJSType("SnapshotListenOptions", false)).as(utils$.jsify(options))) : this.jsObject.docChanges();
      return changes[S$.$map](firestore.DocumentChange, dart.fn(e => firestore.DocumentChange.getInstance(dart.packageJSType("DocumentChangeJsImpl", false).as(e)), T$.dynamicToDocumentChange()))[S$.$toList]();
    }
    get docs() {
      return this.jsObject.docs[S$.$map](firestore.DocumentSnapshot, dart.fn(e => firestore.DocumentSnapshot.getInstance(dart.packageJSType("firebase_firestore.DocumentSnapshot", false).as(e)), T$.dynamicToDocumentSnapshot()))[S$.$toList]();
    }
    get empty() {
      return this.jsObject.empty;
    }
    get metadata() {
      return this.jsObject.metadata;
    }
    get query() {
      return new (T$.QueryOfQueryJsImpl()).fromJsObject(this.jsObject.query);
    }
    get size() {
      return this.jsObject.size;
    }
    static getInstance(jsObject) {
      let t80, t79, t78, t77;
      t77 = firestore.QuerySnapshot._expando;
      t78 = jsObject;
      t79 = t77._get(t78);
      return t79 == null ? (t80 = new firestore.QuerySnapshot._fromJsObject(jsObject), t77._set(t78, t80), t80) : t79;
    }
    static ['_#_fromJsObject#tearOff'](jsObject) {
      return new firestore.QuerySnapshot._fromJsObject(jsObject);
    }
    forEach(callback) {
      let callbackWrap = js.allowInterop(T$.dynamicTodynamic(), dart.fn(s => callback(firestore.DocumentSnapshot.getInstance(dart.packageJSType("firebase_firestore.DocumentSnapshot", false).as(s))), T$.dynamicTodynamic()));
      return this.jsObject.forEach(dart.assertInterop(callbackWrap));
    }
    isEqual(other) {
      return dart.global.firebase_firestore.snapshotEqual(this.jsObject, other.jsObject);
    }
  };
  (firestore.QuerySnapshot._fromJsObject = function(jsObject) {
    firestore.QuerySnapshot.__proto__.fromJsObject.call(this, jsObject);
    ;
  }).prototype = firestore.QuerySnapshot.prototype;
  dart.addTypeTests(firestore.QuerySnapshot);
  dart.addTypeCaches(firestore.QuerySnapshot);
  dart.setMethodSignature(firestore.QuerySnapshot, () => ({
    __proto__: dart.getMethods(firestore.QuerySnapshot.__proto__),
    docChanges: dart.fnType(core.List$(firestore.DocumentChange), [], [dart.nullable(dart.packageJSType("SnapshotListenOptions", false))]),
    forEach: dart.fnType(dart.void, [dart.fnType(dart.dynamic, [dart.nullable(firestore.DocumentSnapshot)])]),
    isEqual: dart.fnType(core.bool, [firestore.QuerySnapshot])
  }));
  dart.setStaticMethodSignature(firestore.QuerySnapshot, () => ['getInstance']);
  dart.setGetterSignature(firestore.QuerySnapshot, () => ({
    __proto__: dart.getGetters(firestore.QuerySnapshot.__proto__),
    docs: core.List$(dart.nullable(firestore.DocumentSnapshot)),
    empty: core.bool,
    metadata: dart.packageJSType("firebase_firestore.SnapshotMetadata", false),
    query: firestore.Query$(dart.packageJSType("firebase_firestore.Query", false)),
    size: core.num
  }));
  dart.setLibraryUri(firestore.QuerySnapshot, I[41]);
  dart.setStaticFieldSignature(firestore.QuerySnapshot, () => ['_expando']);
  dart.defineLazy(firestore.QuerySnapshot, {
    /*firestore.QuerySnapshot._expando*/get _expando() {
      return new (T$.ExpandoOfQuerySnapshot()).new();
    }
  }, false);
  const JsObjectWrapper__Updatable$36$0 = class JsObjectWrapper__Updatable extends js$.JsObjectWrapper$(dart.packageJSType("firebase_firestore.Transaction", false)) {};
  (JsObjectWrapper__Updatable$36$0.fromJsObject = function(jsObject) {
    JsObjectWrapper__Updatable$36$0.__proto__.fromJsObject.call(this, jsObject);
  }).prototype = JsObjectWrapper__Updatable$36$0.prototype;
  dart.applyMixin(JsObjectWrapper__Updatable$36$0, firestore._Updatable);
  firestore.Transaction = class Transaction extends JsObjectWrapper__Updatable$36$0 {
    static getInstance(jsObject) {
      let t80, t79, t78, t77;
      t77 = firestore.Transaction._expando;
      t78 = jsObject;
      t79 = t77._get(t78);
      return t79 == null ? (t80 = new firestore.Transaction._fromJsObject(jsObject), t77._set(t78, t80), t80) : t79;
    }
    static ['_#_fromJsObject#tearOff'](jsObject) {
      return new firestore.Transaction._fromJsObject(jsObject);
    }
    delete(documentRef) {
      return firestore.Transaction.getInstance(this.jsObject.delete(documentRef.jsObject));
    }
    get(documentRef) {
      return utils.handleThenable(dart.packageJSType("firebase_firestore.DocumentSnapshot", false), this.jsObject.get(documentRef.jsObject)).then(firestore.DocumentSnapshot, C[26] || CT.C26);
    }
    set(documentRef, data, options = null) {
      let jsObjectSet = options != null ? this.jsObject.set(documentRef.jsObject, utils$.jsify(data), options) : this.jsObject.set(documentRef.jsObject, utils$.jsify(data));
      return firestore.Transaction.getInstance(jsObjectSet);
    }
    update(documentRef, data) {
      return firestore.Transaction.getInstance(dart.packageJSType("firebase_firestore.Transaction", false).as(this[S$._wrapUpdateFunctionCall](dart.dynamic, this.jsObject, data, documentRef)));
    }
  };
  (firestore.Transaction._fromJsObject = function(jsObject) {
    firestore.Transaction.__proto__.fromJsObject.call(this, jsObject);
    ;
  }).prototype = firestore.Transaction.prototype;
  dart.addTypeTests(firestore.Transaction);
  dart.addTypeCaches(firestore.Transaction);
  dart.setMethodSignature(firestore.Transaction, () => ({
    __proto__: dart.getMethods(firestore.Transaction.__proto__),
    delete: dart.fnType(firestore.Transaction, [firestore.DocumentReference]),
    get: dart.fnType(async.Future$(firestore.DocumentSnapshot), [firestore.DocumentReference]),
    set: dart.fnType(firestore.Transaction, [firestore.DocumentReference, core.Map$(core.String, dart.dynamic)], [dart.nullable(dart.packageJSType("SetOptions", false))]),
    update: dart.fnType(firestore.Transaction, [firestore.DocumentReference, core.Map$(core.String, dart.dynamic)])
  }));
  dart.setStaticMethodSignature(firestore.Transaction, () => ['getInstance']);
  dart.setLibraryUri(firestore.Transaction, I[41]);
  dart.setStaticFieldSignature(firestore.Transaction, () => ['_expando']);
  dart.defineLazy(firestore.Transaction, {
    /*firestore.Transaction._expando*/get _expando() {
      return new (T$.ExpandoOfTransaction()).new();
    }
  }, false);
  firestore._FieldValueDelete = class _FieldValueDelete extends core.Object {
    [S$._jsify]() {
      return dart.global.firebase_firestore.deleteField();
    }
    toString() {
      return "FieldValue.delete()";
    }
    static ['_#new#tearOff']() {
      return new firestore._FieldValueDelete.new();
    }
  };
  (firestore._FieldValueDelete.new = function() {
    ;
  }).prototype = firestore._FieldValueDelete.prototype;
  dart.addTypeTests(firestore._FieldValueDelete);
  dart.addTypeCaches(firestore._FieldValueDelete);
  firestore._FieldValueDelete[dart.implements] = () => [firestore.FieldValue];
  dart.setMethodSignature(firestore._FieldValueDelete, () => ({
    __proto__: dart.getMethods(firestore._FieldValueDelete.__proto__),
    [S$._jsify]: dart.fnType(dart.packageJSType("FieldValue", false), [])
  }));
  dart.setLibraryUri(firestore._FieldValueDelete, I[41]);
  dart.defineExtensionMethods(firestore._FieldValueDelete, ['toString']);
  firestore._FieldValueServerTimestamp = class _FieldValueServerTimestamp extends core.Object {
    [S$._jsify]() {
      return dart.global.firebase_firestore.serverTimestamp();
    }
    toString() {
      return "FieldValue.serverTimestamp()";
    }
    static ['_#new#tearOff']() {
      return new firestore._FieldValueServerTimestamp.new();
    }
  };
  (firestore._FieldValueServerTimestamp.new = function() {
    ;
  }).prototype = firestore._FieldValueServerTimestamp.prototype;
  dart.addTypeTests(firestore._FieldValueServerTimestamp);
  dart.addTypeCaches(firestore._FieldValueServerTimestamp);
  firestore._FieldValueServerTimestamp[dart.implements] = () => [firestore.FieldValue];
  dart.setMethodSignature(firestore._FieldValueServerTimestamp, () => ({
    __proto__: dart.getMethods(firestore._FieldValueServerTimestamp.__proto__),
    [S$._jsify]: dart.fnType(dart.packageJSType("FieldValue", false), [])
  }));
  dart.setLibraryUri(firestore._FieldValueServerTimestamp, I[41]);
  dart.defineExtensionMethods(firestore._FieldValueServerTimestamp, ['toString']);
  firestore._FieldValueArray = class _FieldValueArray extends core.Object {};
  (firestore._FieldValueArray.new = function(elements) {
    this.elements = elements;
    ;
  }).prototype = firestore._FieldValueArray.prototype;
  dart.addTypeTests(firestore._FieldValueArray);
  dart.addTypeCaches(firestore._FieldValueArray);
  firestore._FieldValueArray[dart.implements] = () => [firestore.FieldValue];
  dart.setLibraryUri(firestore._FieldValueArray, I[41]);
  dart.setFieldSignature(firestore._FieldValueArray, () => ({
    __proto__: dart.getFields(firestore._FieldValueArray.__proto__),
    elements: dart.finalFieldType(dart.nullable(core.List))
  }));
  firestore._FieldValueArrayUnion = class _FieldValueArrayUnion extends firestore._FieldValueArray {
    static ['_#new#tearOff'](elements) {
      return new firestore._FieldValueArrayUnion.new(elements);
    }
    [S$._jsify]() {
      return dart.nullable(dart.packageJSType("FieldValue", false)).as(utils.callMethod(dart.tearoffInterop(dart.global.firebase_firestore.arrayUnion), "apply", core.List.as(utils$.jsify(T$.JSArrayOfListN().of([null, this.elements])))));
    }
    toString() {
      return "FieldValue.arrayUnion(" + dart.str(this.elements) + ")";
    }
  };
  (firestore._FieldValueArrayUnion.new = function(elements) {
    firestore._FieldValueArrayUnion.__proto__.new.call(this, elements);
    ;
  }).prototype = firestore._FieldValueArrayUnion.prototype;
  dart.addTypeTests(firestore._FieldValueArrayUnion);
  dart.addTypeCaches(firestore._FieldValueArrayUnion);
  dart.setMethodSignature(firestore._FieldValueArrayUnion, () => ({
    __proto__: dart.getMethods(firestore._FieldValueArrayUnion.__proto__),
    [S$._jsify]: dart.fnType(dart.nullable(dart.packageJSType("FieldValue", false)), [])
  }));
  dart.setLibraryUri(firestore._FieldValueArrayUnion, I[41]);
  dart.defineExtensionMethods(firestore._FieldValueArrayUnion, ['toString']);
  firestore._FieldValueArrayRemove = class _FieldValueArrayRemove extends firestore._FieldValueArray {
    static ['_#new#tearOff'](elements) {
      return new firestore._FieldValueArrayRemove.new(elements);
    }
    [S$._jsify]() {
      return dart.nullable(dart.packageJSType("FieldValue", false)).as(utils.callMethod(dart.tearoffInterop(dart.global.firebase_firestore.arrayRemove), "apply", core.List.as(utils$.jsify(T$.JSArrayOfListN().of([null, this.elements])))));
    }
    toString() {
      return "FieldValue.arrayRemove(" + dart.str(this.elements) + ")";
    }
  };
  (firestore._FieldValueArrayRemove.new = function(elements) {
    firestore._FieldValueArrayRemove.__proto__.new.call(this, elements);
    ;
  }).prototype = firestore._FieldValueArrayRemove.prototype;
  dart.addTypeTests(firestore._FieldValueArrayRemove);
  dart.addTypeCaches(firestore._FieldValueArrayRemove);
  dart.setMethodSignature(firestore._FieldValueArrayRemove, () => ({
    __proto__: dart.getMethods(firestore._FieldValueArrayRemove.__proto__),
    [S$._jsify]: dart.fnType(dart.nullable(dart.packageJSType("FieldValue", false)), [])
  }));
  dart.setLibraryUri(firestore._FieldValueArrayRemove, I[41]);
  dart.defineExtensionMethods(firestore._FieldValueArrayRemove, ['toString']);
  firestore._FieldValueIncrement = class _FieldValueIncrement extends core.Object {
    static ['_#new#tearOff'](n) {
      return new firestore._FieldValueIncrement.new(n);
    }
    [S$._jsify]() {
      return dart.global.firebase_firestore.increment(this.n);
    }
    toString() {
      return "FieldValue.increment(" + dart.str(this.n) + ")";
    }
  };
  (firestore._FieldValueIncrement.new = function(n) {
    this.n = n;
    ;
  }).prototype = firestore._FieldValueIncrement.prototype;
  dart.addTypeTests(firestore._FieldValueIncrement);
  dart.addTypeCaches(firestore._FieldValueIncrement);
  firestore._FieldValueIncrement[dart.implements] = () => [firestore.FieldValue];
  dart.setMethodSignature(firestore._FieldValueIncrement, () => ({
    __proto__: dart.getMethods(firestore._FieldValueIncrement.__proto__),
    [S$._jsify]: dart.fnType(dart.packageJSType("FieldValue", false), [])
  }));
  dart.setLibraryUri(firestore._FieldValueIncrement, I[41]);
  dart.setFieldSignature(firestore._FieldValueIncrement, () => ({
    __proto__: dart.getFields(firestore._FieldValueIncrement.__proto__),
    n: dart.finalFieldType(core.num)
  }));
  dart.defineExtensionMethods(firestore._FieldValueIncrement, ['toString']);
  firestore.FieldValue = class FieldValue extends core.Object {
    [S$._jsify]() {
      dart.throw(new core.UnimplementedError.new("_jsify() has not been implemented"));
    }
    static serverTimestamp() {
      return firestore.FieldValue._serverTimestamp;
    }
    static delete() {
      return firestore.FieldValue._delete;
    }
    static arrayUnion(elements) {
      return new firestore._FieldValueArrayUnion.new(elements);
    }
    static arrayRemove(elements) {
      return new firestore._FieldValueArrayRemove.new(elements);
    }
    static increment(n) {
      return new firestore._FieldValueIncrement.new(n);
    }
  };
  (firestore.FieldValue.__ = function() {
    ;
  }).prototype = firestore.FieldValue.prototype;
  dart.addTypeTests(firestore.FieldValue);
  dart.addTypeCaches(firestore.FieldValue);
  dart.setMethodSignature(firestore.FieldValue, () => ({
    __proto__: dart.getMethods(firestore.FieldValue.__proto__),
    [S$._jsify]: dart.fnType(dart.nullable(dart.packageJSType("FieldValue", false)), [])
  }));
  dart.setStaticMethodSignature(firestore.FieldValue, () => ['serverTimestamp', 'delete', 'arrayUnion', 'arrayRemove', 'increment']);
  dart.setLibraryUri(firestore.FieldValue, I[41]);
  dart.setStaticFieldSignature(firestore.FieldValue, () => ['_serverTimestamp', '_delete']);
  dart.defineLazy(firestore.FieldValue, {
    /*firestore.FieldValue._serverTimestamp*/get _serverTimestamp() {
      return new firestore._FieldValueServerTimestamp.new();
    },
    /*firestore.FieldValue._delete*/get _delete() {
      return new firestore._FieldValueDelete.new();
    }
  }, false);
  firestore.getFirestoreInstance = function getFirestoreInstance(app = null, settings = null) {
    if (app != null && settings != null) {
      return firestore.Firestore.getInstance(dart.global.firebase_firestore.initializeFirestore(app.jsObject, settings));
    }
    return firestore.Firestore.getInstance(app != null ? dart.global.firebase_firestore.getFirestore(app.jsObject) : dart.global.firebase_firestore.getFirestore());
  };
  firestore.jsifyFieldValue = function jsifyFieldValue(fieldValue) {
    return fieldValue[S$._jsify]();
  };
  web_utils$.getFirebaseAuthException = function getFirebaseAuthException(exception) {
    if (!dart.packageJSType("FirebaseError", false).is(exception)) {
      return new firebase_auth_exception.FirebaseAuthException.new({code: "unknown", message: "An unknown error occurred: " + dart.str(exception)});
    }
    let firebaseError = dart.packageJSType("firebase_auth.Error", false).as(exception);
    let code = firebaseError.code[S$.$replaceFirst]("auth/", "");
    let message = firebaseError.message[S$.$replaceFirst](" (" + firebaseError.code + ").", "")[S$.$replaceFirst]("Firebase: ", "");
    return new firebase_auth_exception.FirebaseAuthException.new({code: code, message: message, email: firebaseError.email, phoneNumber: firebaseError.phoneNumber, tenantId: firebaseError.tenantId});
  };
  web_utils$.convertWebActionCodeInfo = function convertWebActionCodeInfo(webActionCodeInfo) {
    if (webActionCodeInfo == null) {
      return null;
    }
    return new action_code_info.ActionCodeInfo.new({operation: 0, data: new (T$.IdentityMapOfString$dynamic()).from(["email", webActionCodeInfo.data.email, "previousEmail", webActionCodeInfo.data.previousEmail])});
  };
  web_utils$.convertWebAdditionalUserInfo = function convertWebAdditionalUserInfo(webAdditionalUserInfo) {
    if (webAdditionalUserInfo == null) {
      return null;
    }
    return new additional_user_info.AdditionalUserInfo.new({isNewUser: webAdditionalUserInfo.isNewUser, profile: webAdditionalUserInfo.profile, providerId: webAdditionalUserInfo.providerId, username: webAdditionalUserInfo.username});
  };
  web_utils$.convertWebIdTokenResult = function convertWebIdTokenResult(webIdTokenResult) {
    return new id_token_result.IdTokenResult.new(new (T$.IdentityMapOfString$dynamic()).from(["claims", webIdTokenResult.claims, "expirationTimestamp", webIdTokenResult.expirationTime.millisecondsSinceEpoch, "issuedAtTimestamp", webIdTokenResult.issuedAtTime.millisecondsSinceEpoch, "authTimestamp", webIdTokenResult.authTime.millisecondsSinceEpoch, "signInProvider", webIdTokenResult.signInProvider, "signInSecondFactor", null, "token", webIdTokenResult.token]));
  };
  web_utils$.convertPlatformActionCodeSettings = function convertPlatformActionCodeSettings(actionCodeSettings) {
    if (actionCodeSettings == null) {
      return null;
    }
    let actionCodeSettingsMap = actionCodeSettings.asMap();
    let webActionCodeSettings = null;
    if (actionCodeSettings.dynamicLinkDomain != null) {
      webActionCodeSettings = {url: actionCodeSettings.url, handleCodeInApp: actionCodeSettings.handleCodeInApp, dynamicLinkDomain: actionCodeSettings.dynamicLinkDomain};
    } else {
      webActionCodeSettings = {url: actionCodeSettings.url, handleCodeInApp: actionCodeSettings.handleCodeInApp};
    }
    if (actionCodeSettingsMap[S$.$_get]("android") != null) {
      webActionCodeSettings.android = {packageName: T$.StringN().as(dart.dsend(actionCodeSettingsMap[S$.$_get]("android"), '_get', ["packageName"])), minimumVersion: T$.StringN().as(dart.dsend(actionCodeSettingsMap[S$.$_get]("android"), '_get', ["minimumVersion"])), installApp: T$.boolN().as(dart.dsend(actionCodeSettingsMap[S$.$_get]("android"), '_get', ["installApp"]))};
    }
    if (actionCodeSettingsMap[S$.$_get]("iOS") != null) {
      webActionCodeSettings.iOS = {bundleId: T$.StringN().as(dart.dsend(actionCodeSettingsMap[S$.$_get]("iOS"), '_get', ["bundleId"]))};
    }
    return webActionCodeSettings;
  };
  web_utils$.convertPlatformAuthProvider = function convertPlatformAuthProvider(authProvider) {
    if (email_auth.EmailAuthProvider.is(authProvider)) {
      return auth$.EmailAuthProvider.new();
    }
    if (facebook_auth.FacebookAuthProvider.is(authProvider)) {
      let facebookAuthProvider = auth$.FacebookAuthProvider.new();
      authProvider.scopes[S$.$forEach](dart.bind(facebookAuthProvider, 'addScope'));
      facebookAuthProvider.setCustomParameters(authProvider.parameters);
      return facebookAuthProvider;
    }
    if (github_auth.GithubAuthProvider.is(authProvider)) {
      let githubAuthProvider = auth$.GithubAuthProvider.new();
      authProvider.scopes[S$.$forEach](dart.bind(githubAuthProvider, 'addScope'));
      githubAuthProvider.setCustomParameters(authProvider.parameters);
      return githubAuthProvider;
    }
    if (google_auth.GoogleAuthProvider.is(authProvider)) {
      let googleAuthProvider = auth$.GoogleAuthProvider.new();
      authProvider.scopes[S$.$forEach](dart.bind(googleAuthProvider, 'addScope'));
      googleAuthProvider.setCustomParameters(authProvider.parameters);
      return googleAuthProvider;
    }
    if (twitter_auth.TwitterAuthProvider.is(authProvider)) {
      let twitterAuthProvider = auth$.TwitterAuthProvider.new();
      twitterAuthProvider.setCustomParameters(authProvider.parameters);
      return twitterAuthProvider;
    }
    if (phone_auth.PhoneAuthProvider.is(authProvider)) {
      return auth$.PhoneAuthProvider.new();
    }
    if (oauth.OAuthProvider.is(authProvider)) {
      let oAuthProvider = auth$.OAuthProvider.new(authProvider.providerId);
      authProvider.scopes[S$.$forEach](dart.bind(oAuthProvider, 'addScope'));
      oAuthProvider.setCustomParameters(authProvider.parameters);
      return oAuthProvider;
    }
    dart.throw(new core.FallThroughError.new());
  };
  web_utils$.convertWebAuthCredential = function convertWebAuthCredential(authCredential) {
    if (authCredential == null) {
      return null;
    }
    return new auth_credential.AuthCredential.new({providerId: authCredential.providerId, signInMethod: authCredential.signInMethod});
  };
  web_utils$.convertWebOAuthCredential = function convertWebOAuthCredential(oAuthCredential) {
    if (oAuthCredential == null) {
      return null;
    }
    return new oauth.OAuthProvider.new(oAuthCredential.providerId).credential({accessToken: oAuthCredential.accessToken, secret: oAuthCredential.secret, idToken: oAuthCredential.idToken});
  };
  web_utils$.convertPlatformCredential = function convertPlatformCredential(credential) {
    if (email_auth.EmailAuthCredential.is(credential)) {
      if (credential.emailLink != null) {
        return auth$.EmailAuthProvider.credentialWithLink(credential.email, dart.nullCheck(credential.emailLink));
      }
      return auth$.EmailAuthProvider.credential(credential.email, dart.nullCheck(credential.password));
    }
    if (facebook_auth.FacebookAuthCredential.is(credential)) {
      return auth$.FacebookAuthProvider.credential(dart.nullCheck(credential.accessToken));
    }
    if (github_auth.GithubAuthCredential.is(credential)) {
      return auth$.GithubAuthProvider.credential(dart.nullCheck(credential.accessToken));
    }
    if (google_auth.GoogleAuthCredential.is(credential)) {
      return auth$.GoogleAuthProvider.credential(credential.idToken, credential.accessToken);
    }
    if (twitter_auth.TwitterAuthCredential.is(credential)) {
      return auth$.TwitterAuthProvider.credential(dart.nullCheck(credential.accessToken), dart.nullCheck(credential.secret));
    }
    if (phone_auth.PhoneAuthCredential.is(credential)) {
      return auth$.PhoneAuthProvider.credential(dart.nullCheck(credential.verificationId), dart.nullCheck(credential.smsCode));
    }
    if (oauth.OAuthCredential.is(credential)) {
      let credentialOptions = {accessToken: credential.accessToken, rawNonce: credential.rawNonce, idToken: credential.idToken};
      return auth$.OAuthProvider.new(credential.providerId).credential(credentialOptions);
    }
    return null;
  };
  web_utils$.convertRecaptchaVerifierSize = function convertRecaptchaVerifierSize(size) {
    switch (size) {
      case C[29] || CT.C29:
        {
          return "compact";
        }
      case C[30] || CT.C30:
      default:
        {
          return "normal";
        }
    }
  };
  web_utils$.convertRecaptchaVerifierTheme = function convertRecaptchaVerifierTheme(theme) {
    switch (theme) {
      case C[31] || CT.C31:
        {
          return "dark";
        }
      case C[32] || CT.C32:
      default:
        {
          return "light";
        }
    }
  };
  platform_interface_confirmation_result.ConfirmationResultPlatform = class ConfirmationResultPlatform extends plugin_platform_interface.PlatformInterface {
    get verificationId() {
      return this[S$.verificationId];
    }
    set verificationId(value) {
      super.verificationId = value;
    }
    static verifyExtends(instance) {
      plugin_platform_interface.PlatformInterface.verifyToken(instance, platform_interface_confirmation_result.ConfirmationResultPlatform._token);
    }
    confirm(verificationCode) {
      return async.async(platform_interface_user_credential.UserCredentialPlatform, function* confirm() {
        dart.throw(new core.UnimplementedError.new("confirm() is not implemented"));
      });
    }
  };
  (platform_interface_confirmation_result.ConfirmationResultPlatform.new = function(verificationId) {
    this[S$.verificationId] = verificationId;
    platform_interface_confirmation_result.ConfirmationResultPlatform.__proto__.new.call(this, {token: platform_interface_confirmation_result.ConfirmationResultPlatform._token});
    ;
  }).prototype = platform_interface_confirmation_result.ConfirmationResultPlatform.prototype;
  dart.addTypeTests(platform_interface_confirmation_result.ConfirmationResultPlatform);
  dart.addTypeCaches(platform_interface_confirmation_result.ConfirmationResultPlatform);
  dart.setMethodSignature(platform_interface_confirmation_result.ConfirmationResultPlatform, () => ({
    __proto__: dart.getMethods(platform_interface_confirmation_result.ConfirmationResultPlatform.__proto__),
    confirm: dart.fnType(async.Future$(platform_interface_user_credential.UserCredentialPlatform), [core.String])
  }));
  dart.setStaticMethodSignature(platform_interface_confirmation_result.ConfirmationResultPlatform, () => ['verifyExtends']);
  dart.setLibraryUri(platform_interface_confirmation_result.ConfirmationResultPlatform, I[42]);
  dart.setFieldSignature(platform_interface_confirmation_result.ConfirmationResultPlatform, () => ({
    __proto__: dart.getFields(platform_interface_confirmation_result.ConfirmationResultPlatform.__proto__),
    verificationId: dart.finalFieldType(core.String)
  }));
  dart.setStaticFieldSignature(platform_interface_confirmation_result.ConfirmationResultPlatform, () => ['_token']);
  dart.defineLazy(platform_interface_confirmation_result.ConfirmationResultPlatform, {
    /*platform_interface_confirmation_result.ConfirmationResultPlatform._token*/get _token() {
      return new core.Object.new();
    }
  }, false);
  firebase_auth_web_confirmation_result.ConfirmationResultWeb = class ConfirmationResultWeb extends platform_interface_confirmation_result.ConfirmationResultPlatform {
    static ['_#new#tearOff'](_auth, _webConfirmationResult) {
      return new firebase_auth_web_confirmation_result.ConfirmationResultWeb.new(_auth, _webConfirmationResult);
    }
    confirm(verificationCode) {
      return async.async(platform_interface_user_credential.UserCredentialPlatform, (function* confirm() {
        try {
          return new firebase_auth_web_user_credential.UserCredentialWeb.new(this[S$._auth], yield this[S$._webConfirmationResult].confirm(verificationCode));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(web_utils$.getFirebaseAuthException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
  };
  (firebase_auth_web_confirmation_result.ConfirmationResultWeb.new = function(_auth, _webConfirmationResult) {
    this[S$._auth] = _auth;
    this[S$._webConfirmationResult] = _webConfirmationResult;
    firebase_auth_web_confirmation_result.ConfirmationResultWeb.__proto__.new.call(this, _webConfirmationResult.verificationId);
    ;
  }).prototype = firebase_auth_web_confirmation_result.ConfirmationResultWeb.prototype;
  dart.addTypeTests(firebase_auth_web_confirmation_result.ConfirmationResultWeb);
  dart.addTypeCaches(firebase_auth_web_confirmation_result.ConfirmationResultWeb);
  dart.setLibraryUri(firebase_auth_web_confirmation_result.ConfirmationResultWeb, I[43]);
  dart.setFieldSignature(firebase_auth_web_confirmation_result.ConfirmationResultWeb, () => ({
    __proto__: dart.getFields(firebase_auth_web_confirmation_result.ConfirmationResultWeb.__proto__),
    [S$._auth]: dart.finalFieldType(platform_interface_firebase_auth.FirebaseAuthPlatform),
    [S$._webConfirmationResult]: dart.finalFieldType(auth$.ConfirmationResult)
  }));
  platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform = class RecaptchaVerifierFactoryPlatform extends plugin_platform_interface.PlatformInterface {
    static get instance() {
      if (platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform._instance == null) {
        dart.throw(new core.UnimplementedError.new("RecaptchaVerifier is not implemented"));
      }
      return dart.nullCheck(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform._instance);
    }
    static set instance(instance) {
      plugin_platform_interface.PlatformInterface.verifyToken(instance, platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform._token);
      platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform._instance = instance;
    }
    static verifyExtends(instance) {
      plugin_platform_interface.PlatformInterface.verifyToken(instance, platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform._token);
    }
    get delegate() {
      dart.throw(new core.UnimplementedError.new("delegate is not implemented"));
    }
    delegateFor(opts) {
      let container = opts && 'container' in opts ? opts.container : null;
      let size = opts && 'size' in opts ? opts.size : C[30] || CT.C30;
      let theme = opts && 'theme' in opts ? opts.theme : C[32] || CT.C32;
      let onSuccess = opts && 'onSuccess' in opts ? opts.onSuccess : null;
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let onExpired = opts && 'onExpired' in opts ? opts.onExpired : null;
      dart.throw(new core.UnimplementedError.new("delegateFor() is not implemented"));
    }
    get type() {
      dart.throw(new core.UnimplementedError.new("type is not implemented"));
    }
    clear() {
      dart.throw(new core.UnimplementedError.new("clear() is not implemented"));
    }
    render() {
      return async.async(core.int, function* render() {
        dart.throw(new core.UnimplementedError.new("render() is not implemented"));
      });
    }
    verify() {
      return async.async(core.String, function* verify() {
        dart.throw(new core.UnimplementedError.new("verify() is not implemented"));
      });
    }
  };
  (platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform.new = function() {
    platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform.__proto__.new.call(this, {token: platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform._token});
    ;
  }).prototype = platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform.prototype;
  dart.addTypeTests(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform);
  dart.addTypeCaches(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform);
  dart.setMethodSignature(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform, () => ({
    __proto__: dart.getMethods(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform.__proto__),
    delegateFor: dart.fnType(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform, [], {container: dart.nullable(core.String), onError: dart.nullable(dart.fnType(dart.void, [firebase_auth_exception.FirebaseAuthException])), onExpired: dart.nullable(dart.fnType(dart.void, [])), onSuccess: dart.nullable(dart.fnType(dart.void, [])), size: platform_interface_recaptcha_verifier_factory.RecaptchaVerifierSize, theme: platform_interface_recaptcha_verifier_factory.RecaptchaVerifierTheme}, {}),
    clear: dart.fnType(dart.void, []),
    render: dart.fnType(async.Future$(core.int), []),
    verify: dart.fnType(async.Future$(core.String), [])
  }));
  dart.setStaticMethodSignature(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform, () => ['verifyExtends']);
  dart.setGetterSignature(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform, () => ({
    __proto__: dart.getGetters(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform.__proto__),
    delegate: dart.dynamic,
    type: core.String
  }));
  dart.setStaticGetterSignature(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform, () => ['instance']);
  dart.setStaticSetterSignature(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform, () => ['instance']);
  dart.setLibraryUri(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform, I[45]);
  dart.setStaticFieldSignature(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform, () => ['_instance', '_token']);
  dart.defineLazy(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform, {
    /*platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform._instance*/get _instance() {
      return null;
    },
    set _instance(value) {},
    /*platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform._token*/get _token() {
      return new core.Object.new();
    }
  }, false);
  firebase_auth_web_recaptcha_verifier_factory.RecaptchaVerifierFactoryWeb = class RecaptchaVerifierFactoryWeb extends platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform {
    get [S$._delegate$6]() {
      let t78;
      t78 = this[S$.__RecaptchaVerifierFactoryWeb__delegate];
      return t78 == null ? dart.throw(new _internal.LateError.fieldNI("_delegate")) : t78;
    }
    set [S$._delegate$6](_delegate$35param) {
      this[S$.__RecaptchaVerifierFactoryWeb__delegate] = _delegate$35param;
    }
    static get instance() {
      return new firebase_auth_web_recaptcha_verifier_factory.RecaptchaVerifierFactoryWeb.__();
    }
    static ['_#_#tearOff']() {
      return new firebase_auth_web_recaptcha_verifier_factory.RecaptchaVerifierFactoryWeb.__();
    }
    static ['_#new#tearOff'](opts) {
      let container = opts && 'container' in opts ? opts.container : null;
      let size = opts && 'size' in opts ? opts.size : C[30] || CT.C30;
      let theme = opts && 'theme' in opts ? opts.theme : C[32] || CT.C32;
      let onSuccess = opts && 'onSuccess' in opts ? opts.onSuccess : null;
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let onExpired = opts && 'onExpired' in opts ? opts.onExpired : null;
      return new firebase_auth_web_recaptcha_verifier_factory.RecaptchaVerifierFactoryWeb.new({container: container, size: size, theme: theme, onSuccess: onSuccess, onError: onError, onExpired: onExpired});
    }
    delegateFor(opts) {
      let container = opts && 'container' in opts ? opts.container : null;
      let size = opts && 'size' in opts ? opts.size : C[30] || CT.C30;
      let theme = opts && 'theme' in opts ? opts.theme : C[32] || CT.C32;
      let onSuccess = opts && 'onSuccess' in opts ? opts.onSuccess : null;
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let onExpired = opts && 'onExpired' in opts ? opts.onExpired : null;
      return new firebase_auth_web_recaptcha_verifier_factory.RecaptchaVerifierFactoryWeb.new({container: container, size: size, theme: theme, onSuccess: onSuccess, onError: onError, onExpired: onExpired});
    }
    get delegate() {
      return this[S$._delegate$6];
    }
    get type() {
      return this[S$._delegate$6].type;
    }
    clear() {
      let t78;
      this[S$._delegate$6].clear();
      t78 = html.window[S$.$document].getElementById("__ff-recaptcha-container");
      t78 == null ? null : t78[S$.$remove]();
    }
    verify() {
      try {
        return this[S$._delegate$6].verify();
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Object.is(e)) {
          dart.throw(web_utils$.getFirebaseAuthException(e));
        } else
          throw e$;
      }
    }
    render() {
      return async.async(core.int, (function* render() {
        try {
          return dart.asInt(yield this[S$._delegate$6].render());
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(web_utils$.getFirebaseAuthException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
  };
  (firebase_auth_web_recaptcha_verifier_factory.RecaptchaVerifierFactoryWeb.__ = function() {
    this[S$.__RecaptchaVerifierFactoryWeb__delegate] = null;
    firebase_auth_web_recaptcha_verifier_factory.RecaptchaVerifierFactoryWeb.__proto__.new.call(this);
    ;
  }).prototype = firebase_auth_web_recaptcha_verifier_factory.RecaptchaVerifierFactoryWeb.prototype;
  (firebase_auth_web_recaptcha_verifier_factory.RecaptchaVerifierFactoryWeb.new = function(opts) {
    let t78;
    let container = opts && 'container' in opts ? opts.container : null;
    let size = opts && 'size' in opts ? opts.size : C[30] || CT.C30;
    let theme = opts && 'theme' in opts ? opts.theme : C[32] || CT.C32;
    let onSuccess = opts && 'onSuccess' in opts ? opts.onSuccess : null;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let onExpired = opts && 'onExpired' in opts ? opts.onExpired : null;
    this[S$.__RecaptchaVerifierFactoryWeb__delegate] = null;
    firebase_auth_web_recaptcha_verifier_factory.RecaptchaVerifierFactoryWeb.__proto__.new.call(this);
    let element = null;
    let parameters = new (T$.IdentityMapOfString$dynamic()).new();
    if (onSuccess != null) {
      parameters[S$.$_set]("callback", dart.fn(resp => {
        onSuccess();
      }, T$.dynamicToNull()));
    }
    if (onExpired != null) {
      parameters[S$.$_set]("expired-callback", dart.fn(() => {
        onExpired();
      }, T$.VoidToNull()));
    }
    if (onError != null) {
      parameters[S$.$_set]("error-callback", dart.fn(error => {
        onError(web_utils$.getFirebaseAuthException(error));
      }, T$.ObjectToNull()));
    }
    if (container == null || container[S$.$isEmpty]) {
      parameters[S$.$_set]("size", "invisible");
      let el = html.window[S$.$document].getElementById("__ff-recaptcha-container");
      if (el != null) {
        el[S$.$remove]();
      }
      dart.nullCheck(html.window[S$.$document].documentElement)[S$.$children][S$.$add]((t78 = html.DivElement.new(), (() => {
        t78[S$.$id] = "__ff-recaptcha-container";
        return t78;
      })()));
      element = "__ff-recaptcha-container";
    } else {
      parameters[S$.$_set]("size", web_utils$.convertRecaptchaVerifierSize(size));
      parameters[S$.$_set]("theme", web_utils$.convertRecaptchaVerifierTheme(theme));
      if (!(html.window[S$.$document].getElementById(container) != null)) dart.assertFailed("An exception was thrown whilst creating a RecaptchaVerifier instance. No DOM element with an ID of " + dart.str(container) + " could be found.", I[44], 81, 9, "window.document.getElementById(container) != null");
      element = container;
    }
    this[S$._delegate$6] = auth$.RecaptchaVerifier.new(element, parameters);
  }).prototype = firebase_auth_web_recaptcha_verifier_factory.RecaptchaVerifierFactoryWeb.prototype;
  dart.addTypeTests(firebase_auth_web_recaptcha_verifier_factory.RecaptchaVerifierFactoryWeb);
  dart.addTypeCaches(firebase_auth_web_recaptcha_verifier_factory.RecaptchaVerifierFactoryWeb);
  dart.setGetterSignature(firebase_auth_web_recaptcha_verifier_factory.RecaptchaVerifierFactoryWeb, () => ({
    __proto__: dart.getGetters(firebase_auth_web_recaptcha_verifier_factory.RecaptchaVerifierFactoryWeb.__proto__),
    [S$._delegate$6]: auth$.RecaptchaVerifier,
    delegate: auth$.ApplicationVerifier$(dart.packageJSType("firebase_auth.ApplicationVerifier", false))
  }));
  dart.setSetterSignature(firebase_auth_web_recaptcha_verifier_factory.RecaptchaVerifierFactoryWeb, () => ({
    __proto__: dart.getSetters(firebase_auth_web_recaptcha_verifier_factory.RecaptchaVerifierFactoryWeb.__proto__),
    [S$._delegate$6]: auth$.RecaptchaVerifier
  }));
  dart.setStaticGetterSignature(firebase_auth_web_recaptcha_verifier_factory.RecaptchaVerifierFactoryWeb, () => ['instance']);
  dart.setLibraryUri(firebase_auth_web_recaptcha_verifier_factory.RecaptchaVerifierFactoryWeb, I[46]);
  dart.setFieldSignature(firebase_auth_web_recaptcha_verifier_factory.RecaptchaVerifierFactoryWeb, () => ({
    __proto__: dart.getFields(firebase_auth_web_recaptcha_verifier_factory.RecaptchaVerifierFactoryWeb.__proto__),
    [S$.__RecaptchaVerifierFactoryWeb__delegate]: dart.fieldType(dart.nullable(auth$.RecaptchaVerifier))
  }));
  dart.defineLazy(firebase_auth_web_recaptcha_verifier_factory, {
    /*firebase_auth_web_recaptcha_verifier_factory._kInvisibleElementId*/get _kInvisibleElementId() {
      return "__ff-recaptcha-container";
    }
  }, false);
  platform_interface_user.UserPlatform = class UserPlatform extends plugin_platform_interface.PlatformInterface {
    get auth() {
      return this[S$.auth];
    }
    set auth(value) {
      super.auth = value;
    }
    static verifyExtends(instance) {
      plugin_platform_interface.PlatformInterface.verifyToken(instance, platform_interface_user.UserPlatform._token);
    }
    get displayName() {
      return T$.StringN().as(this[S$._user][S$.$_get]("displayName"));
    }
    get email() {
      return T$.StringN().as(this[S$._user][S$.$_get]("email"));
    }
    get emailVerified() {
      return core.bool.as(this[S$._user][S$.$_get]("emailVerified"));
    }
    get isAnonymous() {
      return core.bool.as(this[S$._user][S$.$_get]("isAnonymous"));
    }
    get metadata() {
      return new user_metadata.UserMetadata.new(T$.intN().as(dart.dsend(this[S$._user][S$.$_get]("metadata"), '_get', ["creationTime"])), T$.intN().as(dart.dsend(this[S$._user][S$.$_get]("metadata"), '_get', ["lastSignInTime"])));
    }
    get phoneNumber() {
      return T$.StringN().as(this[S$._user][S$.$_get]("phoneNumber"));
    }
    get photoURL() {
      return T$.StringN().as(this[S$._user][S$.$_get]("photoURL"));
    }
    get providerData() {
      return core.List.from(core.Iterable.as(this[S$._user][S$.$_get]("providerData")))[S$.$map](user_info.UserInfo, dart.fn(data => new user_info.UserInfo.new(T$.LinkedHashMapOfString$StringN().from(core.Map.as(data))), T$.dynamicToUserInfo()))[S$.$toList]();
    }
    get refreshToken() {
      return T$.StringN().as(this[S$._user][S$.$_get]("refreshToken"));
    }
    get tenantId() {
      return T$.StringN().as(this[S$._user][S$.$_get]("tenantId"));
    }
    get uid() {
      return core.String.as(this[S$._user][S$.$_get]("uid"));
    }
    delete() {
      return async.async(dart.void, function* $delete() {
        dart.throw(new core.UnimplementedError.new("delete() is not implemented"));
      });
    }
    getIdToken(forceRefresh) {
      dart.throw(new core.UnimplementedError.new("getIdToken() is not implemented"));
    }
    getIdTokenResult(forceRefresh) {
      dart.throw(new core.UnimplementedError.new("getIdTokenResult() is not implemented"));
    }
    linkWithCredential(credential) {
      dart.throw(new core.UnimplementedError.new("linkWithCredential() is not implemented"));
    }
    linkWithPopup(provider) {
      dart.throw(new core.UnimplementedError.new("linkWithPopup() is not implemented"));
    }
    linkWithPhoneNumber(phoneNumber, applicationVerifier) {
      dart.throw(new core.UnimplementedError.new("linkWithPhoneNumber() is not implemented"));
    }
    reauthenticateWithCredential(credential) {
      dart.throw(new core.UnimplementedError.new("reauthenticateWithCredential() is not implemented"));
    }
    reload() {
      return async.async(dart.void, function* reload() {
        dart.throw(new core.UnimplementedError.new("reload() is not implemented"));
      });
    }
    sendEmailVerification(actionCodeSettings) {
      return async.async(dart.void, function* sendEmailVerification() {
        dart.throw(new core.UnimplementedError.new("sendEmailVerification() is not implemented"));
      });
    }
    unlink(providerId) {
      return async.async(platform_interface_user.UserPlatform, function* unlink() {
        dart.throw(new core.UnimplementedError.new("unlink() is not implemented"));
      });
    }
    updateEmail(newEmail) {
      return async.async(dart.void, function* updateEmail() {
        dart.throw(new core.UnimplementedError.new("updateEmail() is not implemented"));
      });
    }
    updatePassword(newPassword) {
      return async.async(dart.void, function* updatePassword() {
        dart.throw(new core.UnimplementedError.new("updatePassword() is not implemented"));
      });
    }
    updatePhoneNumber(phoneCredential) {
      return async.async(dart.void, function* updatePhoneNumber() {
        dart.throw(new core.UnimplementedError.new("updatePhoneNumber() is not implemented"));
      });
    }
    updateProfile(profile) {
      return async.async(dart.void, function* updateProfile() {
        dart.throw(new core.UnimplementedError.new("updateProfile() is not implemented"));
      });
    }
    verifyBeforeUpdateEmail(newEmail, actionCodeSettings = null) {
      return async.async(dart.void, function* verifyBeforeUpdateEmail() {
        dart.throw(new core.UnimplementedError.new("verifyBeforeUpdateEmail() is not implemented"));
      });
    }
  };
  (platform_interface_user.UserPlatform.new = function(auth, user) {
    this[S$.auth] = auth;
    this[S$._user] = user;
    platform_interface_user.UserPlatform.__proto__.new.call(this, {token: platform_interface_user.UserPlatform._token});
    ;
  }).prototype = platform_interface_user.UserPlatform.prototype;
  dart.addTypeTests(platform_interface_user.UserPlatform);
  dart.addTypeCaches(platform_interface_user.UserPlatform);
  dart.setMethodSignature(platform_interface_user.UserPlatform, () => ({
    __proto__: dart.getMethods(platform_interface_user.UserPlatform.__proto__),
    delete: dart.fnType(async.Future$(dart.void), []),
    getIdToken: dart.fnType(async.Future$(core.String), [core.bool]),
    getIdTokenResult: dart.fnType(async.Future$(id_token_result.IdTokenResult), [core.bool]),
    linkWithCredential: dart.fnType(async.Future$(platform_interface_user_credential.UserCredentialPlatform), [auth_credential.AuthCredential]),
    linkWithPopup: dart.fnType(async.Future$(platform_interface_user_credential.UserCredentialPlatform), [auth_provider.AuthProvider]),
    linkWithPhoneNumber: dart.fnType(async.Future$(platform_interface_confirmation_result.ConfirmationResultPlatform), [core.String, platform_interface_recaptcha_verifier_factory.RecaptchaVerifierFactoryPlatform]),
    reauthenticateWithCredential: dart.fnType(async.Future$(platform_interface_user_credential.UserCredentialPlatform), [auth_credential.AuthCredential]),
    reload: dart.fnType(async.Future$(dart.void), []),
    sendEmailVerification: dart.fnType(async.Future$(dart.void), [dart.nullable(action_code_settings.ActionCodeSettings)]),
    unlink: dart.fnType(async.Future$(platform_interface_user.UserPlatform), [core.String]),
    updateEmail: dart.fnType(async.Future$(dart.void), [core.String]),
    updatePassword: dart.fnType(async.Future$(dart.void), [core.String]),
    updatePhoneNumber: dart.fnType(async.Future$(dart.void), [phone_auth.PhoneAuthCredential]),
    updateProfile: dart.fnType(async.Future$(dart.void), [core.Map$(core.String, dart.nullable(core.String))]),
    verifyBeforeUpdateEmail: dart.fnType(async.Future$(dart.void), [core.String], [dart.nullable(action_code_settings.ActionCodeSettings)])
  }));
  dart.setStaticMethodSignature(platform_interface_user.UserPlatform, () => ['verifyExtends']);
  dart.setGetterSignature(platform_interface_user.UserPlatform, () => ({
    __proto__: dart.getGetters(platform_interface_user.UserPlatform.__proto__),
    displayName: dart.nullable(core.String),
    email: dart.nullable(core.String),
    emailVerified: core.bool,
    isAnonymous: core.bool,
    metadata: user_metadata.UserMetadata,
    phoneNumber: dart.nullable(core.String),
    photoURL: dart.nullable(core.String),
    providerData: core.List$(user_info.UserInfo),
    refreshToken: dart.nullable(core.String),
    tenantId: dart.nullable(core.String),
    uid: core.String
  }));
  dart.setLibraryUri(platform_interface_user.UserPlatform, I[47]);
  dart.setFieldSignature(platform_interface_user.UserPlatform, () => ({
    __proto__: dart.getFields(platform_interface_user.UserPlatform.__proto__),
    auth: dart.finalFieldType(platform_interface_firebase_auth.FirebaseAuthPlatform),
    [S$._user]: dart.finalFieldType(core.Map$(core.String, dart.dynamic))
  }));
  dart.setStaticFieldSignature(platform_interface_user.UserPlatform, () => ['_token']);
  dart.defineLazy(platform_interface_user.UserPlatform, {
    /*platform_interface_user.UserPlatform._token*/get _token() {
      return new core.Object.new();
    }
  }, false);
  firebase_auth_web_user.UserWeb = class UserWeb extends platform_interface_user.UserPlatform {
    static ['_#new#tearOff'](auth, _webUser) {
      return new firebase_auth_web_user.UserWeb.new(auth, _webUser);
    }
    delete() {
      return async.async(dart.void, (function* $delete() {
        firebase_auth_web_user._assertIsSignedOut(this.auth);
        try {
          yield this[S$._webUser].delete();
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(web_utils$.getFirebaseAuthException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    getIdToken(forceRefresh) {
      return async.async(core.String, (function* getIdToken() {
        firebase_auth_web_user._assertIsSignedOut(this.auth);
        try {
          return yield this[S$._webUser].getIdToken(forceRefresh);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(web_utils$.getFirebaseAuthException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    getIdTokenResult(forceRefresh) {
      return async.async(id_token_result.IdTokenResult, (function* getIdTokenResult() {
        firebase_auth_web_user._assertIsSignedOut(this.auth);
        return web_utils$.convertWebIdTokenResult(yield this[S$._webUser].getIdTokenResult(forceRefresh));
      }).bind(this));
    }
    linkWithCredential(credential) {
      return async.async(platform_interface_user_credential.UserCredentialPlatform, (function* linkWithCredential() {
        firebase_auth_web_user._assertIsSignedOut(this.auth);
        try {
          return new firebase_auth_web_user_credential.UserCredentialWeb.new(this.auth, yield this[S$._webUser].linkWithCredential(web_utils$.convertPlatformCredential(credential)));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(web_utils$.getFirebaseAuthException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    linkWithPopup(provider) {
      return async.async(platform_interface_user_credential.UserCredentialPlatform, (function* linkWithPopup() {
        firebase_auth_web_user._assertIsSignedOut(this.auth);
        try {
          return new firebase_auth_web_user_credential.UserCredentialWeb.new(this.auth, yield this[S$._webUser].linkWithPopup(web_utils$.convertPlatformAuthProvider(provider)));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(web_utils$.getFirebaseAuthException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    linkWithPhoneNumber(phoneNumber, applicationVerifier) {
      return async.async(platform_interface_confirmation_result.ConfirmationResultPlatform, (function* linkWithPhoneNumber() {
        firebase_auth_web_user._assertIsSignedOut(this.auth);
        try {
          let verifier = auth$.RecaptchaVerifier.as(applicationVerifier.delegate);
          return new firebase_auth_web_confirmation_result.ConfirmationResultWeb.new(this.auth, yield this[S$._webUser].linkWithPhoneNumber(phoneNumber, verifier));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(web_utils$.getFirebaseAuthException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    reauthenticateWithCredential(credential) {
      return async.async(platform_interface_user_credential.UserCredentialPlatform, (function* reauthenticateWithCredential() {
        firebase_auth_web_user._assertIsSignedOut(this.auth);
        try {
          let userCredential = (yield this[S$._webUser].reauthenticateWithCredential(dart.nullCheck(web_utils$.convertPlatformCredential(credential))));
          return new firebase_auth_web_user_credential.UserCredentialWeb.new(this.auth, userCredential);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(web_utils$.getFirebaseAuthException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    reload() {
      return async.async(dart.void, (function* reload() {
        firebase_auth_web_user._assertIsSignedOut(this.auth);
        try {
          yield this[S$._webUser].reload();
          this.auth.sendAuthChangesEvent(this.auth.app.name, this.auth.currentUser);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(web_utils$.getFirebaseAuthException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    sendEmailVerification(actionCodeSettings) {
      firebase_auth_web_user._assertIsSignedOut(this.auth);
      try {
        return this[S$._webUser].sendEmailVerification(web_utils$.convertPlatformActionCodeSettings(actionCodeSettings));
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Object.is(e)) {
          dart.throw(web_utils$.getFirebaseAuthException(e));
        } else
          throw e$;
      }
    }
    unlink(providerId) {
      return async.async(platform_interface_user.UserPlatform, (function* unlink() {
        firebase_auth_web_user._assertIsSignedOut(this.auth);
        try {
          return new firebase_auth_web_user.UserWeb.new(this.auth, yield this[S$._webUser].unlink(providerId));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(web_utils$.getFirebaseAuthException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    updateEmail(newEmail) {
      return async.async(dart.void, (function* updateEmail() {
        firebase_auth_web_user._assertIsSignedOut(this.auth);
        try {
          yield this[S$._webUser].updateEmail(newEmail);
          yield this[S$._webUser].reload();
          this.auth.sendAuthChangesEvent(this.auth.app.name, this.auth.currentUser);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(web_utils$.getFirebaseAuthException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    updatePassword(newPassword) {
      return async.async(dart.void, (function* updatePassword() {
        firebase_auth_web_user._assertIsSignedOut(this.auth);
        try {
          yield this[S$._webUser].updatePassword(newPassword);
          yield this[S$._webUser].reload();
          this.auth.sendAuthChangesEvent(this.auth.app.name, this.auth.currentUser);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(web_utils$.getFirebaseAuthException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    updatePhoneNumber(phoneCredential) {
      return async.async(dart.void, (function* updatePhoneNumber() {
        firebase_auth_web_user._assertIsSignedOut(this.auth);
        try {
          yield this[S$._webUser].updatePhoneNumber(web_utils$.convertPlatformCredential(phoneCredential));
          yield this[S$._webUser].reload();
          this.auth.sendAuthChangesEvent(this.auth.app.name, this.auth.currentUser);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(web_utils$.getFirebaseAuthException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    updateProfile(profile) {
      return async.async(dart.void, (function* updateProfile() {
        firebase_auth_web_user._assertIsSignedOut(this.auth);
        try {
          let newProfile = null;
          if (profile[S$.$containsKey]("displayName") && profile[S$.$containsKey]("photoURL")) {
            newProfile = {displayName: profile[S$.$_get]("displayName"), photoURL: profile[S$.$_get]("photoURL")};
          } else if (profile[S$.$containsKey]("displayName")) {
            newProfile = {displayName: profile[S$.$_get]("displayName")};
          } else {
            newProfile = {photoURL: profile[S$.$_get]("photoURL")};
          }
          yield this[S$._webUser].updateProfile(newProfile);
          yield this[S$._webUser].reload();
          this.auth.sendAuthChangesEvent(this.auth.app.name, this.auth.currentUser);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(web_utils$.getFirebaseAuthException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
    verifyBeforeUpdateEmail(newEmail, actionCodeSettings = null) {
      return async.async(dart.void, (function* verifyBeforeUpdateEmail() {
        firebase_auth_web_user._assertIsSignedOut(this.auth);
        try {
          yield this[S$._webUser].verifyBeforeUpdateEmail(newEmail, web_utils$.convertPlatformActionCodeSettings(actionCodeSettings));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(web_utils$.getFirebaseAuthException(e));
          } else
            throw e$;
        }
      }).bind(this));
    }
  };
  (firebase_auth_web_user.UserWeb.new = function(auth, _webUser) {
    this[S$._webUser] = _webUser;
    firebase_auth_web_user.UserWeb.__proto__.new.call(this, auth, new (T$.IdentityMapOfString$dynamic()).from(["displayName", _webUser.displayName, "email", _webUser.email, "emailVerified", _webUser.emailVerified, "isAnonymous", _webUser.isAnonymous, "metadata", new (T$.IdentityMapOfString$intN()).from(["creationTime", _webUser.metadata.creationTime != null ? firebase_auth_web_user._dateFormat.parse(dart.nullCheck(_webUser.metadata.creationTime)).millisecondsSinceEpoch : null, "lastSignInTime", _webUser.metadata.lastSignInTime != null ? firebase_auth_web_user._dateFormat.parse(dart.nullCheck(_webUser.metadata.lastSignInTime)).millisecondsSinceEpoch : null]), "phoneNumber", _webUser.phoneNumber, "photoURL", _webUser.photoURL, "providerData", _webUser.providerData[S$.$map](T$.MapOfString$dynamic(), dart.fn(webUserInfo => new (T$.IdentityMapOfString$dynamic()).from(["displayName", webUserInfo.displayName, "email", webUserInfo.email, "phoneNumber", webUserInfo.phoneNumber, "providerId", webUserInfo.providerId, "photoURL", webUserInfo.photoURL, "uid", webUserInfo.uid]), T$.UserInfoOfUserInfoJsImplToMapOfString$dynamic()))[S$.$toList](), "refreshToken", _webUser.refreshToken, "tenantId", _webUser.tenantId, "uid", _webUser.uid]));
    ;
  }).prototype = firebase_auth_web_user.UserWeb.prototype;
  dart.addTypeTests(firebase_auth_web_user.UserWeb);
  dart.addTypeCaches(firebase_auth_web_user.UserWeb);
  dart.setLibraryUri(firebase_auth_web_user.UserWeb, I[48]);
  dart.setFieldSignature(firebase_auth_web_user.UserWeb, () => ({
    __proto__: dart.getFields(firebase_auth_web_user.UserWeb.__proto__),
    [S$._webUser]: dart.finalFieldType(auth$.User)
  }));
  firebase_auth_web_user._assertIsSignedOut = function _assertIsSignedOut(instance) {
    if (instance.currentUser == null) {
      dart.throw(new firebase_auth_exception.FirebaseAuthException.new({code: "no-current-user", message: "No user currently signed in."}));
    }
  };
  dart.defineLazy(firebase_auth_web_user, {
    /*firebase_auth_web_user._dateFormat*/get _dateFormat() {
      return new date_format.DateFormat.new("EEE, d MMM yyyy HH:mm:ss", "en_US");
    }
  }, false);
  platform_interface_user_credential.UserCredentialPlatform = class UserCredentialPlatform extends plugin_platform_interface.PlatformInterface {
    get auth() {
      return this[S$.auth$1];
    }
    set auth(value) {
      super.auth = value;
    }
    get additionalUserInfo() {
      return this[S$.additionalUserInfo];
    }
    set additionalUserInfo(value) {
      super.additionalUserInfo = value;
    }
    get credential() {
      return this[S$.credential];
    }
    set credential(value) {
      super.credential = value;
    }
    get user() {
      return this[S$.user];
    }
    set user(value) {
      super.user = value;
    }
    static verifyExtends(instance) {
      plugin_platform_interface.PlatformInterface.verifyToken(instance, platform_interface_user_credential.UserCredentialPlatform._token);
    }
  };
  (platform_interface_user_credential.UserCredentialPlatform.new = function(opts) {
    let auth = opts && 'auth' in opts ? opts.auth : null;
    let additionalUserInfo = opts && 'additionalUserInfo' in opts ? opts.additionalUserInfo : null;
    let credential = opts && 'credential' in opts ? opts.credential : null;
    let user = opts && 'user' in opts ? opts.user : null;
    this[S$.auth$1] = auth;
    this[S$.additionalUserInfo] = additionalUserInfo;
    this[S$.credential] = credential;
    this[S$.user] = user;
    platform_interface_user_credential.UserCredentialPlatform.__proto__.new.call(this, {token: platform_interface_user_credential.UserCredentialPlatform._token});
    ;
  }).prototype = platform_interface_user_credential.UserCredentialPlatform.prototype;
  dart.addTypeTests(platform_interface_user_credential.UserCredentialPlatform);
  dart.addTypeCaches(platform_interface_user_credential.UserCredentialPlatform);
  dart.setStaticMethodSignature(platform_interface_user_credential.UserCredentialPlatform, () => ['verifyExtends']);
  dart.setLibraryUri(platform_interface_user_credential.UserCredentialPlatform, I[49]);
  dart.setFieldSignature(platform_interface_user_credential.UserCredentialPlatform, () => ({
    __proto__: dart.getFields(platform_interface_user_credential.UserCredentialPlatform.__proto__),
    auth: dart.finalFieldType(platform_interface_firebase_auth.FirebaseAuthPlatform),
    additionalUserInfo: dart.finalFieldType(dart.nullable(additional_user_info.AdditionalUserInfo)),
    credential: dart.finalFieldType(dart.nullable(auth_credential.AuthCredential)),
    user: dart.finalFieldType(dart.nullable(platform_interface_user.UserPlatform))
  }));
  dart.setStaticFieldSignature(platform_interface_user_credential.UserCredentialPlatform, () => ['_token']);
  dart.defineLazy(platform_interface_user_credential.UserCredentialPlatform, {
    /*platform_interface_user_credential.UserCredentialPlatform._token*/get _token() {
      return new core.Object.new();
    }
  }, false);
  firebase_auth_web_user_credential.UserCredentialWeb = class UserCredentialWeb extends platform_interface_user_credential.UserCredentialPlatform {
    static ['_#new#tearOff'](auth, webUserCredential) {
      return new firebase_auth_web_user_credential.UserCredentialWeb.new(auth, webUserCredential);
    }
  };
  (firebase_auth_web_user_credential.UserCredentialWeb.new = function(auth, webUserCredential) {
    firebase_auth_web_user_credential.UserCredentialWeb.__proto__.new.call(this, {auth: auth, additionalUserInfo: web_utils$.convertWebAdditionalUserInfo(webUserCredential.additionalUserInfo), credential: web_utils$.convertWebOAuthCredential(webUserCredential.credential), user: new firebase_auth_web_user.UserWeb.new(auth, dart.nullCheck(webUserCredential.user))});
    ;
  }).prototype = firebase_auth_web_user_credential.UserCredentialWeb.prototype;
  dart.addTypeTests(firebase_auth_web_user_credential.UserCredentialWeb);
  dart.addTypeCaches(firebase_auth_web_user_credential.UserCredentialWeb);
  dart.setLibraryUri(firebase_auth_web_user_credential.UserCredentialWeb, I[50]);
  const _is_UserInfo_default = Symbol('_is_UserInfo_default');
  auth$.UserInfo$ = dart.generic(T => {
    class UserInfo extends js$.JsObjectWrapper$(T) {
      get displayName() {
        return this.jsObject.displayName;
      }
      get email() {
        return this.jsObject.email;
      }
      get phoneNumber() {
        return this.jsObject.phoneNumber;
      }
      get photoURL() {
        return this.jsObject.photoURL;
      }
      get providerId() {
        return this.jsObject.providerId;
      }
      get uid() {
        return this.jsObject.uid;
      }
      static ['_#_fromJsObject#tearOff'](T, jsObject) {
        return new (auth$.UserInfo$(T))._fromJsObject(jsObject);
      }
    }
    (UserInfo._fromJsObject = function(jsObject) {
      UserInfo.__proto__.fromJsObject.call(this, T.as(jsObject));
      ;
    }).prototype = UserInfo.prototype;
    dart.addTypeTests(UserInfo);
    UserInfo.prototype[_is_UserInfo_default] = true;
    dart.addTypeCaches(UserInfo);
    dart.setGetterSignature(UserInfo, () => ({
      __proto__: dart.getGetters(UserInfo.__proto__),
      displayName: dart.nullable(core.String),
      email: dart.nullable(core.String),
      phoneNumber: dart.nullable(core.String),
      photoURL: dart.nullable(core.String),
      providerId: core.String,
      uid: core.String
    }));
    dart.setLibraryUri(UserInfo, I[51]);
    return UserInfo;
  });
  auth$.UserInfo = auth$.UserInfo$();
  dart.addTypeTests(auth$.UserInfo, _is_UserInfo_default);
  auth$.User = class User extends auth$.UserInfo$(dart.packageJSType("UserJsImpl", false)) {
    get uid() {
      return this.jsObject.uid;
    }
    get emailVerified() {
      return this.jsObject.emailVerified;
    }
    get isAnonymous() {
      return this.jsObject.isAnonymous;
    }
    get tenantId() {
      return this.jsObject.tenantId;
    }
    get metadata() {
      return this.jsObject.metadata;
    }
    get providerData() {
      return this.jsObject.providerData[S$.$map](T$.UserInfoOfUserInfoJsImpl(), dart.fn(data => new (T$.UserInfoOfUserInfoJsImpl())._fromJsObject(dart.packageJSType("UserInfoJsImpl", false).as(data)), T$.dynamicToUserInfoOfUserInfoJsImpl()))[S$.$toList]();
    }
    get refreshToken() {
      return this.jsObject.refreshToken;
    }
    static getInstance(jsObject) {
      let t97, t96, t95, t94;
      if (jsObject == null) {
        return null;
      }
      t94 = auth$.User._expando;
      t95 = jsObject;
      t96 = t94._get(t95);
      return t96 == null ? (t97 = new auth$.User._fromJsObject(jsObject), t94._set(t95, t97), t97) : t96;
    }
    static ['_#_fromJsObject#tearOff'](jsObject) {
      return new auth$.User._fromJsObject(jsObject);
    }
    delete() {
      return utils.handleThenable(dart.void, this.jsObject.delete());
    }
    getIdToken(forceRefresh = false) {
      return utils.handleThenable(core.String, this.jsObject.getIdToken(forceRefresh));
    }
    linkWithCredential(credential) {
      return utils.handleThenable(dart.packageJSType("UserCredentialJsImpl", false), dart.global.firebase_auth.linkWithCredential(this.jsObject, credential)).then(auth$.UserCredential, C[33] || CT.C33);
    }
    linkWithPhoneNumber(phoneNumber, applicationVerifier) {
      return utils.handleThenable(dart.packageJSType("firebase_auth.ConfirmationResult", false), dart.global.firebase_auth.linkWithPhoneNumber(this.jsObject, phoneNumber, applicationVerifier.jsObject)).then(auth$.ConfirmationResult, C[34] || CT.C34);
    }
    linkWithPopup(provider) {
      return utils.handleThenable(dart.packageJSType("UserCredentialJsImpl", false), dart.global.firebase_auth.linkWithPopup(this.jsObject, provider.jsObject)).then(auth$.UserCredential, C[33] || CT.C33);
    }
    linkWithRedirect(provider) {
      return utils.handleThenable(dart.void, dart.global.firebase_auth.linkWithRedirect(this.jsObject, provider.jsObject));
    }
    reauthenticateWithCredential(credential) {
      return utils.handleThenable(dart.packageJSType("UserCredentialJsImpl", false), dart.global.firebase_auth.reauthenticateWithCredential(this.jsObject, credential)).then(auth$.UserCredential, C[33] || CT.C33);
    }
    reauthenticateWithPhoneNumber(phoneNumber, applicationVerifier) {
      return utils.handleThenable(dart.packageJSType("firebase_auth.ConfirmationResult", false), dart.global.firebase_auth.reauthenticateWithPhoneNumber(this.jsObject, phoneNumber, applicationVerifier.jsObject)).then(auth$.ConfirmationResult, C[34] || CT.C34);
    }
    reauthenticateWithPopup(provider) {
      return utils.handleThenable(dart.packageJSType("UserCredentialJsImpl", false), dart.global.firebase_auth.reauthenticateWithPopup(this.jsObject, provider.jsObject)).then(auth$.UserCredential, C[33] || CT.C33);
    }
    reauthenticateWithRedirect(provider) {
      return utils.handleThenable(dart.void, dart.global.firebase_auth.reauthenticateWithRedirect(this.jsObject, provider.jsObject));
    }
    reload() {
      return utils.handleThenable(dart.void, this.jsObject.reload());
    }
    sendEmailVerification(actionCodeSettings = null) {
      return utils.handleThenable(dart.void, dart.global.firebase_auth.sendEmailVerification(this.jsObject, actionCodeSettings));
    }
    verifyBeforeUpdateEmail(newEmail, actionCodeSettings = null) {
      return utils.handleThenable(dart.void, dart.global.firebase_auth.verifyBeforeUpdateEmail(this.jsObject, newEmail, actionCodeSettings));
    }
    unlink(providerId) {
      return utils.handleThenable(dart.packageJSType("UserJsImpl", false), dart.global.firebase_auth.unlink(this.jsObject, providerId)).then(auth$.User, dart.fn(user => dart.nullCheck(auth$.User.getInstance(user)), T$.UserJsImplToUser()));
    }
    updateEmail(newEmail) {
      return utils.handleThenable(dart.void, dart.global.firebase_auth.updateEmail(this.jsObject, newEmail));
    }
    updatePassword(newPassword) {
      return utils.handleThenable(dart.void, dart.global.firebase_auth.updatePassword(this.jsObject, newPassword));
    }
    updatePhoneNumber(phoneCredential) {
      return utils.handleThenable(dart.void, dart.global.firebase_auth.updatePhoneNumber(this.jsObject, phoneCredential));
    }
    updateProfile(profile) {
      return utils.handleThenable(dart.void, dart.global.firebase_auth.updateProfile(this.jsObject, profile));
    }
    getIdTokenResult(forceRefresh = null) {
      let promise = forceRefresh == null ? this.jsObject.getIdTokenResult() : this.jsObject.getIdTokenResult(forceRefresh);
      return utils.handleThenable(dart.packageJSType("IdTokenResultImpl", false), promise).then(auth$.IdTokenResult, C[35] || CT.C35);
    }
    toJson() {
      return T$.MapOfString$dynamic().as(utils$0.dartify(this.jsObject.toJSON()));
    }
    toString() {
      return "User: " + this.uid;
    }
  };
  (auth$.User._fromJsObject = function(jsObject) {
    auth$.User.__proto__._fromJsObject.call(this, jsObject);
    ;
  }).prototype = auth$.User.prototype;
  dart.addTypeTests(auth$.User);
  dart.addTypeCaches(auth$.User);
  dart.setMethodSignature(auth$.User, () => ({
    __proto__: dart.getMethods(auth$.User.__proto__),
    delete: dart.fnType(async.Future$(dart.void), []),
    getIdToken: dart.fnType(async.Future$(core.String), [], [core.bool]),
    linkWithCredential: dart.fnType(async.Future$(auth$.UserCredential), [dart.nullable(dart.packageJSType("OAuthCredential", false))]),
    linkWithPhoneNumber: dart.fnType(async.Future$(auth$.ConfirmationResult), [core.String, auth$.ApplicationVerifier$(dart.packageJSType("firebase_auth.ApplicationVerifier", false))]),
    linkWithPopup: dart.fnType(async.Future$(auth$.UserCredential), [auth$.AuthProvider$(dart.packageJSType("AuthProviderJsImpl", false))]),
    linkWithRedirect: dart.fnType(async.Future$(dart.void), [auth$.AuthProvider$(dart.packageJSType("AuthProviderJsImpl", false))]),
    reauthenticateWithCredential: dart.fnType(async.Future$(auth$.UserCredential), [dart.packageJSType("OAuthCredential", false)]),
    reauthenticateWithPhoneNumber: dart.fnType(async.Future$(auth$.ConfirmationResult), [core.String, auth$.ApplicationVerifier$(dart.packageJSType("firebase_auth.ApplicationVerifier", false))]),
    reauthenticateWithPopup: dart.fnType(async.Future$(auth$.UserCredential), [auth$.AuthProvider$(dart.packageJSType("AuthProviderJsImpl", false))]),
    reauthenticateWithRedirect: dart.fnType(async.Future$(dart.void), [auth$.AuthProvider$(dart.packageJSType("AuthProviderJsImpl", false))]),
    reload: dart.fnType(async.Future$(dart.void), []),
    sendEmailVerification: dart.fnType(async.Future$(dart.void), [], [dart.nullable(dart.packageJSType("ActionCodeSettings", false))]),
    verifyBeforeUpdateEmail: dart.fnType(async.Future$(dart.void), [core.String], [dart.nullable(dart.packageJSType("ActionCodeSettings", false))]),
    unlink: dart.fnType(async.Future$(auth$.User), [core.String]),
    updateEmail: dart.fnType(async.Future$(dart.void), [core.String]),
    updatePassword: dart.fnType(async.Future$(dart.void), [core.String]),
    updatePhoneNumber: dart.fnType(async.Future$(dart.void), [dart.nullable(dart.packageJSType("OAuthCredential", false))]),
    updateProfile: dart.fnType(async.Future$(dart.void), [dart.packageJSType("UserProfile", false)]),
    getIdTokenResult: dart.fnType(async.Future$(auth$.IdTokenResult), [], [dart.nullable(core.bool)]),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setStaticMethodSignature(auth$.User, () => ['getInstance']);
  dart.setGetterSignature(auth$.User, () => ({
    __proto__: dart.getGetters(auth$.User.__proto__),
    emailVerified: core.bool,
    isAnonymous: core.bool,
    tenantId: dart.nullable(core.String),
    metadata: dart.packageJSType("firebase_auth.UserMetadata", false),
    providerData: core.List$(auth$.UserInfo$(dart.packageJSType("UserInfoJsImpl", false))),
    refreshToken: core.String
  }));
  dart.setLibraryUri(auth$.User, I[51]);
  dart.setStaticFieldSignature(auth$.User, () => ['_expando']);
  dart.defineExtensionMethods(auth$.User, ['toString']);
  dart.defineLazy(auth$.User, {
    /*auth$.User._expando*/get _expando() {
      return new (T$.ExpandoOfUser()).new();
    }
  }, false);
  auth$.IdTokenResult = class IdTokenResult extends js$.JsObjectWrapper$(dart.packageJSType("IdTokenResultImpl", false)) {
    static ['_#_fromJsObject#tearOff'](jsObject) {
      return new auth$.IdTokenResult._fromJsObject(jsObject);
    }
    get authTime() {
      return http_date.parseHttpDate(this.jsObject.authTime);
    }
    get claims() {
      return T$.MapNOfString$dynamic().as(utils$0.dartify(this.jsObject.claims));
    }
    get expirationTime() {
      return http_date.parseHttpDate(this.jsObject.expirationTime);
    }
    get issuedAtTime() {
      return http_date.parseHttpDate(this.jsObject.issuedAtTime);
    }
    get signInProvider() {
      return this.jsObject.signInProvider;
    }
    get token() {
      return this.jsObject.token;
    }
  };
  (auth$.IdTokenResult._fromJsObject = function(jsObject) {
    auth$.IdTokenResult.__proto__.fromJsObject.call(this, jsObject);
    ;
  }).prototype = auth$.IdTokenResult.prototype;
  dart.addTypeTests(auth$.IdTokenResult);
  dart.addTypeCaches(auth$.IdTokenResult);
  dart.setGetterSignature(auth$.IdTokenResult, () => ({
    __proto__: dart.getGetters(auth$.IdTokenResult.__proto__),
    authTime: core.DateTime,
    claims: dart.nullable(core.Map$(core.String, dart.dynamic)),
    expirationTime: core.DateTime,
    issuedAtTime: core.DateTime,
    signInProvider: core.String,
    token: core.String
  }));
  dart.setLibraryUri(auth$.IdTokenResult, I[51]);
  auth$.Auth = class Auth extends js$.JsObjectWrapper$(dart.packageJSType("firebase_auth.Auth", false)) {
    get app() {
      return app$.App.getInstance(this.jsObject.app);
    }
    get currentUser() {
      return auth$.User.getInstance(this.jsObject.currentUser);
    }
    get tenantId() {
      return this.jsObject.tenantId;
    }
    set tenantId(tenantId) {
      this.jsObject.tenantId = tenantId;
    }
    get languageCode() {
      return this.jsObject.languageCode;
    }
    set languageCode(s) {
      this.jsObject.languageCode = s;
    }
    get settings() {
      return this.jsObject.settings;
    }
    get onAuthStateChanged() {
      if (this[S$._changeController] == null) {
        let nextWrapper = js.allowInterop(T$.UserJsImplNToNull(), dart.fn(user => {
          dart.nullCheck(this[S$._changeController]).add(auth$.User.getInstance(user));
        }, T$.UserJsImplNToNull()));
        let errorWrapper = js.allowInterop(T$.dynamicTovoid(), dart.fn(e => dart.nullCheck(this[S$._changeController]).addError(core.Object.as(e)), T$.dynamicTovoid()));
        const startListen = () => {
          if (!(this[S$._onAuthUnsubscribe] == null)) dart.assertFailed(null, I[52], 351, 16, "_onAuthUnsubscribe == null");
          this[S$._onAuthUnsubscribe] = this.jsObject.onAuthStateChanged(dart.assertInterop(nextWrapper), dart.assertInterop(errorWrapper));
        };
        dart.fn(startListen, T$.VoidTovoid());
        const stopListen = () => {
          dart.nullCheck(this[S$._onAuthUnsubscribe])();
          this[S$._onAuthUnsubscribe] = null;
        };
        dart.fn(stopListen, T$.VoidTovoid());
        this[S$._changeController] = T$.StreamControllerOfUserN().broadcast({onListen: startListen, onCancel: stopListen, sync: true});
      }
      return dart.nullCheck(this[S$._changeController]).stream;
    }
    get onIdTokenChanged() {
      if (this[S$._idTokenChangedController] == null) {
        let nextWrapper = js.allowInterop(T$.UserJsImplNToNull(), dart.fn(user => {
          dart.nullCheck(this[S$._idTokenChangedController]).add(auth$.User.getInstance(user));
        }, T$.UserJsImplNToNull()));
        let errorWrapper = js.allowInterop(T$.dynamicTovoid(), dart.fn(e => dart.nullCheck(this[S$._idTokenChangedController]).addError(core.Object.as(e)), T$.dynamicTovoid()));
        const startListen = () => {
          if (!(this[S$._onIdTokenChangedUnsubscribe] == null)) dart.assertFailed(null, I[52], 391, 16, "_onIdTokenChangedUnsubscribe == null");
          this[S$._onIdTokenChangedUnsubscribe] = this.jsObject.onIdTokenChanged(dart.assertInterop(nextWrapper), dart.assertInterop(errorWrapper));
        };
        dart.fn(startListen, T$.VoidTovoid());
        const stopListen = () => {
          dart.nullCheck(this[S$._onIdTokenChangedUnsubscribe])();
          this[S$._onIdTokenChangedUnsubscribe] = null;
        };
        dart.fn(stopListen, T$.VoidTovoid());
        this[S$._idTokenChangedController] = T$.StreamControllerOfUserN().broadcast({onListen: startListen, onCancel: stopListen, sync: true});
      }
      return dart.nullCheck(this[S$._idTokenChangedController]).stream;
    }
    static getInstance(jsObject) {
      let t97, t96, t95, t94;
      t94 = auth$.Auth._expando;
      t95 = jsObject;
      t96 = t94._get(t95);
      return t96 == null ? (t97 = new auth$.Auth._fromJsObject(jsObject), t94._set(t95, t97), t97) : t96;
    }
    static ['_#_fromJsObject#tearOff'](jsObject) {
      return new auth$.Auth._fromJsObject(jsObject);
    }
    applyActionCode(oobCode) {
      return utils.handleThenable(dart.dynamic, dart.global.firebase_auth.applyActionCode(this.jsObject, oobCode));
    }
    checkActionCode(code) {
      return utils.handleThenable(dart.packageJSType("firebase_auth.ActionCodeInfo", false), dart.global.firebase_auth.checkActionCode(this.jsObject, code));
    }
    confirmPasswordReset(code, newPassword) {
      return utils.handleThenable(dart.dynamic, dart.global.firebase_auth.confirmPasswordReset(this.jsObject, code, newPassword));
    }
    createUserWithEmailAndPassword(email, password) {
      return async.async(auth$.UserCredential, (function* createUserWithEmailAndPassword() {
        let u = (yield utils.handleThenable(dart.packageJSType("UserCredentialJsImpl", false), dart.global.firebase_auth.createUserWithEmailAndPassword(this.jsObject, email, password)));
        return new auth$.UserCredential.fromJsObject(u);
      }).bind(this));
    }
    fetchSignInMethodsForEmail(email) {
      return utils.handleThenable(core.List, dart.global.firebase_auth.fetchSignInMethodsForEmail(this.jsObject, email)).then(T$.ListOfString(), C[36] || CT.C36);
    }
    isSignInWithEmailLink(emailLink) {
      return dart.global.firebase_auth.isSignInWithEmailLink(emailLink);
    }
    getRedirectResult() {
      return utils.handleThenable(dart.packageJSType("UserCredentialJsImpl", false), dart.global.firebase_auth.getRedirectResult(this.jsObject)).then(auth$.UserCredential, C[33] || CT.C33);
    }
    sendSignInLinkToEmail(email, actionCodeSettings = null) {
      return utils.handleThenable(dart.dynamic, dart.global.firebase_auth.sendSignInLinkToEmail(this.jsObject, email, actionCodeSettings));
    }
    sendPasswordResetEmail(email, actionCodeSettings = null) {
      return utils.handleThenable(dart.dynamic, dart.global.firebase_auth.sendPasswordResetEmail(this.jsObject, email, actionCodeSettings));
    }
    setPersistence(persistence) {
      let instance = null;
      switch (persistence) {
        case C[38] || CT.C38:
          {
            instance = dart.global.firebase_auth.browserLocalPersistence;
            break;
          }
        case C[39] || CT.C39:
          {
            instance = dart.global.firebase_auth.browserSessionPersistence;
            break;
          }
        case C[40] || CT.C40:
          {
            instance = dart.global.firebase_auth.inMemoryPersistence;
            break;
          }
      }
      return utils.handleThenable(dart.dynamic, dart.global.firebase_auth.setPersistence(this.jsObject, instance));
    }
    signInWithCredential(credential) {
      return utils.handleThenable(dart.packageJSType("UserCredentialJsImpl", false), dart.global.firebase_auth.signInWithCredential(this.jsObject, credential)).then(auth$.UserCredential, C[33] || CT.C33);
    }
    signInAnonymously() {
      return utils.handleThenable(dart.packageJSType("UserCredentialJsImpl", false), dart.global.firebase_auth.signInAnonymously(this.jsObject)).then(auth$.UserCredential, C[33] || CT.C33);
    }
    signInWithCustomToken(token) {
      return utils.handleThenable(dart.packageJSType("UserCredentialJsImpl", false), dart.global.firebase_auth.signInWithCustomToken(this.jsObject, token)).then(auth$.UserCredential, C[33] || CT.C33);
    }
    signInAndRetrieveDataWithCustomToken(token) {
      return this.signInWithCustomToken(token);
    }
    signInWithEmailAndPassword(email, password) {
      return utils.handleThenable(dart.packageJSType("UserCredentialJsImpl", false), dart.global.firebase_auth.signInWithEmailAndPassword(this.jsObject, email, password)).then(auth$.UserCredential, C[33] || CT.C33);
    }
    signInWithEmailLink(email, emailLink) {
      return utils.handleThenable(dart.packageJSType("UserCredentialJsImpl", false), dart.global.firebase_auth.signInWithEmailLink(this.jsObject, email, emailLink)).then(auth$.UserCredential, C[33] || CT.C33);
    }
    signInWithPhoneNumber(phoneNumber, applicationVerifier) {
      return utils.handleThenable(dart.packageJSType("firebase_auth.ConfirmationResult", false), dart.global.firebase_auth.signInWithPhoneNumber(this.jsObject, phoneNumber, applicationVerifier.jsObject)).then(auth$.ConfirmationResult, C[34] || CT.C34);
    }
    signInWithPopup(provider) {
      return utils.handleThenable(dart.packageJSType("UserCredentialJsImpl", false), dart.global.firebase_auth.signInWithPopup(this.jsObject, provider.jsObject)).then(auth$.UserCredential, C[33] || CT.C33);
    }
    signInWithRedirect(provider) {
      return utils.handleThenable(dart.dynamic, dart.global.firebase_auth.signInWithRedirect(this.jsObject, provider.jsObject));
    }
    signOut() {
      return utils.handleThenable(dart.dynamic, this.jsObject.signOut());
    }
    useAuthEmulator(origin) {
      return dart.global.firebase_auth.connectAuthEmulator(this.jsObject, origin);
    }
    useDeviceLanguage() {
      return this.jsObject.useDeviceLanguage();
    }
    verifyPasswordResetCode(code) {
      return utils.handleThenable(core.String, dart.global.firebase_auth.verifyPasswordResetCode(this.jsObject, code));
    }
  };
  (auth$.Auth._fromJsObject = function(jsObject) {
    this[S$._onAuthUnsubscribe] = null;
    this[S$._changeController] = null;
    this[S$._onIdTokenChangedUnsubscribe] = null;
    this[S$._idTokenChangedController] = null;
    auth$.Auth.__proto__.fromJsObject.call(this, jsObject);
    ;
  }).prototype = auth$.Auth.prototype;
  dart.addTypeTests(auth$.Auth);
  dart.addTypeCaches(auth$.Auth);
  dart.setMethodSignature(auth$.Auth, () => ({
    __proto__: dart.getMethods(auth$.Auth.__proto__),
    applyActionCode: dart.fnType(async.Future, [core.String]),
    checkActionCode: dart.fnType(async.Future$(dart.packageJSType("firebase_auth.ActionCodeInfo", false)), [core.String]),
    confirmPasswordReset: dart.fnType(async.Future, [core.String, core.String]),
    createUserWithEmailAndPassword: dart.fnType(async.Future$(auth$.UserCredential), [core.String, core.String]),
    fetchSignInMethodsForEmail: dart.fnType(async.Future$(core.List$(core.String)), [core.String]),
    isSignInWithEmailLink: dart.fnType(core.bool, [core.String]),
    getRedirectResult: dart.fnType(async.Future$(auth$.UserCredential), []),
    sendSignInLinkToEmail: dart.fnType(async.Future, [core.String], [dart.nullable(dart.packageJSType("ActionCodeSettings", false))]),
    sendPasswordResetEmail: dart.fnType(async.Future, [core.String], [dart.nullable(dart.packageJSType("ActionCodeSettings", false))]),
    setPersistence: dart.fnType(async.Future, [types.Persistence]),
    signInWithCredential: dart.fnType(async.Future$(auth$.UserCredential), [dart.packageJSType("OAuthCredential", false)]),
    signInAnonymously: dart.fnType(async.Future$(auth$.UserCredential), []),
    signInWithCustomToken: dart.fnType(async.Future$(auth$.UserCredential), [core.String]),
    signInAndRetrieveDataWithCustomToken: dart.fnType(async.Future$(auth$.UserCredential), [core.String]),
    signInWithEmailAndPassword: dart.fnType(async.Future$(auth$.UserCredential), [core.String, core.String]),
    signInWithEmailLink: dart.fnType(async.Future$(auth$.UserCredential), [core.String, core.String]),
    signInWithPhoneNumber: dart.fnType(async.Future$(auth$.ConfirmationResult), [core.String, auth$.ApplicationVerifier$(dart.packageJSType("firebase_auth.ApplicationVerifier", false))]),
    signInWithPopup: dart.fnType(async.Future$(auth$.UserCredential), [auth$.AuthProvider$(dart.packageJSType("AuthProviderJsImpl", false))]),
    signInWithRedirect: dart.fnType(async.Future, [auth$.AuthProvider$(dart.packageJSType("AuthProviderJsImpl", false))]),
    signOut: dart.fnType(async.Future, []),
    useAuthEmulator: dart.fnType(dart.void, [core.String]),
    useDeviceLanguage: dart.fnType(dart.void, []),
    verifyPasswordResetCode: dart.fnType(async.Future$(core.String), [core.String])
  }));
  dart.setStaticMethodSignature(auth$.Auth, () => ['getInstance']);
  dart.setGetterSignature(auth$.Auth, () => ({
    __proto__: dart.getGetters(auth$.Auth.__proto__),
    app: app$.App,
    currentUser: dart.nullable(auth$.User),
    tenantId: dart.nullable(core.String),
    languageCode: core.String,
    settings: dart.packageJSType("AuthSettings", false),
    onAuthStateChanged: async.Stream$(dart.nullable(auth$.User)),
    onIdTokenChanged: async.Stream$(dart.nullable(auth$.User))
  }));
  dart.setSetterSignature(auth$.Auth, () => ({
    __proto__: dart.getSetters(auth$.Auth.__proto__),
    tenantId: dart.nullable(core.String),
    languageCode: dart.nullable(core.String)
  }));
  dart.setLibraryUri(auth$.Auth, I[51]);
  dart.setFieldSignature(auth$.Auth, () => ({
    __proto__: dart.getFields(auth$.Auth.__proto__),
    [S$._onAuthUnsubscribe]: dart.fieldType(dart.nullable(dart.fnType(dart.dynamic, []))),
    [S$._changeController]: dart.fieldType(dart.nullable(async.StreamController$(dart.nullable(auth$.User)))),
    [S$._onIdTokenChangedUnsubscribe]: dart.fieldType(dart.nullable(dart.fnType(dart.dynamic, []))),
    [S$._idTokenChangedController]: dart.fieldType(dart.nullable(async.StreamController$(dart.nullable(auth$.User))))
  }));
  dart.setStaticFieldSignature(auth$.Auth, () => ['_expando']);
  dart.defineLazy(auth$.Auth, {
    /*auth$.Auth._expando*/get _expando() {
      return new (T$.ExpandoOfAuth()).new();
    }
  }, false);
  const _is_AuthProvider_default = Symbol('_is_AuthProvider_default');
  auth$.AuthProvider$ = dart.generic(T => {
    class AuthProvider extends js$.JsObjectWrapper$(T) {
      get providerId() {
        return this.jsObject.providerId;
      }
    }
    (AuthProvider.fromJsObject = function(jsObject) {
      AuthProvider.__proto__.fromJsObject.call(this, jsObject);
      ;
    }).prototype = AuthProvider.prototype;
    dart.addTypeTests(AuthProvider);
    AuthProvider.prototype[_is_AuthProvider_default] = true;
    dart.addTypeCaches(AuthProvider);
    dart.setGetterSignature(AuthProvider, () => ({
      __proto__: dart.getGetters(AuthProvider.__proto__),
      providerId: core.String
    }));
    dart.setLibraryUri(AuthProvider, I[51]);
    return AuthProvider;
  });
  auth$.AuthProvider = auth$.AuthProvider$();
  dart.addTypeTests(auth$.AuthProvider, _is_AuthProvider_default);
  auth$.EmailAuthProvider = class EmailAuthProvider extends auth$.AuthProvider$(dart.packageJSType("firebase_auth.EmailAuthProvider", false)) {
    static new() {
      return new auth$.EmailAuthProvider.fromJsObject(new dart.global.firebase_auth.EmailAuthProvider());
    }
    static ['_#new#tearOff']() {
      return auth$.EmailAuthProvider.new();
    }
    static ['_#fromJsObject#tearOff'](jsObject) {
      return new auth$.EmailAuthProvider.fromJsObject(jsObject);
    }
    static credential(email, password) {
      return dart.packageJSType("OAuthCredential", false).as(dart.global.firebase_auth.EmailAuthProvider.credential(email, password));
    }
    static credentialWithLink(email, emailLink) {
      return dart.packageJSType("OAuthCredential", false).as(dart.global.firebase_auth.EmailAuthProvider.credentialWithLink(email, emailLink));
    }
  };
  (auth$.EmailAuthProvider.fromJsObject = function(jsObject) {
    auth$.EmailAuthProvider.__proto__.fromJsObject.call(this, jsObject);
    ;
  }).prototype = auth$.EmailAuthProvider.prototype;
  dart.addTypeTests(auth$.EmailAuthProvider);
  dart.addTypeCaches(auth$.EmailAuthProvider);
  dart.setStaticMethodSignature(auth$.EmailAuthProvider, () => ['new', 'credential', 'credentialWithLink']);
  dart.setLibraryUri(auth$.EmailAuthProvider, I[51]);
  dart.setStaticFieldSignature(auth$.EmailAuthProvider, () => ['PROVIDER_ID']);
  dart.defineLazy(auth$.EmailAuthProvider, {
    /*auth$.EmailAuthProvider.PROVIDER_ID*/get PROVIDER_ID() {
      return dart.global.firebase_auth.EmailAuthProvider.PROVIDER_ID;
    },
    set PROVIDER_ID(value) {}
  }, false);
  auth$.FacebookAuthProvider = class FacebookAuthProvider extends auth$.AuthProvider$(dart.packageJSType("firebase_auth.FacebookAuthProvider", false)) {
    static new() {
      return new auth$.FacebookAuthProvider.fromJsObject(new dart.global.firebase_auth.FacebookAuthProvider());
    }
    static ['_#new#tearOff']() {
      return auth$.FacebookAuthProvider.new();
    }
    static ['_#fromJsObject#tearOff'](jsObject) {
      return new auth$.FacebookAuthProvider.fromJsObject(jsObject);
    }
    addScope(scope) {
      return new auth$.FacebookAuthProvider.fromJsObject(this.jsObject.addScope(scope));
    }
    setCustomParameters(customOAuthParameters) {
      return new auth$.FacebookAuthProvider.fromJsObject(this.jsObject.setCustomParameters(utils$0.jsify(customOAuthParameters)));
    }
    static credential(token) {
      return dart.global.firebase_auth.FacebookAuthProvider.credential(token);
    }
  };
  (auth$.FacebookAuthProvider.fromJsObject = function(jsObject) {
    auth$.FacebookAuthProvider.__proto__.fromJsObject.call(this, jsObject);
    ;
  }).prototype = auth$.FacebookAuthProvider.prototype;
  dart.addTypeTests(auth$.FacebookAuthProvider);
  dart.addTypeCaches(auth$.FacebookAuthProvider);
  dart.setMethodSignature(auth$.FacebookAuthProvider, () => ({
    __proto__: dart.getMethods(auth$.FacebookAuthProvider.__proto__),
    addScope: dart.fnType(auth$.FacebookAuthProvider, [core.String]),
    setCustomParameters: dart.fnType(auth$.FacebookAuthProvider, [core.Map$(dart.nullable(core.Object), dart.nullable(core.Object))])
  }));
  dart.setStaticMethodSignature(auth$.FacebookAuthProvider, () => ['new', 'credential']);
  dart.setLibraryUri(auth$.FacebookAuthProvider, I[51]);
  dart.setStaticFieldSignature(auth$.FacebookAuthProvider, () => ['PROVIDER_ID']);
  dart.defineLazy(auth$.FacebookAuthProvider, {
    /*auth$.FacebookAuthProvider.PROVIDER_ID*/get PROVIDER_ID() {
      return dart.global.firebase_auth.FacebookAuthProvider.PROVIDER_ID;
    },
    set PROVIDER_ID(value) {}
  }, false);
  auth$.GithubAuthProvider = class GithubAuthProvider extends auth$.AuthProvider$(dart.packageJSType("firebase_auth.GithubAuthProvider", false)) {
    static new() {
      return new auth$.GithubAuthProvider.fromJsObject(new dart.global.firebase_auth.GithubAuthProvider());
    }
    static ['_#new#tearOff']() {
      return auth$.GithubAuthProvider.new();
    }
    static ['_#fromJsObject#tearOff'](jsObject) {
      return new auth$.GithubAuthProvider.fromJsObject(jsObject);
    }
    addScope(scope) {
      return new auth$.GithubAuthProvider.fromJsObject(this.jsObject.addScope(scope));
    }
    setCustomParameters(customOAuthParameters) {
      return new auth$.GithubAuthProvider.fromJsObject(this.jsObject.setCustomParameters(utils$0.jsify(customOAuthParameters)));
    }
    static credential(token) {
      return dart.global.firebase_auth.GithubAuthProvider.credential(token);
    }
  };
  (auth$.GithubAuthProvider.fromJsObject = function(jsObject) {
    auth$.GithubAuthProvider.__proto__.fromJsObject.call(this, jsObject);
    ;
  }).prototype = auth$.GithubAuthProvider.prototype;
  dart.addTypeTests(auth$.GithubAuthProvider);
  dart.addTypeCaches(auth$.GithubAuthProvider);
  dart.setMethodSignature(auth$.GithubAuthProvider, () => ({
    __proto__: dart.getMethods(auth$.GithubAuthProvider.__proto__),
    addScope: dart.fnType(auth$.GithubAuthProvider, [core.String]),
    setCustomParameters: dart.fnType(auth$.GithubAuthProvider, [core.Map$(dart.nullable(core.Object), dart.nullable(core.Object))])
  }));
  dart.setStaticMethodSignature(auth$.GithubAuthProvider, () => ['new', 'credential']);
  dart.setLibraryUri(auth$.GithubAuthProvider, I[51]);
  dart.setStaticFieldSignature(auth$.GithubAuthProvider, () => ['PROVIDER_ID']);
  dart.defineLazy(auth$.GithubAuthProvider, {
    /*auth$.GithubAuthProvider.PROVIDER_ID*/get PROVIDER_ID() {
      return dart.global.firebase_auth.GithubAuthProvider.PROVIDER_ID;
    },
    set PROVIDER_ID(value) {}
  }, false);
  auth$.GoogleAuthProvider = class GoogleAuthProvider extends auth$.AuthProvider$(dart.packageJSType("firebase_auth.GoogleAuthProvider", false)) {
    static new() {
      return new auth$.GoogleAuthProvider.fromJsObject(new dart.global.firebase_auth.GoogleAuthProvider());
    }
    static ['_#new#tearOff']() {
      return auth$.GoogleAuthProvider.new();
    }
    static ['_#fromJsObject#tearOff'](jsObject) {
      return new auth$.GoogleAuthProvider.fromJsObject(jsObject);
    }
    addScope(scope) {
      return new auth$.GoogleAuthProvider.fromJsObject(this.jsObject.addScope(scope));
    }
    setCustomParameters(customOAuthParameters) {
      return new auth$.GoogleAuthProvider.fromJsObject(this.jsObject.setCustomParameters(utils$0.jsify(customOAuthParameters)));
    }
    static credential(idToken = null, accessToken = null) {
      return dart.global.firebase_auth.GoogleAuthProvider.credential(idToken, accessToken);
    }
  };
  (auth$.GoogleAuthProvider.fromJsObject = function(jsObject) {
    auth$.GoogleAuthProvider.__proto__.fromJsObject.call(this, jsObject);
    ;
  }).prototype = auth$.GoogleAuthProvider.prototype;
  dart.addTypeTests(auth$.GoogleAuthProvider);
  dart.addTypeCaches(auth$.GoogleAuthProvider);
  dart.setMethodSignature(auth$.GoogleAuthProvider, () => ({
    __proto__: dart.getMethods(auth$.GoogleAuthProvider.__proto__),
    addScope: dart.fnType(auth$.GoogleAuthProvider, [core.String]),
    setCustomParameters: dart.fnType(auth$.GoogleAuthProvider, [core.Map$(dart.nullable(core.Object), dart.nullable(core.Object))])
  }));
  dart.setStaticMethodSignature(auth$.GoogleAuthProvider, () => ['new', 'credential']);
  dart.setLibraryUri(auth$.GoogleAuthProvider, I[51]);
  dart.setStaticFieldSignature(auth$.GoogleAuthProvider, () => ['PROVIDER_ID']);
  dart.defineLazy(auth$.GoogleAuthProvider, {
    /*auth$.GoogleAuthProvider.PROVIDER_ID*/get PROVIDER_ID() {
      return dart.global.firebase_auth.GoogleAuthProvider.PROVIDER_ID;
    },
    set PROVIDER_ID(value) {}
  }, false);
  auth$.OAuthProvider = class OAuthProvider extends auth$.AuthProvider$(dart.packageJSType("firebase_auth.OAuthProvider", false)) {
    static new(providerId) {
      return new auth$.OAuthProvider.fromJsObject(new dart.global.firebase_auth.OAuthProvider(providerId));
    }
    static ['_#new#tearOff'](providerId) {
      return auth$.OAuthProvider.new(providerId);
    }
    static ['_#fromJsObject#tearOff'](jsObject) {
      return new auth$.OAuthProvider.fromJsObject(jsObject);
    }
    addScope(scope) {
      return new auth$.OAuthProvider.fromJsObject(this.jsObject.addScope(scope));
    }
    setCustomParameters(customOAuthParameters) {
      return new auth$.OAuthProvider.fromJsObject(this.jsObject.setCustomParameters(utils$0.jsify(customOAuthParameters)));
    }
    credential(credentialOptions) {
      return this.jsObject.credential(credentialOptions);
    }
  };
  (auth$.OAuthProvider.fromJsObject = function(jsObject) {
    auth$.OAuthProvider.__proto__.fromJsObject.call(this, jsObject);
    ;
  }).prototype = auth$.OAuthProvider.prototype;
  dart.addTypeTests(auth$.OAuthProvider);
  dart.addTypeCaches(auth$.OAuthProvider);
  dart.setMethodSignature(auth$.OAuthProvider, () => ({
    __proto__: dart.getMethods(auth$.OAuthProvider.__proto__),
    addScope: dart.fnType(auth$.OAuthProvider, [core.String]),
    setCustomParameters: dart.fnType(auth$.OAuthProvider, [core.Map$(dart.nullable(core.Object), dart.nullable(core.Object))]),
    credential: dart.fnType(dart.packageJSType("OAuthCredential", false), [dart.packageJSType("OAuthCredentialOptions", false)])
  }));
  dart.setStaticMethodSignature(auth$.OAuthProvider, () => ['new']);
  dart.setLibraryUri(auth$.OAuthProvider, I[51]);
  auth$.TwitterAuthProvider = class TwitterAuthProvider extends auth$.AuthProvider$(dart.packageJSType("firebase_auth.TwitterAuthProvider", false)) {
    static new() {
      return new auth$.TwitterAuthProvider.fromJsObject(new dart.global.firebase_auth.TwitterAuthProvider());
    }
    static ['_#new#tearOff']() {
      return auth$.TwitterAuthProvider.new();
    }
    static ['_#fromJsObject#tearOff'](jsObject) {
      return new auth$.TwitterAuthProvider.fromJsObject(jsObject);
    }
    setCustomParameters(customOAuthParameters) {
      return new auth$.TwitterAuthProvider.fromJsObject(this.jsObject.setCustomParameters(utils$0.jsify(customOAuthParameters)));
    }
    static credential(token, secret) {
      return dart.global.firebase_auth.TwitterAuthProvider.credential(token, secret);
    }
  };
  (auth$.TwitterAuthProvider.fromJsObject = function(jsObject) {
    auth$.TwitterAuthProvider.__proto__.fromJsObject.call(this, jsObject);
    ;
  }).prototype = auth$.TwitterAuthProvider.prototype;
  dart.addTypeTests(auth$.TwitterAuthProvider);
  dart.addTypeCaches(auth$.TwitterAuthProvider);
  dart.setMethodSignature(auth$.TwitterAuthProvider, () => ({
    __proto__: dart.getMethods(auth$.TwitterAuthProvider.__proto__),
    setCustomParameters: dart.fnType(auth$.TwitterAuthProvider, [core.Map$(dart.nullable(core.Object), dart.nullable(core.Object))])
  }));
  dart.setStaticMethodSignature(auth$.TwitterAuthProvider, () => ['new', 'credential']);
  dart.setLibraryUri(auth$.TwitterAuthProvider, I[51]);
  dart.setStaticFieldSignature(auth$.TwitterAuthProvider, () => ['PROVIDER_ID']);
  dart.defineLazy(auth$.TwitterAuthProvider, {
    /*auth$.TwitterAuthProvider.PROVIDER_ID*/get PROVIDER_ID() {
      return dart.global.firebase_auth.TwitterAuthProvider.PROVIDER_ID;
    },
    set PROVIDER_ID(value) {}
  }, false);
  auth$.PhoneAuthProvider = class PhoneAuthProvider extends auth$.AuthProvider$(dart.packageJSType("firebase_auth.PhoneAuthProvider", false)) {
    static get PROVIDER_ID() {
      return dart.global.firebase_auth.PhoneAuthProvider.PROVIDER_ID;
    }
    static new(auth = null) {
      return new auth$.PhoneAuthProvider.fromJsObject(auth != null ? new dart.global.firebase_auth.PhoneAuthProvider(auth.jsObject) : new dart.global.firebase_auth.PhoneAuthProvider());
    }
    static ['_#new#tearOff'](auth = null) {
      return auth$.PhoneAuthProvider.new(auth);
    }
    static ['_#fromJsObject#tearOff'](jsObject) {
      return new auth$.PhoneAuthProvider.fromJsObject(jsObject);
    }
    verifyPhoneNumber(phoneNumber, applicationVerifier) {
      return utils.handleThenable(core.String, this.jsObject.verifyPhoneNumber(phoneNumber, applicationVerifier.jsObject));
    }
    static credential(verificationId, verificationCode) {
      return dart.packageJSType("OAuthCredential", false).as(dart.global.firebase_auth.PhoneAuthProvider.credential(verificationId, verificationCode));
    }
  };
  (auth$.PhoneAuthProvider.fromJsObject = function(jsObject) {
    auth$.PhoneAuthProvider.__proto__.fromJsObject.call(this, jsObject);
    ;
  }).prototype = auth$.PhoneAuthProvider.prototype;
  dart.addTypeTests(auth$.PhoneAuthProvider);
  dart.addTypeCaches(auth$.PhoneAuthProvider);
  dart.setMethodSignature(auth$.PhoneAuthProvider, () => ({
    __proto__: dart.getMethods(auth$.PhoneAuthProvider.__proto__),
    verifyPhoneNumber: dart.fnType(async.Future$(core.String), [core.String, auth$.ApplicationVerifier$(dart.packageJSType("firebase_auth.ApplicationVerifier", false))])
  }));
  dart.setStaticMethodSignature(auth$.PhoneAuthProvider, () => ['new', 'credential']);
  dart.setStaticGetterSignature(auth$.PhoneAuthProvider, () => ['PROVIDER_ID']);
  dart.setLibraryUri(auth$.PhoneAuthProvider, I[51]);
  const _is_ApplicationVerifier_default = Symbol('_is_ApplicationVerifier_default');
  auth$.ApplicationVerifier$ = dart.generic(T => {
    class ApplicationVerifier extends js$.JsObjectWrapper$(T) {
      get type() {
        return this.jsObject.type;
      }
      verify() {
        return utils.handleThenable(core.String, this.jsObject.verify());
      }
    }
    (ApplicationVerifier.fromJsObject = function(jsObject) {
      ApplicationVerifier.__proto__.fromJsObject.call(this, jsObject);
      ;
    }).prototype = ApplicationVerifier.prototype;
    dart.addTypeTests(ApplicationVerifier);
    ApplicationVerifier.prototype[_is_ApplicationVerifier_default] = true;
    dart.addTypeCaches(ApplicationVerifier);
    dart.setMethodSignature(ApplicationVerifier, () => ({
      __proto__: dart.getMethods(ApplicationVerifier.__proto__),
      verify: dart.fnType(async.Future$(core.String), [])
    }));
    dart.setGetterSignature(ApplicationVerifier, () => ({
      __proto__: dart.getGetters(ApplicationVerifier.__proto__),
      type: core.String
    }));
    dart.setLibraryUri(ApplicationVerifier, I[51]);
    return ApplicationVerifier;
  });
  auth$.ApplicationVerifier = auth$.ApplicationVerifier$();
  dart.addTypeTests(auth$.ApplicationVerifier, _is_ApplicationVerifier_default);
  auth$.RecaptchaVerifier = class RecaptchaVerifier extends auth$.ApplicationVerifier$(dart.packageJSType("firebase_auth.RecaptchaVerifier", false)) {
    static new(container, parameters = null, app = null) {
      return parameters != null ? app != null ? new auth$.RecaptchaVerifier.fromJsObject(new dart.global.firebase_auth.RecaptchaVerifier(container, utils$0.jsify(parameters), app.jsObject)) : new auth$.RecaptchaVerifier.fromJsObject(new dart.global.firebase_auth.RecaptchaVerifier(container, utils$0.jsify(parameters))) : new auth$.RecaptchaVerifier.fromJsObject(new dart.global.firebase_auth.RecaptchaVerifier(container));
    }
    static ['_#new#tearOff'](container, parameters = null, app = null) {
      return auth$.RecaptchaVerifier.new(container, parameters, app);
    }
    static ['_#fromJsObject#tearOff'](jsObject) {
      return new auth$.RecaptchaVerifier.fromJsObject(jsObject);
    }
    clear() {
      return this.jsObject.clear();
    }
    render() {
      return utils.handleThenable(core.num, this.jsObject.render());
    }
  };
  (auth$.RecaptchaVerifier.fromJsObject = function(jsObject) {
    auth$.RecaptchaVerifier.__proto__.fromJsObject.call(this, jsObject);
    ;
  }).prototype = auth$.RecaptchaVerifier.prototype;
  dart.addTypeTests(auth$.RecaptchaVerifier);
  dart.addTypeCaches(auth$.RecaptchaVerifier);
  dart.setMethodSignature(auth$.RecaptchaVerifier, () => ({
    __proto__: dart.getMethods(auth$.RecaptchaVerifier.__proto__),
    clear: dart.fnType(dart.void, []),
    render: dart.fnType(async.Future$(core.num), [])
  }));
  dart.setStaticMethodSignature(auth$.RecaptchaVerifier, () => ['new']);
  dart.setLibraryUri(auth$.RecaptchaVerifier, I[51]);
  auth$.ConfirmationResult = class ConfirmationResult extends js$.JsObjectWrapper$(dart.packageJSType("firebase_auth.ConfirmationResult", false)) {
    get verificationId() {
      return this.jsObject.verificationId;
    }
    static ['_#fromJsObject#tearOff'](jsObject) {
      return new auth$.ConfirmationResult.fromJsObject(jsObject);
    }
    confirm(verificationCode) {
      return utils.handleThenable(dart.packageJSType("UserCredentialJsImpl", false), this.jsObject.confirm(verificationCode)).then(auth$.UserCredential, C[33] || CT.C33);
    }
  };
  (auth$.ConfirmationResult.fromJsObject = function(jsObject) {
    auth$.ConfirmationResult.__proto__.fromJsObject.call(this, jsObject);
    ;
  }).prototype = auth$.ConfirmationResult.prototype;
  dart.addTypeTests(auth$.ConfirmationResult);
  dart.addTypeCaches(auth$.ConfirmationResult);
  dart.setMethodSignature(auth$.ConfirmationResult, () => ({
    __proto__: dart.getMethods(auth$.ConfirmationResult.__proto__),
    confirm: dart.fnType(async.Future$(auth$.UserCredential), [core.String])
  }));
  dart.setGetterSignature(auth$.ConfirmationResult, () => ({
    __proto__: dart.getGetters(auth$.ConfirmationResult.__proto__),
    verificationId: core.String
  }));
  dart.setLibraryUri(auth$.ConfirmationResult, I[51]);
  auth$.UserCredential = class UserCredential extends js$.JsObjectWrapper$(dart.packageJSType("UserCredentialJsImpl", false)) {
    get user() {
      return auth$.User.getInstance(this.jsObject.user);
    }
    get credential() {
      return this.jsObject.credential;
    }
    get operationType() {
      return this.jsObject.operationType;
    }
    get additionalUserInfo() {
      return new auth$.AdditionalUserInfo.fromJsObject(dart.global.firebase_auth.getAdditionalUserInfo(this.jsObject));
    }
    static ['_#fromJsObject#tearOff'](jsObject) {
      return new auth$.UserCredential.fromJsObject(jsObject);
    }
  };
  (auth$.UserCredential.fromJsObject = function(jsObject) {
    auth$.UserCredential.__proto__.fromJsObject.call(this, jsObject);
    ;
  }).prototype = auth$.UserCredential.prototype;
  dart.addTypeTests(auth$.UserCredential);
  dart.addTypeCaches(auth$.UserCredential);
  dart.setGetterSignature(auth$.UserCredential, () => ({
    __proto__: dart.getGetters(auth$.UserCredential.__proto__),
    user: dart.nullable(auth$.User),
    credential: dart.packageJSType("OAuthCredential", false),
    operationType: core.String,
    additionalUserInfo: dart.nullable(auth$.AdditionalUserInfo)
  }));
  dart.setLibraryUri(auth$.UserCredential, I[51]);
  auth$.AdditionalUserInfo = class AdditionalUserInfo extends js$.JsObjectWrapper$(dart.packageJSType("AdditionalUserInfoJsImpl", false)) {
    get providerId() {
      return this.jsObject.providerId;
    }
    get profile() {
      return T$.MapNOfString$dynamic().as(utils$0.dartify(this.jsObject.profile));
    }
    get username() {
      return this.jsObject.username;
    }
    get isNewUser() {
      return this.jsObject.isNewUser;
    }
    static ['_#fromJsObject#tearOff'](jsObject) {
      return new auth$.AdditionalUserInfo.fromJsObject(jsObject);
    }
  };
  (auth$.AdditionalUserInfo.fromJsObject = function(jsObject) {
    auth$.AdditionalUserInfo.__proto__.fromJsObject.call(this, jsObject);
    ;
  }).prototype = auth$.AdditionalUserInfo.prototype;
  dart.addTypeTests(auth$.AdditionalUserInfo);
  dart.addTypeCaches(auth$.AdditionalUserInfo);
  dart.setGetterSignature(auth$.AdditionalUserInfo, () => ({
    __proto__: dart.getGetters(auth$.AdditionalUserInfo.__proto__),
    providerId: core.String,
    profile: dart.nullable(core.Map$(core.String, dart.dynamic)),
    username: core.String,
    isNewUser: core.bool
  }));
  dart.setLibraryUri(auth$.AdditionalUserInfo, I[51]);
  auth$.getAuthInstance = function getAuthInstance(app) {
    return auth$.Auth.getInstance(dart.global.firebase_auth.initializeAuth(app.jsObject, utils$0.jsify(new (T$.IdentityMapOfString$Map()).from(["errorMap", dart.global.firebase_auth.debugErrorMap]))));
  };
  firebase_core_platform_interface.FirebaseException = class FirebaseException extends core.Object {
    get plugin() {
      return this[S$.plugin];
    }
    set plugin(value) {
      super.plugin = value;
    }
    get message() {
      return this[S$.message$1];
    }
    set message(value) {
      super.message = value;
    }
    get code() {
      return this[S$.code];
    }
    set code(value) {
      super.code = value;
    }
    get stackTrace() {
      return this[S$.stackTrace];
    }
    set stackTrace(value) {
      super.stackTrace = value;
    }
    static ['_#new#tearOff'](opts) {
      let plugin = opts && 'plugin' in opts ? opts.plugin : null;
      let message = opts && 'message' in opts ? opts.message : null;
      let code = opts && 'code' in opts ? opts.code : null;
      let stackTrace = opts && 'stackTrace' in opts ? opts.stackTrace : null;
      return new firebase_core_platform_interface.FirebaseException.new({plugin: plugin, message: message, code: code, stackTrace: stackTrace});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!firebase_core_platform_interface.FirebaseException.is(other)) return false;
      return other.hashCode === this.hashCode;
    }
    get hashCode() {
      return core.Object.hash(this.plugin, this.code, this.message);
    }
    toString() {
      let output = "[" + this.plugin + "/" + this.code + "] " + dart.str(this.message);
      if (this.stackTrace != null) {
        output = output + ("\n\n" + dart.toString(this.stackTrace));
      }
      return output;
    }
  };
  (firebase_core_platform_interface.FirebaseException.new = function(opts) {
    let t94;
    let plugin = opts && 'plugin' in opts ? opts.plugin : null;
    let message = opts && 'message' in opts ? opts.message : null;
    let code = opts && 'code' in opts ? opts.code : null;
    let stackTrace = opts && 'stackTrace' in opts ? opts.stackTrace : null;
    this[S$.plugin] = plugin;
    this[S$.message$1] = message;
    this[S$.stackTrace] = stackTrace;
    this[S$.code] = (t94 = code, t94 == null ? "unknown" : t94);
    ;
  }).prototype = firebase_core_platform_interface.FirebaseException.prototype;
  dart.addTypeTests(firebase_core_platform_interface.FirebaseException);
  dart.addTypeCaches(firebase_core_platform_interface.FirebaseException);
  firebase_core_platform_interface.FirebaseException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(firebase_core_platform_interface.FirebaseException, I[12]);
  dart.setFieldSignature(firebase_core_platform_interface.FirebaseException, () => ({
    __proto__: dart.getFields(firebase_core_platform_interface.FirebaseException.__proto__),
    plugin: dart.finalFieldType(core.String),
    message: dart.finalFieldType(dart.nullable(core.String)),
    code: dart.finalFieldType(core.String),
    stackTrace: dart.finalFieldType(dart.nullable(core.StackTrace))
  }));
  dart.defineExtensionMethods(firebase_core_platform_interface.FirebaseException, ['_equals', 'toString']);
  dart.defineExtensionAccessors(firebase_core_platform_interface.FirebaseException, ['hashCode']);
  firebase_core_platform_interface.FirebaseOptions = class FirebaseOptions extends core.Object {
    get apiKey() {
      return this[S$.apiKey];
    }
    set apiKey(value) {
      super.apiKey = value;
    }
    get appId() {
      return this[S$.appId];
    }
    set appId(value) {
      super.appId = value;
    }
    get messagingSenderId() {
      return this[S$.messagingSenderId];
    }
    set messagingSenderId(value) {
      super.messagingSenderId = value;
    }
    get projectId() {
      return this[S$.projectId];
    }
    set projectId(value) {
      super.projectId = value;
    }
    get authDomain() {
      return this[S$.authDomain];
    }
    set authDomain(value) {
      super.authDomain = value;
    }
    get databaseURL() {
      return this[S$.databaseURL];
    }
    set databaseURL(value) {
      super.databaseURL = value;
    }
    get storageBucket() {
      return this[S$.storageBucket];
    }
    set storageBucket(value) {
      super.storageBucket = value;
    }
    get measurementId() {
      return this[S$.measurementId];
    }
    set measurementId(value) {
      super.measurementId = value;
    }
    get trackingId() {
      return this[S$.trackingId];
    }
    set trackingId(value) {
      super.trackingId = value;
    }
    get deepLinkURLScheme() {
      return this[S$.deepLinkURLScheme];
    }
    set deepLinkURLScheme(value) {
      super.deepLinkURLScheme = value;
    }
    get androidClientId() {
      return this[S$.androidClientId];
    }
    set androidClientId(value) {
      super.androidClientId = value;
    }
    get iosClientId() {
      return this[S$.iosClientId];
    }
    set iosClientId(value) {
      super.iosClientId = value;
    }
    get iosBundleId() {
      return this[S$.iosBundleId];
    }
    set iosBundleId(value) {
      super.iosBundleId = value;
    }
    get appGroupId() {
      return this[S$.appGroupId];
    }
    set appGroupId(value) {
      super.appGroupId = value;
    }
    static ['_#new#tearOff'](opts) {
      let apiKey = opts && 'apiKey' in opts ? opts.apiKey : null;
      let appId = opts && 'appId' in opts ? opts.appId : null;
      let messagingSenderId = opts && 'messagingSenderId' in opts ? opts.messagingSenderId : null;
      let projectId = opts && 'projectId' in opts ? opts.projectId : null;
      let authDomain = opts && 'authDomain' in opts ? opts.authDomain : null;
      let databaseURL = opts && 'databaseURL' in opts ? opts.databaseURL : null;
      let storageBucket = opts && 'storageBucket' in opts ? opts.storageBucket : null;
      let measurementId = opts && 'measurementId' in opts ? opts.measurementId : null;
      let trackingId = opts && 'trackingId' in opts ? opts.trackingId : null;
      let deepLinkURLScheme = opts && 'deepLinkURLScheme' in opts ? opts.deepLinkURLScheme : null;
      let androidClientId = opts && 'androidClientId' in opts ? opts.androidClientId : null;
      let iosClientId = opts && 'iosClientId' in opts ? opts.iosClientId : null;
      let iosBundleId = opts && 'iosBundleId' in opts ? opts.iosBundleId : null;
      let appGroupId = opts && 'appGroupId' in opts ? opts.appGroupId : null;
      return new firebase_core_platform_interface.FirebaseOptions.new({apiKey: apiKey, appId: appId, messagingSenderId: messagingSenderId, projectId: projectId, authDomain: authDomain, databaseURL: databaseURL, storageBucket: storageBucket, measurementId: measurementId, trackingId: trackingId, deepLinkURLScheme: deepLinkURLScheme, androidClientId: androidClientId, iosClientId: iosClientId, iosBundleId: iosBundleId, appGroupId: appGroupId});
    }
    static ['_#fromPigeon#tearOff'](options) {
      return new firebase_core_platform_interface.FirebaseOptions.fromPigeon(options);
    }
    get asMap() {
      return new (T$.IdentityMapOfString$StringN()).from(["apiKey", this.apiKey, "appId", this.appId, "messagingSenderId", this.messagingSenderId, "projectId", this.projectId, "authDomain", this.authDomain, "databaseURL", this.databaseURL, "storageBucket", this.storageBucket, "measurementId", this.measurementId, "trackingId", this.trackingId, "deepLinkURLScheme", this.deepLinkURLScheme, "androidClientId", this.androidClientId, "iosClientId", this.iosClientId, "iosBundleId", this.iosBundleId, "appGroupId", this.appGroupId]);
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!firebase_core_platform_interface.FirebaseOptions.is(other)) return false;
      return (C[41] || CT.C41).equals(this.asMap, other.asMap);
    }
    get hashCode() {
      return (C[41] || CT.C41).hash(this.asMap);
    }
    toString() {
      return this.asMap[S$.$toString]();
    }
  };
  (firebase_core_platform_interface.FirebaseOptions.new = function(opts) {
    let apiKey = opts && 'apiKey' in opts ? opts.apiKey : null;
    let appId = opts && 'appId' in opts ? opts.appId : null;
    let messagingSenderId = opts && 'messagingSenderId' in opts ? opts.messagingSenderId : null;
    let projectId = opts && 'projectId' in opts ? opts.projectId : null;
    let authDomain = opts && 'authDomain' in opts ? opts.authDomain : null;
    let databaseURL = opts && 'databaseURL' in opts ? opts.databaseURL : null;
    let storageBucket = opts && 'storageBucket' in opts ? opts.storageBucket : null;
    let measurementId = opts && 'measurementId' in opts ? opts.measurementId : null;
    let trackingId = opts && 'trackingId' in opts ? opts.trackingId : null;
    let deepLinkURLScheme = opts && 'deepLinkURLScheme' in opts ? opts.deepLinkURLScheme : null;
    let androidClientId = opts && 'androidClientId' in opts ? opts.androidClientId : null;
    let iosClientId = opts && 'iosClientId' in opts ? opts.iosClientId : null;
    let iosBundleId = opts && 'iosBundleId' in opts ? opts.iosBundleId : null;
    let appGroupId = opts && 'appGroupId' in opts ? opts.appGroupId : null;
    this[S$.apiKey] = apiKey;
    this[S$.appId] = appId;
    this[S$.messagingSenderId] = messagingSenderId;
    this[S$.projectId] = projectId;
    this[S$.authDomain] = authDomain;
    this[S$.databaseURL] = databaseURL;
    this[S$.storageBucket] = storageBucket;
    this[S$.measurementId] = measurementId;
    this[S$.trackingId] = trackingId;
    this[S$.deepLinkURLScheme] = deepLinkURLScheme;
    this[S$.androidClientId] = androidClientId;
    this[S$.iosClientId] = iosClientId;
    this[S$.iosBundleId] = iosBundleId;
    this[S$.appGroupId] = appGroupId;
    ;
  }).prototype = firebase_core_platform_interface.FirebaseOptions.prototype;
  (firebase_core_platform_interface.FirebaseOptions.fromPigeon = function(options) {
    this[S$.apiKey] = options.apiKey;
    this[S$.appId] = options.appId;
    this[S$.messagingSenderId] = options.messagingSenderId;
    this[S$.projectId] = options.projectId;
    this[S$.authDomain] = options.authDomain;
    this[S$.databaseURL] = options.databaseURL;
    this[S$.storageBucket] = options.storageBucket;
    this[S$.measurementId] = options.measurementId;
    this[S$.trackingId] = options.trackingId;
    this[S$.deepLinkURLScheme] = options.deepLinkURLScheme;
    this[S$.androidClientId] = options.androidClientId;
    this[S$.iosClientId] = options.iosClientId;
    this[S$.iosBundleId] = options.iosBundleId;
    this[S$.appGroupId] = options.appGroupId;
    ;
  }).prototype = firebase_core_platform_interface.FirebaseOptions.prototype;
  dart.addTypeTests(firebase_core_platform_interface.FirebaseOptions);
  dart.addTypeCaches(firebase_core_platform_interface.FirebaseOptions);
  dart.setGetterSignature(firebase_core_platform_interface.FirebaseOptions, () => ({
    __proto__: dart.getGetters(firebase_core_platform_interface.FirebaseOptions.__proto__),
    asMap: core.Map$(core.String, dart.nullable(core.String))
  }));
  dart.setLibraryUri(firebase_core_platform_interface.FirebaseOptions, I[12]);
  dart.setFieldSignature(firebase_core_platform_interface.FirebaseOptions, () => ({
    __proto__: dart.getFields(firebase_core_platform_interface.FirebaseOptions.__proto__),
    apiKey: dart.finalFieldType(core.String),
    appId: dart.finalFieldType(core.String),
    messagingSenderId: dart.finalFieldType(core.String),
    projectId: dart.finalFieldType(core.String),
    authDomain: dart.finalFieldType(dart.nullable(core.String)),
    databaseURL: dart.finalFieldType(dart.nullable(core.String)),
    storageBucket: dart.finalFieldType(dart.nullable(core.String)),
    measurementId: dart.finalFieldType(dart.nullable(core.String)),
    trackingId: dart.finalFieldType(dart.nullable(core.String)),
    deepLinkURLScheme: dart.finalFieldType(dart.nullable(core.String)),
    androidClientId: dart.finalFieldType(dart.nullable(core.String)),
    iosClientId: dart.finalFieldType(dart.nullable(core.String)),
    iosBundleId: dart.finalFieldType(dart.nullable(core.String)),
    appGroupId: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(firebase_core_platform_interface.FirebaseOptions, ['_equals', 'toString']);
  dart.defineExtensionAccessors(firebase_core_platform_interface.FirebaseOptions, ['hashCode']);
  firebase_core_platform_interface.MethodChannelFirebase = class MethodChannelFirebase extends firebase_core_platform_interface.FirebasePlatform {
    [S$._initializeCore$1]() {
      return async.async(dart.void, (function* _initializeCore() {
        let apps = (yield firebase_core_platform_interface.MethodChannelFirebase.api.initializeCore());
        apps[S$.$where](dart.fn(element => element != null, T$.PigeonInitializeResponseNTobool()))[S$.$cast](messages$46pigeon.PigeonInitializeResponse)[S$.$forEach](dart.bind(this, S$._initializeFirebaseAppFromMap));
        firebase_core_platform_interface.MethodChannelFirebase.isCoreInitialized = true;
      }).bind(this));
    }
    [S$._initializeFirebaseAppFromMap](response) {
      let methodChannelFirebaseApp = new firebase_core_platform_interface.MethodChannelFirebaseApp.new(response.name, new firebase_core_platform_interface.FirebaseOptions.fromPigeon(response.options), {isAutomaticDataCollectionEnabled: response.isAutomaticDataCollectionEnabled});
      firebase_core_platform_interface.MethodChannelFirebase.appInstances[S$.$_set](methodChannelFirebaseApp.name, methodChannelFirebaseApp);
      firebase_core_platform_interface.FirebasePluginPlatform._constantsForPluginApps[S$.$_set](methodChannelFirebaseApp.name, response.pluginConstants);
    }
    get apps() {
      return firebase_core_platform_interface.MethodChannelFirebase.appInstances[S$.$values][S$.$toList]({growable: false});
    }
    initializeApp(opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let options = opts && 'options' in opts ? opts.options : null;
      return async.async(firebase_core_platform_interface.FirebaseAppPlatform, (function* initializeApp() {
        if (!firebase_core_platform_interface.MethodChannelFirebase.isCoreInitialized) {
          yield this[S$._initializeCore$1]();
        }
        if (name == null || name === "[DEFAULT]") {
          let defaultApp = firebase_core_platform_interface.MethodChannelFirebase.appInstances[S$.$_get]("[DEFAULT]");
          let _options = options;
          if (platform.defaultTargetPlatform === platform.TargetPlatform.android && defaultApp == null && _options == null) {
            let options = (yield firebase_core_platform_interface.MethodChannelFirebase.api.optionsFromResource());
            _options = new firebase_core_platform_interface.FirebaseOptions.fromPigeon(options);
          }
          if (defaultApp == null && _options != null) {
            this[S$._initializeFirebaseAppFromMap](yield firebase_core_platform_interface.MethodChannelFirebase.api.initializeApp("[DEFAULT]", new messages$46pigeon.PigeonFirebaseOptions.new({apiKey: _options.apiKey, appId: _options.appId, messagingSenderId: _options.messagingSenderId, projectId: _options.projectId, authDomain: _options.authDomain, databaseURL: _options.databaseURL, storageBucket: _options.storageBucket, measurementId: _options.measurementId, trackingId: _options.trackingId, deepLinkURLScheme: _options.deepLinkURLScheme, androidClientId: _options.androidClientId, iosClientId: _options.iosClientId, iosBundleId: _options.iosBundleId, appGroupId: _options.appGroupId})));
            defaultApp = firebase_core_platform_interface.MethodChannelFirebase.appInstances[S$.$_get]("[DEFAULT]");
          }
          if (defaultApp == null && _options == null) {
            dart.throw(firebase_core_platform_interface.coreNotInitialized());
          }
          if (defaultApp != null && _options != null) {
            if (_options.apiKey !== defaultApp.options.apiKey || _options.databaseURL != null && _options.databaseURL != defaultApp.options.databaseURL || _options.storageBucket != null && _options.storageBucket != defaultApp.options.storageBucket) {
              dart.throw(firebase_core_platform_interface.duplicateApp("[DEFAULT]"));
            }
          }
          return dart.nullCheck(firebase_core_platform_interface.MethodChannelFirebase.appInstances[S$.$_get]("[DEFAULT]"));
        }
        if (!(options != null)) dart.assertFailed("FirebaseOptions cannot be null when creating a secondary Firebase app.", I[53], 143, 7, "options != null");
        if (firebase_core_platform_interface.MethodChannelFirebase.appInstances[S$.$containsKey](name)) {
          let existingApp = dart.nullCheck(firebase_core_platform_interface.MethodChannelFirebase.appInstances[S$.$_get](name));
          if (dart.nullCheck(options).apiKey !== existingApp.options.apiKey || options.databaseURL != null && options.databaseURL != existingApp.options.databaseURL || options.storageBucket != null && options.storageBucket != existingApp.options.storageBucket) {
            dart.throw(firebase_core_platform_interface.duplicateApp(name));
          } else {
            return existingApp;
          }
        }
        this[S$._initializeFirebaseAppFromMap](yield firebase_core_platform_interface.MethodChannelFirebase.api.initializeApp(name, new messages$46pigeon.PigeonFirebaseOptions.new({apiKey: dart.nullCheck(options).apiKey, appId: options.appId, messagingSenderId: options.messagingSenderId, projectId: options.projectId, authDomain: options.authDomain, databaseURL: options.databaseURL, storageBucket: options.storageBucket, measurementId: options.measurementId, trackingId: options.trackingId, deepLinkURLScheme: options.deepLinkURLScheme, androidClientId: options.androidClientId, iosClientId: options.iosClientId, iosBundleId: options.iosBundleId, appGroupId: options.appGroupId})));
        return dart.nullCheck(firebase_core_platform_interface.MethodChannelFirebase.appInstances[S$.$_get](name));
      }).bind(this));
    }
    app(name = "[DEFAULT]") {
      if (firebase_core_platform_interface.MethodChannelFirebase.appInstances[S$.$containsKey](name)) {
        return dart.nullCheck(firebase_core_platform_interface.MethodChannelFirebase.appInstances[S$.$_get](name));
      }
      dart.throw(firebase_core_platform_interface.noAppExists(name));
    }
    static ['_#new#tearOff']() {
      return new firebase_core_platform_interface.MethodChannelFirebase.new();
    }
  };
  (firebase_core_platform_interface.MethodChannelFirebase.new = function() {
    firebase_core_platform_interface.MethodChannelFirebase.__proto__.new.call(this);
    ;
  }).prototype = firebase_core_platform_interface.MethodChannelFirebase.prototype;
  dart.addTypeTests(firebase_core_platform_interface.MethodChannelFirebase);
  dart.addTypeCaches(firebase_core_platform_interface.MethodChannelFirebase);
  dart.setMethodSignature(firebase_core_platform_interface.MethodChannelFirebase, () => ({
    __proto__: dart.getMethods(firebase_core_platform_interface.MethodChannelFirebase.__proto__),
    [S$._initializeCore$1]: dart.fnType(async.Future$(dart.void), []),
    [S$._initializeFirebaseAppFromMap]: dart.fnType(dart.void, [messages$46pigeon.PigeonInitializeResponse])
  }));
  dart.setLibraryUri(firebase_core_platform_interface.MethodChannelFirebase, I[12]);
  dart.setStaticFieldSignature(firebase_core_platform_interface.MethodChannelFirebase, () => ['appInstances', 'isCoreInitialized', 'api']);
  dart.defineLazy(firebase_core_platform_interface.MethodChannelFirebase, {
    /*firebase_core_platform_interface.MethodChannelFirebase.appInstances*/get appInstances() {
      return new (T$.IdentityMapOfString$MethodChannelFirebaseApp()).new();
    },
    set appInstances(value) {},
    /*firebase_core_platform_interface.MethodChannelFirebase.isCoreInitialized*/get isCoreInitialized() {
      return false;
    },
    set isCoreInitialized(value) {},
    /*firebase_core_platform_interface.MethodChannelFirebase.api*/get api() {
      return new messages$46pigeon.FirebaseCoreHostApi.new();
    },
    set api(value) {}
  }, false);
  firebase_core_platform_interface.MethodChannelFirebaseApp = class MethodChannelFirebaseApp extends firebase_core_platform_interface.FirebaseAppPlatform {
    static ['_#new#tearOff'](name, options, opts) {
      let isAutomaticDataCollectionEnabled = opts && 'isAutomaticDataCollectionEnabled' in opts ? opts.isAutomaticDataCollectionEnabled : null;
      return new firebase_core_platform_interface.MethodChannelFirebaseApp.new(name, options, {isAutomaticDataCollectionEnabled: isAutomaticDataCollectionEnabled});
    }
    get isAutomaticDataCollectionEnabled() {
      return this[S$._isAutomaticDataCollectionEnabled$1];
    }
    delete() {
      return async.async(dart.void, (function* $delete() {
        if (this[S$._isDefault]) {
          dart.throw(firebase_core_platform_interface.noDefaultAppDelete());
        }
        if (this[S$._isDeleted]) {
          return;
        }
        yield this[S$._api].delete(this.name);
        firebase_core_platform_interface.MethodChannelFirebase.appInstances[S$.$remove](this.name);
        firebase_core_platform_interface.FirebasePluginPlatform._constantsForPluginApps[S$.$remove](this.name);
        this[S$._isDeleted] = true;
      }).bind(this));
    }
    setAutomaticDataCollectionEnabled(enabled) {
      return async.async(dart.void, (function* setAutomaticDataCollectionEnabled() {
        yield this[S$._api].setAutomaticDataCollectionEnabled(this.name, enabled);
        this[S$._isAutomaticDataCollectionEnabled$1] = enabled;
      }).bind(this));
    }
    setAutomaticResourceManagementEnabled(enabled) {
      return async.async(dart.void, (function* setAutomaticResourceManagementEnabled() {
        yield this[S$._api].setAutomaticResourceManagementEnabled(this.name, enabled);
      }).bind(this));
    }
  };
  (firebase_core_platform_interface.MethodChannelFirebaseApp.new = function(name, options, opts) {
    let t94;
    let isAutomaticDataCollectionEnabled = opts && 'isAutomaticDataCollectionEnabled' in opts ? opts.isAutomaticDataCollectionEnabled : null;
    this[S$._isDeleted] = false;
    this[S$._api] = new messages$46pigeon.FirebaseAppHostApi.new();
    this[S$._isAutomaticDataCollectionEnabled$1] = core.bool.as((t94 = isAutomaticDataCollectionEnabled, t94 == null ? false : t94));
    firebase_core_platform_interface.MethodChannelFirebaseApp.__proto__.new.call(this, name, options);
    ;
  }).prototype = firebase_core_platform_interface.MethodChannelFirebaseApp.prototype;
  dart.addTypeTests(firebase_core_platform_interface.MethodChannelFirebaseApp);
  dart.addTypeCaches(firebase_core_platform_interface.MethodChannelFirebaseApp);
  dart.setLibraryUri(firebase_core_platform_interface.MethodChannelFirebaseApp, I[12]);
  dart.setFieldSignature(firebase_core_platform_interface.MethodChannelFirebaseApp, () => ({
    __proto__: dart.getFields(firebase_core_platform_interface.MethodChannelFirebaseApp.__proto__),
    [S$._isDeleted]: dart.fieldType(core.bool),
    [S$._isAutomaticDataCollectionEnabled$1]: dart.fieldType(core.bool),
    [S$._api]: dart.finalFieldType(messages$46pigeon.FirebaseAppHostApi)
  }));
  firebase_core_platform_interface.FirebasePluginPlatform = class FirebasePluginPlatform extends plugin_platform_interface.PlatformInterface {
    static verifyExtends(instance) {
      plugin_platform_interface.PlatformInterface.verifyToken(instance, firebase_core_platform_interface.FirebasePluginPlatform._token);
    }
    get pluginConstants() {
      let appConstants = T$.MapNOfObjectN$ObjectN().as(firebase_core_platform_interface.FirebasePluginPlatform._constantsForPluginApps[S$.$_get](this[S$._appName]));
      if (appConstants != null && appConstants[S$.$_get](this[S$._methodChannelName]) != null) {
        return core.Map.as(dart.nullCheck(appConstants[S$.$_get](this[S$._methodChannelName])));
      }
      return new _js_helper.LinkedMap.new();
    }
  };
  (firebase_core_platform_interface.FirebasePluginPlatform.new = function(_appName, _methodChannelName) {
    this[S$._appName] = _appName;
    this[S$._methodChannelName] = _methodChannelName;
    firebase_core_platform_interface.FirebasePluginPlatform.__proto__.new.call(this, {token: firebase_core_platform_interface.FirebasePluginPlatform._token});
    ;
  }).prototype = firebase_core_platform_interface.FirebasePluginPlatform.prototype;
  dart.addTypeTests(firebase_core_platform_interface.FirebasePluginPlatform);
  dart.addTypeCaches(firebase_core_platform_interface.FirebasePluginPlatform);
  dart.setStaticMethodSignature(firebase_core_platform_interface.FirebasePluginPlatform, () => ['verifyExtends']);
  dart.setGetterSignature(firebase_core_platform_interface.FirebasePluginPlatform, () => ({
    __proto__: dart.getGetters(firebase_core_platform_interface.FirebasePluginPlatform.__proto__),
    pluginConstants: core.Map
  }));
  dart.setLibraryUri(firebase_core_platform_interface.FirebasePluginPlatform, I[12]);
  dart.setFieldSignature(firebase_core_platform_interface.FirebasePluginPlatform, () => ({
    __proto__: dart.getFields(firebase_core_platform_interface.FirebasePluginPlatform.__proto__),
    [S$._appName]: dart.finalFieldType(core.String),
    [S$._methodChannelName]: dart.finalFieldType(core.String)
  }));
  dart.setStaticFieldSignature(firebase_core_platform_interface.FirebasePluginPlatform, () => ['_constantsForPluginApps', '_token']);
  dart.defineLazy(firebase_core_platform_interface.FirebasePluginPlatform, {
    /*firebase_core_platform_interface.FirebasePluginPlatform._constantsForPluginApps*/get _constantsForPluginApps() {
      return new _js_helper.LinkedMap.new();
    },
    set _constantsForPluginApps(value) {},
    /*firebase_core_platform_interface.FirebasePluginPlatform._token*/get _token() {
      return new core.Object.new();
    }
  }, false);
  firebase_core_platform_interface.noAppExists = function noAppExists(appName) {
    return new firebase_core_platform_interface.FirebaseException.new({plugin: "core", code: "no-app", message: "No Firebase App '" + appName + "' has been created - call Firebase.initializeApp()"});
  };
  firebase_core_platform_interface.duplicateApp = function duplicateApp(appName) {
    return new firebase_core_platform_interface.FirebaseException.new({plugin: "core", code: "duplicate-app", message: "A Firebase App named \"" + appName + "\" already exists"});
  };
  firebase_core_platform_interface.noDefaultAppInitialization = function noDefaultAppInitialization() {
    return new firebase_core_platform_interface.FirebaseException.new({plugin: "core", message: "The " + "[DEFAULT]" + " app cannot be initialized here. " + "To initialize the default app, follow the installation instructions " + "for the specific platform you are developing with."});
  };
  firebase_core_platform_interface.coreNotInitialized = function coreNotInitialized() {
    let message = "Firebase has not been correctly initialized.\n\nUsually this means you've attempted to use a Firebase service before calling `Firebase.initializeApp`.\n\nView the documentation for more information: https://firebase.flutter.dev/docs/overview#initialization\n    ";
    return new firebase_core_platform_interface.FirebaseException.new({plugin: "core", code: "not-initialized", message: message});
  };
  firebase_core_platform_interface.noDefaultAppDelete = function noDefaultAppDelete() {
    return new firebase_core_platform_interface.FirebaseException.new({plugin: "core", message: "The default Firebase app instance cannot be deleted."});
  };
  dart.defineLazy(firebase_core_platform_interface, {
    /*firebase_core_platform_interface.defaultFirebaseAppName*/get defaultFirebaseAppName() {
      return "[DEFAULT]";
    }
  }, false);
  core$.initializeApp = function initializeApp(opts) {
    let apiKey = opts && 'apiKey' in opts ? opts.apiKey : null;
    let authDomain = opts && 'authDomain' in opts ? opts.authDomain : null;
    let databaseURL = opts && 'databaseURL' in opts ? opts.databaseURL : null;
    let projectId = opts && 'projectId' in opts ? opts.projectId : null;
    let storageBucket = opts && 'storageBucket' in opts ? opts.storageBucket : null;
    let messagingSenderId = opts && 'messagingSenderId' in opts ? opts.messagingSenderId : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let measurementId = opts && 'measurementId' in opts ? opts.measurementId : null;
    let appId = opts && 'appId' in opts ? opts.appId : null;
    name == null ? name = "[DEFAULT]" : null;
    return app$.App.getInstance(dart.global.firebase_core.initializeApp({apiKey: apiKey, authDomain: authDomain, databaseURL: databaseURL, projectId: projectId, storageBucket: storageBucket, messagingSenderId: messagingSenderId, measurementId: measurementId, appId: appId}, name));
  };
  core$.app = function app$0(name = null) {
    return app$.App.getInstance(name != null ? dart.global.firebase_core.getApp(name) : dart.global.firebase_core.getApp());
  };
  dart.copyProperties(core$, {
    get apps() {
      return dart.global.firebase_core.getApps()[S$.$map](app$.App, dart.fn(e => app$.App.getInstance(dart.packageJSType("firebase_core.FirebaseApp", false).as(e)), T$.dynamicToApp()))[S$.$toList]();
    }
  });
  platform_interface_firebase_storage.FirebaseStoragePlatform = class FirebaseStoragePlatform extends plugin_platform_interface.PlatformInterface {
    get appInstance() {
      return this[S$.appInstance$2];
    }
    set appInstance(value) {
      super.appInstance = value;
    }
    get bucket() {
      return this[S$.bucket];
    }
    set bucket(value) {
      super.bucket = value;
    }
    get emulatorHost() {
      return this[S$.emulatorHost];
    }
    set emulatorHost(value) {
      this[S$.emulatorHost] = value;
    }
    get emulatorPort() {
      return this[S$.emulatorPort];
    }
    set emulatorPort(value) {
      this[S$.emulatorPort] = value;
    }
    static instanceFor(opts) {
      let app = opts && 'app' in opts ? opts.app : null;
      let bucket = opts && 'bucket' in opts ? opts.bucket : null;
      return platform_interface_firebase_storage.FirebaseStoragePlatform.instance.delegateFor({app: app, bucket: bucket});
    }
    static ['_#instanceFor#tearOff'](opts) {
      let app = opts && 'app' in opts ? opts.app : null;
      let bucket = opts && 'bucket' in opts ? opts.bucket : null;
      return platform_interface_firebase_storage.FirebaseStoragePlatform.instanceFor({app: app, bucket: bucket});
    }
    get app() {
      if (this.appInstance == null) {
        return firebase_core.Firebase.app();
      }
      return dart.nullCheck(this.appInstance);
    }
    static get instance() {
      let t94;
      t94 = platform_interface_firebase_storage.FirebaseStoragePlatform._instance;
      return t94 == null ? platform_interface_firebase_storage.FirebaseStoragePlatform._instance = method_channel_firebase_storage.MethodChannelFirebaseStorage.instance : t94;
    }
    static set instance(instance) {
      plugin_platform_interface.PlatformInterface.verifyToken(instance, platform_interface_firebase_storage.FirebaseStoragePlatform._token);
      platform_interface_firebase_storage.FirebaseStoragePlatform._instance = instance;
    }
    get maxOperationRetryTime() {
      dart.throw(new core.UnimplementedError.new("get.maxOperationRetryTime is not implemented"));
    }
    get maxUploadRetryTime() {
      dart.throw(new core.UnimplementedError.new("get.maxUploadRetryTime is not implemented"));
    }
    get maxDownloadRetryTime() {
      dart.throw(new core.UnimplementedError.new("get.maxDownloadRetryTime is not implemented"));
    }
    delegateFor(opts) {
      let app = opts && 'app' in opts ? opts.app : null;
      let bucket = opts && 'bucket' in opts ? opts.bucket : null;
      dart.throw(new core.UnimplementedError.new("delegateFor() is not implemented"));
    }
    ref(path) {
      dart.throw(new core.UnimplementedError.new("ref() is not implemented"));
    }
    useStorageEmulator(host, port) {
      dart.throw(new core.UnimplementedError.new("useStorageEmulator() is not implemented"));
    }
    setMaxOperationRetryTime(time) {
      dart.throw(new core.UnimplementedError.new("setMaxOperationRetryTime() is not implemented"));
    }
    setMaxUploadRetryTime(time) {
      dart.throw(new core.UnimplementedError.new("setMaxUploadRetryTime() is not implemented"));
    }
    setMaxDownloadRetryTime(time) {
      dart.throw(new core.UnimplementedError.new("setMaxDownloadRetryTime() is not implemented"));
    }
  };
  (platform_interface_firebase_storage.FirebaseStoragePlatform.new = function(opts) {
    let appInstance = opts && 'appInstance' in opts ? opts.appInstance : null;
    let bucket = opts && 'bucket' in opts ? opts.bucket : null;
    this[S$.emulatorHost] = null;
    this[S$.emulatorPort] = null;
    this[S$.appInstance$2] = appInstance;
    this[S$.bucket] = bucket;
    platform_interface_firebase_storage.FirebaseStoragePlatform.__proto__.new.call(this, {token: platform_interface_firebase_storage.FirebaseStoragePlatform._token});
    ;
  }).prototype = platform_interface_firebase_storage.FirebaseStoragePlatform.prototype;
  dart.addTypeTests(platform_interface_firebase_storage.FirebaseStoragePlatform);
  dart.addTypeCaches(platform_interface_firebase_storage.FirebaseStoragePlatform);
  dart.setMethodSignature(platform_interface_firebase_storage.FirebaseStoragePlatform, () => ({
    __proto__: dart.getMethods(platform_interface_firebase_storage.FirebaseStoragePlatform.__proto__),
    delegateFor: dart.fnType(platform_interface_firebase_storage.FirebaseStoragePlatform, [], {}, {app: firebase_core.FirebaseApp, bucket: core.String}),
    ref: dart.fnType(platform_interface_reference.ReferencePlatform, [core.String]),
    useStorageEmulator: dart.fnType(async.Future$(dart.void), [core.String, core.int]),
    setMaxOperationRetryTime: dart.fnType(dart.void, [core.int]),
    setMaxUploadRetryTime: dart.fnType(dart.void, [core.int]),
    setMaxDownloadRetryTime: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(platform_interface_firebase_storage.FirebaseStoragePlatform, () => ['instanceFor']);
  dart.setGetterSignature(platform_interface_firebase_storage.FirebaseStoragePlatform, () => ({
    __proto__: dart.getGetters(platform_interface_firebase_storage.FirebaseStoragePlatform.__proto__),
    app: firebase_core.FirebaseApp,
    maxOperationRetryTime: core.int,
    maxUploadRetryTime: core.int,
    maxDownloadRetryTime: core.int
  }));
  dart.setStaticGetterSignature(platform_interface_firebase_storage.FirebaseStoragePlatform, () => ['instance']);
  dart.setStaticSetterSignature(platform_interface_firebase_storage.FirebaseStoragePlatform, () => ['instance']);
  dart.setLibraryUri(platform_interface_firebase_storage.FirebaseStoragePlatform, I[54]);
  dart.setFieldSignature(platform_interface_firebase_storage.FirebaseStoragePlatform, () => ({
    __proto__: dart.getFields(platform_interface_firebase_storage.FirebaseStoragePlatform.__proto__),
    appInstance: dart.finalFieldType(dart.nullable(firebase_core.FirebaseApp)),
    bucket: dart.finalFieldType(core.String),
    emulatorHost: dart.fieldType(dart.nullable(core.String)),
    emulatorPort: dart.fieldType(dart.nullable(core.int))
  }));
  dart.setStaticFieldSignature(platform_interface_firebase_storage.FirebaseStoragePlatform, () => ['_token', '_instance']);
  dart.defineLazy(platform_interface_firebase_storage.FirebaseStoragePlatform, {
    /*platform_interface_firebase_storage.FirebaseStoragePlatform._token*/get _token() {
      return new core.Object.new();
    },
    /*platform_interface_firebase_storage.FirebaseStoragePlatform._instance*/get _instance() {
      return null;
    },
    set _instance(value) {}
  }, false);
  firebase_storage_web$.FirebaseStorageWeb = class FirebaseStorageWeb extends platform_interface_firebase_storage.FirebaseStoragePlatform {
    static ['_#new#tearOff'](opts) {
      let app = opts && 'app' in opts ? opts.app : null;
      let bucket = opts && 'bucket' in opts ? opts.bucket : null;
      return new firebase_storage_web$.FirebaseStorageWeb.new({app: app, bucket: bucket});
    }
    static ['_#_nullInstance#tearOff']() {
      return new firebase_storage_web$.FirebaseStorageWeb._nullInstance();
    }
    static ['_#forMock#tearOff'](_webStorage, opts) {
      let bucket = opts && 'bucket' in opts ? opts.bucket : null;
      let app = opts && 'app' in opts ? opts.app : null;
      return new firebase_storage_web$.FirebaseStorageWeb.forMock(_webStorage, {bucket: bucket, app: app});
    }
    get delegate() {
      let t94;
      t94 = this[S$._webStorage];
      return t94 == null ? this[S$._webStorage] = storage.getStorageInstance(core$.app(this.app.name), this[S$._bucket]) : t94;
    }
    static registerWith(registrar) {
      firebase_core_web.FirebaseCoreWeb.registerService("storage");
      platform_interface_firebase_storage.FirebaseStoragePlatform.instance = new firebase_storage_web$.FirebaseStorageWeb._nullInstance();
    }
    delegateFor(opts) {
      let app = opts && 'app' in opts ? opts.app : null;
      let bucket = opts && 'bucket' in opts ? opts.bucket : null;
      return new firebase_storage_web$.FirebaseStorageWeb.new({app: app, bucket: bucket});
    }
    get maxOperationRetryTime() {
      return this[S$._maxOperationRetryTime];
    }
    get maxUploadRetryTime() {
      return this.delegate.maxUploadRetryTime;
    }
    get maxDownloadRetryTime() {
      return this[S$._maxDownloadRetryTime];
    }
    ref(path, opts) {
      let refBuilder = opts && 'refBuilder' in opts ? opts.refBuilder : null;
      return errors.guard(platform_interface_reference.ReferencePlatform, dart.fn(() => {
        let t94;
        let refBuilderFunction = (t94 = refBuilder, t94 == null ? dart.bind(this, S$._createReference) : t94);
        let ref = refBuilderFunction(this, path);
        return ref;
      }, T$.VoidToReferencePlatform()));
    }
    [S$._createReference](storage, path) {
      return new reference_web.ReferenceWeb.new(storage, path);
    }
    setMaxOperationRetryTime(time) {
      this[S$._maxOperationRetryTime] = time;
      this.delegate.maxOperationRetryTime = time;
    }
    setMaxUploadRetryTime(time) {
      this.delegate.maxUploadRetryTime = time;
    }
    setMaxDownloadRetryTime(time) {
      this[S$._maxDownloadRetryTime] = time;
    }
    useStorageEmulator(host, port) {
      return async.async(dart.void, (function* useStorageEmulator() {
        errors.guard(dart.void, dart.fn(() => this.delegate.useStorageEmulator(host, port), T$.VoidTovoid()));
      }).bind(this));
    }
  };
  (firebase_storage_web$.FirebaseStorageWeb.new = function(opts) {
    let app = opts && 'app' in opts ? opts.app : null;
    let bucket = opts && 'bucket' in opts ? opts.bucket : null;
    this[S$._maxDownloadRetryTime] = (C[42] || CT.C42).inMilliseconds;
    this[S$._maxOperationRetryTime] = (C[43] || CT.C43).inMilliseconds;
    this[S$._webStorage] = null;
    this[S$._bucket] = bucket;
    firebase_storage_web$.FirebaseStorageWeb.__proto__.new.call(this, {appInstance: app, bucket: bucket});
    ;
  }).prototype = firebase_storage_web$.FirebaseStorageWeb.prototype;
  (firebase_storage_web$.FirebaseStorageWeb._nullInstance = function() {
    this[S$._maxDownloadRetryTime] = (C[42] || CT.C42).inMilliseconds;
    this[S$._maxOperationRetryTime] = (C[43] || CT.C43).inMilliseconds;
    this[S$._bucket] = null;
    this[S$._webStorage] = null;
    firebase_storage_web$.FirebaseStorageWeb.__proto__.new.call(this, {bucket: ""});
    ;
  }).prototype = firebase_storage_web$.FirebaseStorageWeb.prototype;
  (firebase_storage_web$.FirebaseStorageWeb.forMock = function(_webStorage, opts) {
    let bucket = opts && 'bucket' in opts ? opts.bucket : null;
    let app = opts && 'app' in opts ? opts.app : null;
    this[S$._maxDownloadRetryTime] = (C[42] || CT.C42).inMilliseconds;
    this[S$._maxOperationRetryTime] = (C[43] || CT.C43).inMilliseconds;
    this[S$._bucket] = null;
    this[S$._webStorage] = _webStorage;
    firebase_storage_web$.FirebaseStorageWeb.__proto__.new.call(this, {appInstance: app, bucket: bucket});
    ;
  }).prototype = firebase_storage_web$.FirebaseStorageWeb.prototype;
  dart.addTypeTests(firebase_storage_web$.FirebaseStorageWeb);
  dart.addTypeCaches(firebase_storage_web$.FirebaseStorageWeb);
  dart.setMethodSignature(firebase_storage_web$.FirebaseStorageWeb, () => ({
    __proto__: dart.getMethods(firebase_storage_web$.FirebaseStorageWeb.__proto__),
    delegateFor: dart.fnType(platform_interface_firebase_storage.FirebaseStoragePlatform, [], {app: dart.nullable(firebase_core.FirebaseApp)}, {bucket: core.String}),
    ref: dart.fnType(platform_interface_reference.ReferencePlatform, [core.String], {refBuilder: dart.nullable(dart.fnType(platform_interface_reference.ReferencePlatform, [firebase_storage_web$.FirebaseStorageWeb, core.String]))}, {}),
    [S$._createReference]: dart.fnType(platform_interface_reference.ReferencePlatform, [firebase_storage_web$.FirebaseStorageWeb, core.String])
  }));
  dart.setStaticMethodSignature(firebase_storage_web$.FirebaseStorageWeb, () => ['registerWith']);
  dart.setGetterSignature(firebase_storage_web$.FirebaseStorageWeb, () => ({
    __proto__: dart.getGetters(firebase_storage_web$.FirebaseStorageWeb.__proto__),
    delegate: storage.Storage
  }));
  dart.setLibraryUri(firebase_storage_web$.FirebaseStorageWeb, I[55]);
  dart.setFieldSignature(firebase_storage_web$.FirebaseStorageWeb, () => ({
    __proto__: dart.getFields(firebase_storage_web$.FirebaseStorageWeb.__proto__),
    [S$._webStorage]: dart.fieldType(dart.nullable(storage.Storage)),
    [S$._bucket]: dart.fieldType(dart.nullable(core.String)),
    [S$._maxDownloadRetryTime]: dart.fieldType(core.int),
    [S$._maxOperationRetryTime]: dart.fieldType(core.int)
  }));
  digest.Digest = class Digest extends core.Object {
    get bytes() {
      return this[S$.bytes];
    }
    set bytes(value) {
      super.bytes = value;
    }
    static ['_#new#tearOff'](bytes) {
      return new digest.Digest.new(bytes);
    }
    _equals(other) {
      if (other == null) return false;
      if (digest.Digest.is(other)) {
        let a = this.bytes;
        let b = other.bytes;
        let n = a[S$.$length];
        if (n !== b[S$.$length]) {
          return false;
        }
        let mismatch = 0;
        for (let i = 0; i < n; i = i + 1) {
          mismatch = (mismatch | (a[S$.$_get](i) ^ b[S$.$_get](i)) >>> 0) >>> 0;
        }
        return mismatch === 0;
      }
      return false;
    }
    get hashCode() {
      return core.Object.hashAll(this.bytes);
    }
    toString() {
      return digest._hexEncode(this.bytes);
    }
  };
  (digest.Digest.new = function(bytes) {
    this[S$.bytes] = bytes;
    ;
  }).prototype = digest.Digest.prototype;
  dart.addTypeTests(digest.Digest);
  dart.addTypeCaches(digest.Digest);
  dart.setLibraryUri(digest.Digest, I[56]);
  dart.setFieldSignature(digest.Digest, () => ({
    __proto__: dart.getFields(digest.Digest.__proto__),
    bytes: dart.finalFieldType(core.List$(core.int))
  }));
  dart.defineExtensionMethods(digest.Digest, ['_equals', 'toString']);
  dart.defineExtensionAccessors(digest.Digest, ['hashCode']);
  digest._hexEncode = function _hexEncode(bytes) {
    let t94, t94$;
    let charCodes = _native_typed_data.NativeUint8List.new(bytes[S$.$length] * 2);
    for (let i = 0, j = 0; i < bytes[S$.$length]; i = i + 1) {
      let byte = bytes[S$.$_get](i);
      charCodes[S$.$_set]((t94 = j, j = t94 + 1, t94), "0123456789abcdef"[S$.$codeUnitAt](byte >> 4 & 15));
      charCodes[S$.$_set]((t94$ = j, j = t94$ + 1, t94$), "0123456789abcdef"[S$.$codeUnitAt](byte & 15));
    }
    return core.String.fromCharCodes(charCodes);
  };
  hash.Hash = class Hash extends convert.Converter$(core.List$(core.int), digest.Digest) {
    convert(input) {
      T$.ListOfint().as(input);
      let innerSink = new digest_sink.DigestSink.new();
      let outerSink = this.startChunkedConversion(innerSink);
      outerSink.add(input);
      outerSink.close();
      return innerSink.value;
    }
  };
  (hash.Hash.new = function() {
    hash.Hash.__proto__.new.call(this);
    ;
  }).prototype = hash.Hash.prototype;
  dart.addTypeTests(hash.Hash);
  dart.addTypeCaches(hash.Hash);
  dart.setMethodSignature(hash.Hash, () => ({
    __proto__: dart.getMethods(hash.Hash.__proto__),
    convert: dart.fnType(digest.Digest, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(hash.Hash, I[57]);
  hmac.Hmac = class Hmac extends convert.Converter$(core.List$(core.int), digest.Digest) {
    static ['_#new#tearOff'](hash, key) {
      return new hmac.Hmac.new(hash, key);
    }
    convert(input) {
      T$.ListOfint().as(input);
      let innerSink = new digest_sink.DigestSink.new();
      let outerSink = this.startChunkedConversion(innerSink);
      outerSink.add(input);
      outerSink.close();
      return innerSink.value;
    }
    startChunkedConversion(sink) {
      T$.SinkOfDigest().as(sink);
      return new hmac._HmacSink.new(sink, this[S$._hash], this[S$._key$2]);
    }
  };
  (hmac.Hmac.new = function(hash, key) {
    this[S$._hash] = hash;
    this[S$._key$2] = _native_typed_data.NativeUint8List.new(hash.blockSize);
    hmac.Hmac.__proto__.new.call(this);
    if (key[S$.$length] > this[S$._hash].blockSize) key = this[S$._hash].convert(key).bytes;
    this[S$._key$2][S$.$setRange](0, key[S$.$length], key);
  }).prototype = hmac.Hmac.prototype;
  dart.addTypeTests(hmac.Hmac);
  dart.addTypeCaches(hmac.Hmac);
  dart.setMethodSignature(hmac.Hmac, () => ({
    __proto__: dart.getMethods(hmac.Hmac.__proto__),
    convert: dart.fnType(digest.Digest, [dart.nullable(core.Object)]),
    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(hmac.Hmac, I[58]);
  dart.setFieldSignature(hmac.Hmac, () => ({
    __proto__: dart.getFields(hmac.Hmac.__proto__),
    [S$._hash]: dart.finalFieldType(hash.Hash),
    [S$._key$2]: dart.finalFieldType(typed_data.Uint8List)
  }));
  hmac._HmacSink = class _HmacSink extends convert.ByteConversionSink {
    get [S$._innerSink]() {
      let t94;
      t94 = this[S$.___HmacSink__innerSink];
      return t94 == null ? dart.throw(new _internal.LateError.fieldNI("_innerSink")) : t94;
    }
    set [S$._innerSink](_innerSink$35param) {
      if (this[S$.___HmacSink__innerSink] == null)
        this[S$.___HmacSink__innerSink] = _innerSink$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("_innerSink"));
    }
    static ['_#new#tearOff'](sink, hash, key) {
      return new hmac._HmacSink.new(sink, hash, key);
    }
    add(data) {
      T$.ListOfint().as(data);
      if (this[S$._isClosed]) dart.throw(new core.StateError.new("HMAC is closed"));
      this[S$._innerSink].add(data);
    }
    addSlice(data, start, end, isLast) {
      if (this[S$._isClosed]) dart.throw(new core.StateError.new("HMAC is closed"));
      this[S$._innerSink].addSlice(data, start, end, isLast);
    }
    close() {
      if (this[S$._isClosed]) return;
      this[S$._isClosed] = true;
      this[S$._innerSink].close();
      this[S$._outerSink].add(this[S$._innerResultSink].value.bytes);
      this[S$._outerSink].close();
    }
  };
  (hmac._HmacSink.new = function(sink, hash, key) {
    this[S$._innerResultSink] = new digest_sink.DigestSink.new();
    this[S$.___HmacSink__innerSink] = null;
    this[S$._isClosed] = false;
    this[S$._outerSink] = hash.startChunkedConversion(sink);
    hmac._HmacSink.__proto__.new.call(this);
    this[S$._innerSink] = hash.startChunkedConversion(this[S$._innerResultSink]);
    let padding = _native_typed_data.NativeUint8List.new(key[S$.$length]);
    for (let i = 0; i < padding[S$.$length]; i = i + 1) {
      padding[S$.$_set](i, (92 ^ key[S$.$_get](i)) >>> 0);
    }
    this[S$._outerSink].add(padding);
    for (let i = 0; i < padding[S$.$length]; i = i + 1) {
      padding[S$.$_set](i, (54 ^ key[S$.$_get](i)) >>> 0);
    }
    this[S$._innerSink].add(padding);
  }).prototype = hmac._HmacSink.prototype;
  dart.addTypeTests(hmac._HmacSink);
  dart.addTypeCaches(hmac._HmacSink);
  dart.setMethodSignature(hmac._HmacSink, () => ({
    __proto__: dart.getMethods(hmac._HmacSink.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    addSlice: dart.fnType(dart.void, [core.List$(core.int), core.int, core.int, core.bool]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(hmac._HmacSink, () => ({
    __proto__: dart.getGetters(hmac._HmacSink.__proto__),
    [S$._innerSink]: convert.ByteConversionSink
  }));
  dart.setSetterSignature(hmac._HmacSink, () => ({
    __proto__: dart.getSetters(hmac._HmacSink.__proto__),
    [S$._innerSink]: convert.ByteConversionSink
  }));
  dart.setLibraryUri(hmac._HmacSink, I[58]);
  dart.setFieldSignature(hmac._HmacSink, () => ({
    __proto__: dart.getFields(hmac._HmacSink.__proto__),
    [S$._outerSink]: dart.finalFieldType(convert.ByteConversionSink),
    [S$._innerResultSink]: dart.finalFieldType(digest_sink.DigestSink),
    [S$.___HmacSink__innerSink]: dart.fieldType(dart.nullable(convert.ByteConversionSink)),
    [S$._isClosed]: dart.fieldType(core.bool)
  }));
  md5._MD5 = class _MD5 extends hash.Hash {
    get blockSize() {
      return this[S$.blockSize];
    }
    set blockSize(value) {
      super.blockSize = value;
    }
    static ['_#_#tearOff']() {
      return new md5._MD5.__();
    }
    startChunkedConversion(sink) {
      T$.SinkOfDigest().as(sink);
      return new convert._ByteAdapterSink.new(new md5._MD5Sink.new(sink));
    }
  };
  (md5._MD5.__ = function() {
    this[S$.blockSize] = 16 * 4;
    md5._MD5.__proto__.new.call(this);
    ;
  }).prototype = md5._MD5.prototype;
  dart.addTypeTests(md5._MD5);
  dart.addTypeCaches(md5._MD5);
  dart.setMethodSignature(md5._MD5, () => ({
    __proto__: dart.getMethods(md5._MD5.__proto__),
    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(md5._MD5, I[59]);
  dart.setFieldSignature(md5._MD5, () => ({
    __proto__: dart.getFields(md5._MD5.__proto__),
    blockSize: dart.finalFieldType(core.int)
  }));
  hash_sink.HashSink = class HashSink extends core.Object {
    add(data) {
      T$.ListOfint().as(data);
      if (this[S$._isClosed$1]) dart.throw(new core.StateError.new("Hash.add() called after close()."));
      this[S$._lengthInBytes] = this[S$._lengthInBytes] + data[S$.$length];
      this[S$._pendingData].addAll(data);
      this[S$._iterate]();
    }
    close() {
      if (this[S$._isClosed$1]) return;
      this[S$._isClosed$1] = true;
      this[S$._finalizeData]();
      this[S$._iterate]();
      if (!this[S$._pendingData][S$.$isEmpty]) dart.assertFailed(null, I[61], 90, 12, "_pendingData.isEmpty");
      this[S$._sink].add(new digest.Digest.new(this[S$._byteDigest]()));
      this[S$._sink].close();
    }
    [S$._byteDigest]() {
      if (this[S$._endian][S$.$_equals](typed_data.Endian.host)) return this.digest[S$.$buffer][S$.$asUint8List]();
      let cachedDigest = this.digest;
      let byteDigest = _native_typed_data.NativeUint8List.new(cachedDigest[S$.$lengthInBytes]);
      let byteData = byteDigest[S$.$buffer][S$.$asByteData]();
      for (let i = 0; i < cachedDigest[S$.$length]; i = i + 1) {
        byteData[S$.$setUint32](i * 4, cachedDigest[S$.$_get](i));
      }
      return byteDigest;
    }
    [S$._iterate]() {
      let pendingDataBytes = this[S$._pendingData].buffer[S$.$asByteData]();
      let pendingDataChunks = (this[S$._pendingData].length / this[S$._currentChunk][S$.$lengthInBytes])[S$.$truncate]();
      for (let i = 0; i < pendingDataChunks; i = i + 1) {
        for (let j = 0; j < this[S$._currentChunk][S$.$length]; j = j + 1) {
          this[S$._currentChunk][S$.$_set](j, pendingDataBytes[S$.$getUint32](i * this[S$._currentChunk][S$.$lengthInBytes] + j * 4, this[S$._endian]));
        }
        this.updateHash(this[S$._currentChunk]);
      }
      this[S$._pendingData][S$.$removeRange](0, pendingDataChunks * this[S$._currentChunk][S$.$lengthInBytes]);
    }
    [S$._finalizeData]() {
      this[S$._pendingData].add(128);
      let contentsLength = this[S$._lengthInBytes] + 1 + this[S$._signatureBytes];
      let finalizedLength = this[S$._roundUp](contentsLength, this[S$._currentChunk][S$.$lengthInBytes]);
      for (let i = 0; i < finalizedLength - contentsLength; i = i + 1) {
        this[S$._pendingData].add(0);
      }
      if (this[S$._lengthInBytes] > 1125899906842623) {
        dart.throw(new core.UnsupportedError.new("Hashing is unsupported for messages with more than 2^53 bits."));
      }
      let lengthInBits = this[S$._lengthInBytes] * 8;
      let offset = this[S$._pendingData].length + (this[S$._signatureBytes] - 8);
      this[S$._pendingData].addAll(_native_typed_data.NativeUint8List.new(this[S$._signatureBytes]));
      let byteData = this[S$._pendingData].buffer[S$.$asByteData]();
      let highBits = (lengthInBits / 4294967296)[S$.$truncate]();
      let lowBits = (lengthInBits & 4294967295) >>> 0;
      if (this[S$._endian][S$.$_equals](typed_data.Endian.big)) {
        byteData[S$.$setUint32](offset, highBits, this[S$._endian]);
        byteData[S$.$setUint32](offset + 4, lowBits, this[S$._endian]);
      } else {
        byteData[S$.$setUint32](offset, lowBits, this[S$._endian]);
        byteData[S$.$setUint32](offset + 4, highBits, this[S$._endian]);
      }
    }
    [S$._roundUp](val, n) {
      return (val + n - 1 & -n) >>> 0;
    }
  };
  (hash_sink.HashSink.new = function(_sink, chunkSizeInWords, opts) {
    let endian = opts && 'endian' in opts ? opts.endian : C[44] || CT.C44;
    let signatureBytes = opts && 'signatureBytes' in opts ? opts.signatureBytes : 8;
    this[S$._lengthInBytes] = 0;
    this[S$._pendingData] = new typed_buffer.Uint8Buffer.new();
    this[S$._isClosed$1] = false;
    this[S$._sink] = _sink;
    this[S$._endian] = endian;
    if (!(signatureBytes >= 8)) dart.assertFailed(null, I[61], 64, 16, "signatureBytes >= 8");
    this[S$._signatureBytes] = signatureBytes;
    this[S$._currentChunk] = _native_typed_data.NativeUint32List.new(chunkSizeInWords);
    ;
  }).prototype = hash_sink.HashSink.prototype;
  dart.addTypeTests(hash_sink.HashSink);
  dart.addTypeCaches(hash_sink.HashSink);
  hash_sink.HashSink[dart.implements] = () => [core.Sink$(core.List$(core.int))];
  dart.setMethodSignature(hash_sink.HashSink, () => ({
    __proto__: dart.getMethods(hash_sink.HashSink.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    close: dart.fnType(dart.void, []),
    [S$._byteDigest]: dart.fnType(typed_data.Uint8List, []),
    [S$._iterate]: dart.fnType(dart.void, []),
    [S$._finalizeData]: dart.fnType(dart.void, []),
    [S$._roundUp]: dart.fnType(core.int, [core.int, core.int])
  }));
  dart.setLibraryUri(hash_sink.HashSink, I[62]);
  dart.setFieldSignature(hash_sink.HashSink, () => ({
    __proto__: dart.getFields(hash_sink.HashSink.__proto__),
    [S$._sink]: dart.finalFieldType(core.Sink$(digest.Digest)),
    [S$._endian]: dart.finalFieldType(typed_data.Endian),
    [S$._currentChunk]: dart.finalFieldType(typed_data.Uint32List),
    [S$._lengthInBytes]: dart.fieldType(core.int),
    [S$._pendingData]: dart.finalFieldType(typed_buffer.Uint8Buffer),
    [S$._isClosed$1]: dart.fieldType(core.bool),
    [S$._signatureBytes]: dart.finalFieldType(core.int)
  }));
  dart.setStaticFieldSignature(hash_sink.HashSink, () => ['_maxMessageLengthInBytes']);
  dart.defineLazy(hash_sink.HashSink, {
    /*hash_sink.HashSink._maxMessageLengthInBytes*/get _maxMessageLengthInBytes() {
      return 1125899906842623;
    }
  }, false);
  md5._MD5Sink = class _MD5Sink extends hash_sink.HashSink {
    get digest() {
      return this[S$.digest];
    }
    set digest(value) {
      super.digest = value;
    }
    static ['_#new#tearOff'](sink) {
      return new md5._MD5Sink.new(sink);
    }
    updateHash(chunk) {
      if (!(chunk[S$.$length] === 16)) dart.assertFailed(null, I[60], 81, 12, "chunk.length == 16");
      let a = this.digest[S$.$_get](0);
      let b = this.digest[S$.$_get](1);
      let c = this.digest[S$.$_get](2);
      let d = this.digest[S$.$_get](3);
      let e = null;
      let f = null;
      for (let i = 0; i < 64; i = i + 1) {
        if (i < 16) {
          e = (b & c | (~b & 4294967295 & d) >>> 0) >>> 0;
          f = i;
        } else if (i < 32) {
          e = (d & b | (~d & 4294967295 & c) >>> 0) >>> 0;
          f = (5 * i + 1)[S$.$modulo](16);
        } else if (i < 48) {
          e = (b ^ c ^ d) >>> 0;
          f = (3 * i + 5)[S$.$modulo](16);
        } else {
          e = (c ^ (b | (~d & 4294967295) >>> 0) >>> 0) >>> 0;
          f = (7 * i)[S$.$modulo](16);
        }
        let temp = d;
        d = c;
        c = b;
        b = utils$1.add32(b, utils$1.rotl32(utils$1.add32(utils$1.add32(a, e), utils$1.add32(md5._noise[S$.$_get](i), chunk[S$.$_get](f))), md5._shiftAmounts[S$.$_get](i)));
        a = temp;
      }
      this.digest[S$.$_set](0, utils$1.add32(a, this.digest[S$.$_get](0)));
      this.digest[S$.$_set](1, utils$1.add32(b, this.digest[S$.$_get](1)));
      this.digest[S$.$_set](2, utils$1.add32(c, this.digest[S$.$_get](2)));
      this.digest[S$.$_set](3, utils$1.add32(d, this.digest[S$.$_get](3)));
    }
  };
  (md5._MD5Sink.new = function(sink) {
    this[S$.digest] = _native_typed_data.NativeUint32List.new(4);
    md5._MD5Sink.__proto__.new.call(this, sink, 16, {endian: typed_data.Endian.little});
    this.digest[S$.$_set](0, 1732584193);
    this.digest[S$.$_set](1, 4023233417);
    this.digest[S$.$_set](2, 2562383102);
    this.digest[S$.$_set](3, 271733878);
  }).prototype = md5._MD5Sink.prototype;
  dart.addTypeTests(md5._MD5Sink);
  dart.addTypeCaches(md5._MD5Sink);
  dart.setMethodSignature(md5._MD5Sink, () => ({
    __proto__: dart.getMethods(md5._MD5Sink.__proto__),
    updateHash: dart.fnType(dart.void, [typed_data.Uint32List])
  }));
  dart.setLibraryUri(md5._MD5Sink, I[59]);
  dart.setFieldSignature(md5._MD5Sink, () => ({
    __proto__: dart.getFields(md5._MD5Sink.__proto__),
    digest: dart.finalFieldType(typed_data.Uint32List)
  }));
  dart.defineLazy(md5, {
    /*md5.md5*/get md5() {
      return C[45] || CT.C45;
    },
    /*md5._noise*/get _noise() {
      return C[46] || CT.C46;
    },
    /*md5._shiftAmounts*/get _shiftAmounts() {
      return C[47] || CT.C47;
    }
  }, false);
  sha1._Sha1 = class _Sha1 extends hash.Hash {
    get blockSize() {
      return this[S$.blockSize$1];
    }
    set blockSize(value) {
      super.blockSize = value;
    }
    static ['_#_#tearOff']() {
      return new sha1._Sha1.__();
    }
    startChunkedConversion(sink) {
      T$.SinkOfDigest().as(sink);
      return new convert._ByteAdapterSink.new(new sha1._Sha1Sink.new(sink));
    }
  };
  (sha1._Sha1.__ = function() {
    this[S$.blockSize$1] = 16 * 4;
    sha1._Sha1.__proto__.new.call(this);
    ;
  }).prototype = sha1._Sha1.prototype;
  dart.addTypeTests(sha1._Sha1);
  dart.addTypeCaches(sha1._Sha1);
  dart.setMethodSignature(sha1._Sha1, () => ({
    __proto__: dart.getMethods(sha1._Sha1.__proto__),
    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(sha1._Sha1, I[63]);
  dart.setFieldSignature(sha1._Sha1, () => ({
    __proto__: dart.getFields(sha1._Sha1.__proto__),
    blockSize: dart.finalFieldType(core.int)
  }));
  sha1._Sha1Sink = class _Sha1Sink extends hash_sink.HashSink {
    get digest() {
      return this[S$.digest$1];
    }
    set digest(value) {
      super.digest = value;
    }
    static ['_#new#tearOff'](sink) {
      return new sha1._Sha1Sink.new(sink);
    }
    updateHash(chunk) {
      if (!(chunk[S$.$length] === 16)) dart.assertFailed(null, I[64], 58, 12, "chunk.length == 16");
      let a = this.digest[S$.$_get](0);
      let b = this.digest[S$.$_get](1);
      let c = this.digest[S$.$_get](2);
      let d = this.digest[S$.$_get](3);
      let e = this.digest[S$.$_get](4);
      for (let i = 0; i < 80; i = i + 1) {
        if (i < 16) {
          this[S$._extended][S$.$_set](i, chunk[S$.$_get](i));
        } else {
          this[S$._extended][S$.$_set](i, utils$1.rotl32((this[S$._extended][S$.$_get](i - 3) ^ this[S$._extended][S$.$_get](i - 8) ^ this[S$._extended][S$.$_get](i - 14) ^ this[S$._extended][S$.$_get](i - 16)) >>> 0, 1));
        }
        let newA = utils$1.add32(utils$1.add32(utils$1.rotl32(a, 5), e), this[S$._extended][S$.$_get](i));
        if (i < 20) {
          newA = utils$1.add32(utils$1.add32(newA, (b & c | (~b & d) >>> 0) >>> 0), 1518500249);
        } else if (i < 40) {
          newA = utils$1.add32(utils$1.add32(newA, (b ^ c ^ d) >>> 0), 1859775393);
        } else if (i < 60) {
          newA = utils$1.add32(utils$1.add32(newA, (b & c | (b & d) >>> 0 | (c & d) >>> 0) >>> 0), 2400959708);
        } else {
          newA = utils$1.add32(utils$1.add32(newA, (b ^ c ^ d) >>> 0), 3395469782);
        }
        e = d;
        d = c;
        c = utils$1.rotl32(b, 30);
        b = a;
        a = (newA & 4294967295) >>> 0;
      }
      this.digest[S$.$_set](0, utils$1.add32(a, this.digest[S$.$_get](0)));
      this.digest[S$.$_set](1, utils$1.add32(b, this.digest[S$.$_get](1)));
      this.digest[S$.$_set](2, utils$1.add32(c, this.digest[S$.$_get](2)));
      this.digest[S$.$_set](3, utils$1.add32(d, this.digest[S$.$_get](3)));
      this.digest[S$.$_set](4, utils$1.add32(e, this.digest[S$.$_get](4)));
    }
  };
  (sha1._Sha1Sink.new = function(sink) {
    this[S$.digest$1] = _native_typed_data.NativeUint32List.new(5);
    this[S$._extended] = _native_typed_data.NativeUint32List.new(80);
    sha1._Sha1Sink.__proto__.new.call(this, sink, 16);
    this.digest[S$.$_set](0, 1732584193);
    this.digest[S$.$_set](1, 4023233417);
    this.digest[S$.$_set](2, 2562383102);
    this.digest[S$.$_set](3, 271733878);
    this.digest[S$.$_set](4, 3285377520);
  }).prototype = sha1._Sha1Sink.prototype;
  dart.addTypeTests(sha1._Sha1Sink);
  dart.addTypeCaches(sha1._Sha1Sink);
  dart.setMethodSignature(sha1._Sha1Sink, () => ({
    __proto__: dart.getMethods(sha1._Sha1Sink.__proto__),
    updateHash: dart.fnType(dart.void, [typed_data.Uint32List])
  }));
  dart.setLibraryUri(sha1._Sha1Sink, I[63]);
  dart.setFieldSignature(sha1._Sha1Sink, () => ({
    __proto__: dart.getFields(sha1._Sha1Sink.__proto__),
    digest: dart.finalFieldType(typed_data.Uint32List),
    [S$._extended]: dart.finalFieldType(typed_data.Uint32List)
  }));
  dart.defineLazy(sha1, {
    /*sha1.sha1*/get sha1() {
      return C[48] || CT.C48;
    }
  }, false);
  sha256._Sha256 = class _Sha256 extends hash.Hash {
    get blockSize() {
      return this[S$.blockSize$2];
    }
    set blockSize(value) {
      super.blockSize = value;
    }
    static ['_#_#tearOff']() {
      return new sha256._Sha256.__();
    }
    startChunkedConversion(sink) {
      T$.SinkOfDigest().as(sink);
      return new convert._ByteAdapterSink.new(new sha256._Sha256Sink.new(sink));
    }
  };
  (sha256._Sha256.__ = function() {
    this[S$.blockSize$2] = 16 * 4;
    sha256._Sha256.__proto__.new.call(this);
    ;
  }).prototype = sha256._Sha256.prototype;
  dart.addTypeTests(sha256._Sha256);
  dart.addTypeCaches(sha256._Sha256);
  dart.setMethodSignature(sha256._Sha256, () => ({
    __proto__: dart.getMethods(sha256._Sha256.__proto__),
    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(sha256._Sha256, I[65]);
  dart.setFieldSignature(sha256._Sha256, () => ({
    __proto__: dart.getFields(sha256._Sha256.__proto__),
    blockSize: dart.finalFieldType(core.int)
  }));
  sha256._Sha224 = class _Sha224 extends hash.Hash {
    get blockSize() {
      return this[S$.blockSize$3];
    }
    set blockSize(value) {
      super.blockSize = value;
    }
    static ['_#_#tearOff']() {
      return new sha256._Sha224.__();
    }
    startChunkedConversion(sink) {
      T$.SinkOfDigest().as(sink);
      return new convert._ByteAdapterSink.new(new sha256._Sha224Sink.new(sink));
    }
  };
  (sha256._Sha224.__ = function() {
    this[S$.blockSize$3] = 16 * 4;
    sha256._Sha224.__proto__.new.call(this);
    ;
  }).prototype = sha256._Sha224.prototype;
  dart.addTypeTests(sha256._Sha224);
  dart.addTypeCaches(sha256._Sha224);
  dart.setMethodSignature(sha256._Sha224, () => ({
    __proto__: dart.getMethods(sha256._Sha224.__proto__),
    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(sha256._Sha224, I[65]);
  dart.setFieldSignature(sha256._Sha224, () => ({
    __proto__: dart.getFields(sha256._Sha224.__proto__),
    blockSize: dart.finalFieldType(core.int)
  }));
  sha256._Sha32BitSink = class _Sha32BitSink extends hash_sink.HashSink {
    [S$._rotr32](n, x) {
      return (x[S$.$rightShift](n) | (x[S$.$leftShift](32 - n) & 4294967295) >>> 0) >>> 0;
    }
    [S$._ch](x, y, z) {
      return (x & y ^ (~x & 4294967295 & z) >>> 0) >>> 0;
    }
    [S$._maj](x, y, z) {
      return (x & y ^ (x & z) >>> 0 ^ (y & z) >>> 0) >>> 0;
    }
    [S$._bsig0](x) {
      return (this[S$._rotr32](2, x) ^ this[S$._rotr32](13, x) ^ this[S$._rotr32](22, x)) >>> 0;
    }
    [S$._bsig1](x) {
      return (this[S$._rotr32](6, x) ^ this[S$._rotr32](11, x) ^ this[S$._rotr32](25, x)) >>> 0;
    }
    [S$._ssig0](x) {
      return (this[S$._rotr32](7, x) ^ this[S$._rotr32](18, x) ^ x[S$.$rightShift](3)) >>> 0;
    }
    [S$._ssig1](x) {
      return (this[S$._rotr32](17, x) ^ this[S$._rotr32](19, x) ^ x[S$.$rightShift](10)) >>> 0;
    }
    updateHash(chunk) {
      if (!(chunk[S$.$length] === 16)) dart.assertFailed(null, I[66], 95, 12, "chunk.length == 16");
      for (let i = 0; i < 16; i = i + 1) {
        this[S$._extended$1][S$.$_set](i, chunk[S$.$_get](i));
      }
      for (let i = 16; i < 64; i = i + 1) {
        this[S$._extended$1][S$.$_set](i, utils$1.add32(utils$1.add32(this[S$._ssig1](this[S$._extended$1][S$.$_get](i - 2)), this[S$._extended$1][S$.$_get](i - 7)), utils$1.add32(this[S$._ssig0](this[S$._extended$1][S$.$_get](i - 15)), this[S$._extended$1][S$.$_get](i - 16))));
      }
      let a = this[S$._digest][S$.$_get](0);
      let b = this[S$._digest][S$.$_get](1);
      let c = this[S$._digest][S$.$_get](2);
      let d = this[S$._digest][S$.$_get](3);
      let e = this[S$._digest][S$.$_get](4);
      let f = this[S$._digest][S$.$_get](5);
      let g = this[S$._digest][S$.$_get](6);
      let h = this[S$._digest][S$.$_get](7);
      for (let i = 0; i < 64; i = i + 1) {
        let temp1 = utils$1.add32(utils$1.add32(h, this[S$._bsig1](e)), utils$1.add32(this[S$._ch](e, f, g), utils$1.add32(sha256._noise[S$.$_get](i), this[S$._extended$1][S$.$_get](i))));
        let temp2 = utils$1.add32(this[S$._bsig0](a), this[S$._maj](a, b, c));
        h = g;
        g = f;
        f = e;
        e = utils$1.add32(d, temp1);
        d = c;
        c = b;
        b = a;
        a = utils$1.add32(temp1, temp2);
      }
      this[S$._digest][S$.$_set](0, utils$1.add32(a, this[S$._digest][S$.$_get](0)));
      this[S$._digest][S$.$_set](1, utils$1.add32(b, this[S$._digest][S$.$_get](1)));
      this[S$._digest][S$.$_set](2, utils$1.add32(c, this[S$._digest][S$.$_get](2)));
      this[S$._digest][S$.$_set](3, utils$1.add32(d, this[S$._digest][S$.$_get](3)));
      this[S$._digest][S$.$_set](4, utils$1.add32(e, this[S$._digest][S$.$_get](4)));
      this[S$._digest][S$.$_set](5, utils$1.add32(f, this[S$._digest][S$.$_get](5)));
      this[S$._digest][S$.$_set](6, utils$1.add32(g, this[S$._digest][S$.$_get](6)));
      this[S$._digest][S$.$_set](7, utils$1.add32(h, this[S$._digest][S$.$_get](7)));
    }
  };
  (sha256._Sha32BitSink.new = function(sink, _digest) {
    this[S$._extended$1] = _native_typed_data.NativeUint32List.new(64);
    this[S$._digest] = _digest;
    sha256._Sha32BitSink.__proto__.new.call(this, sink, 16);
    ;
  }).prototype = sha256._Sha32BitSink.prototype;
  dart.addTypeTests(sha256._Sha32BitSink);
  dart.addTypeCaches(sha256._Sha32BitSink);
  dart.setMethodSignature(sha256._Sha32BitSink, () => ({
    __proto__: dart.getMethods(sha256._Sha32BitSink.__proto__),
    [S$._rotr32]: dart.fnType(core.int, [core.int, core.int]),
    [S$._ch]: dart.fnType(core.int, [core.int, core.int, core.int]),
    [S$._maj]: dart.fnType(core.int, [core.int, core.int, core.int]),
    [S$._bsig0]: dart.fnType(core.int, [core.int]),
    [S$._bsig1]: dart.fnType(core.int, [core.int]),
    [S$._ssig0]: dart.fnType(core.int, [core.int]),
    [S$._ssig1]: dart.fnType(core.int, [core.int]),
    updateHash: dart.fnType(dart.void, [typed_data.Uint32List])
  }));
  dart.setLibraryUri(sha256._Sha32BitSink, I[65]);
  dart.setFieldSignature(sha256._Sha32BitSink, () => ({
    __proto__: dart.getFields(sha256._Sha32BitSink.__proto__),
    [S$._digest]: dart.finalFieldType(typed_data.Uint32List),
    [S$._extended$1]: dart.finalFieldType(typed_data.Uint32List)
  }));
  sha256._Sha256Sink = class _Sha256Sink extends sha256._Sha32BitSink {
    get digest() {
      return this[S$._digest];
    }
    static ['_#new#tearOff'](sink) {
      return new sha256._Sha256Sink.new(sink);
    }
  };
  (sha256._Sha256Sink.new = function(sink) {
    sha256._Sha256Sink.__proto__.new.call(this, sink, _native_typed_data.NativeUint32List.fromList(T$.JSArrayOfint().of([1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225])));
    ;
  }).prototype = sha256._Sha256Sink.prototype;
  dart.addTypeTests(sha256._Sha256Sink);
  dart.addTypeCaches(sha256._Sha256Sink);
  dart.setGetterSignature(sha256._Sha256Sink, () => ({
    __proto__: dart.getGetters(sha256._Sha256Sink.__proto__),
    digest: typed_data.Uint32List
  }));
  dart.setLibraryUri(sha256._Sha256Sink, I[65]);
  sha256._Sha224Sink = class _Sha224Sink extends sha256._Sha32BitSink {
    get digest() {
      return this[S$._digest][S$.$buffer][S$.$asUint32List](0, 7);
    }
    static ['_#new#tearOff'](sink) {
      return new sha256._Sha224Sink.new(sink);
    }
  };
  (sha256._Sha224Sink.new = function(sink) {
    sha256._Sha224Sink.__proto__.new.call(this, sink, _native_typed_data.NativeUint32List.fromList(T$.JSArrayOfint().of([3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428])));
    ;
  }).prototype = sha256._Sha224Sink.prototype;
  dart.addTypeTests(sha256._Sha224Sink);
  dart.addTypeCaches(sha256._Sha224Sink);
  dart.setGetterSignature(sha256._Sha224Sink, () => ({
    __proto__: dart.getGetters(sha256._Sha224Sink.__proto__),
    digest: typed_data.Uint32List
  }));
  dart.setLibraryUri(sha256._Sha224Sink, I[65]);
  dart.defineLazy(sha256, {
    /*sha256.sha256*/get sha256() {
      return C[49] || CT.C49;
    },
    /*sha256.sha224*/get sha224() {
      return C[50] || CT.C50;
    },
    /*sha256._noise*/get _noise() {
      return C[51] || CT.C51;
    }
  }, false);
  sha512._Sha384 = class _Sha384 extends hash.Hash {
    get blockSize() {
      return this[S$.blockSize$4];
    }
    set blockSize(value) {
      super.blockSize = value;
    }
    static ['_#_#tearOff']() {
      return new sha512._Sha384.__();
    }
    startChunkedConversion(sink) {
      T$.SinkOfDigest().as(sink);
      return new convert._ByteAdapterSink.new(new sha512_slowsinks.Sha384Sink.new(sink));
    }
  };
  (sha512._Sha384.__ = function() {
    this[S$.blockSize$4] = 32 * 4;
    sha512._Sha384.__proto__.new.call(this);
    ;
  }).prototype = sha512._Sha384.prototype;
  dart.addTypeTests(sha512._Sha384);
  dart.addTypeCaches(sha512._Sha384);
  dart.setMethodSignature(sha512._Sha384, () => ({
    __proto__: dart.getMethods(sha512._Sha384.__proto__),
    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(sha512._Sha384, I[67]);
  dart.setFieldSignature(sha512._Sha384, () => ({
    __proto__: dart.getFields(sha512._Sha384.__proto__),
    blockSize: dart.finalFieldType(core.int)
  }));
  sha512._Sha512 = class _Sha512 extends hash.Hash {
    get blockSize() {
      return this[S$.blockSize$5];
    }
    set blockSize(value) {
      super.blockSize = value;
    }
    static ['_#_#tearOff']() {
      return new sha512._Sha512.__();
    }
    startChunkedConversion(sink) {
      T$.SinkOfDigest().as(sink);
      return new convert._ByteAdapterSink.new(new sha512_slowsinks.Sha512Sink.new(sink));
    }
  };
  (sha512._Sha512.__ = function() {
    this[S$.blockSize$5] = 32 * 4;
    sha512._Sha512.__proto__.new.call(this);
    ;
  }).prototype = sha512._Sha512.prototype;
  dart.addTypeTests(sha512._Sha512);
  dart.addTypeCaches(sha512._Sha512);
  dart.setMethodSignature(sha512._Sha512, () => ({
    __proto__: dart.getMethods(sha512._Sha512.__proto__),
    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(sha512._Sha512, I[67]);
  dart.setFieldSignature(sha512._Sha512, () => ({
    __proto__: dart.getFields(sha512._Sha512.__proto__),
    blockSize: dart.finalFieldType(core.int)
  }));
  sha512._Sha512224 = class _Sha512224 extends hash.Hash {
    get blockSize() {
      return this[S$.blockSize$6];
    }
    set blockSize(value) {
      super.blockSize = value;
    }
    static ['_#new#tearOff']() {
      return new sha512._Sha512224.new();
    }
    startChunkedConversion(sink) {
      T$.SinkOfDigest().as(sink);
      return new convert._ByteAdapterSink.new(new sha512_slowsinks.Sha512224Sink.new(sink));
    }
  };
  (sha512._Sha512224.new = function() {
    this[S$.blockSize$6] = 32 * 4;
    sha512._Sha512224.__proto__.new.call(this);
    ;
  }).prototype = sha512._Sha512224.prototype;
  dart.addTypeTests(sha512._Sha512224);
  dart.addTypeCaches(sha512._Sha512224);
  dart.setMethodSignature(sha512._Sha512224, () => ({
    __proto__: dart.getMethods(sha512._Sha512224.__proto__),
    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(sha512._Sha512224, I[67]);
  dart.setFieldSignature(sha512._Sha512224, () => ({
    __proto__: dart.getFields(sha512._Sha512224.__proto__),
    blockSize: dart.finalFieldType(core.int)
  }));
  sha512._Sha512256 = class _Sha512256 extends hash.Hash {
    get blockSize() {
      return this[S$.blockSize$7];
    }
    set blockSize(value) {
      super.blockSize = value;
    }
    static ['_#new#tearOff']() {
      return new sha512._Sha512256.new();
    }
    startChunkedConversion(sink) {
      T$.SinkOfDigest().as(sink);
      return new convert._ByteAdapterSink.new(new sha512_slowsinks.Sha512256Sink.new(sink));
    }
  };
  (sha512._Sha512256.new = function() {
    this[S$.blockSize$7] = 32 * 4;
    sha512._Sha512256.__proto__.new.call(this);
    ;
  }).prototype = sha512._Sha512256.prototype;
  dart.addTypeTests(sha512._Sha512256);
  dart.addTypeCaches(sha512._Sha512256);
  dart.setMethodSignature(sha512._Sha512256, () => ({
    __proto__: dart.getMethods(sha512._Sha512256.__proto__),
    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(sha512._Sha512256, I[67]);
  dart.setFieldSignature(sha512._Sha512256, () => ({
    __proto__: dart.getFields(sha512._Sha512256.__proto__),
    blockSize: dart.finalFieldType(core.int)
  }));
  dart.defineLazy(sha512, {
    /*sha512.sha384*/get sha384() {
      return C[52] || CT.C52;
    },
    /*sha512.sha512*/get sha512() {
      return C[53] || CT.C53;
    },
    /*sha512.sha512224*/get sha512224() {
      return C[54] || CT.C54;
    },
    /*sha512.sha512256*/get sha512256() {
      return C[55] || CT.C55;
    }
  }, false);
  aes_engine.AesEngine = class AesEngine extends core.Object {
    static generateWorkingKey(key, forEncryption) {
      let w = T$.ListOfUint32List().generate(14 + 1, dart.fn(_ => _native_typed_data.NativeUint32List.new(4), T$.intToUint32List()));
      let t0 = extensions['ListIntX|readUint32'](key, 0);
      let t1 = extensions['ListIntX|readUint32'](key, 4);
      let t2 = extensions['ListIntX|readUint32'](key, 8);
      let t3 = extensions['ListIntX|readUint32'](key, 12);
      let t4 = extensions['ListIntX|readUint32'](key, 16);
      let t5 = extensions['ListIntX|readUint32'](key, 20);
      let t6 = extensions['ListIntX|readUint32'](key, 24);
      let t7 = extensions['ListIntX|readUint32'](key, 28);
      w[S$.$_get](0)[S$.$_set](0, t0);
      w[S$.$_get](0)[S$.$_set](1, t1);
      w[S$.$_get](0)[S$.$_set](2, t2);
      w[S$.$_get](0)[S$.$_set](3, t3);
      w[S$.$_get](1)[S$.$_set](0, t4);
      w[S$.$_get](1)[S$.$_set](1, t5);
      w[S$.$_get](1)[S$.$_set](2, t6);
      w[S$.$_get](1)[S$.$_set](3, t7);
      let u = null;
      let rcon = 1;
      for (let i = 2; i < 14; i = i + 2) {
        u = (aes_engine._subWord((t7[S$.$rightShift](8) | ((t7 & 255) >>> 0 << 24 & 4294967295) >>> 0) >>> 0) ^ rcon) >>> 0;
        rcon = rcon << 1 >>> 0;
        t0 = (t0 ^ u) >>> 0;
        w[S$.$_get](i)[S$.$_set](0, t0);
        t1 = (t1 ^ t0) >>> 0;
        w[S$.$_get](i)[S$.$_set](1, t1);
        t2 = (t2 ^ t1) >>> 0;
        w[S$.$_get](i)[S$.$_set](2, t2);
        t3 = (t3 ^ t2) >>> 0;
        w[S$.$_get](i)[S$.$_set](3, t3);
        u = aes_engine._subWord(t3);
        t4 = (t4 ^ u) >>> 0;
        w[S$.$_get](i + 1)[S$.$_set](0, t4);
        t5 = (t5 ^ t4) >>> 0;
        w[S$.$_get](i + 1)[S$.$_set](1, t5);
        t6 = (t6 ^ t5) >>> 0;
        w[S$.$_get](i + 1)[S$.$_set](2, t6);
        t7 = (t7 ^ t6) >>> 0;
        w[S$.$_get](i + 1)[S$.$_set](3, t7);
      }
      u = (aes_engine._subWord((t7[S$.$rightShift](8) | ((t7 & 255) >>> 0 << 24 & 4294967295) >>> 0) >>> 0) ^ rcon) >>> 0;
      t0 = (t0 ^ u) >>> 0;
      w[S$.$_get](14)[S$.$_set](0, t0);
      t1 = (t1 ^ t0) >>> 0;
      w[S$.$_get](14)[S$.$_set](1, t1);
      t2 = (t2 ^ t1) >>> 0;
      w[S$.$_get](14)[S$.$_set](2, t2);
      t3 = (t3 ^ t2) >>> 0;
      w[S$.$_get](14)[S$.$_set](3, t3);
      if (!forEncryption) {
        for (let j = 1; j < 14; j = j + 1) {
          for (let i = 0; i < 4; i = i + 1) {
            w[S$.$_get](j)[S$.$_set](i, aes_engine._invMcol(w[S$.$_get](j)[S$.$_get](i)));
          }
        }
      }
      return w;
    }
    static encryptBlock(workingKey, inp, inpOff, out, outOff) {
      let c0 = (extensions['ListIntX|readUint32'](inp, inpOff) ^ workingKey[S$.$_get](0)[S$.$_get](0)) >>> 0;
      let c1 = (extensions['ListIntX|readUint32'](inp, inpOff + 4) ^ workingKey[S$.$_get](0)[S$.$_get](1)) >>> 0;
      let c2 = (extensions['ListIntX|readUint32'](inp, inpOff + 8) ^ workingKey[S$.$_get](0)[S$.$_get](2)) >>> 0;
      let c3 = (extensions['ListIntX|readUint32'](inp, inpOff + 12) ^ workingKey[S$.$_get](0)[S$.$_get](3)) >>> 0;
      let r0 = null;
      let r1 = null;
      let r2 = null;
      let r3 = null;
      let r = 1;
      while (r < 14 - 1) {
        r0 = (aes_tables.table0[S$.$_get](c0 & 255) ^ aes_tables.table1[S$.$_get](c1 >> 8 & 255) ^ aes_tables.table2[S$.$_get](c2 >> 16 & 255) ^ aes_tables.table3[S$.$_get](c3[S$.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](0)) >>> 0;
        r1 = (aes_tables.table0[S$.$_get](c1 & 255) ^ aes_tables.table1[S$.$_get](c2 >> 8 & 255) ^ aes_tables.table2[S$.$_get](c3 >> 16 & 255) ^ aes_tables.table3[S$.$_get](c0[S$.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](1)) >>> 0;
        r2 = (aes_tables.table0[S$.$_get](c2 & 255) ^ aes_tables.table1[S$.$_get](c3 >> 8 & 255) ^ aes_tables.table2[S$.$_get](c0 >> 16 & 255) ^ aes_tables.table3[S$.$_get](c1[S$.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](2)) >>> 0;
        r3 = (aes_tables.table0[S$.$_get](c3 & 255) ^ aes_tables.table1[S$.$_get](c0 >> 8 & 255) ^ aes_tables.table2[S$.$_get](c1 >> 16 & 255) ^ aes_tables.table3[S$.$_get](c2[S$.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](3)) >>> 0;
        r = r + 1;
        c0 = (aes_tables.table0[S$.$_get](r0 & 255) ^ aes_tables.table1[S$.$_get](r1 >> 8 & 255) ^ aes_tables.table2[S$.$_get](r2 >> 16 & 255) ^ aes_tables.table3[S$.$_get](r3[S$.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](0)) >>> 0;
        c1 = (aes_tables.table0[S$.$_get](r1 & 255) ^ aes_tables.table1[S$.$_get](r2 >> 8 & 255) ^ aes_tables.table2[S$.$_get](r3 >> 16 & 255) ^ aes_tables.table3[S$.$_get](r0[S$.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](1)) >>> 0;
        c2 = (aes_tables.table0[S$.$_get](r2 & 255) ^ aes_tables.table1[S$.$_get](r3 >> 8 & 255) ^ aes_tables.table2[S$.$_get](r0 >> 16 & 255) ^ aes_tables.table3[S$.$_get](r1[S$.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](2)) >>> 0;
        c3 = (aes_tables.table0[S$.$_get](r3 & 255) ^ aes_tables.table1[S$.$_get](r0 >> 8 & 255) ^ aes_tables.table2[S$.$_get](r1 >> 16 & 255) ^ aes_tables.table3[S$.$_get](r2[S$.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](3)) >>> 0;
        r = r + 1;
      }
      r0 = (aes_tables.table0[S$.$_get](c0 & 255) ^ aes_tables.table1[S$.$_get](c1 >> 8 & 255) ^ aes_tables.table2[S$.$_get](c2 >> 16 & 255) ^ aes_tables.table3[S$.$_get](c3[S$.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](0)) >>> 0;
      r1 = (aes_tables.table0[S$.$_get](c1 & 255) ^ aes_tables.table1[S$.$_get](c2 >> 8 & 255) ^ aes_tables.table2[S$.$_get](c3 >> 16 & 255) ^ aes_tables.table3[S$.$_get](c0[S$.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](1)) >>> 0;
      r2 = (aes_tables.table0[S$.$_get](c2 & 255) ^ aes_tables.table1[S$.$_get](c3 >> 8 & 255) ^ aes_tables.table2[S$.$_get](c0 >> 16 & 255) ^ aes_tables.table3[S$.$_get](c1[S$.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](2)) >>> 0;
      r3 = (aes_tables.table0[S$.$_get](c3 & 255) ^ aes_tables.table1[S$.$_get](c0 >> 8 & 255) ^ aes_tables.table2[S$.$_get](c1 >> 16 & 255) ^ aes_tables.table3[S$.$_get](c2[S$.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](3)) >>> 0;
      r = r + 1;
      c0 = (aes_tables.sBox[S$.$_get](r0 & 255) & 255 ^ aes_tables.sBox[S$.$_get](r1 >> 8 & 255) << 8 >>> 0 ^ aes_tables.sBox[S$.$_get](r2 >> 16 & 255) << 16 >>> 0 ^ aes_tables.sBox[S$.$_get](r3[S$.$rightShift](24) & 255) << 24 >>> 0 ^ workingKey[S$.$_get](r)[S$.$_get](0)) >>> 0;
      c1 = (aes_tables.sBox[S$.$_get](r1 & 255) & 255 ^ aes_tables.sBox[S$.$_get](r2 >> 8 & 255) << 8 >>> 0 ^ aes_tables.sBox[S$.$_get](r3 >> 16 & 255) << 16 >>> 0 ^ aes_tables.sBox[S$.$_get](r0[S$.$rightShift](24) & 255) << 24 >>> 0 ^ workingKey[S$.$_get](r)[S$.$_get](1)) >>> 0;
      c2 = (aes_tables.sBox[S$.$_get](r2 & 255) & 255 ^ aes_tables.sBox[S$.$_get](r3 >> 8 & 255) << 8 >>> 0 ^ aes_tables.sBox[S$.$_get](r0 >> 16 & 255) << 16 >>> 0 ^ aes_tables.sBox[S$.$_get](r1[S$.$rightShift](24) & 255) << 24 >>> 0 ^ workingKey[S$.$_get](r)[S$.$_get](2)) >>> 0;
      c3 = (aes_tables.sBox[S$.$_get](r3 & 255) & 255 ^ aes_tables.sBox[S$.$_get](r0 >> 8 & 255) << 8 >>> 0 ^ aes_tables.sBox[S$.$_get](r1 >> 16 & 255) << 16 >>> 0 ^ aes_tables.sBox[S$.$_get](r2[S$.$rightShift](24) & 255) << 24 >>> 0 ^ workingKey[S$.$_get](r)[S$.$_get](3)) >>> 0;
      extensions['ListIntX|writeUint32'](out, outOff, c0);
      extensions['ListIntX|writeUint32'](out, outOff + 4, c1);
      extensions['ListIntX|writeUint32'](out, outOff + 8, c2);
      extensions['ListIntX|writeUint32'](out, outOff + 12, c3);
    }
    static decryptBlock(workingKey, inp, inpOff, out, outOff) {
      let c0 = (extensions['ListIntX|readUint32'](inp, inpOff) ^ workingKey[S$.$_get](14)[S$.$_get](0)) >>> 0;
      let c1 = (extensions['ListIntX|readUint32'](inp, inpOff + 4) ^ workingKey[S$.$_get](14)[S$.$_get](1)) >>> 0;
      let c2 = (extensions['ListIntX|readUint32'](inp, inpOff + 8) ^ workingKey[S$.$_get](14)[S$.$_get](2)) >>> 0;
      let c3 = (extensions['ListIntX|readUint32'](inp, inpOff + 12) ^ workingKey[S$.$_get](14)[S$.$_get](3)) >>> 0;
      let r0 = null;
      let r1 = null;
      let r2 = null;
      let r3 = null;
      let r = 14 - 1;
      while (r > 1) {
        r0 = (aes_tables.table0Inv[S$.$_get](c0 & 255) ^ aes_tables.table1Inv[S$.$_get](c3 >> 8 & 255) ^ aes_tables.table2Inv[S$.$_get](c2 >> 16 & 255) ^ aes_tables.table3Inv[S$.$_get](c1[S$.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](0)) >>> 0;
        r1 = (aes_tables.table0Inv[S$.$_get](c1 & 255) ^ aes_tables.table1Inv[S$.$_get](c0 >> 8 & 255) ^ aes_tables.table2Inv[S$.$_get](c3 >> 16 & 255) ^ aes_tables.table3Inv[S$.$_get](c2[S$.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](1)) >>> 0;
        r2 = (aes_tables.table0Inv[S$.$_get](c2 & 255) ^ aes_tables.table1Inv[S$.$_get](c1 >> 8 & 255) ^ aes_tables.table2Inv[S$.$_get](c0 >> 16 & 255) ^ aes_tables.table3Inv[S$.$_get](c3[S$.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](2)) >>> 0;
        r3 = (aes_tables.table0Inv[S$.$_get](c3 & 255) ^ aes_tables.table1Inv[S$.$_get](c2 >> 8 & 255) ^ aes_tables.table2Inv[S$.$_get](c1 >> 16 & 255) ^ aes_tables.table3Inv[S$.$_get](c0[S$.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](3)) >>> 0;
        r = r - 1;
        c0 = (aes_tables.table0Inv[S$.$_get](r0 & 255) ^ aes_tables.table1Inv[S$.$_get](r3 >> 8 & 255) ^ aes_tables.table2Inv[S$.$_get](r2 >> 16 & 255) ^ aes_tables.table3Inv[S$.$_get](r1[S$.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](0)) >>> 0;
        c1 = (aes_tables.table0Inv[S$.$_get](r1 & 255) ^ aes_tables.table1Inv[S$.$_get](r0 >> 8 & 255) ^ aes_tables.table2Inv[S$.$_get](r3 >> 16 & 255) ^ aes_tables.table3Inv[S$.$_get](r2[S$.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](1)) >>> 0;
        c2 = (aes_tables.table0Inv[S$.$_get](r2 & 255) ^ aes_tables.table1Inv[S$.$_get](r1 >> 8 & 255) ^ aes_tables.table2Inv[S$.$_get](r0 >> 16 & 255) ^ aes_tables.table3Inv[S$.$_get](r3[S$.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](2)) >>> 0;
        c3 = (aes_tables.table0Inv[S$.$_get](r3 & 255) ^ aes_tables.table1Inv[S$.$_get](r2 >> 8 & 255) ^ aes_tables.table2Inv[S$.$_get](r1 >> 16 & 255) ^ aes_tables.table3Inv[S$.$_get](r0[S$.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](3)) >>> 0;
        r = r - 1;
      }
      r0 = (aes_tables.table0Inv[S$.$_get](c0 & 255) ^ aes_tables.table1Inv[S$.$_get](c3 >> 8 & 255) ^ aes_tables.table2Inv[S$.$_get](c2 >> 16 & 255) ^ aes_tables.table3Inv[S$.$_get](c1[S$.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](0)) >>> 0;
      r1 = (aes_tables.table0Inv[S$.$_get](c1 & 255) ^ aes_tables.table1Inv[S$.$_get](c0 >> 8 & 255) ^ aes_tables.table2Inv[S$.$_get](c3 >> 16 & 255) ^ aes_tables.table3Inv[S$.$_get](c2[S$.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](1)) >>> 0;
      r2 = (aes_tables.table0Inv[S$.$_get](c2 & 255) ^ aes_tables.table1Inv[S$.$_get](c1 >> 8 & 255) ^ aes_tables.table2Inv[S$.$_get](c0 >> 16 & 255) ^ aes_tables.table3Inv[S$.$_get](c3[S$.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](2)) >>> 0;
      r3 = (aes_tables.table0Inv[S$.$_get](c3 & 255) ^ aes_tables.table1Inv[S$.$_get](c2 >> 8 & 255) ^ aes_tables.table2Inv[S$.$_get](c1 >> 16 & 255) ^ aes_tables.table3Inv[S$.$_get](c0[S$.$rightShift](24) & 255) ^ workingKey[S$.$_get](r)[S$.$_get](3)) >>> 0;
      c0 = (aes_tables.sBoxInv[S$.$_get](r0 & 255) ^ aes_tables.sBoxInv[S$.$_get](r3 >> 8 & 255) << 8 >>> 0 ^ aes_tables.sBoxInv[S$.$_get](r2 >> 16 & 255) << 16 >>> 0 ^ aes_tables.sBoxInv[S$.$_get](r1[S$.$rightShift](24) & 255) << 24 >>> 0 ^ workingKey[S$.$_get](0)[S$.$_get](0)) >>> 0;
      c1 = (aes_tables.sBoxInv[S$.$_get](r1 & 255) & 255 ^ aes_tables.sBoxInv[S$.$_get](r0 >> 8 & 255) << 8 >>> 0 ^ aes_tables.sBoxInv[S$.$_get](r3 >> 16 & 255) << 16 >>> 0 ^ aes_tables.sBoxInv[S$.$_get](r2[S$.$rightShift](24) & 255) << 24 >>> 0 ^ workingKey[S$.$_get](0)[S$.$_get](1)) >>> 0;
      c2 = (aes_tables.sBoxInv[S$.$_get](r2 & 255) & 255 ^ aes_tables.sBoxInv[S$.$_get](r1 >> 8 & 255) << 8 >>> 0 ^ aes_tables.sBoxInv[S$.$_get](r0 >> 16 & 255) << 16 >>> 0 ^ aes_tables.sBoxInv[S$.$_get](r3[S$.$rightShift](24) & 255) << 24 >>> 0 ^ workingKey[S$.$_get](0)[S$.$_get](2)) >>> 0;
      c3 = (aes_tables.sBoxInv[S$.$_get](r3 & 255) & 255 ^ aes_tables.sBoxInv[S$.$_get](r2 >> 8 & 255) << 8 >>> 0 ^ aes_tables.sBoxInv[S$.$_get](r1 >> 16 & 255) << 16 >>> 0 ^ aes_tables.sBoxInv[S$.$_get](r0[S$.$rightShift](24) & 255) << 24 >>> 0 ^ workingKey[S$.$_get](0)[S$.$_get](3)) >>> 0;
      extensions['ListIntX|writeUint32'](out, outOff, c0);
      extensions['ListIntX|writeUint32'](out, outOff + 4, c1);
      extensions['ListIntX|writeUint32'](out, outOff + 8, c2);
      extensions['ListIntX|writeUint32'](out, outOff + 12, c3);
    }
    static ['_#new#tearOff']() {
      return new aes_engine.AesEngine.new();
    }
  };
  (aes_engine.AesEngine.new = function() {
    ;
  }).prototype = aes_engine.AesEngine.prototype;
  dart.addTypeTests(aes_engine.AesEngine);
  dart.addTypeCaches(aes_engine.AesEngine);
  dart.setStaticMethodSignature(aes_engine.AesEngine, () => ['generateWorkingKey', 'encryptBlock', 'decryptBlock']);
  dart.setLibraryUri(aes_engine.AesEngine, I[68]);
  aes_engine._subWord = function _subWord(x) {
    return (aes_tables.sBox[S$.$_get](x & 255) | aes_tables.sBox[S$.$_get](x >> 8 & 255) << 8 >>> 0 | aes_tables.sBox[S$.$_get](x >> 16 & 255) << 16 >>> 0 | aes_tables.sBox[S$.$_get](x[S$.$rightShift](24) & 255) << 24 >>> 0) >>> 0;
  };
  aes_engine._invMcol = function _invMcol(x) {
    let f2 = ((x & 2139062143) >>> 0 << 1 ^ ((x & 2155905152) >>> 7) * 27) >>> 0;
    let f4 = ((f2 & 2139062143) >>> 0 << 1 ^ ((f2 & 2155905152) >>> 7) * 27) >>> 0;
    let f8 = ((f4 & 2139062143) >>> 0 << 1 ^ ((f4 & 2155905152) >>> 7) * 27) >>> 0;
    let f9 = (x ^ f8) >>> 0;
    let s1 = ((f2 ^ f9) >>> 8 | (((f2 ^ f9) & 255) >>> 0 << 24 & 4294967295) >>> 0) >>> 0;
    let s2 = ((f4 ^ f9) >>> 16 | (((f4 ^ f9) & 65535) >>> 0 << 16 & 4294967295) >>> 0) >>> 0;
    let s3 = (f9[S$.$rightShift](24) | ((f9 & 4294967295) >>> 0 << 8 & 4294967295) >>> 0) >>> 0;
    return (f2 ^ f4 ^ f8 ^ s1 ^ s2 ^ s3) >>> 0;
  };
  dart.defineLazy(aes_engine, {
    /*aes_engine.aesBlockSize*/get aesBlockSize() {
      return 16;
    },
    /*aes_engine.rounds*/get rounds() {
      return 14;
    },
    /*aes_engine._m1*/get _m1() {
      return 2155905152;
    },
    /*aes_engine._m2*/get _m2() {
      return 2139062143;
    },
    /*aes_engine._m3*/get _m3() {
      return 27;
    },
    /*aes_engine._mask8*/get _mask8() {
      return 255;
    },
    /*aes_engine._mask16*/get _mask16() {
      return 65535;
    },
    /*aes_engine._mask32*/get _mask32() {
      return 4294967295;
    }
  }, false);
  big_int_adapter.BigIntAdapter = class BigIntAdapter extends hive.TypeAdapter$(core.BigInt) {
    get typeId() {
      return this[S$.typeId$1];
    }
    set typeId(value) {
      super.typeId = value;
    }
    read(reader) {
      let len = reader.readByte();
      let intStr = reader.readString(len);
      return core.BigInt.parse(intStr);
    }
    write(writer, obj) {
      core.BigInt.as(obj);
      let intStr = obj.toString();
      writer.writeByte(intStr.length);
      writer.writeString(intStr, {writeByteCount: false});
    }
    static ['_#new#tearOff']() {
      return new big_int_adapter.BigIntAdapter.new();
    }
  };
  (big_int_adapter.BigIntAdapter.new = function() {
    this[S$.typeId$1] = 17;
    ;
  }).prototype = big_int_adapter.BigIntAdapter.prototype;
  dart.addTypeTests(big_int_adapter.BigIntAdapter);
  dart.addTypeCaches(big_int_adapter.BigIntAdapter);
  dart.setMethodSignature(big_int_adapter.BigIntAdapter, () => ({
    __proto__: dart.getMethods(big_int_adapter.BigIntAdapter.__proto__),
    read: dart.fnType(core.BigInt, [hive.BinaryReader]),
    write: dart.fnType(dart.void, [hive.BinaryWriter, dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(big_int_adapter.BigIntAdapter, I[69]);
  dart.setFieldSignature(big_int_adapter.BigIntAdapter, () => ({
    __proto__: dart.getFields(big_int_adapter.BigIntAdapter.__proto__),
    typeId: dart.finalFieldType(core.int)
  }));
  const _is_DateTimeAdapter_default = Symbol('_is_DateTimeAdapter_default');
  date_time_adapter.DateTimeAdapter$ = dart.generic(T => {
    class DateTimeAdapter extends hive.TypeAdapter$(T) {
      get typeId() {
        return this[S$.typeId$2];
      }
      set typeId(value) {
        super.typeId = value;
      }
      read(reader) {
        let millis = reader.readInt();
        return T.as(new date_time_adapter.DateTimeWithoutTZ.fromMillisecondsSinceEpoch(millis));
      }
      write(writer, obj) {
        core.DateTime.as(obj);
        writer.writeInt(obj.millisecondsSinceEpoch);
      }
      static ['_#new#tearOff'](T) {
        return new (date_time_adapter.DateTimeAdapter$(T)).new();
      }
    }
    (DateTimeAdapter.new = function() {
      this[S$.typeId$2] = 16;
      ;
    }).prototype = DateTimeAdapter.prototype;
    dart.addTypeTests(DateTimeAdapter);
    DateTimeAdapter.prototype[_is_DateTimeAdapter_default] = true;
    dart.addTypeCaches(DateTimeAdapter);
    dart.setMethodSignature(DateTimeAdapter, () => ({
      __proto__: dart.getMethods(DateTimeAdapter.__proto__),
      read: dart.fnType(T, [hive.BinaryReader]),
      write: dart.fnType(dart.void, [hive.BinaryWriter, dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(DateTimeAdapter, I[70]);
    dart.setFieldSignature(DateTimeAdapter, () => ({
      __proto__: dart.getFields(DateTimeAdapter.__proto__),
      typeId: dart.finalFieldType(core.int)
    }));
    return DateTimeAdapter;
  });
  date_time_adapter.DateTimeAdapter = date_time_adapter.DateTimeAdapter$();
  dart.addTypeTests(date_time_adapter.DateTimeAdapter, _is_DateTimeAdapter_default);
  date_time_adapter.DateTimeWithoutTZ = class DateTimeWithoutTZ extends core.DateTime {
    static ['_#fromMillisecondsSinceEpoch#tearOff'](millisecondsSinceEpoch) {
      return new date_time_adapter.DateTimeWithoutTZ.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);
    }
  };
  (date_time_adapter.DateTimeWithoutTZ.fromMillisecondsSinceEpoch = function(millisecondsSinceEpoch) {
    date_time_adapter.DateTimeWithoutTZ.__proto__.fromMillisecondsSinceEpoch.call(this, millisecondsSinceEpoch);
    ;
  }).prototype = date_time_adapter.DateTimeWithoutTZ.prototype;
  dart.addTypeTests(date_time_adapter.DateTimeWithoutTZ);
  dart.addTypeCaches(date_time_adapter.DateTimeWithoutTZ);
  dart.setLibraryUri(date_time_adapter.DateTimeWithoutTZ, I[70]);
  date_time_adapter.DateTimeWithTimezoneAdapter = class DateTimeWithTimezoneAdapter extends hive.TypeAdapter$(core.DateTime) {
    get typeId() {
      return this[S$.typeId$3];
    }
    set typeId(value) {
      super.typeId = value;
    }
    read(reader) {
      let millis = reader.readInt();
      let isUtc = reader.readBool();
      return new core.DateTime.fromMillisecondsSinceEpoch(millis, {isUtc: isUtc});
    }
    write(writer, obj) {
      core.DateTime.as(obj);
      writer.writeInt(obj.millisecondsSinceEpoch);
      writer.writeBool(obj.isUtc);
    }
    static ['_#new#tearOff']() {
      return new date_time_adapter.DateTimeWithTimezoneAdapter.new();
    }
  };
  (date_time_adapter.DateTimeWithTimezoneAdapter.new = function() {
    this[S$.typeId$3] = 18;
    ;
  }).prototype = date_time_adapter.DateTimeWithTimezoneAdapter.prototype;
  dart.addTypeTests(date_time_adapter.DateTimeWithTimezoneAdapter);
  dart.addTypeCaches(date_time_adapter.DateTimeWithTimezoneAdapter);
  dart.setMethodSignature(date_time_adapter.DateTimeWithTimezoneAdapter, () => ({
    __proto__: dart.getMethods(date_time_adapter.DateTimeWithTimezoneAdapter.__proto__),
    read: dart.fnType(core.DateTime, [hive.BinaryReader]),
    write: dart.fnType(dart.void, [hive.BinaryWriter, dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(date_time_adapter.DateTimeWithTimezoneAdapter, I[70]);
  dart.setFieldSignature(date_time_adapter.DateTimeWithTimezoneAdapter, () => ({
    __proto__: dart.getFields(date_time_adapter.DateTimeWithTimezoneAdapter.__proto__),
    typeId: dart.finalFieldType(core.int)
  }));
  storage_backend.StorageBackend = class StorageBackend extends core.Object {};
  (storage_backend.StorageBackend.new = function() {
    ;
  }).prototype = storage_backend.StorageBackend.prototype;
  dart.addTypeTests(storage_backend.StorageBackend);
  dart.addTypeCaches(storage_backend.StorageBackend);
  dart.setLibraryUri(storage_backend.StorageBackend, I[71]);
  storage_backend_memory.StorageBackendMemory = class StorageBackendMemory extends storage_backend.StorageBackend {
    get supportsCompaction() {
      return this[S$.supportsCompaction];
    }
    set supportsCompaction(value) {
      this[S$.supportsCompaction] = value;
    }
    static ['_#new#tearOff'](bytes, _cipher) {
      return new storage_backend_memory.StorageBackendMemory.new(bytes, _cipher);
    }
    get path() {
      return null;
    }
    initialize(registry, keystore, lazy) {
      let recoveryOffset = this[S$._frameHelper].framesFromBytes(dart.nullCheck(this[S$._bytes]), keystore, registry, this[S$._cipher$1]);
      if (recoveryOffset !== -1) {
        dart.throw(new hive.HiveError.new("Wrong checksum in bytes. Box may be corrupted."));
      }
      this[S$._bytes] = null;
      return T$.FutureOfvoid().value();
    }
    readValue(frame) {
      dart.throw(new core.UnsupportedError.new("This operation is unsupported for memory boxes."));
    }
    writeFrames(frames) {
      return T$.FutureOfvoid().value();
    }
    compact(frames) {
      dart.throw(new core.UnsupportedError.new("This operation is unsupported for memory boxes."));
    }
    clear() {
      return T$.FutureOfvoid().value();
    }
    close() {
      return T$.FutureOfvoid().value();
    }
    deleteFromDisk() {
      dart.throw(new core.UnsupportedError.new("This operation is unsupported for memory boxes."));
    }
    flush() {
      return T$.FutureOfvoid().value();
    }
  };
  (storage_backend_memory.StorageBackendMemory.new = function(bytes, _cipher) {
    this[S$.supportsCompaction] = false;
    this[S$._cipher$1] = _cipher;
    this[S$._bytes] = bytes;
    this[S$._frameHelper] = new frame_helper.FrameHelper.new();
    ;
  }).prototype = storage_backend_memory.StorageBackendMemory.prototype;
  dart.addTypeTests(storage_backend_memory.StorageBackendMemory);
  dart.addTypeCaches(storage_backend_memory.StorageBackendMemory);
  dart.setMethodSignature(storage_backend_memory.StorageBackendMemory, () => ({
    __proto__: dart.getMethods(storage_backend_memory.StorageBackendMemory.__proto__),
    initialize: dart.fnType(async.Future$(dart.void), [hive.TypeRegistry, dart.nullable(keystore$.Keystore), core.bool]),
    readValue: dart.fnType(async.Future, [frame$.Frame]),
    writeFrames: dart.fnType(async.Future$(dart.void), [core.List$(frame$.Frame)]),
    compact: dart.fnType(async.Future$(core.List$(frame$.Frame)), [core.Iterable$(frame$.Frame)]),
    clear: dart.fnType(async.Future$(dart.void), []),
    close: dart.fnType(async.Future$(dart.void), []),
    deleteFromDisk: dart.fnType(async.Future$(dart.void), []),
    flush: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setGetterSignature(storage_backend_memory.StorageBackendMemory, () => ({
    __proto__: dart.getGetters(storage_backend_memory.StorageBackendMemory.__proto__),
    path: dart.nullable(core.String)
  }));
  dart.setLibraryUri(storage_backend_memory.StorageBackendMemory, I[72]);
  dart.setFieldSignature(storage_backend_memory.StorageBackendMemory, () => ({
    __proto__: dart.getFields(storage_backend_memory.StorageBackendMemory.__proto__),
    [S$._cipher$1]: dart.finalFieldType(dart.nullable(hive.HiveCipher)),
    [S$._frameHelper]: dart.finalFieldType(frame_helper.FrameHelper),
    [S$._bytes]: dart.fieldType(dart.nullable(typed_data.Uint8List)),
    supportsCompaction: dart.fieldType(core.bool)
  }));
  const _is_BoxBaseImpl_default = Symbol('_is_BoxBaseImpl_default');
  box_base_impl.BoxBaseImpl$ = dart.generic(E => {
    var __t$KeystoreOfE = () => (__t$KeystoreOfE = dart.constFn(keystore$.Keystore$(E)))();
    var __t$LinkedMapOfdynamic$E = () => (__t$LinkedMapOfdynamic$E = dart.constFn(_js_helper.LinkedMap$(dart.dynamic, E)))();
    var __t$IterableOfE = () => (__t$IterableOfE = dart.constFn(core.Iterable$(E)))();
    var __t$IdentityMapOfint$E = () => (__t$IdentityMapOfint$E = dart.constFn(_js_helper.IdentityMap$(core.int, E)))();
    class BoxBaseImpl extends core.Object {
      get name() {
        return this[S$.name$3];
      }
      set name(value) {
        super.name = value;
      }
      get hive() {
        return this[S$.hive];
      }
      set hive(value) {
        super.hive = value;
      }
      get backend() {
        return this[S$.backend];
      }
      set backend(value) {
        super.backend = value;
      }
      static nullImpl(E) {
        return new (box_base_impl._NullBoxBase$(E)).new();
      }
      get keystore() {
        let t94;
        t94 = this[S$.__BoxBaseImpl_keystore];
        return t94 == null ? dart.throw(new _internal.LateError.fieldNI("keystore")) : t94;
      }
      set keystore(keystore$35param) {
        __t$KeystoreOfE().as(keystore$35param);
        this[S$.__BoxBaseImpl_keystore] = keystore$35param;
      }
      get valueType() {
        return dart.wrapType(E);
      }
      get isOpen() {
        return this[S$._open];
      }
      get path() {
        return this.backend.path;
      }
      get keys() {
        this.checkOpen();
        return this.keystore.getKeys();
      }
      get length() {
        this.checkOpen();
        return this.keystore.length;
      }
      get isEmpty() {
        return this.length === 0;
      }
      get isNotEmpty() {
        return this.length > 0;
      }
      checkOpen() {
        if (!this[S$._open]) {
          dart.throw(new hive.HiveError.new("Box has already been closed."));
        }
      }
      watch(opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        this.checkOpen();
        return this.keystore.watch({key: key});
      }
      keyAt(index) {
        this.checkOpen();
        return dart.nullCheck(this.keystore.getAt(index)).key;
      }
      initialize() {
        return this.backend.initialize(this.hive, this.keystore, this.lazy);
      }
      containsKey(key) {
        this.checkOpen();
        return this.keystore.containsKey(key);
      }
      put(key, value) {
        E.as(value);
        return this.putAll(new (__t$LinkedMapOfdynamic$E()).from([key, value]));
      }
      delete(key) {
        return this.deleteAll([key]);
      }
      add(value) {
        E.as(value);
        return async.async(core.int, (function* add() {
          let key = this.keystore.autoIncrement();
          yield this.put(key, value);
          return key;
        }).bind(this));
      }
      addAll(values) {
        __t$IterableOfE().as(values);
        return async.async(T$.IterableOfint(), (function* addAll() {
          let entries = new (__t$IdentityMapOfint$E()).new();
          for (let value of values) {
            entries[S$.$_set](this.keystore.autoIncrement(), value);
          }
          yield this.putAll(entries);
          return entries[S$.$keys];
        }).bind(this));
      }
      putAt(index, value) {
        E.as(value);
        return this.putAll(new (__t$LinkedMapOfdynamic$E()).from([dart.nullCheck(this.keystore.getAt(index)).key, value]));
      }
      deleteAt(index) {
        return this.delete(dart.nullCheck(this.keystore.getAt(index)).key);
      }
      clear() {
        return async.async(core.int, (function* clear() {
          this.checkOpen();
          yield this.backend.clear();
          return this.keystore.clear();
        }).bind(this));
      }
      compact() {
        return async.async(dart.void, (function* compact() {
          this.checkOpen();
          if (!this.backend.supportsCompaction) return;
          if (this.keystore.deletedEntries === 0) return;
          yield this.backend.compact(this.keystore.frames);
          this.keystore.resetDeletedEntries();
        }).bind(this));
      }
      performCompactionIfNeeded() {
        let t95, t94;
        if (t94 = this.keystore.length, t95 = this.keystore.deletedEntries, this[S$._compactionStrategy](t94, t95)) {
          return this.compact();
        }
        return T$.FutureOfvoid().value();
      }
      close() {
        return async.async(dart.void, (function* close() {
          if (!this[S$._open]) return;
          this[S$._open] = false;
          yield this.keystore.close();
          this.hive.unregisterBox(this.name);
          yield this.backend.close();
        }).bind(this));
      }
      deleteFromDisk() {
        return async.async(dart.void, (function* deleteFromDisk() {
          if (this[S$._open]) {
            this[S$._open] = false;
            yield this.keystore.close();
            this.hive.unregisterBox(this.name);
          }
          yield this.backend.deleteFromDisk();
        }).bind(this));
      }
    }
    (BoxBaseImpl.new = function(hive, name, keyComparator, _compactionStrategy, backend) {
      this[S$.__BoxBaseImpl_keystore] = null;
      this[S$._open] = true;
      this[S$.hive] = hive;
      this[S$.name$3] = name;
      this[S$._compactionStrategy] = _compactionStrategy;
      this[S$.backend] = backend;
      this.keystore = new (__t$KeystoreOfE()).new(this, new change_notifier$.ChangeNotifier.new(), keyComparator);
    }).prototype = BoxBaseImpl.prototype;
    dart.addTypeTests(BoxBaseImpl);
    BoxBaseImpl.prototype[_is_BoxBaseImpl_default] = true;
    dart.addTypeCaches(BoxBaseImpl);
    BoxBaseImpl[dart.implements] = () => [hive.BoxBase$(E)];
    dart.setMethodSignature(BoxBaseImpl, () => ({
      __proto__: dart.getMethods(BoxBaseImpl.__proto__),
      checkOpen: dart.fnType(dart.void, []),
      watch: dart.fnType(async.Stream$(hive.BoxEvent), [], {key: dart.dynamic}, {}),
      keyAt: dart.fnType(dart.dynamic, [core.int]),
      initialize: dart.fnType(async.Future$(dart.void), []),
      containsKey: dart.fnType(core.bool, [dart.dynamic]),
      put: dart.fnType(async.Future$(dart.void), [dart.dynamic, dart.nullable(core.Object)]),
      delete: dart.fnType(async.Future$(dart.void), [dart.dynamic]),
      add: dart.fnType(async.Future$(core.int), [dart.nullable(core.Object)]),
      addAll: dart.fnType(async.Future$(core.Iterable$(core.int)), [dart.nullable(core.Object)]),
      putAt: dart.fnType(async.Future$(dart.void), [core.int, dart.nullable(core.Object)]),
      deleteAt: dart.fnType(async.Future$(dart.void), [core.int]),
      clear: dart.fnType(async.Future$(core.int), []),
      compact: dart.fnType(async.Future$(dart.void), []),
      performCompactionIfNeeded: dart.fnType(async.Future$(dart.void), []),
      close: dart.fnType(async.Future$(dart.void), []),
      deleteFromDisk: dart.fnType(async.Future$(dart.void), [])
    }));
    dart.setStaticMethodSignature(BoxBaseImpl, () => ['nullImpl']);
    dart.setGetterSignature(BoxBaseImpl, () => ({
      __proto__: dart.getGetters(BoxBaseImpl.__proto__),
      keystore: keystore$.Keystore$(E),
      valueType: core.Type,
      isOpen: core.bool,
      path: dart.nullable(core.String),
      keys: core.Iterable,
      length: core.int,
      isEmpty: core.bool,
      isNotEmpty: core.bool
    }));
    dart.setSetterSignature(BoxBaseImpl, () => ({
      __proto__: dart.getSetters(BoxBaseImpl.__proto__),
      keystore: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(BoxBaseImpl, I[73]);
    dart.setFieldSignature(BoxBaseImpl, () => ({
      __proto__: dart.getFields(BoxBaseImpl.__proto__),
      name: dart.finalFieldType(core.String),
      hive: dart.finalFieldType(hive_impl.HiveImpl),
      [S$._compactionStrategy]: dart.finalFieldType(dart.fnType(core.bool, [core.int, core.int])),
      backend: dart.finalFieldType(storage_backend.StorageBackend),
      [S$.__BoxBaseImpl_keystore]: dart.fieldType(dart.nullable(keystore$.Keystore$(E))),
      [S$._open]: dart.fieldType(core.bool)
    }));
    return BoxBaseImpl;
  });
  box_base_impl.BoxBaseImpl = box_base_impl.BoxBaseImpl$();
  dart.addTypeTests(box_base_impl.BoxBaseImpl, _is_BoxBaseImpl_default);
  const _is__NullBoxBase_default = Symbol('_is__NullBoxBase_default');
  box_base_impl._NullBoxBase$ = dart.generic(E => {
    var __t$IterableOfE = () => (__t$IterableOfE = dart.constFn(core.Iterable$(E)))();
    var __t$MapOfdynamic$E = () => (__t$MapOfdynamic$E = dart.constFn(core.Map$(dart.dynamic, E)))();
    class _NullBoxBase extends core.Object {
      add(value) {
        E.as(value);
        return dart.throw(new core.UnimplementedError.new());
      }
      addAll(values) {
        __t$IterableOfE().as(values);
        return dart.throw(new core.UnimplementedError.new());
      }
      clear() {
        return dart.throw(new core.UnimplementedError.new());
      }
      close() {
        return dart.throw(new core.UnimplementedError.new());
      }
      compact() {
        return dart.throw(new core.UnimplementedError.new());
      }
      containsKey(key) {
        return dart.throw(new core.UnimplementedError.new());
      }
      delete(key) {
        return dart.throw(new core.UnimplementedError.new());
      }
      deleteAll(keys) {
        return dart.throw(new core.UnimplementedError.new());
      }
      deleteAt(index) {
        return dart.throw(new core.UnimplementedError.new());
      }
      deleteFromDisk() {
        return dart.throw(new core.UnimplementedError.new());
      }
      get isEmpty() {
        return dart.throw(new core.UnimplementedError.new());
      }
      get isNotEmpty() {
        return dart.throw(new core.UnimplementedError.new());
      }
      get isOpen() {
        return dart.throw(new core.UnimplementedError.new());
      }
      keyAt(index) {
        return dart.throw(new core.UnimplementedError.new());
      }
      get keys() {
        return dart.throw(new core.UnimplementedError.new());
      }
      get lazy() {
        return dart.throw(new core.UnimplementedError.new());
      }
      get length() {
        return dart.throw(new core.UnimplementedError.new());
      }
      get name() {
        return dart.throw(new core.UnimplementedError.new());
      }
      get path() {
        return dart.throw(new core.UnimplementedError.new());
      }
      put(key, value) {
        E.as(value);
        return dart.throw(new core.UnimplementedError.new());
      }
      putAll(entries) {
        __t$MapOfdynamic$E().as(entries);
        return dart.throw(new core.UnimplementedError.new());
      }
      putAt(index, value) {
        E.as(value);
        return dart.throw(new core.UnimplementedError.new());
      }
      watch(opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        return dart.throw(new core.UnimplementedError.new());
      }
      flush() {
        return dart.throw(new core.UnimplementedError.new());
      }
      static ['_#new#tearOff'](E) {
        return new (box_base_impl._NullBoxBase$(E)).new();
      }
    }
    (_NullBoxBase.new = function() {
      ;
    }).prototype = _NullBoxBase.prototype;
    dart.addTypeTests(_NullBoxBase);
    _NullBoxBase.prototype[_is__NullBoxBase_default] = true;
    dart.addTypeCaches(_NullBoxBase);
    _NullBoxBase[dart.implements] = () => [hive.BoxBase$(E)];
    dart.setMethodSignature(_NullBoxBase, () => ({
      __proto__: dart.getMethods(_NullBoxBase.__proto__),
      add: dart.fnType(dart.Never, [dart.nullable(core.Object)]),
      addAll: dart.fnType(dart.Never, [dart.nullable(core.Object)]),
      clear: dart.fnType(dart.Never, []),
      close: dart.fnType(dart.Never, []),
      compact: dart.fnType(dart.Never, []),
      containsKey: dart.fnType(dart.Never, [dart.dynamic]),
      delete: dart.fnType(dart.Never, [dart.dynamic]),
      deleteAll: dart.fnType(dart.Never, [core.Iterable]),
      deleteAt: dart.fnType(dart.Never, [core.int]),
      deleteFromDisk: dart.fnType(dart.Never, []),
      keyAt: dart.fnType(dart.Never, [core.int]),
      put: dart.fnType(dart.Never, [dart.dynamic, dart.nullable(core.Object)]),
      putAll: dart.fnType(dart.Never, [dart.nullable(core.Object)]),
      putAt: dart.fnType(dart.Never, [core.int, dart.nullable(core.Object)]),
      watch: dart.fnType(dart.Never, [], {key: dart.dynamic}, {}),
      flush: dart.fnType(dart.Never, [])
    }));
    dart.setGetterSignature(_NullBoxBase, () => ({
      __proto__: dart.getGetters(_NullBoxBase.__proto__),
      isEmpty: dart.Never,
      isNotEmpty: dart.Never,
      isOpen: dart.Never,
      keys: dart.Never,
      lazy: dart.Never,
      length: dart.Never,
      name: dart.Never,
      path: dart.Never
    }));
    dart.setLibraryUri(_NullBoxBase, I[73]);
    return _NullBoxBase;
  });
  box_base_impl._NullBoxBase = box_base_impl._NullBoxBase$();
  dart.addTypeTests(box_base_impl._NullBoxBase, _is__NullBoxBase_default);
  const _is_BoxImpl_default = Symbol('_is_BoxImpl_default');
  box_impl.BoxImpl$ = dart.generic(E => {
    var __t$EN = () => (__t$EN = dart.constFn(dart.nullable(E)))();
    var __t$MapOfdynamic$E = () => (__t$MapOfdynamic$E = dart.constFn(core.Map$(dart.dynamic, E)))();
    var __t$LinkedMapOfdynamic$E = () => (__t$LinkedMapOfdynamic$E = dart.constFn(_js_helper.LinkedMap$(dart.dynamic, E)))();
    class BoxImpl extends box_base_impl.BoxBaseImpl$(E) {
      get lazy() {
        return this[S$.lazy];
      }
      set lazy(value) {
        super.lazy = value;
      }
      static ['_#new#tearOff'](E, hive, name, keyComparator, compactionStrategy, backend) {
        return new (box_impl.BoxImpl$(E)).new(hive, name, keyComparator, compactionStrategy, backend);
      }
      get values() {
        this.checkOpen();
        return this.keystore.getValues();
      }
      valuesBetween(opts) {
        let startKey = opts && 'startKey' in opts ? opts.startKey : null;
        let endKey = opts && 'endKey' in opts ? opts.endKey : null;
        this.checkOpen();
        return this.keystore.getValuesBetween(startKey, endKey);
      }
      get(key, opts) {
        let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : null;
        __t$EN().as(defaultValue);
        this.checkOpen();
        let frame = this.keystore.get(key);
        if (frame != null) {
          return __t$EN().as(frame.value);
        } else {
          if (defaultValue != null && hive_object.HiveObjectMixin.is(defaultValue)) {
            hive_object['HiveObjectInternal|init'](defaultValue, key, this);
          }
          return defaultValue;
        }
      }
      getAt(index) {
        let t94;
        this.checkOpen();
        return __t$EN().as((t94 = this.keystore.getAt(index), t94 == null ? null : t94.value));
      }
      putAll(kvPairs) {
        __t$MapOfdynamic$E().as(kvPairs);
        let frames = T$.JSArrayOfFrame().of([]);
        for (let key of kvPairs[S$.$keys]) {
          frames[S$.$add](new frame$.Frame.new(key, kvPairs[S$.$_get](key)));
        }
        return this[S$._writeFrames](frames);
      }
      deleteAll(keys) {
        let frames = T$.JSArrayOfFrame().of([]);
        for (let key of keys) {
          if (this.keystore.containsKey(key)) {
            frames[S$.$add](new frame$.Frame.deleted(key));
          }
        }
        return this[S$._writeFrames](frames);
      }
      [S$._writeFrames](frames) {
        return async.async(dart.void, (function* _writeFrames() {
          this.checkOpen();
          if (!this.keystore.beginTransaction(frames)) return;
          try {
            yield this.backend.writeFrames(frames);
            this.keystore.commitTransaction();
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (core.Object.is(e)) {
              this.keystore.cancelTransaction();
              dart.rethrow(e$);
            } else
              throw e$;
          }
          yield this.performCompactionIfNeeded();
        }).bind(this));
      }
      toMap() {
        let map = new (__t$LinkedMapOfdynamic$E()).new();
        for (let frame of this.keystore.frames) {
          map[S$.$_set](frame.key, E.as(frame.value));
        }
        return map;
      }
      flush() {
        return async.async(dart.void, (function* flush() {
          yield this.backend.flush();
        }).bind(this));
      }
    }
    (BoxImpl.new = function(hive, name, keyComparator, compactionStrategy, backend) {
      this[S$.lazy] = false;
      BoxImpl.__proto__.new.call(this, hive, name, keyComparator, compactionStrategy, backend);
      ;
    }).prototype = BoxImpl.prototype;
    dart.addTypeTests(BoxImpl);
    BoxImpl.prototype[_is_BoxImpl_default] = true;
    dart.addTypeCaches(BoxImpl);
    BoxImpl[dart.implements] = () => [hive.Box$(E)];
    dart.setMethodSignature(BoxImpl, () => ({
      __proto__: dart.getMethods(BoxImpl.__proto__),
      valuesBetween: dart.fnType(core.Iterable$(E), [], {endKey: dart.dynamic, startKey: dart.dynamic}, {}),
      get: dart.fnType(dart.nullable(E), [dart.dynamic], {defaultValue: dart.nullable(core.Object)}, {}),
      getAt: dart.fnType(dart.nullable(E), [core.int]),
      putAll: dart.fnType(async.Future$(dart.void), [dart.nullable(core.Object)]),
      deleteAll: dart.fnType(async.Future$(dart.void), [core.Iterable]),
      [S$._writeFrames]: dart.fnType(async.Future$(dart.void), [core.List$(frame$.Frame)]),
      toMap: dart.fnType(core.Map$(dart.dynamic, E), []),
      flush: dart.fnType(async.Future$(dart.void), [])
    }));
    dart.setGetterSignature(BoxImpl, () => ({
      __proto__: dart.getGetters(BoxImpl.__proto__),
      values: core.Iterable$(E)
    }));
    dart.setLibraryUri(BoxImpl, I[74]);
    dart.setFieldSignature(BoxImpl, () => ({
      __proto__: dart.getFields(BoxImpl.__proto__),
      lazy: dart.finalFieldType(core.bool)
    }));
    return BoxImpl;
  });
  box_impl.BoxImpl = box_impl.BoxImpl$();
  dart.addTypeTests(box_impl.BoxImpl, _is_BoxImpl_default);
  const _is_LazyBoxImpl_default = Symbol('_is_LazyBoxImpl_default');
  lazy_box_impl.LazyBoxImpl$ = dart.generic(E => {
    var __t$EN = () => (__t$EN = dart.constFn(dart.nullable(E)))();
    class LazyBoxImpl extends box_base_impl.BoxBaseImpl$(E) {
      get lazy() {
        return this[S$.lazy$1];
      }
      set lazy(value) {
        super.lazy = value;
      }
      static ['_#new#tearOff'](E, hive, name, keyComparator, compactionStrategy, backend) {
        return new (lazy_box_impl.LazyBoxImpl$(E)).new(hive, name, keyComparator, compactionStrategy, backend);
      }
      get(key, opts) {
        let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : null;
        __t$EN().as(defaultValue);
        return async.async(__t$EN(), (function* get() {
          this.checkOpen();
          let frame = this.keystore.get(key);
          if (frame != null) {
            let value = (yield this.backend.readValue(frame));
            if (hive_object.HiveObjectMixin.is(value)) {
              hive_object['HiveObjectInternal|init'](value, key, this);
            }
            return __t$EN().as(value);
          } else {
            if (defaultValue != null && hive_object.HiveObjectMixin.is(defaultValue)) {
              hive_object['HiveObjectInternal|init'](defaultValue, key, this);
            }
            return defaultValue;
          }
        }).bind(this));
      }
      getAt(index) {
        return this.get(this.keystore.keyAt(index));
      }
      putAll(kvPairs) {
        core.Map.as(kvPairs);
        return async.async(dart.void, (function* putAll() {
          this.checkOpen();
          let frames = T$.JSArrayOfFrame().of([]);
          for (let key of kvPairs[S$.$keys]) {
            frames[S$.$add](new frame$.Frame.new(key, kvPairs[S$.$_get](key)));
            if (core.int.is(key)) {
              this.keystore.updateAutoIncrement(key);
            }
          }
          if (frames[S$.$isEmpty]) return;
          yield this.backend.writeFrames(frames);
          for (let frame of frames) {
            if (hive_object.HiveObjectMixin.is(frame.value)) {
              hive_object['HiveObjectInternal|init'](hive_object.HiveObjectMixin.as(frame.value), frame.key, this);
            }
            this.keystore.insert(frame, {lazy: true});
          }
          yield this.performCompactionIfNeeded();
        }).bind(this));
      }
      deleteAll(keys) {
        return async.async(dart.void, (function* deleteAll() {
          this.checkOpen();
          let frames = T$.JSArrayOfFrame().of([]);
          for (let key of keys) {
            if (this.keystore.containsKey(key)) {
              frames[S$.$add](new frame$.Frame.deleted(key));
            }
          }
          if (frames[S$.$isEmpty]) return;
          yield this.backend.writeFrames(frames);
          for (let frame of frames) {
            this.keystore.insert(frame);
          }
          yield this.performCompactionIfNeeded();
        }).bind(this));
      }
      flush() {
        return async.async(dart.void, (function* flush() {
          yield this.backend.flush();
        }).bind(this));
      }
    }
    (LazyBoxImpl.new = function(hive, name, keyComparator, compactionStrategy, backend) {
      this[S$.lazy$1] = true;
      LazyBoxImpl.__proto__.new.call(this, hive, name, keyComparator, compactionStrategy, backend);
      ;
    }).prototype = LazyBoxImpl.prototype;
    dart.addTypeTests(LazyBoxImpl);
    LazyBoxImpl.prototype[_is_LazyBoxImpl_default] = true;
    dart.addTypeCaches(LazyBoxImpl);
    LazyBoxImpl[dart.implements] = () => [hive.LazyBox$(E)];
    dart.setMethodSignature(LazyBoxImpl, () => ({
      __proto__: dart.getMethods(LazyBoxImpl.__proto__),
      get: dart.fnType(async.Future$(dart.nullable(E)), [dart.dynamic], {defaultValue: dart.nullable(core.Object)}, {}),
      getAt: dart.fnType(async.Future$(dart.nullable(E)), [core.int]),
      putAll: dart.fnType(async.Future$(dart.void), [dart.nullable(core.Object)]),
      deleteAll: dart.fnType(async.Future$(dart.void), [core.Iterable]),
      flush: dart.fnType(async.Future$(dart.void), [])
    }));
    dart.setLibraryUri(LazyBoxImpl, I[75]);
    dart.setFieldSignature(LazyBoxImpl, () => ({
      __proto__: dart.getFields(LazyBoxImpl.__proto__),
      lazy: dart.finalFieldType(core.bool)
    }));
    return LazyBoxImpl;
  });
  lazy_box_impl.LazyBoxImpl = lazy_box_impl.LazyBoxImpl$();
  dart.addTypeTests(lazy_box_impl.LazyBoxImpl, _is_LazyBoxImpl_default);
  const _is_ResolvedAdapter_default = Symbol('_is_ResolvedAdapter_default');
  type_registry_impl.ResolvedAdapter$ = dart.generic(T => {
    class ResolvedAdapter extends core.Object {
      get adapter() {
        return this[S$.adapter];
      }
      set adapter(value) {
        super.adapter = value;
      }
      get typeId() {
        return this[S$.typeId$4];
      }
      set typeId(value) {
        super.typeId = value;
      }
      static ['_#new#tearOff'](T, adapter, typeId) {
        return new (type_registry_impl.ResolvedAdapter$(T)).new(adapter, typeId);
      }
      matchesRuntimeType(value) {
        return dart.runtimeType(value)._equals(dart.wrapType(T));
      }
      matchesType(value) {
        return T.is(value);
      }
    }
    (ResolvedAdapter.new = function(adapter, typeId) {
      this[S$.adapter] = adapter;
      this[S$.typeId$4] = typeId;
      ;
    }).prototype = ResolvedAdapter.prototype;
    dart.addTypeTests(ResolvedAdapter);
    ResolvedAdapter.prototype[_is_ResolvedAdapter_default] = true;
    dart.addTypeCaches(ResolvedAdapter);
    dart.setMethodSignature(ResolvedAdapter, () => ({
      __proto__: dart.getMethods(ResolvedAdapter.__proto__),
      matchesRuntimeType: dart.fnType(core.bool, [dart.dynamic]),
      matchesType: dart.fnType(core.bool, [dart.dynamic])
    }));
    dart.setLibraryUri(ResolvedAdapter, I[18]);
    dart.setFieldSignature(ResolvedAdapter, () => ({
      __proto__: dart.getFields(ResolvedAdapter.__proto__),
      adapter: dart.finalFieldType(hive.TypeAdapter),
      typeId: dart.finalFieldType(core.int)
    }));
    return ResolvedAdapter;
  });
  type_registry_impl.ResolvedAdapter = type_registry_impl.ResolvedAdapter$();
  dart.addTypeTests(type_registry_impl.ResolvedAdapter, _is_ResolvedAdapter_default);
  type_registry_impl._NullTypeRegistry = class _NullTypeRegistry extends core.Object {
    static ['_#new#tearOff']() {
      return new type_registry_impl._NullTypeRegistry.new();
    }
    get [S$._typeAdapters]() {
      return dart.throw(new core.UnimplementedError.new());
    }
    findAdapterForTypeId(typeId) {
      return dart.throw(new core.UnimplementedError.new());
    }
    findAdapterForValue(value) {
      return dart.throw(new core.UnimplementedError.new());
    }
    ignoreTypeId(T, typeId) {
      return dart.throw(new core.UnimplementedError.new());
    }
    isAdapterRegistered(typeId, opts) {
      let internal = opts && 'internal' in opts ? opts.internal : false;
      return dart.throw(new core.UnimplementedError.new());
    }
    registerAdapter(T, adapter, opts) {
      let internal = opts && 'internal' in opts ? opts.internal : false;
      let override = opts && 'override' in opts ? opts.override : false;
      return dart.throw(new core.UnimplementedError.new());
    }
    resetAdapters() {
      return dart.throw(new core.UnimplementedError.new());
    }
  };
  (type_registry_impl._NullTypeRegistry.new = function() {
    ;
  }).prototype = type_registry_impl._NullTypeRegistry.prototype;
  dart.addTypeTests(type_registry_impl._NullTypeRegistry);
  dart.addTypeCaches(type_registry_impl._NullTypeRegistry);
  type_registry_impl._NullTypeRegistry[dart.implements] = () => [type_registry_impl.TypeRegistryImpl];
  dart.setMethodSignature(type_registry_impl._NullTypeRegistry, () => ({
    __proto__: dart.getMethods(type_registry_impl._NullTypeRegistry.__proto__),
    findAdapterForTypeId: dart.fnType(dart.Never, [core.int]),
    findAdapterForValue: dart.fnType(dart.Never, [dart.dynamic]),
    ignoreTypeId: dart.gFnType(T => [dart.Never, [core.int]], T => [dart.nullable(core.Object)]),
    isAdapterRegistered: dart.fnType(dart.Never, [core.int], {internal: core.bool}, {}),
    registerAdapter: dart.gFnType(T => [dart.Never, [hive.TypeAdapter$(T)], {internal: core.bool, override: core.bool}, {}], T => [dart.nullable(core.Object)]),
    resetAdapters: dart.fnType(dart.Never, [])
  }));
  dart.setGetterSignature(type_registry_impl._NullTypeRegistry, () => ({
    __proto__: dart.getGetters(type_registry_impl._NullTypeRegistry.__proto__),
    [S$._typeAdapters]: dart.Never
  }));
  dart.setLibraryUri(type_registry_impl._NullTypeRegistry, I[18]);
  storage_backend.BackendManagerInterface = class BackendManagerInterface extends core.Object {};
  (storage_backend.BackendManagerInterface.new = function() {
    ;
  }).prototype = storage_backend.BackendManagerInterface.prototype;
  dart.addTypeTests(storage_backend.BackendManagerInterface);
  dart.addTypeCaches(storage_backend.BackendManagerInterface);
  dart.setLibraryUri(storage_backend.BackendManagerInterface, I[71]);
  box_collection_stub.BoxCollection = class BoxCollection extends core.Object {
    static open(name, boxNames, opts) {
      let path = opts && 'path' in opts ? opts.path : null;
      let key = opts && 'key' in opts ? opts.key : null;
      dart.throw(new core.UnimplementedError.new());
    }
  };
  (box_collection_stub.BoxCollection.new = function() {
    ;
  }).prototype = box_collection_stub.BoxCollection.prototype;
  dart.addTypeTests(box_collection_stub.BoxCollection);
  dart.addTypeCaches(box_collection_stub.BoxCollection);
  dart.setStaticMethodSignature(box_collection_stub.BoxCollection, () => ['open']);
  dart.setLibraryUri(box_collection_stub.BoxCollection, I[76]);
  const _is_CollectionBox_default$ = Symbol('_is_CollectionBox_default');
  box_collection_stub.CollectionBox$ = dart.generic(V => {
    class CollectionBox extends core.Object {}
    (CollectionBox.new = function() {
      ;
    }).prototype = CollectionBox.prototype;
    dart.addTypeTests(CollectionBox);
    CollectionBox.prototype[_is_CollectionBox_default$] = true;
    dart.addTypeCaches(CollectionBox);
    dart.setLibraryUri(CollectionBox, I[76]);
    return CollectionBox;
  });
  box_collection_stub.CollectionBox = box_collection_stub.CollectionBox$();
  dart.addTypeTests(box_collection_stub.CollectionBox, _is_CollectionBox_default$);
  pointer.Pointer = class Pointer extends core.Object {
    get components() {
      return this[S$.components];
    }
    set components(value) {
      super.components = value;
    }
    static ['_#new#tearOff'](path) {
      return new pointer.Pointer.new(path);
    }
    get path() {
      return this.components[S$.$join]("/");
    }
    get id() {
      return this.components[S$.$last];
    }
    isCollection() {
      return this.components[S$.$length][S$.$isOdd];
    }
    isDocument() {
      return this.components[S$.$length][S$.$isEven];
    }
    collectionPath(collectionPath) {
      if (!this.isDocument()) dart.assertFailed(null, I[77], 56, 12, "isDocument()");
      return this.path + "/" + collectionPath;
    }
    documentPath(documentPath) {
      if (!this.isCollection()) dart.assertFailed(null, I[77], 62, 12, "isCollection()");
      return this.path + "/" + documentPath;
    }
    parentPath() {
      let t95;
      if (this.components[S$.$length] < 2) {
        return null;
      }
      let parentComponents = (t95 = T$.ListOfString().from(this.components), (() => {
        t95[S$.$removeLast]();
        return t95;
      })());
      return parentComponents[S$.$join]("/");
    }
    _equals(other) {
      if (other == null) return false;
      return pointer.Pointer.is(other) && other.path === this.path;
    }
    get hashCode() {
      return this.path[S$.$hashCode];
    }
  };
  (pointer.Pointer.new = function(path) {
    this[S$.components] = path[S$.$split]("/")[S$.$where](dart.fn(element => element[S$.$isNotEmpty], T$.StringTobool()))[S$.$toList]();
    ;
  }).prototype = pointer.Pointer.prototype;
  dart.addTypeTests(pointer.Pointer);
  dart.addTypeCaches(pointer.Pointer);
  dart.setMethodSignature(pointer.Pointer, () => ({
    __proto__: dart.getMethods(pointer.Pointer.__proto__),
    isCollection: dart.fnType(core.bool, []),
    isDocument: dart.fnType(core.bool, []),
    collectionPath: dart.fnType(core.String, [core.String]),
    documentPath: dart.fnType(core.String, [core.String]),
    parentPath: dart.fnType(dart.nullable(core.String), [])
  }));
  dart.setGetterSignature(pointer.Pointer, () => ({
    __proto__: dart.getGetters(pointer.Pointer.__proto__),
    path: core.String,
    id: core.String
  }));
  dart.setLibraryUri(pointer.Pointer, I[78]);
  dart.setFieldSignature(pointer.Pointer, () => ({
    __proto__: dart.getFields(pointer.Pointer.__proto__),
    components: dart.finalFieldType(core.List$(core.String))
  }));
  dart.defineExtensionMethods(pointer.Pointer, ['_equals']);
  dart.defineExtensionAccessors(pointer.Pointer, ['hashCode']);
  blob.Blob = class Blob extends core.Object {
    get bytes() {
      return this[S$.bytes$1];
    }
    set bytes(value) {
      super.bytes = value;
    }
    static ['_#new#tearOff'](bytes) {
      return new blob.Blob.new(bytes);
    }
    _equals(other) {
      if (other == null) return false;
      return blob.Blob.is(other) && (C[23] || CT.C23).equals(other.bytes, this.bytes);
    }
    get hashCode() {
      return core.Object.hashAll(this.bytes);
    }
  };
  (blob.Blob.new = function(bytes) {
    this[S$.bytes$1] = bytes;
    ;
  }).prototype = blob.Blob.prototype;
  dart.addTypeTests(blob.Blob);
  dart.addTypeCaches(blob.Blob);
  dart.setLibraryUri(blob.Blob, I[79]);
  dart.setFieldSignature(blob.Blob, () => ({
    __proto__: dart.getFields(blob.Blob.__proto__),
    bytes: dart.finalFieldType(typed_data.Uint8List)
  }));
  dart.defineExtensionMethods(blob.Blob, ['_equals']);
  dart.defineExtensionAccessors(blob.Blob, ['hashCode']);
  field_path.FieldPath = class FieldPath extends core.Object {
    get components() {
      return this[S$.components$1];
    }
    set components(value) {
      super.components = value;
    }
    static ['_#new#tearOff'](components) {
      return new field_path.FieldPath.new(components);
    }
    static get documentId() {
      return field_path_type.FieldPathType.documentId;
    }
    static ['_#fromString#tearOff'](path) {
      return new field_path.FieldPath.fromString(path);
    }
    _equals(other) {
      if (other == null) return false;
      return field_path.FieldPath.is(other) && (C[56] || CT.C56).equals(other.components, this.components);
    }
    get hashCode() {
      return core.Object.hashAll(this.components);
    }
    toString() {
      return "FieldPath(" + dart.str(this.components) + ")";
    }
  };
  (field_path.FieldPath.new = function(components) {
    this[S$.components$1] = components;
    if (!components[S$.$isNotEmpty]) dart.assertFailed(null, I[80], 24, 16, "components.isNotEmpty");
    if (!components[S$.$where](dart.fn(component => component[S$.$isEmpty], T$.StringTobool()))[S$.$isEmpty]) dart.assertFailed("Expected all FieldPath components to be non-null or non-empty strings.", I[80], 25, 16, "components.where((component) => component.isEmpty).isEmpty");
    ;
  }).prototype = field_path.FieldPath.prototype;
  (field_path.FieldPath.fromString = function(path) {
    this[S$.components$1] = path[S$.$split](".");
    if (!path[S$.$isNotEmpty]) dart.assertFailed(null, I[80], 43, 16, "path.isNotEmpty");
    if (!!path[S$.$startsWith](".")) dart.assertFailed(null, I[80], 44, 16, "!path.startsWith('.')");
    if (!!path[S$.$endsWith](".")) dart.assertFailed(null, I[80], 45, 16, "!path.endsWith('.')");
    if (!!path[S$.$contains]("..")) dart.assertFailed(null, I[80], 46, 16, "!path.contains('..')");
    if (!!path[S$.$contains]("~")) dart.assertFailed(field_path._reserved, I[80], 47, 16, "!path.contains('~')");
    if (!!path[S$.$contains]("*")) dart.assertFailed(field_path._reserved, I[80], 48, 16, "!path.contains('*')");
    if (!!path[S$.$contains]("/")) dart.assertFailed(field_path._reserved, I[80], 49, 16, "!path.contains('/')");
    if (!!path[S$.$contains]("[")) dart.assertFailed(field_path._reserved, I[80], 50, 16, "!path.contains('[')");
    if (!!path[S$.$contains]("]")) dart.assertFailed(field_path._reserved, I[80], 51, 16, "!path.contains(']')");
    ;
  }).prototype = field_path.FieldPath.prototype;
  dart.addTypeTests(field_path.FieldPath);
  dart.addTypeCaches(field_path.FieldPath);
  dart.setStaticGetterSignature(field_path.FieldPath, () => ['documentId']);
  dart.setLibraryUri(field_path.FieldPath, I[81]);
  dart.setFieldSignature(field_path.FieldPath, () => ({
    __proto__: dart.getFields(field_path.FieldPath.__proto__),
    components: dart.finalFieldType(core.List$(core.String))
  }));
  dart.defineExtensionMethods(field_path.FieldPath, ['_equals', 'toString']);
  dart.defineExtensionAccessors(field_path.FieldPath, ['hashCode']);
  dart.defineLazy(field_path, {
    /*field_path._reserved*/get _reserved() {
      return "Paths must not contain '~', '*', '/', '[', or ']'.";
    },
    set _reserved(value) {}
  }, false);
  geo_point.GeoPoint = class GeoPoint extends core.Object {
    get latitude() {
      return this[S$.latitude];
    }
    set latitude(value) {
      super.latitude = value;
    }
    get longitude() {
      return this[S$.longitude];
    }
    set longitude(value) {
      super.longitude = value;
    }
    static ['_#new#tearOff'](latitude, longitude) {
      return new geo_point.GeoPoint.new(latitude, longitude);
    }
    _equals(other) {
      if (other == null) return false;
      return geo_point.GeoPoint.is(other) && other.latitude === this.latitude && other.longitude === this.longitude;
    }
    get hashCode() {
      return core.Object.hash(this.latitude, this.longitude);
    }
  };
  (geo_point.GeoPoint.new = function(latitude, longitude) {
    this[S$.latitude] = latitude;
    this[S$.longitude] = longitude;
    if (!(latitude >= -90 && latitude <= 90)) dart.assertFailed(null, I[82], 13, 16, "latitude >= -90 && latitude <= 90");
    if (!(longitude >= -180 && longitude <= 180)) dart.assertFailed(null, I[82], 14, 16, "longitude >= -180 && longitude <= 180");
    ;
  }).prototype = geo_point.GeoPoint.prototype;
  dart.addTypeTests(geo_point.GeoPoint);
  dart.addTypeCaches(geo_point.GeoPoint);
  dart.setLibraryUri(geo_point.GeoPoint, I[83]);
  dart.setFieldSignature(geo_point.GeoPoint, () => ({
    __proto__: dart.getFields(geo_point.GeoPoint.__proto__),
    latitude: dart.finalFieldType(core.double),
    longitude: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(geo_point.GeoPoint, ['_equals']);
  dart.defineExtensionAccessors(geo_point.GeoPoint, ['hashCode']);
  platform_interface_collection_reference.CollectionReferencePlatform = class CollectionReferencePlatform extends platform_interface_query.QueryPlatform {
    get id() {
      return this[S$._pointer$1].id;
    }
    get parent() {
      let parentPath = this[S$._pointer$1].parentPath();
      if (parentPath == null) {
        return null;
      }
      return this.firestore.doc(parentPath);
    }
    get path() {
      return this[S$._pointer$1].path;
    }
    doc(path = null) {
      dart.throw(new core.UnimplementedError.new("doc() is not implemented"));
    }
    _equals(other) {
      if (other == null) return false;
      return platform_interface_collection_reference.CollectionReferencePlatform.is(other) && other.firestore._equals(this.firestore) && other.path === this.path;
    }
    get hashCode() {
      return this.path[S$.$hashCode];
    }
    toString() {
      return dart.str(dart.wrapType(platform_interface_collection_reference.CollectionReferencePlatform)) + "(" + this.path + ")";
    }
  };
  (platform_interface_collection_reference.CollectionReferencePlatform.new = function(firestore, path) {
    this[S$._pointer$1] = new pointer.Pointer.new(path);
    platform_interface_collection_reference.CollectionReferencePlatform.__proto__.new.call(this, firestore, new (T$.IdentityMapOfString$dynamic()).new());
    ;
  }).prototype = platform_interface_collection_reference.CollectionReferencePlatform.prototype;
  dart.addTypeTests(platform_interface_collection_reference.CollectionReferencePlatform);
  dart.addTypeCaches(platform_interface_collection_reference.CollectionReferencePlatform);
  dart.setMethodSignature(platform_interface_collection_reference.CollectionReferencePlatform, () => ({
    __proto__: dart.getMethods(platform_interface_collection_reference.CollectionReferencePlatform.__proto__),
    doc: dart.fnType(platform_interface_document_reference.DocumentReferencePlatform, [], [dart.nullable(core.String)])
  }));
  dart.setGetterSignature(platform_interface_collection_reference.CollectionReferencePlatform, () => ({
    __proto__: dart.getGetters(platform_interface_collection_reference.CollectionReferencePlatform.__proto__),
    id: core.String,
    parent: dart.nullable(platform_interface_document_reference.DocumentReferencePlatform),
    path: core.String
  }));
  dart.setLibraryUri(platform_interface_collection_reference.CollectionReferencePlatform, I[84]);
  dart.setFieldSignature(platform_interface_collection_reference.CollectionReferencePlatform, () => ({
    __proto__: dart.getFields(platform_interface_collection_reference.CollectionReferencePlatform.__proto__),
    [S$._pointer$1]: dart.finalFieldType(pointer.Pointer)
  }));
  dart.defineExtensionMethods(platform_interface_collection_reference.CollectionReferencePlatform, ['_equals', 'toString']);
  dart.defineExtensionAccessors(platform_interface_collection_reference.CollectionReferencePlatform, ['hashCode']);
  platform_interface_document_change.DocumentChangeType = class DocumentChangeType extends core._Enum {
    [S$._enumToString]() {
      return "DocumentChangeType." + this[S$._name];
    }
  };
  (platform_interface_document_change.DocumentChangeType.new = function(index, name) {
    platform_interface_document_change.DocumentChangeType.__proto__.new.call(this, index, name);
    ;
  }).prototype = platform_interface_document_change.DocumentChangeType.prototype;
  dart.addTypeTests(platform_interface_document_change.DocumentChangeType);
  dart.addTypeCaches(platform_interface_document_change.DocumentChangeType);
  dart.setMethodSignature(platform_interface_document_change.DocumentChangeType, () => ({
    __proto__: dart.getMethods(platform_interface_document_change.DocumentChangeType.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(platform_interface_document_change.DocumentChangeType, I[85]);
  dart.setStaticFieldSignature(platform_interface_document_change.DocumentChangeType, () => ['values', 'added', 'modified', 'removed']);
  dart.defineLazy(platform_interface_document_change.DocumentChangeType, {
    /*platform_interface_document_change.DocumentChangeType.values*/get values() {
      return C[57] || CT.C57;
    },
    /*platform_interface_document_change.DocumentChangeType.added*/get added() {
      return C[58] || CT.C58;
    },
    /*platform_interface_document_change.DocumentChangeType.modified*/get modified() {
      return C[59] || CT.C59;
    },
    /*platform_interface_document_change.DocumentChangeType.removed*/get removed() {
      return C[60] || CT.C60;
    }
  }, false);
  platform_interface_document_change.DocumentChangePlatform = class DocumentChangePlatform extends plugin_platform_interface.PlatformInterface {
    get type() {
      return this[S$.type];
    }
    set type(value) {
      super.type = value;
    }
    get oldIndex() {
      return this[S$.oldIndex];
    }
    set oldIndex(value) {
      super.oldIndex = value;
    }
    get newIndex() {
      return this[S$.newIndex];
    }
    set newIndex(value) {
      super.newIndex = value;
    }
    get document() {
      return this[S$.document];
    }
    set document(value) {
      super.document = value;
    }
    static ['_#new#tearOff'](type, oldIndex, newIndex, document) {
      return new platform_interface_document_change.DocumentChangePlatform.new(type, oldIndex, newIndex, document);
    }
    static verifyExtends(instance) {
      plugin_platform_interface.PlatformInterface.verifyToken(instance, platform_interface_document_change.DocumentChangePlatform._token);
    }
  };
  (platform_interface_document_change.DocumentChangePlatform.new = function(type, oldIndex, newIndex, document) {
    this[S$.type] = type;
    this[S$.oldIndex] = oldIndex;
    this[S$.newIndex] = newIndex;
    this[S$.document] = document;
    platform_interface_document_change.DocumentChangePlatform.__proto__.new.call(this, {token: platform_interface_document_change.DocumentChangePlatform._token});
    ;
  }).prototype = platform_interface_document_change.DocumentChangePlatform.prototype;
  dart.addTypeTests(platform_interface_document_change.DocumentChangePlatform);
  dart.addTypeCaches(platform_interface_document_change.DocumentChangePlatform);
  dart.setStaticMethodSignature(platform_interface_document_change.DocumentChangePlatform, () => ['verifyExtends']);
  dart.setLibraryUri(platform_interface_document_change.DocumentChangePlatform, I[85]);
  dart.setFieldSignature(platform_interface_document_change.DocumentChangePlatform, () => ({
    __proto__: dart.getFields(platform_interface_document_change.DocumentChangePlatform.__proto__),
    type: dart.finalFieldType(platform_interface_document_change.DocumentChangeType),
    oldIndex: dart.finalFieldType(core.int),
    newIndex: dart.finalFieldType(core.int),
    document: dart.finalFieldType(platform_interface_document_snapshot.DocumentSnapshotPlatform)
  }));
  dart.setStaticFieldSignature(platform_interface_document_change.DocumentChangePlatform, () => ['_token']);
  dart.defineLazy(platform_interface_document_change.DocumentChangePlatform, {
    /*platform_interface_document_change.DocumentChangePlatform._token*/get _token() {
      return new core.Object.new();
    }
  }, false);
  platform_interface_document_snapshot.DocumentSnapshotPlatform = class DocumentSnapshotPlatform extends plugin_platform_interface.PlatformInterface {
    static ['_#new#tearOff'](_firestore, path, _data) {
      return new platform_interface_document_snapshot.DocumentSnapshotPlatform.new(_firestore, path, _data);
    }
    static verifyExtends(instance) {
      plugin_platform_interface.PlatformInterface.verifyToken(instance, platform_interface_document_snapshot.DocumentSnapshotPlatform._token);
    }
    get id() {
      return this[S$._pointer$3].id;
    }
    get metadata() {
      return new snapshot_metadata.SnapshotMetadataPlatform.new(core.bool.as(dart.dsend(this[S$._data][S$.$_get]("metadata"), '_get', ["hasPendingWrites"])), core.bool.as(dart.dsend(this[S$._data][S$.$_get]("metadata"), '_get', ["isFromCache"])));
    }
    get exists() {
      return this[S$._data][S$.$_get]("data") != null;
    }
    get reference() {
      return this[S$._firestore$1].doc(this[S$._pointer$3].path);
    }
    data() {
      return this.exists ? T$.LinkedHashMapOfString$dynamic().from(core.Map.as(this[S$._data][S$.$_get]("data"))) : null;
    }
    get(field) {
      if (!(typeof field == 'string' || field_path.FieldPath.is(field))) dart.assertFailed("Supported [field] types are [String] and [FieldPath]", I[86], 72, 7, "field is String || field is FieldPath");
      if (!this.exists) {
        dart.throw(new core.StateError.new("cannot get a field on a " + dart.str(dart.wrapType(platform_interface_document_snapshot.DocumentSnapshotPlatform)) + " which does not exist"));
      }
      function _findKeyValueInMap(key, map) {
        if (map[S$.$containsKey](key)) {
          return map[S$.$_get](key);
        }
        dart.throw(new core.StateError.new("field does not exist within the " + dart.str(dart.wrapType(platform_interface_document_snapshot.DocumentSnapshotPlatform))));
      }
      dart.fn(_findKeyValueInMap, T$.StringAndMapOfString$dynamicTodynamic());
      let fieldPath = null;
      if (typeof field == 'string') {
        fieldPath = new field_path.FieldPath.fromString(field);
      } else {
        fieldPath = field_path.FieldPath.as(field);
      }
      let components = fieldPath.components;
      let snapshotData = this.data();
      function _findComponent(componentIndex, data) {
        let isLast = componentIndex + 1 === components[S$.$length];
        let value = _findKeyValueInMap(components[S$.$_get](componentIndex), dart.nullCheck(data));
        if (isLast) {
          return value;
        }
        if (core.Map.is(value)) {
          return _findComponent(componentIndex + 1, T$.LinkedHashMapOfString$dynamic().from(value));
        } else {
          dart.throw(new core.StateError.new("field does not exist within the " + dart.str(dart.wrapType(platform_interface_document_snapshot.DocumentSnapshotPlatform))));
        }
      }
      dart.fn(_findComponent, T$.intAndMapNOfString$dynamicTodynamic());
      return _findComponent(0, snapshotData);
    }
    _get(field) {
      return this.get(field);
    }
  };
  (platform_interface_document_snapshot.DocumentSnapshotPlatform.new = function(_firestore, path, _data) {
    this[S$._firestore$1] = _firestore;
    this[S$._data] = _data;
    this[S$._pointer$3] = new pointer.Pointer.new(path);
    platform_interface_document_snapshot.DocumentSnapshotPlatform.__proto__.new.call(this, {token: platform_interface_document_snapshot.DocumentSnapshotPlatform._token});
    ;
  }).prototype = platform_interface_document_snapshot.DocumentSnapshotPlatform.prototype;
  dart.addTypeTests(platform_interface_document_snapshot.DocumentSnapshotPlatform);
  dart.addTypeCaches(platform_interface_document_snapshot.DocumentSnapshotPlatform);
  dart.setMethodSignature(platform_interface_document_snapshot.DocumentSnapshotPlatform, () => ({
    __proto__: dart.getMethods(platform_interface_document_snapshot.DocumentSnapshotPlatform.__proto__),
    data: dart.fnType(dart.nullable(core.Map$(core.String, dart.dynamic)), []),
    get: dart.fnType(dart.dynamic, [core.Object]),
    _get: dart.fnType(dart.dynamic, [core.Object])
  }));
  dart.setStaticMethodSignature(platform_interface_document_snapshot.DocumentSnapshotPlatform, () => ['verifyExtends']);
  dart.setGetterSignature(platform_interface_document_snapshot.DocumentSnapshotPlatform, () => ({
    __proto__: dart.getGetters(platform_interface_document_snapshot.DocumentSnapshotPlatform.__proto__),
    id: core.String,
    metadata: snapshot_metadata.SnapshotMetadataPlatform,
    exists: core.bool,
    reference: platform_interface_document_reference.DocumentReferencePlatform
  }));
  dart.setLibraryUri(platform_interface_document_snapshot.DocumentSnapshotPlatform, I[87]);
  dart.setFieldSignature(platform_interface_document_snapshot.DocumentSnapshotPlatform, () => ({
    __proto__: dart.getFields(platform_interface_document_snapshot.DocumentSnapshotPlatform.__proto__),
    [S$._firestore$1]: dart.finalFieldType(platform_interface_firestore.FirebaseFirestorePlatform),
    [S$._pointer$3]: dart.finalFieldType(pointer.Pointer),
    [S$._data]: dart.finalFieldType(core.Map$(core.String, dart.dynamic))
  }));
  dart.setStaticFieldSignature(platform_interface_document_snapshot.DocumentSnapshotPlatform, () => ['_token']);
  dart.defineLazy(platform_interface_document_snapshot.DocumentSnapshotPlatform, {
    /*platform_interface_document_snapshot.DocumentSnapshotPlatform._token*/get _token() {
      return new core.Object.new();
    }
  }, false);
  platform_interface_field_value.FieldValuePlatform = class FieldValuePlatform extends core.Object {
    static ['_#new#tearOff'](_delegate) {
      return new platform_interface_field_value.FieldValuePlatform.new(_delegate);
    }
    static getDelegate(fieldValue) {
      return fieldValue[S$._delegate$7];
    }
  };
  (platform_interface_field_value.FieldValuePlatform.new = function(_delegate) {
    this[S$._delegate$7] = _delegate;
    ;
  }).prototype = platform_interface_field_value.FieldValuePlatform.prototype;
  dart.addTypeTests(platform_interface_field_value.FieldValuePlatform);
  dart.addTypeCaches(platform_interface_field_value.FieldValuePlatform);
  dart.setStaticMethodSignature(platform_interface_field_value.FieldValuePlatform, () => ['getDelegate']);
  dart.setLibraryUri(platform_interface_field_value.FieldValuePlatform, I[88]);
  dart.setFieldSignature(platform_interface_field_value.FieldValuePlatform, () => ({
    __proto__: dart.getFields(platform_interface_field_value.FieldValuePlatform.__proto__),
    [S$._delegate$7]: dart.finalFieldType(dart.dynamic)
  }));
  dart.defineLazy(platform_interface_query, {
    /*platform_interface_query._initialParameters*/get _initialParameters() {
      return T$.MapOfString$dynamic().unmodifiable(new _js_helper.LinkedMap.from(["where", T$.ListOfList().unmodifiable([]), "orderBy", T$.ListOfList().unmodifiable([]), "startAt", null, "startAfter", null, "endAt", null, "endBefore", null, "limit", null, "limitToLast", null]));
    },
    set _initialParameters(value) {}
  }, false);
  platform_interface_query_snapshot.QuerySnapshotPlatform = class QuerySnapshotPlatform extends plugin_platform_interface.PlatformInterface {
    get docs() {
      return this[S$.docs];
    }
    set docs(value) {
      super.docs = value;
    }
    get docChanges() {
      return this[S$.docChanges];
    }
    set docChanges(value) {
      super.docChanges = value;
    }
    get metadata() {
      return this[S$.metadata];
    }
    set metadata(value) {
      super.metadata = value;
    }
    static ['_#new#tearOff'](docs, docChanges, metadata) {
      return new platform_interface_query_snapshot.QuerySnapshotPlatform.new(docs, docChanges, metadata);
    }
    static verifyExtends(instance) {
      plugin_platform_interface.PlatformInterface.verifyToken(instance, platform_interface_query_snapshot.QuerySnapshotPlatform._token);
    }
    get size() {
      return this.docs[S$.$length];
    }
  };
  (platform_interface_query_snapshot.QuerySnapshotPlatform.new = function(docs, docChanges, metadata) {
    this[S$.docs] = docs;
    this[S$.docChanges] = docChanges;
    this[S$.metadata] = metadata;
    platform_interface_query_snapshot.QuerySnapshotPlatform.__proto__.new.call(this, {token: platform_interface_query_snapshot.QuerySnapshotPlatform._token});
    ;
  }).prototype = platform_interface_query_snapshot.QuerySnapshotPlatform.prototype;
  dart.addTypeTests(platform_interface_query_snapshot.QuerySnapshotPlatform);
  dart.addTypeCaches(platform_interface_query_snapshot.QuerySnapshotPlatform);
  dart.setStaticMethodSignature(platform_interface_query_snapshot.QuerySnapshotPlatform, () => ['verifyExtends']);
  dart.setGetterSignature(platform_interface_query_snapshot.QuerySnapshotPlatform, () => ({
    __proto__: dart.getGetters(platform_interface_query_snapshot.QuerySnapshotPlatform.__proto__),
    size: core.int
  }));
  dart.setLibraryUri(platform_interface_query_snapshot.QuerySnapshotPlatform, I[89]);
  dart.setFieldSignature(platform_interface_query_snapshot.QuerySnapshotPlatform, () => ({
    __proto__: dart.getFields(platform_interface_query_snapshot.QuerySnapshotPlatform.__proto__),
    docs: dart.finalFieldType(core.List$(platform_interface_document_snapshot.DocumentSnapshotPlatform)),
    docChanges: dart.finalFieldType(core.List$(platform_interface_document_change.DocumentChangePlatform)),
    metadata: dart.finalFieldType(snapshot_metadata.SnapshotMetadataPlatform)
  }));
  dart.setStaticFieldSignature(platform_interface_query_snapshot.QuerySnapshotPlatform, () => ['_token']);
  dart.defineLazy(platform_interface_query_snapshot.QuerySnapshotPlatform, {
    /*platform_interface_query_snapshot.QuerySnapshotPlatform._token*/get _token() {
      return new core.Object.new();
    }
  }, false);
  platform_interface_load_bundle_task_snapshot.LoadBundleTaskSnapshotPlatform = class LoadBundleTaskSnapshotPlatform extends plugin_platform_interface.PlatformInterface {
    get taskState() {
      return this[S$.taskState$1];
    }
    set taskState(value) {
      super.taskState = value;
    }
    get bytesLoaded() {
      return this[S$.bytesLoaded$1];
    }
    set bytesLoaded(value) {
      super.bytesLoaded = value;
    }
    get documentsLoaded() {
      return this[S$.documentsLoaded$1];
    }
    set documentsLoaded(value) {
      super.documentsLoaded = value;
    }
    get totalBytes() {
      return this[S$.totalBytes$1];
    }
    set totalBytes(value) {
      super.totalBytes = value;
    }
    get totalDocuments() {
      return this[S$.totalDocuments$1];
    }
    set totalDocuments(value) {
      super.totalDocuments = value;
    }
    static ['_#new#tearOff'](taskState, data) {
      return new platform_interface_load_bundle_task_snapshot.LoadBundleTaskSnapshotPlatform.new(taskState, data);
    }
    static verifyExtends(instance) {
      plugin_platform_interface.PlatformInterface.verifyToken(instance, platform_interface_load_bundle_task_snapshot.LoadBundleTaskSnapshotPlatform._token);
    }
  };
  (platform_interface_load_bundle_task_snapshot.LoadBundleTaskSnapshotPlatform.new = function(taskState, data) {
    this[S$.taskState$1] = taskState;
    this[S$.bytesLoaded$1] = core.int.as(dart.dsend(data, '_get', ["bytesLoaded"]));
    this[S$.documentsLoaded$1] = core.int.as(dart.dsend(data, '_get', ["documentsLoaded"]));
    this[S$.totalBytes$1] = core.int.as(dart.dsend(data, '_get', ["totalBytes"]));
    this[S$.totalDocuments$1] = core.int.as(dart.dsend(data, '_get', ["totalDocuments"]));
    platform_interface_load_bundle_task_snapshot.LoadBundleTaskSnapshotPlatform.__proto__.new.call(this, {token: platform_interface_load_bundle_task_snapshot.LoadBundleTaskSnapshotPlatform._token});
    ;
  }).prototype = platform_interface_load_bundle_task_snapshot.LoadBundleTaskSnapshotPlatform.prototype;
  dart.addTypeTests(platform_interface_load_bundle_task_snapshot.LoadBundleTaskSnapshotPlatform);
  dart.addTypeCaches(platform_interface_load_bundle_task_snapshot.LoadBundleTaskSnapshotPlatform);
  dart.setStaticMethodSignature(platform_interface_load_bundle_task_snapshot.LoadBundleTaskSnapshotPlatform, () => ['verifyExtends']);
  dart.setLibraryUri(platform_interface_load_bundle_task_snapshot.LoadBundleTaskSnapshotPlatform, I[90]);
  dart.setFieldSignature(platform_interface_load_bundle_task_snapshot.LoadBundleTaskSnapshotPlatform, () => ({
    __proto__: dart.getFields(platform_interface_load_bundle_task_snapshot.LoadBundleTaskSnapshotPlatform.__proto__),
    taskState: dart.finalFieldType(load_bundle_task_state.LoadBundleTaskState),
    bytesLoaded: dart.finalFieldType(core.int),
    documentsLoaded: dart.finalFieldType(core.int),
    totalBytes: dart.finalFieldType(core.int),
    totalDocuments: dart.finalFieldType(core.int)
  }));
  dart.setStaticFieldSignature(platform_interface_load_bundle_task_snapshot.LoadBundleTaskSnapshotPlatform, () => ['_token']);
  dart.defineLazy(platform_interface_load_bundle_task_snapshot.LoadBundleTaskSnapshotPlatform, {
    /*platform_interface_load_bundle_task_snapshot.LoadBundleTaskSnapshotPlatform._token*/get _token() {
      return new core.Object.new();
    }
  }, false);
  snapshot_metadata.SnapshotMetadataPlatform = class SnapshotMetadataPlatform extends core.Object {
    get hasPendingWrites() {
      return this[S$.hasPendingWrites];
    }
    set hasPendingWrites(value) {
      super.hasPendingWrites = value;
    }
    get isFromCache() {
      return this[S$.isFromCache];
    }
    set isFromCache(value) {
      super.isFromCache = value;
    }
    static ['_#new#tearOff'](hasPendingWrites, isFromCache) {
      return new snapshot_metadata.SnapshotMetadataPlatform.new(hasPendingWrites, isFromCache);
    }
  };
  (snapshot_metadata.SnapshotMetadataPlatform.new = function(hasPendingWrites, isFromCache) {
    this[S$.hasPendingWrites] = hasPendingWrites;
    this[S$.isFromCache] = isFromCache;
    ;
  }).prototype = snapshot_metadata.SnapshotMetadataPlatform.prototype;
  dart.addTypeTests(snapshot_metadata.SnapshotMetadataPlatform);
  dart.addTypeCaches(snapshot_metadata.SnapshotMetadataPlatform);
  dart.setLibraryUri(snapshot_metadata.SnapshotMetadataPlatform, I[91]);
  dart.setFieldSignature(snapshot_metadata.SnapshotMetadataPlatform, () => ({
    __proto__: dart.getFields(snapshot_metadata.SnapshotMetadataPlatform.__proto__),
    hasPendingWrites: dart.finalFieldType(core.bool),
    isFromCache: dart.finalFieldType(core.bool)
  }));
  source.Source = class Source extends core._Enum {
    [S$._enumToString]() {
      return "Source." + this[S$._name];
    }
  };
  (source.Source.new = function(index, name) {
    source.Source.__proto__.new.call(this, index, name);
    ;
  }).prototype = source.Source.prototype;
  dart.addTypeTests(source.Source);
  dart.addTypeCaches(source.Source);
  dart.setMethodSignature(source.Source, () => ({
    __proto__: dart.getMethods(source.Source.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(source.Source, I[92]);
  dart.setStaticFieldSignature(source.Source, () => ['values', 'serverAndCache', 'server', 'cache']);
  dart.defineLazy(source.Source, {
    /*source.Source.values*/get values() {
      return C[61] || CT.C61;
    },
    /*source.Source.serverAndCache*/get serverAndCache() {
      return C[11] || CT.C11;
    },
    /*source.Source.server*/get server() {
      return C[20] || CT.C20;
    },
    /*source.Source.cache*/get cache() {
      return C[19] || CT.C19;
    }
  }, false);
  load_bundle_task_state.LoadBundleTaskState = class LoadBundleTaskState extends core._Enum {
    [S$._enumToString]() {
      return "LoadBundleTaskState." + this[S$._name];
    }
  };
  (load_bundle_task_state.LoadBundleTaskState.new = function(index, name) {
    load_bundle_task_state.LoadBundleTaskState.__proto__.new.call(this, index, name);
    ;
  }).prototype = load_bundle_task_state.LoadBundleTaskState.prototype;
  dart.addTypeTests(load_bundle_task_state.LoadBundleTaskState);
  dart.addTypeCaches(load_bundle_task_state.LoadBundleTaskState);
  dart.setMethodSignature(load_bundle_task_state.LoadBundleTaskState, () => ({
    __proto__: dart.getMethods(load_bundle_task_state.LoadBundleTaskState.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(load_bundle_task_state.LoadBundleTaskState, I[93]);
  dart.setStaticFieldSignature(load_bundle_task_state.LoadBundleTaskState, () => ['values', 'running', 'success', 'error']);
  dart.defineLazy(load_bundle_task_state.LoadBundleTaskState, {
    /*load_bundle_task_state.LoadBundleTaskState.values*/get values() {
      return C[62] || CT.C62;
    },
    /*load_bundle_task_state.LoadBundleTaskState.running*/get running() {
      return C[63] || CT.C63;
    },
    /*load_bundle_task_state.LoadBundleTaskState.success*/get success() {
      return C[64] || CT.C64;
    },
    /*load_bundle_task_state.LoadBundleTaskState.error*/get error() {
      return C[65] || CT.C65;
    }
  }, false);
  timestamp.Timestamp = class Timestamp extends core.Object {
    static ['_#new#tearOff'](_seconds, _nanoseconds) {
      return new timestamp.Timestamp.new(_seconds, _nanoseconds);
    }
    static fromMillisecondsSinceEpoch(milliseconds) {
      let seconds = (milliseconds / 1000)[S$.$floor]();
      let nanoseconds = (milliseconds - seconds * 1000) * 1000000;
      return new timestamp.Timestamp.new(seconds, nanoseconds);
    }
    static ['_#fromMillisecondsSinceEpoch#tearOff'](milliseconds) {
      return timestamp.Timestamp.fromMillisecondsSinceEpoch(milliseconds);
    }
    static fromMicrosecondsSinceEpoch(microseconds) {
      let seconds = (microseconds / 1000000)[S$.$truncate]();
      let nanoseconds = (microseconds - seconds * 1000000) * 1000;
      return new timestamp.Timestamp.new(seconds, nanoseconds);
    }
    static ['_#fromMicrosecondsSinceEpoch#tearOff'](microseconds) {
      return timestamp.Timestamp.fromMicrosecondsSinceEpoch(microseconds);
    }
    static fromDate(date) {
      return timestamp.Timestamp.fromMicrosecondsSinceEpoch(date.microsecondsSinceEpoch);
    }
    static ['_#fromDate#tearOff'](date) {
      return timestamp.Timestamp.fromDate(date);
    }
    static now() {
      return timestamp.Timestamp.fromMicrosecondsSinceEpoch(new core.DateTime.now().microsecondsSinceEpoch);
    }
    static ['_#now#tearOff']() {
      return timestamp.Timestamp.now();
    }
    get seconds() {
      return this[S$._seconds];
    }
    get nanoseconds() {
      return this[S$._nanoseconds];
    }
    get millisecondsSinceEpoch() {
      return this.seconds * 1000 + (this.nanoseconds / 1000000)[S$.$truncate]();
    }
    get microsecondsSinceEpoch() {
      return this.seconds * 1000000 + (this.nanoseconds / 1000)[S$.$truncate]();
    }
    toDate() {
      return new core.DateTime.fromMicrosecondsSinceEpoch(this.microsecondsSinceEpoch);
    }
    get hashCode() {
      return core.Object.hash(this.seconds, this.nanoseconds);
    }
    _equals(other) {
      if (other == null) return false;
      return timestamp.Timestamp.is(other) && other.seconds === this.seconds && other.nanoseconds === this.nanoseconds;
    }
    compareTo(other) {
      timestamp.Timestamp.as(other);
      if (this.seconds === other.seconds) {
        return this.nanoseconds[S$.$compareTo](other.nanoseconds);
      }
      return this.seconds[S$.$compareTo](other.seconds);
    }
    toString() {
      return "Timestamp(seconds=" + dart.str(this.seconds) + ", nanoseconds=" + dart.str(this.nanoseconds) + ")";
    }
    static _validateRange(seconds, nanoseconds) {
      timestamp._check(nanoseconds >= 0, "nanoseconds", nanoseconds);
      timestamp._check(nanoseconds < 1000000000, "nanoseconds", nanoseconds);
      timestamp._check(seconds >= -62135596800, "seconds", seconds);
      timestamp._check(seconds < 253402300800, "seconds", seconds);
    }
  };
  (timestamp.Timestamp.new = function(_seconds, _nanoseconds) {
    this[S$._seconds] = _seconds;
    this[S$._nanoseconds] = _nanoseconds;
    timestamp.Timestamp._validateRange(this[S$._seconds], this[S$._nanoseconds]);
  }).prototype = timestamp.Timestamp.prototype;
  dart.addTypeTests(timestamp.Timestamp);
  dart.addTypeCaches(timestamp.Timestamp);
  timestamp.Timestamp[dart.implements] = () => [core.Comparable$(timestamp.Timestamp)];
  dart.setMethodSignature(timestamp.Timestamp, () => ({
    __proto__: dart.getMethods(timestamp.Timestamp.__proto__),
    toDate: dart.fnType(core.DateTime, []),
    compareTo: dart.fnType(core.int, [dart.nullable(core.Object)]),
    [S$.$compareTo]: dart.fnType(core.int, [dart.nullable(core.Object)])
  }));
  dart.setStaticMethodSignature(timestamp.Timestamp, () => ['fromMillisecondsSinceEpoch', 'fromMicrosecondsSinceEpoch', 'fromDate', 'now', '_validateRange']);
  dart.setGetterSignature(timestamp.Timestamp, () => ({
    __proto__: dart.getGetters(timestamp.Timestamp.__proto__),
    seconds: core.int,
    nanoseconds: core.int,
    millisecondsSinceEpoch: core.int,
    microsecondsSinceEpoch: core.int
  }));
  dart.setLibraryUri(timestamp.Timestamp, I[94]);
  dart.setFieldSignature(timestamp.Timestamp, () => ({
    __proto__: dart.getFields(timestamp.Timestamp.__proto__),
    [S$._seconds]: dart.finalFieldType(core.int),
    [S$._nanoseconds]: dart.finalFieldType(core.int)
  }));
  dart.setStaticFieldSignature(timestamp.Timestamp, () => ['_kStartOfTime', '_kEndOfTime']);
  dart.defineExtensionMethods(timestamp.Timestamp, ['_equals', 'compareTo', 'toString']);
  dart.defineExtensionAccessors(timestamp.Timestamp, ['hashCode']);
  dart.defineLazy(timestamp.Timestamp, {
    /*timestamp.Timestamp._kStartOfTime*/get _kStartOfTime() {
      return -62135596800;
    },
    /*timestamp.Timestamp._kEndOfTime*/get _kEndOfTime() {
      return 253402300800;
    }
  }, false);
  timestamp._check = function _check(expr, name, value) {
    if (!expr) {
      dart.throw(new core.ArgumentError.new("Timestamp " + name + " out of range: " + dart.str(value)));
    }
  };
  dart.defineLazy(timestamp, {
    /*timestamp._kThousand*/get _kThousand() {
      return 1000;
    },
    /*timestamp._kMillion*/get _kMillion() {
      return 1000000;
    },
    /*timestamp._kBillion*/get _kBillion() {
      return 1000000000;
    }
  }, false);
  settings.Settings = class Settings extends core.Object {
    get persistenceEnabled() {
      return this[S$.persistenceEnabled];
    }
    set persistenceEnabled(value) {
      super.persistenceEnabled = value;
    }
    get host() {
      return this[S$.host];
    }
    set host(value) {
      super.host = value;
    }
    get sslEnabled() {
      return this[S$.sslEnabled];
    }
    set sslEnabled(value) {
      super.sslEnabled = value;
    }
    get cacheSizeBytes() {
      return this[S$.cacheSizeBytes];
    }
    set cacheSizeBytes(value) {
      super.cacheSizeBytes = value;
    }
    get ignoreUndefinedProperties() {
      return this[S$.ignoreUndefinedProperties];
    }
    set ignoreUndefinedProperties(value) {
      super.ignoreUndefinedProperties = value;
    }
    static ['_#new#tearOff'](opts) {
      let persistenceEnabled = opts && 'persistenceEnabled' in opts ? opts.persistenceEnabled : null;
      let host = opts && 'host' in opts ? opts.host : null;
      let sslEnabled = opts && 'sslEnabled' in opts ? opts.sslEnabled : null;
      let cacheSizeBytes = opts && 'cacheSizeBytes' in opts ? opts.cacheSizeBytes : null;
      let ignoreUndefinedProperties = opts && 'ignoreUndefinedProperties' in opts ? opts.ignoreUndefinedProperties : false;
      return new settings.Settings.new({persistenceEnabled: persistenceEnabled, host: host, sslEnabled: sslEnabled, cacheSizeBytes: cacheSizeBytes, ignoreUndefinedProperties: ignoreUndefinedProperties});
    }
    get asMap() {
      return (() => {
        let t101 = new (T$.IdentityMapOfString$dynamic()).new();
        t101[S$.$_set]("persistenceEnabled", this.persistenceEnabled);
        t101[S$.$_set]("host", this.host);
        t101[S$.$_set]("sslEnabled", this.sslEnabled);
        t101[S$.$_set]("cacheSizeBytes", this.cacheSizeBytes);
        t101[S$.$_set]("ignoreUndefinedProperties", this.ignoreUndefinedProperties);
        return t101;
      })();
    }
    copyWith(opts) {
      let t102, t102$, t102$0, t102$1, t102$2;
      let persistenceEnabled = opts && 'persistenceEnabled' in opts ? opts.persistenceEnabled : null;
      let host = opts && 'host' in opts ? opts.host : null;
      let sslEnabled = opts && 'sslEnabled' in opts ? opts.sslEnabled : null;
      let cacheSizeBytes = opts && 'cacheSizeBytes' in opts ? opts.cacheSizeBytes : null;
      let ignoreUndefinedProperties = opts && 'ignoreUndefinedProperties' in opts ? opts.ignoreUndefinedProperties : null;
      return new settings.Settings.new({persistenceEnabled: (t102 = persistenceEnabled, t102 == null ? this.persistenceEnabled : t102), host: (t102$ = host, t102$ == null ? this.host : t102$), sslEnabled: (t102$0 = sslEnabled, t102$0 == null ? this.sslEnabled : t102$0), cacheSizeBytes: (t102$1 = cacheSizeBytes, t102$1 == null ? this.cacheSizeBytes : t102$1), ignoreUndefinedProperties: (t102$2 = ignoreUndefinedProperties, t102$2 == null ? this.ignoreUndefinedProperties : t102$2)});
    }
    _equals(other) {
      if (other == null) return false;
      return settings.Settings.is(other) && other[S$.$runtimeType]._equals(this[S$.$runtimeType]) && other.persistenceEnabled == this.persistenceEnabled && other.host == this.host && other.sslEnabled == this.sslEnabled && other.cacheSizeBytes == this.cacheSizeBytes && other.ignoreUndefinedProperties === this.ignoreUndefinedProperties;
    }
    get hashCode() {
      return core.Object.hash(this[S$.$runtimeType], this.persistenceEnabled, this.host, this.sslEnabled, this.cacheSizeBytes, this.ignoreUndefinedProperties);
    }
    toString() {
      return "Settings(" + this.asMap[S$.$toString]() + ")";
    }
  };
  (settings.Settings.new = function(opts) {
    let persistenceEnabled = opts && 'persistenceEnabled' in opts ? opts.persistenceEnabled : null;
    let host = opts && 'host' in opts ? opts.host : null;
    let sslEnabled = opts && 'sslEnabled' in opts ? opts.sslEnabled : null;
    let cacheSizeBytes = opts && 'cacheSizeBytes' in opts ? opts.cacheSizeBytes : null;
    let ignoreUndefinedProperties = opts && 'ignoreUndefinedProperties' in opts ? opts.ignoreUndefinedProperties : false;
    this[S$.persistenceEnabled] = persistenceEnabled;
    this[S$.host] = host;
    this[S$.sslEnabled] = sslEnabled;
    this[S$.cacheSizeBytes] = cacheSizeBytes;
    this[S$.ignoreUndefinedProperties] = ignoreUndefinedProperties;
    ;
  }).prototype = settings.Settings.prototype;
  dart.addTypeTests(settings.Settings);
  dart.addTypeCaches(settings.Settings);
  dart.setMethodSignature(settings.Settings, () => ({
    __proto__: dart.getMethods(settings.Settings.__proto__),
    copyWith: dart.fnType(settings.Settings, [], {cacheSizeBytes: dart.nullable(core.int), host: dart.nullable(core.String), ignoreUndefinedProperties: dart.nullable(core.bool), persistenceEnabled: dart.nullable(core.bool), sslEnabled: dart.nullable(core.bool)}, {})
  }));
  dart.setGetterSignature(settings.Settings, () => ({
    __proto__: dart.getGetters(settings.Settings.__proto__),
    asMap: core.Map$(core.String, dart.dynamic)
  }));
  dart.setLibraryUri(settings.Settings, I[95]);
  dart.setFieldSignature(settings.Settings, () => ({
    __proto__: dart.getFields(settings.Settings.__proto__),
    persistenceEnabled: dart.finalFieldType(dart.nullable(core.bool)),
    host: dart.finalFieldType(dart.nullable(core.String)),
    sslEnabled: dart.finalFieldType(dart.nullable(core.bool)),
    cacheSizeBytes: dart.finalFieldType(dart.nullable(core.int)),
    ignoreUndefinedProperties: dart.finalFieldType(core.bool)
  }));
  dart.setStaticFieldSignature(settings.Settings, () => ['CACHE_SIZE_UNLIMITED']);
  dart.defineExtensionMethods(settings.Settings, ['_equals', 'toString']);
  dart.defineExtensionAccessors(settings.Settings, ['hashCode']);
  dart.defineLazy(settings.Settings, {
    /*settings.Settings.CACHE_SIZE_UNLIMITED*/get CACHE_SIZE_UNLIMITED() {
      return -1;
    }
  }, false);
  get_options.GetOptions = class GetOptions extends core.Object {
    get source() {
      return this[S$.source];
    }
    set source(value) {
      super.source = value;
    }
    static ['_#new#tearOff'](opts) {
      let source = opts && 'source' in opts ? opts.source : C[11] || CT.C11;
      return new get_options.GetOptions.new({source: source});
    }
  };
  (get_options.GetOptions.new = function(opts) {
    let source = opts && 'source' in opts ? opts.source : C[11] || CT.C11;
    this[S$.source] = source;
    ;
  }).prototype = get_options.GetOptions.prototype;
  dart.addTypeTests(get_options.GetOptions);
  dart.addTypeCaches(get_options.GetOptions);
  dart.setLibraryUri(get_options.GetOptions, I[96]);
  dart.setFieldSignature(get_options.GetOptions, () => ({
    __proto__: dart.getFields(get_options.GetOptions.__proto__),
    source: dart.finalFieldType(source.Source)
  }));
  set_options.SetOptions = class SetOptions extends core.Object {
    get merge() {
      return this[S$.merge];
    }
    set merge(value) {
      super.merge = value;
    }
    get mergeFields() {
      return this[S$.mergeFields];
    }
    set mergeFields(value) {
      super.mergeFields = value;
    }
    static ['_#new#tearOff'](opts) {
      let merge = opts && 'merge' in opts ? opts.merge : null;
      let mergeFields = opts && 'mergeFields' in opts ? opts.mergeFields : null;
      return new set_options.SetOptions.new({merge: merge, mergeFields: mergeFields});
    }
  };
  (set_options.SetOptions.new = function(opts) {
    let t102;
    let merge = opts && 'merge' in opts ? opts.merge : null;
    let mergeFields = opts && 'mergeFields' in opts ? opts.mergeFields : null;
    this[S$.merge] = merge;
    if (!(merge != null !== (mergeFields != null))) dart.assertFailed("options must provide either 'merge' or 'mergeFields'", I[97], 16, 11, "(merge != null) ^ (mergeFields != null)");
    this[S$.mergeFields] = (t102 = mergeFields, t102 == null ? null : t102[S$.$map](field_path.FieldPath, dart.fn(field => {
      if (!(typeof field == 'string' || field_path.FieldPath.is(field))) dart.assertFailed("[mergeFields] can only contain Strings or FieldPaths but got " + dart.str(field), I[97], 21, 13, "field is String || field is FieldPath");
      if (typeof field == 'string') return new field_path.FieldPath.fromString(field);
      return field_path.FieldPath.as(field);
    }, T$.ObjectToFieldPath()))[S$.$toList]({growable: false}));
    ;
  }).prototype = set_options.SetOptions.prototype;
  dart.addTypeTests(set_options.SetOptions);
  dart.addTypeCaches(set_options.SetOptions);
  dart.setLibraryUri(set_options.SetOptions, I[98]);
  dart.setFieldSignature(set_options.SetOptions, () => ({
    __proto__: dart.getFields(set_options.SetOptions.__proto__),
    merge: dart.finalFieldType(dart.nullable(core.bool)),
    mergeFields: dart.finalFieldType(dart.nullable(core.List$(field_path.FieldPath)))
  }));
  persistence_settings.PersistenceSettings = class PersistenceSettings extends core.Object {
    get synchronizeTabs() {
      return this[S$.synchronizeTabs];
    }
    set synchronizeTabs(value) {
      super.synchronizeTabs = value;
    }
    static ['_#new#tearOff'](opts) {
      let synchronizeTabs = opts && 'synchronizeTabs' in opts ? opts.synchronizeTabs : null;
      return new persistence_settings.PersistenceSettings.new({synchronizeTabs: synchronizeTabs});
    }
  };
  (persistence_settings.PersistenceSettings.new = function(opts) {
    let synchronizeTabs = opts && 'synchronizeTabs' in opts ? opts.synchronizeTabs : null;
    this[S$.synchronizeTabs] = synchronizeTabs;
    ;
  }).prototype = persistence_settings.PersistenceSettings.prototype;
  dart.addTypeTests(persistence_settings.PersistenceSettings);
  dart.addTypeCaches(persistence_settings.PersistenceSettings);
  dart.setLibraryUri(persistence_settings.PersistenceSettings, I[99]);
  dart.setFieldSignature(persistence_settings.PersistenceSettings, () => ({
    __proto__: dart.getFields(persistence_settings.PersistenceSettings.__proto__),
    synchronizeTabs: dart.finalFieldType(core.bool)
  }));
  load_bundle_task_state$.convertToTaskState = function convertToTaskState(state) {
    switch (state) {
      case "running":
        {
          return load_bundle_task_state.LoadBundleTaskState.running;
        }
      case "success":
        {
          return load_bundle_task_state.LoadBundleTaskState.success;
        }
      case "error":
        {
          return load_bundle_task_state.LoadBundleTaskState.error;
        }
      default:
        {
          dart.throw(new core.FallThroughError.new());
        }
    }
  };
  internals$['ObjectX|guard'] = function ObjectX$124guard(T, R, $this, cb) {
    if (T.is($this)) return cb(T.as($this));
    return null;
  };
  internals$['ObjectX|get#guard'] = function ObjectX$124get$35guard(T, $this) {
    return dart.fn((R, cb) => internals$['ObjectX|guard'](T, R, $this, cb), dart.gFnType(R => {
      var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
      return [__t$RN(), [dart.fnType(R, [T])]];
    }, R => {
      var __t$RN = () => (__t$RN = dart.constFn(dart.nullable(R)))();
      return [T$.ObjectN()];
    }));
  };
  internals$['ObjectX|safeCast'] = function ObjectX$124safeCast(T, R, $this) {
    if (R.is($this)) return R.as($this);
    return null;
  };
  internals$['ObjectX|get#safeCast'] = function ObjectX$124get$35safeCast(T, $this) {
    return dart.fn(R => internals$['ObjectX|safeCast'](T, R, $this), T$.VoidToRN());
  };
  internals$._firebaseExceptionFromCoreFirebaseError = function _firebaseExceptionFromCoreFirebaseError(firebaseError, opts) {
    let plugin = opts && 'plugin' in opts ? opts.plugin : null;
    let codeParser = opts && 'codeParser' in opts ? opts.codeParser : null;
    let messageParser = opts && 'messageParser' in opts ? opts.messageParser : null;
    let code = codeParser(firebaseError.code);
    let message = messageParser != null ? messageParser(code, firebaseError.message) : firebaseError.message[S$.$replaceFirst]("(" + firebaseError.code + ")", "");
    return new firebase_core_platform_interface.FirebaseException.new({plugin: plugin, message: message, code: code});
  };
  internals$._testException = function _testException(exception) {
    return dart.packageJSType("FirebaseError", false).is(exception);
  };
  internals$._mapException = function _mapException(exception, opts) {
    let plugin = opts && 'plugin' in opts ? opts.plugin : null;
    let codeParser = opts && 'codeParser' in opts ? opts.codeParser : null;
    let messageParser = opts && 'messageParser' in opts ? opts.messageParser : null;
    if (!internals$._testException(exception)) dart.assertFailed(null, I[100], 64, 10, "_testException(exception)");
    if (dart.packageJSType("FirebaseError", false).is(exception)) {
      return internals$._firebaseExceptionFromCoreFirebaseError(exception, {plugin: plugin, codeParser: codeParser, messageParser: messageParser});
    }
    dart.throw(new core.StateError.new("unrecognized error " + dart.str(exception)));
  };
  internals$.guardWebExceptions = function guardWebExceptions(R, cb, opts) {
    let plugin = opts && 'plugin' in opts ? opts.plugin : null;
    let codeParser = opts && 'codeParser' in opts ? opts.codeParser : null;
    let messageParser = opts && 'messageParser' in opts ? opts.messageParser : null;
    try {
      let value = cb();
      if (async.Future.is(value)) {
        return R.as(value.catchError(dart.fn((err, stack) => core.Error.throwWithStackTrace(internals$._mapException(err, {plugin: plugin, codeParser: codeParser, messageParser: messageParser}), core.StackTrace.as(stack)), T$.dynamicAnddynamicToNever()), {test: C[66] || CT.C66}));
      } else if (async.Stream.is(value)) {
        return R.as(value.handleError(dart.fn((err, stack) => core.Error.throwWithStackTrace(internals$._mapException(err, {plugin: plugin, codeParser: codeParser, messageParser: messageParser}), core.StackTrace.as(stack)), T$.dynamicAnddynamicToNever()), {test: C[66] || CT.C66}));
      }
      return value;
    } catch (e) {
      let error = dart.getThrown(e);
      let stack = dart.stackTrace(e);
      if (core.Object.is(error)) {
        if (!internals$._testException(error)) {
          dart.rethrow(e);
        }
        core.Error.throwWithStackTrace(internals$._mapException(error, {plugin: plugin, codeParser: codeParser, messageParser: messageParser}), stack);
      } else
        throw e;
    }
  };
  decode_utility.DecodeUtility = class DecodeUtility extends core.Object {
    static decodeMapData(data) {
      let t107;
      if (data == null) {
        return null;
      }
      t107 = data;
      return (() => {
        t107[S$.$updateAll](dart.fn((key, value) => decode_utility.DecodeUtility.valueDecode(value), T$.StringAnddynamicTodynamic()));
        return t107;
      })();
    }
    static decodeArrayData(data) {
      if (data == null) {
        return null;
      }
      return data[S$.$map](dart.dynamic, C[67] || CT.C67)[S$.$toList]();
    }
    static valueDecode(value) {
      if (js_util.instanceof(value, dart.global.firebase_firestore.GeoPoint)) {
        return new geo_point.GeoPoint.new(core.double.as(dart.dload(value, 'latitude')), core.double.as(dart.dload(value, 'longitude')));
      } else if (core.DateTime.is(value)) {
        return timestamp.Timestamp.fromDate(value);
      } else if (js_util.instanceof(value, dart.global.firebase_firestore.Bytes)) {
        return new blob.Blob.new(typed_data.Uint8List.as(dart.dsend(value, 'toUint8Array', [])));
      } else if (firestore.DocumentReference.is(value)) {
        return cloud_firestore_web.FirebaseFirestoreWeb.as(platform_interface_firestore.FirebaseFirestorePlatform.instance).doc(value.path);
      } else if (T$.MapOfString$dynamic().is(value)) {
        return decode_utility.DecodeUtility.decodeMapData(value);
      } else if (core.List.is(value)) {
        return decode_utility.DecodeUtility.decodeArrayData(value);
      }
      return value;
    }
    static ['_#new#tearOff']() {
      return new decode_utility.DecodeUtility.new();
    }
  };
  (decode_utility.DecodeUtility.new = function() {
    ;
  }).prototype = decode_utility.DecodeUtility.prototype;
  dart.addTypeTests(decode_utility.DecodeUtility);
  dart.addTypeCaches(decode_utility.DecodeUtility);
  dart.setStaticMethodSignature(decode_utility.DecodeUtility, () => ['decodeMapData', 'decodeArrayData', 'valueDecode']);
  dart.setLibraryUri(decode_utility.DecodeUtility, I[101]);
  js_interop.dartifyDate = function dartifyDate(jsObject) {
    if (js_util.hasProperty(jsObject, "toDateString")) {
      try {
        let date = jsObject;
        return new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(dart.dsend(date, 'getTime', [])));
      } catch (e) {
        let ex = dart.getThrown(e);
        if (core.NoSuchMethodError.is(ex)) {
          return null;
        } else
          throw e;
      }
    }
    return null;
  };
  utils.dartify = function dartify(jsObject, customDartify = null) {
    let t109;
    if (utils._isBasicType(jsObject)) {
      return jsObject;
    }
    if (core.Iterable.is(jsObject)) {
      return jsObject[S$.$map](dart.dynamic, dart.fn(item => utils.dartify(item, customDartify), T$.dynamicTodynamic()))[S$.$toList]();
    }
    let jsDate = js_interop.dartifyDate(dart.nullCheck(jsObject));
    if (jsDate != null) {
      return jsDate;
    }
    let value = (t109 = customDartify, t109 == null ? null : t109(jsObject));
    if (value == null) {
      let keys = dart.global.Object.keys(jsObject);
      let map = new (T$.IdentityMapOfString$dynamic()).new();
      for (let key of keys) {
        map[S$.$_set](key, utils.dartify(js_util.getProperty(T$.ObjectN(), jsObject, key), customDartify));
      }
      return map;
    }
    return value;
  };
  utils.jsifyList = function jsifyList(list, customJsify = null) {
    return dart.global.Array.from(list[S$.$map](dart.dynamic, dart.fn(item => utils.jsify(item, customJsify), T$.dynamicTodynamic()))[S$.$toList]());
  };
  utils.jsify = function jsify(dartObject, customJsify = null) {
    let t109;
    if (utils._isBasicType(dartObject)) {
      return dartObject;
    }
    if (core.Iterable.is(dartObject)) {
      return utils.jsifyList(dartObject, customJsify);
    }
    if (core.Map.is(dartObject)) {
      let jsMap = js_util.newObject(dart.dynamic);
      dartObject[S$.$forEach](dart.fn((key, value) => {
        js_util.setProperty(core.Object, core.Object.as(jsMap), core.Object.as(key), utils.jsify(value, customJsify));
      }, T$.dynamicAnddynamicTovoid()));
      return jsMap;
    }
    if (core.Function.is(dartObject)) {
      return js.allowInterop(core.Function, dartObject);
    }
    let value = (t109 = customJsify, t109 == null ? null : t109(dartObject));
    if (value == null) {
      dart.throw(new core.ArgumentError.value(dartObject, "dartObject", "Could not convert"));
    }
    return value;
  };
  utils.callMethod = function callMethod(jsObject, method, args) {
    return js_util.callMethod(dart.dynamic, jsObject, method, args);
  };
  utils._isBasicType = function _isBasicType(value) {
    if (value == null || typeof value == 'number' || typeof value == 'boolean' || typeof value == 'string') {
      return true;
    }
    return false;
  };
  utils.handleThenable = function handleThenable(T, thenable) {
    return async.async(T, function* handleThenable() {
      return js_util.promiseToFuture(T, thenable);
    });
  };
  utils.handleFutureWithMapper = function handleFutureWithMapper(T, S, future, mapper) {
    return new dart.global.Promise(js.allowInterop(core.Function, dart.fn((resolve, reject) => {
      future.then(core.Null, dart.fn(value => {
        let mappedValue = mapper(value);
        resolve(mappedValue);
      }, dart.fnType(core.Null, [T]))).catchError(dart.fn(error => reject(core.Object.as(error)), T$.dynamicTodynamic()));
    }, dart.fnType(core.Null, [dart.fnType(dart.dynamic, [S]), T$.ObjectTodynamic()]))));
  };
  field_value_web.FieldValueWeb = class FieldValueWeb extends core.Object {
    get data() {
      return this[S$.data];
    }
    set data(value) {
      this[S$.data] = value;
    }
    static ['_#new#tearOff'](data) {
      return new field_value_web.FieldValueWeb.new(data);
    }
    _equals(other) {
      if (other == null) return false;
      return field_value_web.FieldValueWeb.is(other) && other.data[S$.$_equals](this.data);
    }
    get hashCode() {
      return this.data[S$.$hashCode];
    }
  };
  (field_value_web.FieldValueWeb.new = function(data) {
    this[S$.data] = data;
    ;
  }).prototype = field_value_web.FieldValueWeb.prototype;
  dart.addTypeTests(field_value_web.FieldValueWeb);
  dart.addTypeCaches(field_value_web.FieldValueWeb);
  dart.setLibraryUri(field_value_web.FieldValueWeb, I[102]);
  dart.setFieldSignature(field_value_web.FieldValueWeb, () => ({
    __proto__: dart.getFields(field_value_web.FieldValueWeb.__proto__),
    data: dart.fieldType(firestore.FieldValue)
  }));
  dart.defineExtensionMethods(field_value_web.FieldValueWeb, ['_equals']);
  dart.defineExtensionAccessors(field_value_web.FieldValueWeb, ['hashCode']);
  encode_utility.EncodeUtility = class EncodeUtility extends core.Object {
    static encodeMapData(data) {
      if (data == null) {
        return null;
      }
      let output = T$.LinkedHashMapOfString$dynamic().from(data);
      output[S$.$updateAll](dart.fn((key, value) => encode_utility.EncodeUtility.valueEncode(value), T$.StringAnddynamicTodynamic()));
      return output;
    }
    static encodeArrayData(data) {
      if (data == null) {
        return null;
      }
      return core.List.from(data)[S$.$map](dart.dynamic, C[68] || CT.C68)[S$.$toList]();
    }
    static valueEncode(value) {
      if (platform_interface_field_value.FieldValuePlatform.is(value)) {
        let delegate = field_value_web.FieldValueWeb.as(platform_interface_field_value.FieldValuePlatform.getDelegate(value));
        return delegate.data;
      } else if (field_path.FieldPath.is(value)) {
        let components = value.components;
        let length = components[S$.$length];
        switch (length) {
          case 1:
            {
              return new dart.global.firebase_firestore.FieldPath(components[S$.$_get](0));
            }
          case 2:
            {
              return new dart.global.firebase_firestore.FieldPath(components[S$.$_get](0), components[S$.$_get](1));
            }
          case 3:
            {
              return new dart.global.firebase_firestore.FieldPath(components[S$.$_get](0), components[S$.$_get](1), components[S$.$_get](2));
            }
          case 4:
            {
              return new dart.global.firebase_firestore.FieldPath(components[S$.$_get](0), components[S$.$_get](1), components[S$.$_get](2), components[S$.$_get](3));
            }
          case 5:
            {
              return new dart.global.firebase_firestore.FieldPath(components[S$.$_get](0), components[S$.$_get](1), components[S$.$_get](2), components[S$.$_get](3), components[S$.$_get](4));
            }
          case 6:
            {
              return new dart.global.firebase_firestore.FieldPath(components[S$.$_get](0), components[S$.$_get](1), components[S$.$_get](2), components[S$.$_get](3), components[S$.$_get](4), components[S$.$_get](5));
            }
          case 7:
            {
              return new dart.global.firebase_firestore.FieldPath(components[S$.$_get](0), components[S$.$_get](1), components[S$.$_get](2), components[S$.$_get](3), components[S$.$_get](4), components[S$.$_get](5), components[S$.$_get](6));
            }
          case 8:
            {
              return new dart.global.firebase_firestore.FieldPath(components[S$.$_get](0), components[S$.$_get](1), components[S$.$_get](2), components[S$.$_get](3), components[S$.$_get](4), components[S$.$_get](5), components[S$.$_get](6), components[S$.$_get](7));
            }
          case 9:
            {
              return new dart.global.firebase_firestore.FieldPath(components[S$.$_get](0), components[S$.$_get](1), components[S$.$_get](2), components[S$.$_get](3), components[S$.$_get](4), components[S$.$_get](5), components[S$.$_get](6), components[S$.$_get](7), components[S$.$_get](8));
            }
          case 10:
            {
              return new dart.global.firebase_firestore.FieldPath(components[S$.$_get](0), components[S$.$_get](1), components[S$.$_get](2), components[S$.$_get](3), components[S$.$_get](4), components[S$.$_get](5), components[S$.$_get](6), components[S$.$_get](7), components[S$.$_get](8), components[S$.$_get](9));
            }
          default:
            {
              dart.throw(core.Exception.new("Firestore web FieldPath only supports 10 levels deep field paths"));
            }
        }
      } else if (dart.equals(value, field_path.FieldPath.documentId)) {
        return dart.global.firebase_firestore.documentId();
      } else if (timestamp.Timestamp.is(value)) {
        return value.toDate();
      } else if (geo_point.GeoPoint.is(value)) {
        return new dart.global.firebase_firestore.GeoPoint(value.latitude, value.longitude);
      } else if (blob.Blob.is(value)) {
        return dart.global.firebase_firestore.Bytes.fromUint8Array(value.bytes);
      } else if (document_reference_web.DocumentReferenceWeb.is(value)) {
        return value.firestoreWeb.doc(value.path);
      } else if (T$.MapOfString$dynamic().is(value)) {
        return encode_utility.EncodeUtility.encodeMapData(value);
      } else if (core.List.is(value)) {
        return encode_utility.EncodeUtility.encodeArrayData(value);
      }
      return value;
    }
    static ['_#new#tearOff']() {
      return new encode_utility.EncodeUtility.new();
    }
  };
  (encode_utility.EncodeUtility.new = function() {
    ;
  }).prototype = encode_utility.EncodeUtility.prototype;
  dart.addTypeTests(encode_utility.EncodeUtility);
  dart.addTypeCaches(encode_utility.EncodeUtility);
  dart.setStaticMethodSignature(encode_utility.EncodeUtility, () => ['encodeMapData', 'encodeArrayData', 'valueEncode']);
  dart.setLibraryUri(encode_utility.EncodeUtility, I[103]);
  utils$.dartify = function dartify$(jsObject) {
    return utils.dartify(jsObject, dart.fn(object => {
      if (object == null) {
        return null;
      }
      if (js_util.instanceof(object, dart.global.firebase_firestore.DocumentReference)) {
        return firestore.DocumentReference.getInstance(dart.packageJSType("firebase_firestore.DocumentReference", false).as(object));
      }
      if (js_util.instanceof(object, dart.global.firebase_firestore.GeoPoint)) {
        return object;
      }
      if (js_util.instanceof(object, dart.global.firebase_firestore.Timestamp)) {
        return new core.DateTime.fromMillisecondsSinceEpoch(dart.packageJSType("firebase_firestore.Timestamp", false).as(object).toMillis());
      }
      if (js_util.instanceof(object, dart.global.firebase_firestore.Bytes)) {
        return dart.packageJSType("BytesJsImpl", false).as(object);
      }
      return null;
    }, T$.ObjectNToObjectN()));
  };
  utils$.jsify = function jsify$(dartObject) {
    if (dartObject == null) {
      return null;
    }
    return utils.jsify(dartObject, dart.fn(object => {
      if (core.DateTime.is(object)) {
        return dart.global.firebase_firestore.Timestamp.fromMillis(object.millisecondsSinceEpoch);
      }
      if (firestore.DocumentReference.is(object)) {
        return object.jsObject;
      }
      if (firestore.FieldValue.is(object)) {
        return firestore.jsifyFieldValue(object);
      }
      if (dart.packageJSType("BytesJsImpl", false).is(object)) {
        return object;
      }
      if (dart.packageJSType("firebase_firestore.GeoPoint", false).is(object)) {
        return dartObject;
      }
      if (core.Function.is(object)) {
        return js.allowInterop(core.Function, object);
      }
      return null;
    }, T$.ObjectNTodynamic()));
  };
  action_code_info.ActionCodeInfoOperation = class ActionCodeInfoOperation extends core._Enum {
    [S$._enumToString]() {
      return "ActionCodeInfoOperation." + this[S$._name];
    }
  };
  (action_code_info.ActionCodeInfoOperation.new = function(index, name) {
    action_code_info.ActionCodeInfoOperation.__proto__.new.call(this, index, name);
    ;
  }).prototype = action_code_info.ActionCodeInfoOperation.prototype;
  dart.addTypeTests(action_code_info.ActionCodeInfoOperation);
  dart.addTypeCaches(action_code_info.ActionCodeInfoOperation);
  dart.setMethodSignature(action_code_info.ActionCodeInfoOperation, () => ({
    __proto__: dart.getMethods(action_code_info.ActionCodeInfoOperation.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(action_code_info.ActionCodeInfoOperation, I[104]);
  dart.setStaticFieldSignature(action_code_info.ActionCodeInfoOperation, () => ['values', 'unknown', 'passwordReset', 'verifyEmail', 'recoverEmail', 'emailSignIn', 'verifyAndChangeEmail', 'revertSecondFactorAddition']);
  dart.defineLazy(action_code_info.ActionCodeInfoOperation, {
    /*action_code_info.ActionCodeInfoOperation.values*/get values() {
      return C[69] || CT.C69;
    },
    /*action_code_info.ActionCodeInfoOperation.unknown*/get unknown() {
      return C[70] || CT.C70;
    },
    /*action_code_info.ActionCodeInfoOperation.passwordReset*/get passwordReset() {
      return C[71] || CT.C71;
    },
    /*action_code_info.ActionCodeInfoOperation.verifyEmail*/get verifyEmail() {
      return C[72] || CT.C72;
    },
    /*action_code_info.ActionCodeInfoOperation.recoverEmail*/get recoverEmail() {
      return C[73] || CT.C73;
    },
    /*action_code_info.ActionCodeInfoOperation.emailSignIn*/get emailSignIn() {
      return C[74] || CT.C74;
    },
    /*action_code_info.ActionCodeInfoOperation.verifyAndChangeEmail*/get verifyAndChangeEmail() {
      return C[75] || CT.C75;
    },
    /*action_code_info.ActionCodeInfoOperation.revertSecondFactorAddition*/get revertSecondFactorAddition() {
      return C[76] || CT.C76;
    }
  }, false);
  action_code_info.ActionCodeInfo = class ActionCodeInfo extends core.Object {
    static ['_#new#tearOff'](opts) {
      let operation = opts && 'operation' in opts ? opts.operation : null;
      let data = opts && 'data' in opts ? opts.data : null;
      return new action_code_info.ActionCodeInfo.new({operation: operation, data: data});
    }
    get operation() {
      switch (this[S$._operation]) {
        case 0:
          {
            return action_code_info.ActionCodeInfoOperation.unknown;
          }
        case 1:
          {
            return action_code_info.ActionCodeInfoOperation.passwordReset;
          }
        case 2:
          {
            return action_code_info.ActionCodeInfoOperation.verifyEmail;
          }
        case 3:
          {
            return action_code_info.ActionCodeInfoOperation.recoverEmail;
          }
        case 4:
          {
            return action_code_info.ActionCodeInfoOperation.emailSignIn;
          }
        case 5:
          {
            return action_code_info.ActionCodeInfoOperation.verifyAndChangeEmail;
          }
        case 6:
          {
            return action_code_info.ActionCodeInfoOperation.revertSecondFactorAddition;
          }
        default:
          {
            dart.throw(new core.FallThroughError.new());
          }
      }
    }
    get data() {
      return new (T$.IdentityMapOfString$dynamic()).from(["email", this[S$._data$1][S$.$_get]("email"), "previousEmail", this[S$._data$1][S$.$_get]("previousEmail")]);
    }
  };
  (action_code_info.ActionCodeInfo.new = function(opts) {
    let operation = opts && 'operation' in opts ? opts.operation : null;
    let data = opts && 'data' in opts ? opts.data : null;
    this[S$._operation] = operation;
    this[S$._data$1] = data;
    ;
  }).prototype = action_code_info.ActionCodeInfo.prototype;
  dart.addTypeTests(action_code_info.ActionCodeInfo);
  dart.addTypeCaches(action_code_info.ActionCodeInfo);
  dart.setGetterSignature(action_code_info.ActionCodeInfo, () => ({
    __proto__: dart.getGetters(action_code_info.ActionCodeInfo.__proto__),
    operation: action_code_info.ActionCodeInfoOperation,
    data: core.Map$(core.String, dart.dynamic)
  }));
  dart.setLibraryUri(action_code_info.ActionCodeInfo, I[104]);
  dart.setFieldSignature(action_code_info.ActionCodeInfo, () => ({
    __proto__: dart.getFields(action_code_info.ActionCodeInfo.__proto__),
    [S$._operation]: dart.fieldType(core.int),
    [S$._data$1]: dart.fieldType(core.Map$(core.String, dart.dynamic))
  }));
  action_code_settings.ActionCodeSettings = class ActionCodeSettings extends core.Object {
    get androidPackageName() {
      return this[S$.androidPackageName];
    }
    set androidPackageName(value) {
      super.androidPackageName = value;
    }
    get androidMinimumVersion() {
      return this[S$.androidMinimumVersion];
    }
    set androidMinimumVersion(value) {
      super.androidMinimumVersion = value;
    }
    get androidInstallApp() {
      return this[S$.androidInstallApp];
    }
    set androidInstallApp(value) {
      super.androidInstallApp = value;
    }
    get iOSBundleId() {
      return this[S$.iOSBundleId];
    }
    set iOSBundleId(value) {
      super.iOSBundleId = value;
    }
    get dynamicLinkDomain() {
      return this[S$.dynamicLinkDomain];
    }
    set dynamicLinkDomain(value) {
      super.dynamicLinkDomain = value;
    }
    get handleCodeInApp() {
      return this[S$.handleCodeInApp];
    }
    set handleCodeInApp(value) {
      super.handleCodeInApp = value;
    }
    get url() {
      return this[S$.url];
    }
    set url(value) {
      super.url = value;
    }
    static ['_#new#tearOff'](opts) {
      let androidPackageName = opts && 'androidPackageName' in opts ? opts.androidPackageName : null;
      let androidMinimumVersion = opts && 'androidMinimumVersion' in opts ? opts.androidMinimumVersion : null;
      let androidInstallApp = opts && 'androidInstallApp' in opts ? opts.androidInstallApp : null;
      let dynamicLinkDomain = opts && 'dynamicLinkDomain' in opts ? opts.dynamicLinkDomain : null;
      let handleCodeInApp = opts && 'handleCodeInApp' in opts ? opts.handleCodeInApp : null;
      let iOSBundleId = opts && 'iOSBundleId' in opts ? opts.iOSBundleId : null;
      let url = opts && 'url' in opts ? opts.url : null;
      return new action_code_settings.ActionCodeSettings.new({androidPackageName: androidPackageName, androidMinimumVersion: androidMinimumVersion, androidInstallApp: androidInstallApp, dynamicLinkDomain: dynamicLinkDomain, handleCodeInApp: handleCodeInApp, iOSBundleId: iOSBundleId, url: url});
    }
    asMap() {
      return (() => {
        let t111 = new (T$.IdentityMapOfString$dynamic()).new();
        t111[S$.$_set]("url", this.url);
        t111[S$.$_set]("dynamicLinkDomain", this.dynamicLinkDomain);
        t111[S$.$_set]("handleCodeInApp", this.handleCodeInApp);
        if (this.iOSBundleId != null) t111[S$.$_set]("iOS", new (T$.IdentityMapOfString$StringN()).from(["bundleId", this.iOSBundleId]));
        if (this.androidPackageName != null) t111[S$.$_set]("android", new (T$.IdentityMapOfString$ObjectN()).from(["packageName", this.androidPackageName, "minimumVersion", this.androidMinimumVersion, "installApp", this.androidInstallApp]));
        return t111;
      })();
    }
    toString() {
      return dart.str(dart.wrapType(action_code_settings.ActionCodeSettings)) + "(" + dart.str(dart.bind(this, 'asMap')) + ")";
    }
  };
  (action_code_settings.ActionCodeSettings.new = function(opts) {
    let androidPackageName = opts && 'androidPackageName' in opts ? opts.androidPackageName : null;
    let androidMinimumVersion = opts && 'androidMinimumVersion' in opts ? opts.androidMinimumVersion : null;
    let androidInstallApp = opts && 'androidInstallApp' in opts ? opts.androidInstallApp : null;
    let dynamicLinkDomain = opts && 'dynamicLinkDomain' in opts ? opts.dynamicLinkDomain : null;
    let handleCodeInApp = opts && 'handleCodeInApp' in opts ? opts.handleCodeInApp : null;
    let iOSBundleId = opts && 'iOSBundleId' in opts ? opts.iOSBundleId : null;
    let url = opts && 'url' in opts ? opts.url : null;
    this[S$.androidPackageName] = androidPackageName;
    this[S$.androidMinimumVersion] = androidMinimumVersion;
    this[S$.androidInstallApp] = androidInstallApp;
    this[S$.dynamicLinkDomain] = dynamicLinkDomain;
    this[S$.handleCodeInApp] = handleCodeInApp;
    this[S$.iOSBundleId] = iOSBundleId;
    this[S$.url] = url;
    ;
  }).prototype = action_code_settings.ActionCodeSettings.prototype;
  dart.addTypeTests(action_code_settings.ActionCodeSettings);
  dart.addTypeCaches(action_code_settings.ActionCodeSettings);
  dart.setMethodSignature(action_code_settings.ActionCodeSettings, () => ({
    __proto__: dart.getMethods(action_code_settings.ActionCodeSettings.__proto__),
    asMap: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(action_code_settings.ActionCodeSettings, I[105]);
  dart.setFieldSignature(action_code_settings.ActionCodeSettings, () => ({
    __proto__: dart.getFields(action_code_settings.ActionCodeSettings.__proto__),
    androidPackageName: dart.finalFieldType(dart.nullable(core.String)),
    androidMinimumVersion: dart.finalFieldType(dart.nullable(core.String)),
    androidInstallApp: dart.finalFieldType(dart.nullable(core.bool)),
    iOSBundleId: dart.finalFieldType(dart.nullable(core.String)),
    dynamicLinkDomain: dart.finalFieldType(dart.nullable(core.String)),
    handleCodeInApp: dart.finalFieldType(dart.nullable(core.bool)),
    url: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(action_code_settings.ActionCodeSettings, ['toString']);
  additional_user_info.AdditionalUserInfo = class AdditionalUserInfo extends core.Object {
    get isNewUser() {
      return this[S$.isNewUser];
    }
    set isNewUser(value) {
      super.isNewUser = value;
    }
    get profile() {
      return this[S$.profile];
    }
    set profile(value) {
      super.profile = value;
    }
    get providerId() {
      return this[S$.providerId];
    }
    set providerId(value) {
      super.providerId = value;
    }
    get username() {
      return this[S$.username];
    }
    set username(value) {
      super.username = value;
    }
    static ['_#new#tearOff'](opts) {
      let isNewUser = opts && 'isNewUser' in opts ? opts.isNewUser : null;
      let profile = opts && 'profile' in opts ? opts.profile : null;
      let providerId = opts && 'providerId' in opts ? opts.providerId : null;
      let username = opts && 'username' in opts ? opts.username : null;
      return new additional_user_info.AdditionalUserInfo.new({isNewUser: isNewUser, profile: profile, providerId: providerId, username: username});
    }
    toString() {
      return dart.str(dart.wrapType(additional_user_info.AdditionalUserInfo)) + "(" + "isNewUser: " + dart.str(this.isNewUser) + ", " + "profile: " + dart.str(this.profile) + ", " + "providerId: " + dart.str(this.providerId) + ", " + "username: " + dart.str(this.username) + ")";
    }
  };
  (additional_user_info.AdditionalUserInfo.new = function(opts) {
    let isNewUser = opts && 'isNewUser' in opts ? opts.isNewUser : null;
    let profile = opts && 'profile' in opts ? opts.profile : null;
    let providerId = opts && 'providerId' in opts ? opts.providerId : null;
    let username = opts && 'username' in opts ? opts.username : null;
    this[S$.isNewUser] = isNewUser;
    this[S$.profile] = profile;
    this[S$.providerId] = providerId;
    this[S$.username] = username;
    ;
  }).prototype = additional_user_info.AdditionalUserInfo.prototype;
  dart.addTypeTests(additional_user_info.AdditionalUserInfo);
  dart.addTypeCaches(additional_user_info.AdditionalUserInfo);
  dart.setLibraryUri(additional_user_info.AdditionalUserInfo, I[106]);
  dart.setFieldSignature(additional_user_info.AdditionalUserInfo, () => ({
    __proto__: dart.getFields(additional_user_info.AdditionalUserInfo.__proto__),
    isNewUser: dart.finalFieldType(core.bool),
    profile: dart.finalFieldType(dart.nullable(core.Map$(core.String, dart.dynamic))),
    providerId: dart.finalFieldType(dart.nullable(core.String)),
    username: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(additional_user_info.AdditionalUserInfo, ['toString']);
  auth_credential.AuthCredential = class AuthCredential extends core.Object {
    get providerId() {
      return this[S$.providerId$1];
    }
    set providerId(value) {
      super.providerId = value;
    }
    get signInMethod() {
      return this[S$.signInMethod];
    }
    set signInMethod(value) {
      super.signInMethod = value;
    }
    get token() {
      return this[S$.token];
    }
    set token(value) {
      super.token = value;
    }
    static ['_#new#tearOff'](opts) {
      let providerId = opts && 'providerId' in opts ? opts.providerId : null;
      let signInMethod = opts && 'signInMethod' in opts ? opts.signInMethod : null;
      let token = opts && 'token' in opts ? opts.token : null;
      return new auth_credential.AuthCredential.new({providerId: providerId, signInMethod: signInMethod, token: token});
    }
    asMap() {
      return new (T$.IdentityMapOfString$dynamic()).from(["providerId", this.providerId, "signInMethod", this.signInMethod, "token", this.token]);
    }
    toString() {
      return "AuthCredential(providerId: " + this.providerId + ", signInMethod: " + this.signInMethod + ", token: " + dart.str(this.token) + ")";
    }
  };
  (auth_credential.AuthCredential.new = function(opts) {
    let providerId = opts && 'providerId' in opts ? opts.providerId : null;
    let signInMethod = opts && 'signInMethod' in opts ? opts.signInMethod : null;
    let token = opts && 'token' in opts ? opts.token : null;
    this[S$.providerId$1] = providerId;
    this[S$.signInMethod] = signInMethod;
    this[S$.token] = token;
    ;
  }).prototype = auth_credential.AuthCredential.prototype;
  dart.addTypeTests(auth_credential.AuthCredential);
  dart.addTypeCaches(auth_credential.AuthCredential);
  dart.setMethodSignature(auth_credential.AuthCredential, () => ({
    __proto__: dart.getMethods(auth_credential.AuthCredential.__proto__),
    asMap: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(auth_credential.AuthCredential, I[107]);
  dart.setFieldSignature(auth_credential.AuthCredential, () => ({
    __proto__: dart.getFields(auth_credential.AuthCredential.__proto__),
    providerId: dart.finalFieldType(core.String),
    signInMethod: dart.finalFieldType(core.String),
    token: dart.finalFieldType(dart.nullable(core.int))
  }));
  dart.defineExtensionMethods(auth_credential.AuthCredential, ['toString']);
  auth_provider.AuthProvider = class AuthProvider extends core.Object {
    get providerId() {
      return this[S$.providerId$2];
    }
    set providerId(value) {
      super.providerId = value;
    }
    toString() {
      return "AuthProvider(providerId: " + this.providerId + ")";
    }
  };
  (auth_provider.AuthProvider.new = function(providerId) {
    this[S$.providerId$2] = providerId;
    ;
  }).prototype = auth_provider.AuthProvider.prototype;
  dart.addTypeTests(auth_provider.AuthProvider);
  dart.addTypeCaches(auth_provider.AuthProvider);
  dart.setLibraryUri(auth_provider.AuthProvider, I[108]);
  dart.setFieldSignature(auth_provider.AuthProvider, () => ({
    __proto__: dart.getFields(auth_provider.AuthProvider.__proto__),
    providerId: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(auth_provider.AuthProvider, ['toString']);
  firebase_auth_exception.FirebaseAuthException = class FirebaseAuthException extends firebase_core_platform_interface.FirebaseException {
    get email() {
      return this[S$.email];
    }
    set email(value) {
      super.email = value;
    }
    get credential() {
      return this[S$.credential$1];
    }
    set credential(value) {
      super.credential = value;
    }
    get phoneNumber() {
      return this[S$.phoneNumber];
    }
    set phoneNumber(value) {
      super.phoneNumber = value;
    }
    get tenantId() {
      return this[S$.tenantId$1];
    }
    set tenantId(value) {
      super.tenantId = value;
    }
    static ['_#new#tearOff'](opts) {
      let message = opts && 'message' in opts ? opts.message : null;
      let code = opts && 'code' in opts ? opts.code : null;
      let email = opts && 'email' in opts ? opts.email : null;
      let credential = opts && 'credential' in opts ? opts.credential : null;
      let phoneNumber = opts && 'phoneNumber' in opts ? opts.phoneNumber : null;
      let tenantId = opts && 'tenantId' in opts ? opts.tenantId : null;
      return new firebase_auth_exception.FirebaseAuthException.new({message: message, code: code, email: email, credential: credential, phoneNumber: phoneNumber, tenantId: tenantId});
    }
  };
  (firebase_auth_exception.FirebaseAuthException.new = function(opts) {
    let message = opts && 'message' in opts ? opts.message : null;
    let code = opts && 'code' in opts ? opts.code : null;
    let email = opts && 'email' in opts ? opts.email : null;
    let credential = opts && 'credential' in opts ? opts.credential : null;
    let phoneNumber = opts && 'phoneNumber' in opts ? opts.phoneNumber : null;
    let tenantId = opts && 'tenantId' in opts ? opts.tenantId : null;
    this[S$.email] = email;
    this[S$.credential$1] = credential;
    this[S$.phoneNumber] = phoneNumber;
    this[S$.tenantId$1] = tenantId;
    firebase_auth_exception.FirebaseAuthException.__proto__.new.call(this, {plugin: "firebase_auth", message: message, code: code});
    ;
  }).prototype = firebase_auth_exception.FirebaseAuthException.prototype;
  dart.addTypeTests(firebase_auth_exception.FirebaseAuthException);
  dart.addTypeCaches(firebase_auth_exception.FirebaseAuthException);
  firebase_auth_exception.FirebaseAuthException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(firebase_auth_exception.FirebaseAuthException, I[109]);
  dart.setFieldSignature(firebase_auth_exception.FirebaseAuthException, () => ({
    __proto__: dart.getFields(firebase_auth_exception.FirebaseAuthException.__proto__),
    email: dart.finalFieldType(dart.nullable(core.String)),
    credential: dart.finalFieldType(dart.nullable(auth_credential.AuthCredential)),
    phoneNumber: dart.finalFieldType(dart.nullable(core.String)),
    tenantId: dart.finalFieldType(dart.nullable(core.String))
  }));
  id_token_result.IdTokenResult = class IdTokenResult extends core.Object {
    static ['_#new#tearOff'](_data) {
      return new id_token_result.IdTokenResult.new(_data);
    }
    get authTime() {
      return this[S$._data$2][S$.$_get]("authTimestamp") == null ? null : new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(this[S$._data$2][S$.$_get]("authTimestamp")));
    }
    get claims() {
      return this[S$._data$2][S$.$_get]("claims") == null ? null : T$.LinkedHashMapOfString$dynamic().from(core.Map.as(this[S$._data$2][S$.$_get]("claims")));
    }
    get expirationTime() {
      return this[S$._data$2][S$.$_get]("expirationTimestamp") == null ? null : new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(this[S$._data$2][S$.$_get]("expirationTimestamp")));
    }
    get issuedAtTime() {
      return this[S$._data$2][S$.$_get]("issuedAtTimestamp") == null ? null : new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(this[S$._data$2][S$.$_get]("issuedAtTimestamp")));
    }
    get signInProvider() {
      return T$.StringN().as(this[S$._data$2][S$.$_get]("signInProvider"));
    }
    get token() {
      return T$.StringN().as(this[S$._data$2][S$.$_get]("token"));
    }
    toString() {
      return dart.str(dart.wrapType(id_token_result.IdTokenResult)) + "(authTime: " + dart.str(this.authTime) + ", claims: " + dart.toString(this.claims) + ", expirationTime: " + dart.str(this.expirationTime) + ", issuedAtTime: " + dart.str(this.issuedAtTime) + ", signInProvider: " + dart.str(this.signInProvider) + ", token: " + dart.str(this.token) + ")";
    }
  };
  (id_token_result.IdTokenResult.new = function(_data) {
    this[S$._data$2] = _data;
    ;
  }).prototype = id_token_result.IdTokenResult.prototype;
  dart.addTypeTests(id_token_result.IdTokenResult);
  dart.addTypeCaches(id_token_result.IdTokenResult);
  dart.setGetterSignature(id_token_result.IdTokenResult, () => ({
    __proto__: dart.getGetters(id_token_result.IdTokenResult.__proto__),
    authTime: dart.nullable(core.DateTime),
    claims: dart.nullable(core.Map$(core.String, dart.dynamic)),
    expirationTime: dart.nullable(core.DateTime),
    issuedAtTime: dart.nullable(core.DateTime),
    signInProvider: dart.nullable(core.String),
    token: dart.nullable(core.String)
  }));
  dart.setLibraryUri(id_token_result.IdTokenResult, I[110]);
  dart.setFieldSignature(id_token_result.IdTokenResult, () => ({
    __proto__: dart.getFields(id_token_result.IdTokenResult.__proto__),
    [S$._data$2]: dart.finalFieldType(core.Map$(core.String, dart.dynamic))
  }));
  dart.defineExtensionMethods(id_token_result.IdTokenResult, ['toString']);
  platform_interface_recaptcha_verifier_factory.RecaptchaVerifierSize = class RecaptchaVerifierSize extends core._Enum {
    [S$._enumToString]() {
      return "RecaptchaVerifierSize." + this[S$._name];
    }
  };
  (platform_interface_recaptcha_verifier_factory.RecaptchaVerifierSize.new = function(index, name) {
    platform_interface_recaptcha_verifier_factory.RecaptchaVerifierSize.__proto__.new.call(this, index, name);
    ;
  }).prototype = platform_interface_recaptcha_verifier_factory.RecaptchaVerifierSize.prototype;
  dart.addTypeTests(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierSize);
  dart.addTypeCaches(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierSize);
  dart.setMethodSignature(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierSize, () => ({
    __proto__: dart.getMethods(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierSize.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierSize, I[45]);
  dart.setStaticFieldSignature(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierSize, () => ['values', 'normal', 'compact']);
  dart.defineLazy(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierSize, {
    /*platform_interface_recaptcha_verifier_factory.RecaptchaVerifierSize.values*/get values() {
      return C[77] || CT.C77;
    },
    /*platform_interface_recaptcha_verifier_factory.RecaptchaVerifierSize.normal*/get normal() {
      return C[30] || CT.C30;
    },
    /*platform_interface_recaptcha_verifier_factory.RecaptchaVerifierSize.compact*/get compact() {
      return C[29] || CT.C29;
    }
  }, false);
  platform_interface_recaptcha_verifier_factory.RecaptchaVerifierTheme = class RecaptchaVerifierTheme extends core._Enum {
    [S$._enumToString]() {
      return "RecaptchaVerifierTheme." + this[S$._name];
    }
  };
  (platform_interface_recaptcha_verifier_factory.RecaptchaVerifierTheme.new = function(index, name) {
    platform_interface_recaptcha_verifier_factory.RecaptchaVerifierTheme.__proto__.new.call(this, index, name);
    ;
  }).prototype = platform_interface_recaptcha_verifier_factory.RecaptchaVerifierTheme.prototype;
  dart.addTypeTests(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierTheme);
  dart.addTypeCaches(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierTheme);
  dart.setMethodSignature(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierTheme, () => ({
    __proto__: dart.getMethods(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierTheme.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierTheme, I[45]);
  dart.setStaticFieldSignature(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierTheme, () => ['values', 'light', 'dark']);
  dart.defineLazy(platform_interface_recaptcha_verifier_factory.RecaptchaVerifierTheme, {
    /*platform_interface_recaptcha_verifier_factory.RecaptchaVerifierTheme.values*/get values() {
      return C[78] || CT.C78;
    },
    /*platform_interface_recaptcha_verifier_factory.RecaptchaVerifierTheme.light*/get light() {
      return C[32] || CT.C32;
    },
    /*platform_interface_recaptcha_verifier_factory.RecaptchaVerifierTheme.dark*/get dark() {
      return C[31] || CT.C31;
    }
  }, false);
  email_auth.EmailAuthProvider = class EmailAuthProvider extends auth_provider.AuthProvider {
    static get EMAIL_LINK_SIGN_IN_METHOD() {
      return "emailLink";
    }
    static get EMAIL_PASSWORD_SIGN_IN_METHOD() {
      return "password";
    }
    static get PROVIDER_ID() {
      return "password";
    }
    static credential(opts) {
      let email = opts && 'email' in opts ? opts.email : null;
      let password = opts && 'password' in opts ? opts.password : null;
      return email_auth.EmailAuthCredential._credential(email, password);
    }
    static credentialWithLink(opts) {
      let email = opts && 'email' in opts ? opts.email : null;
      let emailLink = opts && 'emailLink' in opts ? opts.emailLink : null;
      return email_auth.EmailAuthCredential._credentialWithLink(email, emailLink);
    }
  };
  (email_auth.EmailAuthProvider.new = function() {
    email_auth.EmailAuthProvider.__proto__.new.call(this, "password");
    ;
  }).prototype = email_auth.EmailAuthProvider.prototype;
  dart.addTypeTests(email_auth.EmailAuthProvider);
  dart.addTypeCaches(email_auth.EmailAuthProvider);
  dart.setStaticMethodSignature(email_auth.EmailAuthProvider, () => ['credential', 'credentialWithLink']);
  dart.setStaticGetterSignature(email_auth.EmailAuthProvider, () => ['EMAIL_LINK_SIGN_IN_METHOD', 'EMAIL_PASSWORD_SIGN_IN_METHOD', 'PROVIDER_ID']);
  dart.setLibraryUri(email_auth.EmailAuthProvider, I[111]);
  email_auth.EmailAuthCredential = class EmailAuthCredential extends auth_credential.AuthCredential {
    get email() {
      return this[S$.email$1];
    }
    set email(value) {
      super.email = value;
    }
    get password() {
      return this[S$.password];
    }
    set password(value) {
      super.password = value;
    }
    get emailLink() {
      return this[S$.emailLink];
    }
    set emailLink(value) {
      super.emailLink = value;
    }
    static ['_#_#tearOff'](_signInMethod, opts) {
      let email = opts && 'email' in opts ? opts.email : null;
      let password = opts && 'password' in opts ? opts.password : null;
      let emailLink = opts && 'emailLink' in opts ? opts.emailLink : null;
      return new email_auth.EmailAuthCredential.__(_signInMethod, {email: email, password: password, emailLink: emailLink});
    }
    static _credential(email, password) {
      return new email_auth.EmailAuthCredential.__("password", {email: email, password: password});
    }
    static ['_#_credential#tearOff'](email, password) {
      return email_auth.EmailAuthCredential._credential(email, password);
    }
    static _credentialWithLink(email, emailLink) {
      return new email_auth.EmailAuthCredential.__("emailLink", {email: email, emailLink: emailLink});
    }
    static ['_#_credentialWithLink#tearOff'](email, emailLink) {
      return email_auth.EmailAuthCredential._credentialWithLink(email, emailLink);
    }
    asMap() {
      return new (T$.IdentityMapOfString$StringN()).from(["providerId", this.providerId, "signInMethod", this.signInMethod, "email", this.email, "emailLink", this.emailLink, "secret", this.password]);
    }
  };
  (email_auth.EmailAuthCredential.__ = function(_signInMethod, opts) {
    let email = opts && 'email' in opts ? opts.email : null;
    let password = opts && 'password' in opts ? opts.password : null;
    let emailLink = opts && 'emailLink' in opts ? opts.emailLink : null;
    this[S$.email$1] = email;
    this[S$.password] = password;
    this[S$.emailLink] = emailLink;
    email_auth.EmailAuthCredential.__proto__.new.call(this, {providerId: "password", signInMethod: _signInMethod});
    ;
  }).prototype = email_auth.EmailAuthCredential.prototype;
  dart.addTypeTests(email_auth.EmailAuthCredential);
  dart.addTypeCaches(email_auth.EmailAuthCredential);
  dart.setMethodSignature(email_auth.EmailAuthCredential, () => ({
    __proto__: dart.getMethods(email_auth.EmailAuthCredential.__proto__),
    asMap: dart.fnType(core.Map$(core.String, dart.nullable(core.String)), [])
  }));
  dart.setStaticMethodSignature(email_auth.EmailAuthCredential, () => ['_credential', '_credentialWithLink']);
  dart.setLibraryUri(email_auth.EmailAuthCredential, I[111]);
  dart.setFieldSignature(email_auth.EmailAuthCredential, () => ({
    __proto__: dart.getFields(email_auth.EmailAuthCredential.__proto__),
    email: dart.finalFieldType(core.String),
    password: dart.finalFieldType(dart.nullable(core.String)),
    emailLink: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineLazy(email_auth, {
    /*email_auth._kLinkProviderId*/get _kLinkProviderId() {
      return "emailLink";
    },
    /*email_auth._kProviderId*/get _kProviderId() {
      return "password";
    }
  }, false);
  facebook_auth.FacebookAuthProvider = class FacebookAuthProvider extends auth_provider.AuthProvider {
    static ['_#new#tearOff']() {
      return new facebook_auth.FacebookAuthProvider.new();
    }
    static credential(accessToken) {
      return facebook_auth.FacebookAuthCredential._credential(accessToken);
    }
    static get FACEBOOK_SIGN_IN_METHOD() {
      return "facebook.com";
    }
    static get PROVIDER_ID() {
      return "facebook.com";
    }
    get scopes() {
      return this[S$._scopes];
    }
    get parameters() {
      return this[S$._parameters];
    }
    addScope(scope) {
      this[S$._scopes][S$.$add](scope);
      return this;
    }
    setCustomParameters(customOAuthParameters) {
      this[S$._parameters] = customOAuthParameters;
      return this;
    }
  };
  (facebook_auth.FacebookAuthProvider.new = function() {
    this[S$._scopes] = T$.JSArrayOfString().of([]);
    this[S$._parameters] = new _js_helper.LinkedMap.new();
    facebook_auth.FacebookAuthProvider.__proto__.new.call(this, "facebook.com");
    ;
  }).prototype = facebook_auth.FacebookAuthProvider.prototype;
  dart.addTypeTests(facebook_auth.FacebookAuthProvider);
  dart.addTypeCaches(facebook_auth.FacebookAuthProvider);
  dart.setMethodSignature(facebook_auth.FacebookAuthProvider, () => ({
    __proto__: dart.getMethods(facebook_auth.FacebookAuthProvider.__proto__),
    addScope: dart.fnType(facebook_auth.FacebookAuthProvider, [core.String]),
    setCustomParameters: dart.fnType(facebook_auth.FacebookAuthProvider, [core.Map])
  }));
  dart.setStaticMethodSignature(facebook_auth.FacebookAuthProvider, () => ['credential']);
  dart.setGetterSignature(facebook_auth.FacebookAuthProvider, () => ({
    __proto__: dart.getGetters(facebook_auth.FacebookAuthProvider.__proto__),
    scopes: core.List$(core.String),
    parameters: core.Map
  }));
  dart.setStaticGetterSignature(facebook_auth.FacebookAuthProvider, () => ['FACEBOOK_SIGN_IN_METHOD', 'PROVIDER_ID']);
  dart.setLibraryUri(facebook_auth.FacebookAuthProvider, I[112]);
  dart.setFieldSignature(facebook_auth.FacebookAuthProvider, () => ({
    __proto__: dart.getFields(facebook_auth.FacebookAuthProvider.__proto__),
    [S$._scopes]: dart.fieldType(core.List$(core.String)),
    [S$._parameters]: dart.fieldType(core.Map)
  }));
  oauth.OAuthCredential = class OAuthCredential extends auth_credential.AuthCredential {
    get accessToken() {
      return this[S$.accessToken];
    }
    set accessToken(value) {
      super.accessToken = value;
    }
    get idToken() {
      return this[S$.idToken];
    }
    set idToken(value) {
      super.idToken = value;
    }
    get secret() {
      return this[S$.secret];
    }
    set secret(value) {
      super.secret = value;
    }
    get rawNonce() {
      return this[S$.rawNonce];
    }
    set rawNonce(value) {
      super.rawNonce = value;
    }
    static ['_#new#tearOff'](opts) {
      let providerId = opts && 'providerId' in opts ? opts.providerId : null;
      let signInMethod = opts && 'signInMethod' in opts ? opts.signInMethod : null;
      let accessToken = opts && 'accessToken' in opts ? opts.accessToken : null;
      let idToken = opts && 'idToken' in opts ? opts.idToken : null;
      let secret = opts && 'secret' in opts ? opts.secret : null;
      let rawNonce = opts && 'rawNonce' in opts ? opts.rawNonce : null;
      return new oauth.OAuthCredential.new({providerId: providerId, signInMethod: signInMethod, accessToken: accessToken, idToken: idToken, secret: secret, rawNonce: rawNonce});
    }
    asMap() {
      return new (T$.IdentityMapOfString$StringN()).from(["providerId", this.providerId, "signInMethod", this.signInMethod, "idToken", this.idToken, "accessToken", this.accessToken, "secret", this.secret, "rawNonce", this.rawNonce]);
    }
  };
  (oauth.OAuthCredential.new = function(opts) {
    let providerId = opts && 'providerId' in opts ? opts.providerId : null;
    let signInMethod = opts && 'signInMethod' in opts ? opts.signInMethod : null;
    let accessToken = opts && 'accessToken' in opts ? opts.accessToken : null;
    let idToken = opts && 'idToken' in opts ? opts.idToken : null;
    let secret = opts && 'secret' in opts ? opts.secret : null;
    let rawNonce = opts && 'rawNonce' in opts ? opts.rawNonce : null;
    this[S$.accessToken] = accessToken;
    this[S$.idToken] = idToken;
    this[S$.secret] = secret;
    this[S$.rawNonce] = rawNonce;
    oauth.OAuthCredential.__proto__.new.call(this, {providerId: providerId, signInMethod: signInMethod});
    ;
  }).prototype = oauth.OAuthCredential.prototype;
  dart.addTypeTests(oauth.OAuthCredential);
  dart.addTypeCaches(oauth.OAuthCredential);
  dart.setMethodSignature(oauth.OAuthCredential, () => ({
    __proto__: dart.getMethods(oauth.OAuthCredential.__proto__),
    asMap: dart.fnType(core.Map$(core.String, dart.nullable(core.String)), [])
  }));
  dart.setLibraryUri(oauth.OAuthCredential, I[113]);
  dart.setFieldSignature(oauth.OAuthCredential, () => ({
    __proto__: dart.getFields(oauth.OAuthCredential.__proto__),
    accessToken: dart.finalFieldType(dart.nullable(core.String)),
    idToken: dart.finalFieldType(dart.nullable(core.String)),
    secret: dart.finalFieldType(dart.nullable(core.String)),
    rawNonce: dart.finalFieldType(dart.nullable(core.String))
  }));
  facebook_auth.FacebookAuthCredential = class FacebookAuthCredential extends oauth.OAuthCredential {
    static ['_#_#tearOff'](opts) {
      let accessToken = opts && 'accessToken' in opts ? opts.accessToken : null;
      return new facebook_auth.FacebookAuthCredential.__({accessToken: accessToken});
    }
    static _credential(accessToken) {
      return new facebook_auth.FacebookAuthCredential.__({accessToken: accessToken});
    }
    static ['_#_credential#tearOff'](accessToken) {
      return facebook_auth.FacebookAuthCredential._credential(accessToken);
    }
  };
  (facebook_auth.FacebookAuthCredential.__ = function(opts) {
    let accessToken = opts && 'accessToken' in opts ? opts.accessToken : null;
    facebook_auth.FacebookAuthCredential.__proto__.new.call(this, {providerId: "facebook.com", signInMethod: "facebook.com", accessToken: accessToken});
    ;
  }).prototype = facebook_auth.FacebookAuthCredential.prototype;
  dart.addTypeTests(facebook_auth.FacebookAuthCredential);
  dart.addTypeCaches(facebook_auth.FacebookAuthCredential);
  dart.setStaticMethodSignature(facebook_auth.FacebookAuthCredential, () => ['_credential']);
  dart.setLibraryUri(facebook_auth.FacebookAuthCredential, I[112]);
  dart.defineLazy(facebook_auth, {
    /*facebook_auth._kProviderId*/get _kProviderId() {
      return "facebook.com";
    }
  }, false);
  github_auth.GithubAuthProvider = class GithubAuthProvider extends auth_provider.AuthProvider {
    static ['_#new#tearOff']() {
      return new github_auth.GithubAuthProvider.new();
    }
    static credential(accessToken) {
      return github_auth.GithubAuthCredential._credential(accessToken);
    }
    static get GITHUB_SIGN_IN_METHOD() {
      return "github.com";
    }
    static get PROVIDER_ID() {
      return "github.com";
    }
    get scopes() {
      return this[S$._scopes$1];
    }
    get parameters() {
      return this[S$._parameters$1];
    }
    addScope(scope) {
      this[S$._scopes$1][S$.$add](scope);
      return this;
    }
    setCustomParameters(customOAuthParameters) {
      this[S$._parameters$1] = customOAuthParameters;
      return this;
    }
  };
  (github_auth.GithubAuthProvider.new = function() {
    this[S$._scopes$1] = T$.JSArrayOfString().of([]);
    this[S$._parameters$1] = new _js_helper.LinkedMap.new();
    github_auth.GithubAuthProvider.__proto__.new.call(this, "github.com");
    ;
  }).prototype = github_auth.GithubAuthProvider.prototype;
  dart.addTypeTests(github_auth.GithubAuthProvider);
  dart.addTypeCaches(github_auth.GithubAuthProvider);
  dart.setMethodSignature(github_auth.GithubAuthProvider, () => ({
    __proto__: dart.getMethods(github_auth.GithubAuthProvider.__proto__),
    addScope: dart.fnType(github_auth.GithubAuthProvider, [core.String]),
    setCustomParameters: dart.fnType(github_auth.GithubAuthProvider, [core.Map])
  }));
  dart.setStaticMethodSignature(github_auth.GithubAuthProvider, () => ['credential']);
  dart.setGetterSignature(github_auth.GithubAuthProvider, () => ({
    __proto__: dart.getGetters(github_auth.GithubAuthProvider.__proto__),
    scopes: core.List$(core.String),
    parameters: core.Map
  }));
  dart.setStaticGetterSignature(github_auth.GithubAuthProvider, () => ['GITHUB_SIGN_IN_METHOD', 'PROVIDER_ID']);
  dart.setLibraryUri(github_auth.GithubAuthProvider, I[114]);
  dart.setFieldSignature(github_auth.GithubAuthProvider, () => ({
    __proto__: dart.getFields(github_auth.GithubAuthProvider.__proto__),
    [S$._scopes$1]: dart.fieldType(core.List$(core.String)),
    [S$._parameters$1]: dart.fieldType(core.Map)
  }));
  github_auth.GithubAuthCredential = class GithubAuthCredential extends oauth.OAuthCredential {
    static ['_#_#tearOff'](opts) {
      let accessToken = opts && 'accessToken' in opts ? opts.accessToken : null;
      return new github_auth.GithubAuthCredential.__({accessToken: accessToken});
    }
    static _credential(accessToken) {
      return new github_auth.GithubAuthCredential.__({accessToken: accessToken});
    }
    static ['_#_credential#tearOff'](accessToken) {
      return github_auth.GithubAuthCredential._credential(accessToken);
    }
  };
  (github_auth.GithubAuthCredential.__ = function(opts) {
    let accessToken = opts && 'accessToken' in opts ? opts.accessToken : null;
    github_auth.GithubAuthCredential.__proto__.new.call(this, {providerId: "github.com", signInMethod: "github.com", accessToken: accessToken});
    ;
  }).prototype = github_auth.GithubAuthCredential.prototype;
  dart.addTypeTests(github_auth.GithubAuthCredential);
  dart.addTypeCaches(github_auth.GithubAuthCredential);
  dart.setStaticMethodSignature(github_auth.GithubAuthCredential, () => ['_credential']);
  dart.setLibraryUri(github_auth.GithubAuthCredential, I[114]);
  dart.defineLazy(github_auth, {
    /*github_auth._kProviderId*/get _kProviderId() {
      return "github.com";
    }
  }, false);
  google_auth.GoogleAuthProvider = class GoogleAuthProvider extends auth_provider.AuthProvider {
    static ['_#new#tearOff']() {
      return new google_auth.GoogleAuthProvider.new();
    }
    static credential(opts) {
      let idToken = opts && 'idToken' in opts ? opts.idToken : null;
      let accessToken = opts && 'accessToken' in opts ? opts.accessToken : null;
      if (!(accessToken != null || idToken != null)) dart.assertFailed("At least one of ID token and access token is required", I[115], 43, 12, "accessToken != null || idToken != null");
      return google_auth.GoogleAuthCredential._credential({idToken: idToken, accessToken: accessToken});
    }
    static get GOOGLE_SIGN_IN_METHOD() {
      return "google.com";
    }
    static get PROVIDER_ID() {
      return "google.com";
    }
    get scopes() {
      return this[S$._scopes$2];
    }
    get parameters() {
      return this[S$._parameters$2];
    }
    addScope(scope) {
      this[S$._scopes$2][S$.$add](scope);
      return this;
    }
    setCustomParameters(customOAuthParameters) {
      this[S$._parameters$2] = customOAuthParameters;
      return this;
    }
  };
  (google_auth.GoogleAuthProvider.new = function() {
    this[S$._scopes$2] = T$.JSArrayOfString().of([]);
    this[S$._parameters$2] = new _js_helper.LinkedMap.new();
    google_auth.GoogleAuthProvider.__proto__.new.call(this, "google.com");
    ;
  }).prototype = google_auth.GoogleAuthProvider.prototype;
  dart.addTypeTests(google_auth.GoogleAuthProvider);
  dart.addTypeCaches(google_auth.GoogleAuthProvider);
  dart.setMethodSignature(google_auth.GoogleAuthProvider, () => ({
    __proto__: dart.getMethods(google_auth.GoogleAuthProvider.__proto__),
    addScope: dart.fnType(google_auth.GoogleAuthProvider, [core.String]),
    setCustomParameters: dart.fnType(google_auth.GoogleAuthProvider, [core.Map])
  }));
  dart.setStaticMethodSignature(google_auth.GoogleAuthProvider, () => ['credential']);
  dart.setGetterSignature(google_auth.GoogleAuthProvider, () => ({
    __proto__: dart.getGetters(google_auth.GoogleAuthProvider.__proto__),
    scopes: core.List$(core.String),
    parameters: core.Map
  }));
  dart.setStaticGetterSignature(google_auth.GoogleAuthProvider, () => ['GOOGLE_SIGN_IN_METHOD', 'PROVIDER_ID']);
  dart.setLibraryUri(google_auth.GoogleAuthProvider, I[116]);
  dart.setFieldSignature(google_auth.GoogleAuthProvider, () => ({
    __proto__: dart.getFields(google_auth.GoogleAuthProvider.__proto__),
    [S$._scopes$2]: dart.fieldType(core.List$(core.String)),
    [S$._parameters$2]: dart.fieldType(core.Map)
  }));
  google_auth.GoogleAuthCredential = class GoogleAuthCredential extends oauth.OAuthCredential {
    static ['_#_#tearOff'](opts) {
      let accessToken = opts && 'accessToken' in opts ? opts.accessToken : null;
      let idToken = opts && 'idToken' in opts ? opts.idToken : null;
      return new google_auth.GoogleAuthCredential.__({accessToken: accessToken, idToken: idToken});
    }
    static _credential(opts) {
      let idToken = opts && 'idToken' in opts ? opts.idToken : null;
      let accessToken = opts && 'accessToken' in opts ? opts.accessToken : null;
      return new google_auth.GoogleAuthCredential.__({accessToken: accessToken, idToken: idToken});
    }
    static ['_#_credential#tearOff'](opts) {
      let idToken = opts && 'idToken' in opts ? opts.idToken : null;
      let accessToken = opts && 'accessToken' in opts ? opts.accessToken : null;
      return google_auth.GoogleAuthCredential._credential({idToken: idToken, accessToken: accessToken});
    }
  };
  (google_auth.GoogleAuthCredential.__ = function(opts) {
    let accessToken = opts && 'accessToken' in opts ? opts.accessToken : null;
    let idToken = opts && 'idToken' in opts ? opts.idToken : null;
    google_auth.GoogleAuthCredential.__proto__.new.call(this, {providerId: "google.com", signInMethod: "google.com", accessToken: accessToken, idToken: idToken});
    ;
  }).prototype = google_auth.GoogleAuthCredential.prototype;
  dart.addTypeTests(google_auth.GoogleAuthCredential);
  dart.addTypeCaches(google_auth.GoogleAuthCredential);
  dart.setStaticMethodSignature(google_auth.GoogleAuthCredential, () => ['_credential']);
  dart.setLibraryUri(google_auth.GoogleAuthCredential, I[116]);
  dart.defineLazy(google_auth, {
    /*google_auth._kProviderId*/get _kProviderId() {
      return "google.com";
    }
  }, false);
  oauth.OAuthProvider = class OAuthProvider extends auth_provider.AuthProvider {
    static ['_#new#tearOff'](providerId) {
      return new oauth.OAuthProvider.new(providerId);
    }
    get scopes() {
      return this[S$._scopes$3];
    }
    get parameters() {
      return this[S$._parameters$3];
    }
    addScope(scope) {
      this[S$._scopes$3][S$.$add](scope);
      return this;
    }
    setCustomParameters(customOAuthParameters) {
      this[S$._parameters$3] = customOAuthParameters;
      return this;
    }
    credential(opts) {
      let accessToken = opts && 'accessToken' in opts ? opts.accessToken : null;
      let secret = opts && 'secret' in opts ? opts.secret : null;
      let idToken = opts && 'idToken' in opts ? opts.idToken : null;
      let rawNonce = opts && 'rawNonce' in opts ? opts.rawNonce : null;
      return new oauth.OAuthCredential.new({providerId: this.providerId, signInMethod: "oauth", accessToken: accessToken, secret: secret, idToken: idToken, rawNonce: rawNonce});
    }
  };
  (oauth.OAuthProvider.new = function(providerId) {
    this[S$._scopes$3] = T$.JSArrayOfString().of([]);
    this[S$._parameters$3] = new _js_helper.LinkedMap.new();
    oauth.OAuthProvider.__proto__.new.call(this, providerId);
    ;
  }).prototype = oauth.OAuthProvider.prototype;
  dart.addTypeTests(oauth.OAuthProvider);
  dart.addTypeCaches(oauth.OAuthProvider);
  dart.setMethodSignature(oauth.OAuthProvider, () => ({
    __proto__: dart.getMethods(oauth.OAuthProvider.__proto__),
    addScope: dart.fnType(oauth.OAuthProvider, [core.String]),
    setCustomParameters: dart.fnType(oauth.OAuthProvider, [core.Map]),
    credential: dart.fnType(oauth.OAuthCredential, [], {accessToken: dart.nullable(core.String), idToken: dart.nullable(core.String), rawNonce: dart.nullable(core.String), secret: dart.nullable(core.String)}, {})
  }));
  dart.setGetterSignature(oauth.OAuthProvider, () => ({
    __proto__: dart.getGetters(oauth.OAuthProvider.__proto__),
    scopes: core.List$(core.String),
    parameters: core.Map
  }));
  dart.setLibraryUri(oauth.OAuthProvider, I[113]);
  dart.setFieldSignature(oauth.OAuthProvider, () => ({
    __proto__: dart.getFields(oauth.OAuthProvider.__proto__),
    [S$._scopes$3]: dart.fieldType(core.List$(core.String)),
    [S$._parameters$3]: dart.fieldType(core.Map)
  }));
  phone_auth.PhoneAuthProvider = class PhoneAuthProvider extends auth_provider.AuthProvider {
    static ['_#new#tearOff']() {
      return new phone_auth.PhoneAuthProvider.new();
    }
    static get PHONE_SIGN_IN_METHOD() {
      return "phone";
    }
    static get PROVIDER_ID() {
      return "phone";
    }
    static credential(opts) {
      let verificationId = opts && 'verificationId' in opts ? opts.verificationId : null;
      let smsCode = opts && 'smsCode' in opts ? opts.smsCode : null;
      return phone_auth.PhoneAuthCredential._credential(verificationId, smsCode);
    }
    static credentialFromToken(token, opts) {
      let smsCode = opts && 'smsCode' in opts ? opts.smsCode : null;
      return phone_auth.PhoneAuthCredential._credentialFromToken(token, {smsCode: smsCode});
    }
  };
  (phone_auth.PhoneAuthProvider.new = function() {
    phone_auth.PhoneAuthProvider.__proto__.new.call(this, "phone");
    ;
  }).prototype = phone_auth.PhoneAuthProvider.prototype;
  dart.addTypeTests(phone_auth.PhoneAuthProvider);
  dart.addTypeCaches(phone_auth.PhoneAuthProvider);
  dart.setStaticMethodSignature(phone_auth.PhoneAuthProvider, () => ['credential', 'credentialFromToken']);
  dart.setStaticGetterSignature(phone_auth.PhoneAuthProvider, () => ['PHONE_SIGN_IN_METHOD', 'PROVIDER_ID']);
  dart.setLibraryUri(phone_auth.PhoneAuthProvider, I[117]);
  phone_auth.PhoneAuthCredential = class PhoneAuthCredential extends auth_credential.AuthCredential {
    get verificationId() {
      return this[S$.verificationId$1];
    }
    set verificationId(value) {
      super.verificationId = value;
    }
    get smsCode() {
      return this[S$.smsCode];
    }
    set smsCode(value) {
      super.smsCode = value;
    }
    static ['_#_#tearOff'](opts) {
      let verificationId = opts && 'verificationId' in opts ? opts.verificationId : null;
      let smsCode = opts && 'smsCode' in opts ? opts.smsCode : null;
      let token = opts && 'token' in opts ? opts.token : null;
      return new phone_auth.PhoneAuthCredential.__({verificationId: verificationId, smsCode: smsCode, token: token});
    }
    static _credential(verificationId, smsCode) {
      return new phone_auth.PhoneAuthCredential.__({verificationId: verificationId, smsCode: smsCode});
    }
    static ['_#_credential#tearOff'](verificationId, smsCode) {
      return phone_auth.PhoneAuthCredential._credential(verificationId, smsCode);
    }
    static _credentialFromToken(token, opts) {
      let smsCode = opts && 'smsCode' in opts ? opts.smsCode : null;
      return new phone_auth.PhoneAuthCredential.__({token: token, smsCode: smsCode});
    }
    static ['_#_credentialFromToken#tearOff'](token, opts) {
      let smsCode = opts && 'smsCode' in opts ? opts.smsCode : null;
      return phone_auth.PhoneAuthCredential._credentialFromToken(token, {smsCode: smsCode});
    }
    asMap() {
      return new (T$.IdentityMapOfString$dynamic()).from(["providerId", this.providerId, "signInMethod", this.signInMethod, "verificationId", this.verificationId, "smsCode", this.smsCode, "token", this.token]);
    }
  };
  (phone_auth.PhoneAuthCredential.__ = function(opts) {
    let verificationId = opts && 'verificationId' in opts ? opts.verificationId : null;
    let smsCode = opts && 'smsCode' in opts ? opts.smsCode : null;
    let token = opts && 'token' in opts ? opts.token : null;
    this[S$.verificationId$1] = verificationId;
    this[S$.smsCode] = smsCode;
    phone_auth.PhoneAuthCredential.__proto__.new.call(this, {providerId: "phone", signInMethod: "phone", token: token});
    ;
  }).prototype = phone_auth.PhoneAuthCredential.prototype;
  dart.addTypeTests(phone_auth.PhoneAuthCredential);
  dart.addTypeCaches(phone_auth.PhoneAuthCredential);
  dart.setStaticMethodSignature(phone_auth.PhoneAuthCredential, () => ['_credential', '_credentialFromToken']);
  dart.setLibraryUri(phone_auth.PhoneAuthCredential, I[117]);
  dart.setFieldSignature(phone_auth.PhoneAuthCredential, () => ({
    __proto__: dart.getFields(phone_auth.PhoneAuthCredential.__proto__),
    verificationId: dart.finalFieldType(dart.nullable(core.String)),
    smsCode: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineLazy(phone_auth, {
    /*phone_auth._kProviderId*/get _kProviderId() {
      return "phone";
    }
  }, false);
  saml_auth.SAMLAuthProvider = class SAMLAuthProvider extends auth_provider.AuthProvider {
    static ['_#new#tearOff'](providerId) {
      return new saml_auth.SAMLAuthProvider.new(providerId);
    }
  };
  (saml_auth.SAMLAuthProvider.new = function(providerId) {
    saml_auth.SAMLAuthProvider.__proto__.new.call(this, providerId);
    ;
  }).prototype = saml_auth.SAMLAuthProvider.prototype;
  dart.addTypeTests(saml_auth.SAMLAuthProvider);
  dart.addTypeCaches(saml_auth.SAMLAuthProvider);
  dart.setLibraryUri(saml_auth.SAMLAuthProvider, I[118]);
  twitter_auth.TwitterAuthProvider = class TwitterAuthProvider extends auth_provider.AuthProvider {
    static ['_#new#tearOff']() {
      return new twitter_auth.TwitterAuthProvider.new();
    }
    static credential(opts) {
      let accessToken = opts && 'accessToken' in opts ? opts.accessToken : null;
      let secret = opts && 'secret' in opts ? opts.secret : null;
      return twitter_auth.TwitterAuthCredential._credential({accessToken: accessToken, secret: secret});
    }
    static get TWITTER_SIGN_IN_METHOD() {
      return "twitter.com";
    }
    static get PROVIDER_ID() {
      return "twitter.com";
    }
    get parameters() {
      return this[S$._parameters$4];
    }
    setCustomParameters(customOAuthParameters) {
      this[S$._parameters$4] = customOAuthParameters;
      return this;
    }
  };
  (twitter_auth.TwitterAuthProvider.new = function() {
    this[S$._parameters$4] = new _js_helper.LinkedMap.new();
    twitter_auth.TwitterAuthProvider.__proto__.new.call(this, "twitter.com");
    ;
  }).prototype = twitter_auth.TwitterAuthProvider.prototype;
  dart.addTypeTests(twitter_auth.TwitterAuthProvider);
  dart.addTypeCaches(twitter_auth.TwitterAuthProvider);
  dart.setMethodSignature(twitter_auth.TwitterAuthProvider, () => ({
    __proto__: dart.getMethods(twitter_auth.TwitterAuthProvider.__proto__),
    setCustomParameters: dart.fnType(twitter_auth.TwitterAuthProvider, [core.Map])
  }));
  dart.setStaticMethodSignature(twitter_auth.TwitterAuthProvider, () => ['credential']);
  dart.setGetterSignature(twitter_auth.TwitterAuthProvider, () => ({
    __proto__: dart.getGetters(twitter_auth.TwitterAuthProvider.__proto__),
    parameters: core.Map
  }));
  dart.setStaticGetterSignature(twitter_auth.TwitterAuthProvider, () => ['TWITTER_SIGN_IN_METHOD', 'PROVIDER_ID']);
  dart.setLibraryUri(twitter_auth.TwitterAuthProvider, I[119]);
  dart.setFieldSignature(twitter_auth.TwitterAuthProvider, () => ({
    __proto__: dart.getFields(twitter_auth.TwitterAuthProvider.__proto__),
    [S$._parameters$4]: dart.fieldType(core.Map)
  }));
  twitter_auth.TwitterAuthCredential = class TwitterAuthCredential extends oauth.OAuthCredential {
    static ['_#_#tearOff'](opts) {
      let accessToken = opts && 'accessToken' in opts ? opts.accessToken : null;
      let secret = opts && 'secret' in opts ? opts.secret : null;
      return new twitter_auth.TwitterAuthCredential.__({accessToken: accessToken, secret: secret});
    }
    static _credential(opts) {
      let accessToken = opts && 'accessToken' in opts ? opts.accessToken : null;
      let secret = opts && 'secret' in opts ? opts.secret : null;
      return new twitter_auth.TwitterAuthCredential.__({accessToken: accessToken, secret: secret});
    }
    static ['_#_credential#tearOff'](opts) {
      let accessToken = opts && 'accessToken' in opts ? opts.accessToken : null;
      let secret = opts && 'secret' in opts ? opts.secret : null;
      return twitter_auth.TwitterAuthCredential._credential({accessToken: accessToken, secret: secret});
    }
  };
  (twitter_auth.TwitterAuthCredential.__ = function(opts) {
    let accessToken = opts && 'accessToken' in opts ? opts.accessToken : null;
    let secret = opts && 'secret' in opts ? opts.secret : null;
    twitter_auth.TwitterAuthCredential.__proto__.new.call(this, {providerId: "twitter.com", signInMethod: "twitter.com", accessToken: accessToken, secret: secret});
    ;
  }).prototype = twitter_auth.TwitterAuthCredential.prototype;
  dart.addTypeTests(twitter_auth.TwitterAuthCredential);
  dart.addTypeCaches(twitter_auth.TwitterAuthCredential);
  dart.setStaticMethodSignature(twitter_auth.TwitterAuthCredential, () => ['_credential']);
  dart.setLibraryUri(twitter_auth.TwitterAuthCredential, I[119]);
  dart.defineLazy(twitter_auth, {
    /*twitter_auth._kProviderId*/get _kProviderId() {
      return "twitter.com";
    }
  }, false);
  types.Persistence = class Persistence extends core._Enum {
    [S$._enumToString]() {
      return "Persistence." + this[S$._name];
    }
  };
  (types.Persistence.new = function(index, name) {
    types.Persistence.__proto__.new.call(this, index, name);
    ;
  }).prototype = types.Persistence.prototype;
  dart.addTypeTests(types.Persistence);
  dart.addTypeCaches(types.Persistence);
  dart.setMethodSignature(types.Persistence, () => ({
    __proto__: dart.getMethods(types.Persistence.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(types.Persistence, I[120]);
  dart.setStaticFieldSignature(types.Persistence, () => ['values', 'LOCAL', 'NONE', 'SESSION']);
  dart.defineLazy(types.Persistence, {
    /*types.Persistence.values*/get values() {
      return C[79] || CT.C79;
    },
    /*types.Persistence.LOCAL*/get LOCAL() {
      return C[38] || CT.C38;
    },
    /*types.Persistence.NONE*/get NONE() {
      return C[40] || CT.C40;
    },
    /*types.Persistence.SESSION*/get SESSION() {
      return C[39] || CT.C39;
    }
  }, false);
  user_info.UserInfo = class UserInfo extends core.Object {
    static ['_#new#tearOff'](_data) {
      return new user_info.UserInfo.new(_data);
    }
    get displayName() {
      return this[S$._data$3][S$.$_get]("displayName");
    }
    get email() {
      return this[S$._data$3][S$.$_get]("email");
    }
    get phoneNumber() {
      return this[S$._data$3][S$.$_get]("phoneNumber");
    }
    get photoURL() {
      return this[S$._data$3][S$.$_get]("photoURL");
    }
    get providerId() {
      return dart.nullCheck(this[S$._data$3][S$.$_get]("providerId"));
    }
    get uid() {
      return this[S$._data$3][S$.$_get]("uid");
    }
    toString() {
      return dart.str(dart.wrapType(user_info.UserInfo)) + "(displayName: " + dart.str(this.displayName) + ", email: " + dart.str(this.email) + ", phoneNumber: " + dart.str(this.phoneNumber) + ", photoURL: " + dart.str(this.photoURL) + ", providerId: " + this.providerId + ", uid: " + dart.str(this.uid) + ")";
    }
  };
  (user_info.UserInfo.new = function(_data) {
    this[S$._data$3] = _data;
    ;
  }).prototype = user_info.UserInfo.prototype;
  dart.addTypeTests(user_info.UserInfo);
  dart.addTypeCaches(user_info.UserInfo);
  dart.setGetterSignature(user_info.UserInfo, () => ({
    __proto__: dart.getGetters(user_info.UserInfo.__proto__),
    displayName: dart.nullable(core.String),
    email: dart.nullable(core.String),
    phoneNumber: dart.nullable(core.String),
    photoURL: dart.nullable(core.String),
    providerId: core.String,
    uid: dart.nullable(core.String)
  }));
  dart.setLibraryUri(user_info.UserInfo, I[121]);
  dart.setFieldSignature(user_info.UserInfo, () => ({
    __proto__: dart.getFields(user_info.UserInfo.__proto__),
    [S$._data$3]: dart.finalFieldType(core.Map$(core.String, dart.nullable(core.String)))
  }));
  dart.defineExtensionMethods(user_info.UserInfo, ['toString']);
  user_metadata.UserMetadata = class UserMetadata extends core.Object {
    static ['_#new#tearOff'](_creationTimestamp, _lastSignInTime) {
      return new user_metadata.UserMetadata.new(_creationTimestamp, _lastSignInTime);
    }
    get creationTime() {
      return this[S$._creationTimestamp] == null ? null : new core.DateTime.fromMillisecondsSinceEpoch(dart.nullCheck(this[S$._creationTimestamp]));
    }
    get lastSignInTime() {
      return this[S$._lastSignInTime] == null ? null : new core.DateTime.fromMillisecondsSinceEpoch(dart.nullCheck(this[S$._lastSignInTime]));
    }
    toString() {
      return "UserMetadata(creationTime: " + dart.toString(this.creationTime) + ", lastSignInTime: " + dart.toString(this.lastSignInTime) + ")";
    }
  };
  (user_metadata.UserMetadata.new = function(_creationTimestamp, _lastSignInTime) {
    this[S$._creationTimestamp] = _creationTimestamp;
    this[S$._lastSignInTime] = _lastSignInTime;
    ;
  }).prototype = user_metadata.UserMetadata.prototype;
  dart.addTypeTests(user_metadata.UserMetadata);
  dart.addTypeCaches(user_metadata.UserMetadata);
  dart.setGetterSignature(user_metadata.UserMetadata, () => ({
    __proto__: dart.getGetters(user_metadata.UserMetadata.__proto__),
    creationTime: dart.nullable(core.DateTime),
    lastSignInTime: dart.nullable(core.DateTime)
  }));
  dart.setLibraryUri(user_metadata.UserMetadata, I[122]);
  dart.setFieldSignature(user_metadata.UserMetadata, () => ({
    __proto__: dart.getFields(user_metadata.UserMetadata.__proto__),
    [S$._creationTimestamp]: dart.finalFieldType(dart.nullable(core.int)),
    [S$._lastSignInTime]: dart.finalFieldType(dart.nullable(core.int))
  }));
  dart.defineExtensionMethods(user_metadata.UserMetadata, ['toString']);
  utils$0.dartify = function dartify$0(jsObject) {
    return utils.dartify(jsObject);
  };
  utils$0.jsify = function jsify$0(dartObject) {
    return utils.jsify(dartObject);
  };
  messages$46pigeon.PigeonFirebaseOptions = class PigeonFirebaseOptions extends core.Object {
    get apiKey() {
      return this[S$.apiKey$1];
    }
    set apiKey(value) {
      this[S$.apiKey$1] = value;
    }
    get appId() {
      return this[S$.appId$1];
    }
    set appId(value) {
      this[S$.appId$1] = value;
    }
    get messagingSenderId() {
      return this[S$.messagingSenderId$1];
    }
    set messagingSenderId(value) {
      this[S$.messagingSenderId$1] = value;
    }
    get projectId() {
      return this[S$.projectId$1];
    }
    set projectId(value) {
      this[S$.projectId$1] = value;
    }
    get authDomain() {
      return this[S$.authDomain$1];
    }
    set authDomain(value) {
      this[S$.authDomain$1] = value;
    }
    get databaseURL() {
      return this[S$.databaseURL$1];
    }
    set databaseURL(value) {
      this[S$.databaseURL$1] = value;
    }
    get storageBucket() {
      return this[S$.storageBucket$1];
    }
    set storageBucket(value) {
      this[S$.storageBucket$1] = value;
    }
    get measurementId() {
      return this[S$.measurementId$1];
    }
    set measurementId(value) {
      this[S$.measurementId$1] = value;
    }
    get trackingId() {
      return this[S$.trackingId$1];
    }
    set trackingId(value) {
      this[S$.trackingId$1] = value;
    }
    get deepLinkURLScheme() {
      return this[S$.deepLinkURLScheme$1];
    }
    set deepLinkURLScheme(value) {
      this[S$.deepLinkURLScheme$1] = value;
    }
    get androidClientId() {
      return this[S$.androidClientId$1];
    }
    set androidClientId(value) {
      this[S$.androidClientId$1] = value;
    }
    get iosClientId() {
      return this[S$.iosClientId$1];
    }
    set iosClientId(value) {
      this[S$.iosClientId$1] = value;
    }
    get iosBundleId() {
      return this[S$.iosBundleId$1];
    }
    set iosBundleId(value) {
      this[S$.iosBundleId$1] = value;
    }
    get appGroupId() {
      return this[S$.appGroupId$1];
    }
    set appGroupId(value) {
      this[S$.appGroupId$1] = value;
    }
    static ['_#new#tearOff'](opts) {
      let apiKey = opts && 'apiKey' in opts ? opts.apiKey : null;
      let appId = opts && 'appId' in opts ? opts.appId : null;
      let messagingSenderId = opts && 'messagingSenderId' in opts ? opts.messagingSenderId : null;
      let projectId = opts && 'projectId' in opts ? opts.projectId : null;
      let authDomain = opts && 'authDomain' in opts ? opts.authDomain : null;
      let databaseURL = opts && 'databaseURL' in opts ? opts.databaseURL : null;
      let storageBucket = opts && 'storageBucket' in opts ? opts.storageBucket : null;
      let measurementId = opts && 'measurementId' in opts ? opts.measurementId : null;
      let trackingId = opts && 'trackingId' in opts ? opts.trackingId : null;
      let deepLinkURLScheme = opts && 'deepLinkURLScheme' in opts ? opts.deepLinkURLScheme : null;
      let androidClientId = opts && 'androidClientId' in opts ? opts.androidClientId : null;
      let iosClientId = opts && 'iosClientId' in opts ? opts.iosClientId : null;
      let iosBundleId = opts && 'iosBundleId' in opts ? opts.iosBundleId : null;
      let appGroupId = opts && 'appGroupId' in opts ? opts.appGroupId : null;
      return new messages$46pigeon.PigeonFirebaseOptions.new({apiKey: apiKey, appId: appId, messagingSenderId: messagingSenderId, projectId: projectId, authDomain: authDomain, databaseURL: databaseURL, storageBucket: storageBucket, measurementId: measurementId, trackingId: trackingId, deepLinkURLScheme: deepLinkURLScheme, androidClientId: androidClientId, iosClientId: iosClientId, iosBundleId: iosBundleId, appGroupId: appGroupId});
    }
    encode() {
      let pigeonMap = new (T$.LinkedMapOfObjectN$ObjectN()).new();
      pigeonMap[S$.$_set]("apiKey", this.apiKey);
      pigeonMap[S$.$_set]("appId", this.appId);
      pigeonMap[S$.$_set]("messagingSenderId", this.messagingSenderId);
      pigeonMap[S$.$_set]("projectId", this.projectId);
      pigeonMap[S$.$_set]("authDomain", this.authDomain);
      pigeonMap[S$.$_set]("databaseURL", this.databaseURL);
      pigeonMap[S$.$_set]("storageBucket", this.storageBucket);
      pigeonMap[S$.$_set]("measurementId", this.measurementId);
      pigeonMap[S$.$_set]("trackingId", this.trackingId);
      pigeonMap[S$.$_set]("deepLinkURLScheme", this.deepLinkURLScheme);
      pigeonMap[S$.$_set]("androidClientId", this.androidClientId);
      pigeonMap[S$.$_set]("iosClientId", this.iosClientId);
      pigeonMap[S$.$_set]("iosBundleId", this.iosBundleId);
      pigeonMap[S$.$_set]("appGroupId", this.appGroupId);
      return pigeonMap;
    }
    static decode(message) {
      let pigeonMap = T$.MapOfObjectN$ObjectN().as(message);
      return new messages$46pigeon.PigeonFirebaseOptions.new({apiKey: core.String.as(dart.nullCheck(pigeonMap[S$.$_get]("apiKey"))), appId: core.String.as(dart.nullCheck(pigeonMap[S$.$_get]("appId"))), messagingSenderId: core.String.as(dart.nullCheck(pigeonMap[S$.$_get]("messagingSenderId"))), projectId: core.String.as(dart.nullCheck(pigeonMap[S$.$_get]("projectId"))), authDomain: T$.StringN().as(pigeonMap[S$.$_get]("authDomain")), databaseURL: T$.StringN().as(pigeonMap[S$.$_get]("databaseURL")), storageBucket: T$.StringN().as(pigeonMap[S$.$_get]("storageBucket")), measurementId: T$.StringN().as(pigeonMap[S$.$_get]("measurementId")), trackingId: T$.StringN().as(pigeonMap[S$.$_get]("trackingId")), deepLinkURLScheme: T$.StringN().as(pigeonMap[S$.$_get]("deepLinkURLScheme")), androidClientId: T$.StringN().as(pigeonMap[S$.$_get]("androidClientId")), iosClientId: T$.StringN().as(pigeonMap[S$.$_get]("iosClientId")), iosBundleId: T$.StringN().as(pigeonMap[S$.$_get]("iosBundleId")), appGroupId: T$.StringN().as(pigeonMap[S$.$_get]("appGroupId"))});
    }
  };
  (messages$46pigeon.PigeonFirebaseOptions.new = function(opts) {
    let apiKey = opts && 'apiKey' in opts ? opts.apiKey : null;
    let appId = opts && 'appId' in opts ? opts.appId : null;
    let messagingSenderId = opts && 'messagingSenderId' in opts ? opts.messagingSenderId : null;
    let projectId = opts && 'projectId' in opts ? opts.projectId : null;
    let authDomain = opts && 'authDomain' in opts ? opts.authDomain : null;
    let databaseURL = opts && 'databaseURL' in opts ? opts.databaseURL : null;
    let storageBucket = opts && 'storageBucket' in opts ? opts.storageBucket : null;
    let measurementId = opts && 'measurementId' in opts ? opts.measurementId : null;
    let trackingId = opts && 'trackingId' in opts ? opts.trackingId : null;
    let deepLinkURLScheme = opts && 'deepLinkURLScheme' in opts ? opts.deepLinkURLScheme : null;
    let androidClientId = opts && 'androidClientId' in opts ? opts.androidClientId : null;
    let iosClientId = opts && 'iosClientId' in opts ? opts.iosClientId : null;
    let iosBundleId = opts && 'iosBundleId' in opts ? opts.iosBundleId : null;
    let appGroupId = opts && 'appGroupId' in opts ? opts.appGroupId : null;
    this[S$.apiKey$1] = apiKey;
    this[S$.appId$1] = appId;
    this[S$.messagingSenderId$1] = messagingSenderId;
    this[S$.projectId$1] = projectId;
    this[S$.authDomain$1] = authDomain;
    this[S$.databaseURL$1] = databaseURL;
    this[S$.storageBucket$1] = storageBucket;
    this[S$.measurementId$1] = measurementId;
    this[S$.trackingId$1] = trackingId;
    this[S$.deepLinkURLScheme$1] = deepLinkURLScheme;
    this[S$.androidClientId$1] = androidClientId;
    this[S$.iosClientId$1] = iosClientId;
    this[S$.iosBundleId$1] = iosBundleId;
    this[S$.appGroupId$1] = appGroupId;
    ;
  }).prototype = messages$46pigeon.PigeonFirebaseOptions.prototype;
  dart.addTypeTests(messages$46pigeon.PigeonFirebaseOptions);
  dart.addTypeCaches(messages$46pigeon.PigeonFirebaseOptions);
  dart.setMethodSignature(messages$46pigeon.PigeonFirebaseOptions, () => ({
    __proto__: dart.getMethods(messages$46pigeon.PigeonFirebaseOptions.__proto__),
    encode: dart.fnType(core.Object, [])
  }));
  dart.setStaticMethodSignature(messages$46pigeon.PigeonFirebaseOptions, () => ['decode']);
  dart.setLibraryUri(messages$46pigeon.PigeonFirebaseOptions, I[123]);
  dart.setFieldSignature(messages$46pigeon.PigeonFirebaseOptions, () => ({
    __proto__: dart.getFields(messages$46pigeon.PigeonFirebaseOptions.__proto__),
    apiKey: dart.fieldType(core.String),
    appId: dart.fieldType(core.String),
    messagingSenderId: dart.fieldType(core.String),
    projectId: dart.fieldType(core.String),
    authDomain: dart.fieldType(dart.nullable(core.String)),
    databaseURL: dart.fieldType(dart.nullable(core.String)),
    storageBucket: dart.fieldType(dart.nullable(core.String)),
    measurementId: dart.fieldType(dart.nullable(core.String)),
    trackingId: dart.fieldType(dart.nullable(core.String)),
    deepLinkURLScheme: dart.fieldType(dart.nullable(core.String)),
    androidClientId: dart.fieldType(dart.nullable(core.String)),
    iosClientId: dart.fieldType(dart.nullable(core.String)),
    iosBundleId: dart.fieldType(dart.nullable(core.String)),
    appGroupId: dart.fieldType(dart.nullable(core.String))
  }));
  messages$46pigeon.PigeonInitializeResponse = class PigeonInitializeResponse extends core.Object {
    get name() {
      return this[S$.name$4];
    }
    set name(value) {
      this[S$.name$4] = value;
    }
    get options() {
      return this[S$.options$1];
    }
    set options(value) {
      this[S$.options$1] = value;
    }
    get isAutomaticDataCollectionEnabled() {
      return this[S$.isAutomaticDataCollectionEnabled];
    }
    set isAutomaticDataCollectionEnabled(value) {
      this[S$.isAutomaticDataCollectionEnabled] = value;
    }
    get pluginConstants() {
      return this[S$.pluginConstants];
    }
    set pluginConstants(value) {
      this[S$.pluginConstants] = value;
    }
    static ['_#new#tearOff'](opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let options = opts && 'options' in opts ? opts.options : null;
      let isAutomaticDataCollectionEnabled = opts && 'isAutomaticDataCollectionEnabled' in opts ? opts.isAutomaticDataCollectionEnabled : null;
      let pluginConstants = opts && 'pluginConstants' in opts ? opts.pluginConstants : null;
      return new messages$46pigeon.PigeonInitializeResponse.new({name: name, options: options, isAutomaticDataCollectionEnabled: isAutomaticDataCollectionEnabled, pluginConstants: pluginConstants});
    }
    encode() {
      let pigeonMap = new (T$.LinkedMapOfObjectN$ObjectN()).new();
      pigeonMap[S$.$_set]("name", this.name);
      pigeonMap[S$.$_set]("options", this.options.encode());
      pigeonMap[S$.$_set]("isAutomaticDataCollectionEnabled", this.isAutomaticDataCollectionEnabled);
      pigeonMap[S$.$_set]("pluginConstants", this.pluginConstants);
      return pigeonMap;
    }
    static decode(message) {
      let pigeonMap = T$.MapOfObjectN$ObjectN().as(message);
      return new messages$46pigeon.PigeonInitializeResponse.new({name: core.String.as(dart.nullCheck(pigeonMap[S$.$_get]("name"))), options: messages$46pigeon.PigeonFirebaseOptions.decode(dart.nullCheck(pigeonMap[S$.$_get]("options"))), isAutomaticDataCollectionEnabled: T$.boolN().as(pigeonMap[S$.$_get]("isAutomaticDataCollectionEnabled")), pluginConstants: dart.nullCheck(T$.MapNOfObjectN$ObjectN().as(pigeonMap[S$.$_get]("pluginConstants")))[S$.$cast](T$.StringN(), T$.ObjectN())});
    }
  };
  (messages$46pigeon.PigeonInitializeResponse.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let options = opts && 'options' in opts ? opts.options : null;
    let isAutomaticDataCollectionEnabled = opts && 'isAutomaticDataCollectionEnabled' in opts ? opts.isAutomaticDataCollectionEnabled : null;
    let pluginConstants = opts && 'pluginConstants' in opts ? opts.pluginConstants : null;
    this[S$.name$4] = name;
    this[S$.options$1] = options;
    this[S$.isAutomaticDataCollectionEnabled] = isAutomaticDataCollectionEnabled;
    this[S$.pluginConstants] = pluginConstants;
    ;
  }).prototype = messages$46pigeon.PigeonInitializeResponse.prototype;
  dart.addTypeTests(messages$46pigeon.PigeonInitializeResponse);
  dart.addTypeCaches(messages$46pigeon.PigeonInitializeResponse);
  dart.setMethodSignature(messages$46pigeon.PigeonInitializeResponse, () => ({
    __proto__: dart.getMethods(messages$46pigeon.PigeonInitializeResponse.__proto__),
    encode: dart.fnType(core.Object, [])
  }));
  dart.setStaticMethodSignature(messages$46pigeon.PigeonInitializeResponse, () => ['decode']);
  dart.setLibraryUri(messages$46pigeon.PigeonInitializeResponse, I[123]);
  dart.setFieldSignature(messages$46pigeon.PigeonInitializeResponse, () => ({
    __proto__: dart.getFields(messages$46pigeon.PigeonInitializeResponse.__proto__),
    name: dart.fieldType(core.String),
    options: dart.fieldType(messages$46pigeon.PigeonFirebaseOptions),
    isAutomaticDataCollectionEnabled: dart.fieldType(dart.nullable(core.bool)),
    pluginConstants: dart.fieldType(core.Map$(dart.nullable(core.String), dart.nullable(core.Object)))
  }));
  messages$46pigeon._FirebaseCoreHostApiCodec = class _FirebaseCoreHostApiCodec extends message_codecs.StandardMessageCodec {
    static ['_#new#tearOff']() {
      return new messages$46pigeon._FirebaseCoreHostApiCodec.new();
    }
    writeValue(buffer, value) {
      if (messages$46pigeon.PigeonFirebaseOptions.is(value)) {
        buffer.putUint8(128);
        this.writeValue(buffer, value.encode());
      } else if (messages$46pigeon.PigeonInitializeResponse.is(value)) {
        buffer.putUint8(129);
        this.writeValue(buffer, value.encode());
      } else {
        super.writeValue(buffer, value);
      }
    }
    readValueOfType(type, buffer) {
      switch (type) {
        case 128:
          {
            return messages$46pigeon.PigeonFirebaseOptions.decode(dart.nullCheck(this.readValue(buffer)));
          }
        case 129:
          {
            return messages$46pigeon.PigeonInitializeResponse.decode(dart.nullCheck(this.readValue(buffer)));
          }
        default:
          {
            return super.readValueOfType(type, buffer);
          }
      }
    }
  };
  (messages$46pigeon._FirebaseCoreHostApiCodec.new = function() {
    messages$46pigeon._FirebaseCoreHostApiCodec.__proto__.new.call(this);
    ;
  }).prototype = messages$46pigeon._FirebaseCoreHostApiCodec.prototype;
  dart.addTypeTests(messages$46pigeon._FirebaseCoreHostApiCodec);
  dart.addTypeCaches(messages$46pigeon._FirebaseCoreHostApiCodec);
  dart.setLibraryUri(messages$46pigeon._FirebaseCoreHostApiCodec, I[123]);
  messages$46pigeon.FirebaseCoreHostApi = class FirebaseCoreHostApi extends core.Object {
    static ['_#new#tearOff'](opts) {
      let binaryMessenger = opts && 'binaryMessenger' in opts ? opts.binaryMessenger : null;
      return new messages$46pigeon.FirebaseCoreHostApi.new({binaryMessenger: binaryMessenger});
    }
    initializeApp(arg_appName, arg_initializeAppRequest) {
      return async.async(messages$46pigeon.PigeonInitializeResponse, (function* initializeApp() {
        let channel = new (T$.BasicMessageChannelOfObjectN()).new("dev.flutter.pigeon.FirebaseCoreHostApi.initializeApp", messages$46pigeon.FirebaseCoreHostApi.codec, {binaryMessenger: this[S$._binaryMessenger]});
        let replyMap = T$.MapNOfObjectN$ObjectN().as(yield channel.send(T$.JSArrayOfObjectN().of([arg_appName, arg_initializeAppRequest])));
        if (replyMap == null) {
          dart.throw(new message_codec.PlatformException.new({code: "channel-error", message: "Unable to establish connection on channel."}));
        } else if (replyMap[S$.$_get]("error") != null) {
          let error = dart.nullCheck(T$.MapNOfObjectN$ObjectN().as(replyMap[S$.$_get]("error")));
          dart.throw(new message_codec.PlatformException.new({code: dart.nullCheck(T$.StringN().as(error[S$.$_get]("code"))), message: T$.StringN().as(error[S$.$_get]("message")), details: error[S$.$_get]("details")}));
        } else if (replyMap[S$.$_get]("result") == null) {
          dart.throw(new message_codec.PlatformException.new({code: "null-error", message: "Host platform returned null value for non-null return value."}));
        } else {
          return dart.nullCheck(T$.PigeonInitializeResponseN().as(replyMap[S$.$_get]("result")));
        }
      }).bind(this));
    }
    initializeCore() {
      return async.async(T$.ListOfPigeonInitializeResponseN(), (function* initializeCore() {
        let channel = new (T$.BasicMessageChannelOfObjectN()).new("dev.flutter.pigeon.FirebaseCoreHostApi.initializeCore", messages$46pigeon.FirebaseCoreHostApi.codec, {binaryMessenger: this[S$._binaryMessenger]});
        let replyMap = T$.MapNOfObjectN$ObjectN().as(yield channel.send(null));
        if (replyMap == null) {
          dart.throw(new message_codec.PlatformException.new({code: "channel-error", message: "Unable to establish connection on channel."}));
        } else if (replyMap[S$.$_get]("error") != null) {
          let error = dart.nullCheck(T$.MapNOfObjectN$ObjectN().as(replyMap[S$.$_get]("error")));
          dart.throw(new message_codec.PlatformException.new({code: dart.nullCheck(T$.StringN().as(error[S$.$_get]("code"))), message: T$.StringN().as(error[S$.$_get]("message")), details: error[S$.$_get]("details")}));
        } else if (replyMap[S$.$_get]("result") == null) {
          dart.throw(new message_codec.PlatformException.new({code: "null-error", message: "Host platform returned null value for non-null return value."}));
        } else {
          return dart.nullCheck(T$.ListNOfObjectN().as(replyMap[S$.$_get]("result")))[S$.$cast](T$.PigeonInitializeResponseN());
        }
      }).bind(this));
    }
    optionsFromResource() {
      return async.async(messages$46pigeon.PigeonFirebaseOptions, (function* optionsFromResource() {
        let channel = new (T$.BasicMessageChannelOfObjectN()).new("dev.flutter.pigeon.FirebaseCoreHostApi.optionsFromResource", messages$46pigeon.FirebaseCoreHostApi.codec, {binaryMessenger: this[S$._binaryMessenger]});
        let replyMap = T$.MapNOfObjectN$ObjectN().as(yield channel.send(null));
        if (replyMap == null) {
          dart.throw(new message_codec.PlatformException.new({code: "channel-error", message: "Unable to establish connection on channel."}));
        } else if (replyMap[S$.$_get]("error") != null) {
          let error = dart.nullCheck(T$.MapNOfObjectN$ObjectN().as(replyMap[S$.$_get]("error")));
          dart.throw(new message_codec.PlatformException.new({code: dart.nullCheck(T$.StringN().as(error[S$.$_get]("code"))), message: T$.StringN().as(error[S$.$_get]("message")), details: error[S$.$_get]("details")}));
        } else if (replyMap[S$.$_get]("result") == null) {
          dart.throw(new message_codec.PlatformException.new({code: "null-error", message: "Host platform returned null value for non-null return value."}));
        } else {
          return dart.nullCheck(T$.PigeonFirebaseOptionsN().as(replyMap[S$.$_get]("result")));
        }
      }).bind(this));
    }
  };
  (messages$46pigeon.FirebaseCoreHostApi.new = function(opts) {
    let binaryMessenger = opts && 'binaryMessenger' in opts ? opts.binaryMessenger : null;
    this[S$._binaryMessenger] = binaryMessenger;
    ;
  }).prototype = messages$46pigeon.FirebaseCoreHostApi.prototype;
  dart.addTypeTests(messages$46pigeon.FirebaseCoreHostApi);
  dart.addTypeCaches(messages$46pigeon.FirebaseCoreHostApi);
  dart.setMethodSignature(messages$46pigeon.FirebaseCoreHostApi, () => ({
    __proto__: dart.getMethods(messages$46pigeon.FirebaseCoreHostApi.__proto__),
    initializeApp: dart.fnType(async.Future$(messages$46pigeon.PigeonInitializeResponse), [core.String, messages$46pigeon.PigeonFirebaseOptions]),
    initializeCore: dart.fnType(async.Future$(core.List$(dart.nullable(messages$46pigeon.PigeonInitializeResponse))), []),
    optionsFromResource: dart.fnType(async.Future$(messages$46pigeon.PigeonFirebaseOptions), [])
  }));
  dart.setLibraryUri(messages$46pigeon.FirebaseCoreHostApi, I[123]);
  dart.setFieldSignature(messages$46pigeon.FirebaseCoreHostApi, () => ({
    __proto__: dart.getFields(messages$46pigeon.FirebaseCoreHostApi.__proto__),
    [S$._binaryMessenger]: dart.finalFieldType(dart.nullable(binary_messenger.BinaryMessenger))
  }));
  dart.setStaticFieldSignature(messages$46pigeon.FirebaseCoreHostApi, () => ['codec']);
  dart.defineLazy(messages$46pigeon.FirebaseCoreHostApi, {
    /*messages$46pigeon.FirebaseCoreHostApi.codec*/get codec() {
      return C[80] || CT.C80;
    }
  }, false);
  messages$46pigeon._FirebaseAppHostApiCodec = class _FirebaseAppHostApiCodec extends message_codecs.StandardMessageCodec {
    static ['_#new#tearOff']() {
      return new messages$46pigeon._FirebaseAppHostApiCodec.new();
    }
  };
  (messages$46pigeon._FirebaseAppHostApiCodec.new = function() {
    messages$46pigeon._FirebaseAppHostApiCodec.__proto__.new.call(this);
    ;
  }).prototype = messages$46pigeon._FirebaseAppHostApiCodec.prototype;
  dart.addTypeTests(messages$46pigeon._FirebaseAppHostApiCodec);
  dart.addTypeCaches(messages$46pigeon._FirebaseAppHostApiCodec);
  dart.setLibraryUri(messages$46pigeon._FirebaseAppHostApiCodec, I[123]);
  messages$46pigeon.FirebaseAppHostApi = class FirebaseAppHostApi extends core.Object {
    static ['_#new#tearOff'](opts) {
      let binaryMessenger = opts && 'binaryMessenger' in opts ? opts.binaryMessenger : null;
      return new messages$46pigeon.FirebaseAppHostApi.new({binaryMessenger: binaryMessenger});
    }
    setAutomaticDataCollectionEnabled(arg_appName, arg_enabled) {
      return async.async(dart.void, (function* setAutomaticDataCollectionEnabled() {
        let channel = new (T$.BasicMessageChannelOfObjectN()).new("dev.flutter.pigeon.FirebaseAppHostApi.setAutomaticDataCollectionEnabled", messages$46pigeon.FirebaseAppHostApi.codec, {binaryMessenger: this[S$._binaryMessenger]});
        let replyMap = T$.MapNOfObjectN$ObjectN().as(yield channel.send(T$.JSArrayOfObjectN().of([arg_appName, arg_enabled])));
        if (replyMap == null) {
          dart.throw(new message_codec.PlatformException.new({code: "channel-error", message: "Unable to establish connection on channel."}));
        } else if (replyMap[S$.$_get]("error") != null) {
          let error = dart.nullCheck(T$.MapNOfObjectN$ObjectN().as(replyMap[S$.$_get]("error")));
          dart.throw(new message_codec.PlatformException.new({code: dart.nullCheck(T$.StringN().as(error[S$.$_get]("code"))), message: T$.StringN().as(error[S$.$_get]("message")), details: error[S$.$_get]("details")}));
        } else {
          return;
        }
      }).bind(this));
    }
    setAutomaticResourceManagementEnabled(arg_appName, arg_enabled) {
      return async.async(dart.void, (function* setAutomaticResourceManagementEnabled() {
        let channel = new (T$.BasicMessageChannelOfObjectN()).new("dev.flutter.pigeon.FirebaseAppHostApi.setAutomaticResourceManagementEnabled", messages$46pigeon.FirebaseAppHostApi.codec, {binaryMessenger: this[S$._binaryMessenger]});
        let replyMap = T$.MapNOfObjectN$ObjectN().as(yield channel.send(T$.JSArrayOfObjectN().of([arg_appName, arg_enabled])));
        if (replyMap == null) {
          dart.throw(new message_codec.PlatformException.new({code: "channel-error", message: "Unable to establish connection on channel."}));
        } else if (replyMap[S$.$_get]("error") != null) {
          let error = dart.nullCheck(T$.MapNOfObjectN$ObjectN().as(replyMap[S$.$_get]("error")));
          dart.throw(new message_codec.PlatformException.new({code: dart.nullCheck(T$.StringN().as(error[S$.$_get]("code"))), message: T$.StringN().as(error[S$.$_get]("message")), details: error[S$.$_get]("details")}));
        } else {
          return;
        }
      }).bind(this));
    }
    delete(arg_appName) {
      return async.async(dart.void, (function* $delete() {
        let channel = new (T$.BasicMessageChannelOfObjectN()).new("dev.flutter.pigeon.FirebaseAppHostApi.delete", messages$46pigeon.FirebaseAppHostApi.codec, {binaryMessenger: this[S$._binaryMessenger]});
        let replyMap = T$.MapNOfObjectN$ObjectN().as(yield channel.send(T$.JSArrayOfObjectN().of([arg_appName])));
        if (replyMap == null) {
          dart.throw(new message_codec.PlatformException.new({code: "channel-error", message: "Unable to establish connection on channel."}));
        } else if (replyMap[S$.$_get]("error") != null) {
          let error = dart.nullCheck(T$.MapNOfObjectN$ObjectN().as(replyMap[S$.$_get]("error")));
          dart.throw(new message_codec.PlatformException.new({code: dart.nullCheck(T$.StringN().as(error[S$.$_get]("code"))), message: T$.StringN().as(error[S$.$_get]("message")), details: error[S$.$_get]("details")}));
        } else {
          return;
        }
      }).bind(this));
    }
  };
  (messages$46pigeon.FirebaseAppHostApi.new = function(opts) {
    let binaryMessenger = opts && 'binaryMessenger' in opts ? opts.binaryMessenger : null;
    this[S$._binaryMessenger] = binaryMessenger;
    ;
  }).prototype = messages$46pigeon.FirebaseAppHostApi.prototype;
  dart.addTypeTests(messages$46pigeon.FirebaseAppHostApi);
  dart.addTypeCaches(messages$46pigeon.FirebaseAppHostApi);
  dart.setMethodSignature(messages$46pigeon.FirebaseAppHostApi, () => ({
    __proto__: dart.getMethods(messages$46pigeon.FirebaseAppHostApi.__proto__),
    setAutomaticDataCollectionEnabled: dart.fnType(async.Future$(dart.void), [core.String, core.bool]),
    setAutomaticResourceManagementEnabled: dart.fnType(async.Future$(dart.void), [core.String, core.bool]),
    delete: dart.fnType(async.Future$(dart.void), [core.String])
  }));
  dart.setLibraryUri(messages$46pigeon.FirebaseAppHostApi, I[123]);
  dart.setFieldSignature(messages$46pigeon.FirebaseAppHostApi, () => ({
    __proto__: dart.getFields(messages$46pigeon.FirebaseAppHostApi.__proto__),
    [S$._binaryMessenger]: dart.finalFieldType(dart.nullable(binary_messenger.BinaryMessenger))
  }));
  dart.setStaticFieldSignature(messages$46pigeon.FirebaseAppHostApi, () => ['codec']);
  dart.defineLazy(messages$46pigeon.FirebaseAppHostApi, {
    /*messages$46pigeon.FirebaseAppHostApi.codec*/get codec() {
      return C[81] || CT.C81;
    }
  }, false);
  plugin_platform_interface.MockPlatformInterfaceMixin = class MockPlatformInterfaceMixin extends core.Object {};
  (plugin_platform_interface.MockPlatformInterfaceMixin.new = function() {
    ;
  }).prototype = plugin_platform_interface.MockPlatformInterfaceMixin.prototype;
  dart.addTypeTests(plugin_platform_interface.MockPlatformInterfaceMixin);
  dart.addTypeCaches(plugin_platform_interface.MockPlatformInterfaceMixin);
  plugin_platform_interface.MockPlatformInterfaceMixin[dart.implements] = () => [plugin_platform_interface.PlatformInterface];
  dart.setLibraryUri(plugin_platform_interface.MockPlatformInterfaceMixin, I[6]);
  mocks.MockFirebaseApp = class MockFirebaseApp extends core.Object {
    initializeApp(appName, initializeAppRequest) {
      return async.async(messages$46pigeon.PigeonInitializeResponse, function* initializeApp() {
        return new messages$46pigeon.PigeonInitializeResponse.new({name: appName, options: new messages$46pigeon.PigeonFirebaseOptions.new({apiKey: "123", projectId: "123", appId: "123", messagingSenderId: "123"}), pluginConstants: new (T$.IdentityMapOfStringN$ObjectN()).new()});
      });
    }
    initializeCore() {
      return async.async(T$.ListOfPigeonInitializeResponseN(), function* initializeCore() {
        return T$.JSArrayOfPigeonInitializeResponseN().of([new messages$46pigeon.PigeonInitializeResponse.new({name: "[DEFAULT]", options: new messages$46pigeon.PigeonFirebaseOptions.new({apiKey: "123", projectId: "123", appId: "123", messagingSenderId: "123"}), pluginConstants: new (T$.IdentityMapOfStringN$ObjectN()).new()})]);
      });
    }
    optionsFromResource() {
      return async.async(messages$46pigeon.PigeonFirebaseOptions, function* optionsFromResource() {
        return new messages$46pigeon.PigeonFirebaseOptions.new({apiKey: "123", projectId: "123", appId: "123", messagingSenderId: "123"});
      });
    }
    static ['_#new#tearOff']() {
      return new mocks.MockFirebaseApp.new();
    }
  };
  (mocks.MockFirebaseApp.new = function() {
    ;
  }).prototype = mocks.MockFirebaseApp.prototype;
  dart.addTypeTests(mocks.MockFirebaseApp);
  dart.addTypeCaches(mocks.MockFirebaseApp);
  mocks.MockFirebaseApp[dart.implements] = () => [test_api.TestFirebaseCoreHostApi];
  dart.setMethodSignature(mocks.MockFirebaseApp, () => ({
    __proto__: dart.getMethods(mocks.MockFirebaseApp.__proto__),
    initializeApp: dart.fnType(async.Future$(messages$46pigeon.PigeonInitializeResponse), [core.String, messages$46pigeon.PigeonFirebaseOptions]),
    initializeCore: dart.fnType(async.Future$(core.List$(dart.nullable(messages$46pigeon.PigeonInitializeResponse))), []),
    optionsFromResource: dart.fnType(async.Future$(messages$46pigeon.PigeonFirebaseOptions), [])
  }));
  dart.setLibraryUri(mocks.MockFirebaseApp, I[124]);
  mocks.setupFirebaseCoreMocks = function setupFirebaseCoreMocks() {
    test_api.TestFirebaseCoreHostApi.setup(new mocks.MockFirebaseApp.new());
  };
  test_api._TestFirebaseCoreHostApiCodec = class _TestFirebaseCoreHostApiCodec extends message_codecs.StandardMessageCodec {
    static ['_#new#tearOff']() {
      return new test_api._TestFirebaseCoreHostApiCodec.new();
    }
    writeValue(buffer, value) {
      if (messages$46pigeon.PigeonFirebaseOptions.is(value)) {
        buffer.putUint8(128);
        this.writeValue(buffer, value.encode());
      } else if (messages$46pigeon.PigeonInitializeResponse.is(value)) {
        buffer.putUint8(129);
        this.writeValue(buffer, value.encode());
      } else {
        super.writeValue(buffer, value);
      }
    }
    readValueOfType(type, buffer) {
      switch (type) {
        case 128:
          {
            return messages$46pigeon.PigeonFirebaseOptions.decode(dart.nullCheck(this.readValue(buffer)));
          }
        case 129:
          {
            return messages$46pigeon.PigeonInitializeResponse.decode(dart.nullCheck(this.readValue(buffer)));
          }
        default:
          {
            return super.readValueOfType(type, buffer);
          }
      }
    }
  };
  (test_api._TestFirebaseCoreHostApiCodec.new = function() {
    test_api._TestFirebaseCoreHostApiCodec.__proto__.new.call(this);
    ;
  }).prototype = test_api._TestFirebaseCoreHostApiCodec.prototype;
  dart.addTypeTests(test_api._TestFirebaseCoreHostApiCodec);
  dart.addTypeCaches(test_api._TestFirebaseCoreHostApiCodec);
  dart.setLibraryUri(test_api._TestFirebaseCoreHostApiCodec, I[125]);
  test_api.TestFirebaseCoreHostApi = class TestFirebaseCoreHostApi extends core.Object {
    static setup(api, opts) {
      let binaryMessenger = opts && 'binaryMessenger' in opts ? opts.binaryMessenger : null;
      {
        let channel = new (T$.BasicMessageChannelOfObjectN()).new("dev.flutter.pigeon.FirebaseCoreHostApi.initializeApp", test_api.TestFirebaseCoreHostApi.codec, {binaryMessenger: binaryMessenger});
        if (api == null) {
          deprecated['TestBasicMessageChannelExtension|setMockMessageHandler'](T$.ObjectN(), channel, null);
        } else {
          deprecated['TestBasicMessageChannelExtension|setMockMessageHandler'](T$.ObjectN(), channel, dart.fn(message => async.async(T$.MapOfObjectN$ObjectN(), function*() {
            if (!(message != null)) dart.assertFailed("Argument for dev.flutter.pigeon.FirebaseCoreHostApi.initializeApp was null.", I[126], 68, 13, "message != null");
            let args = dart.nullCheck(T$.ListNOfObjectN().as(message));
            let arg_appName = T$.StringN().as(args[S$.$_get](0));
            if (!(arg_appName != null)) dart.assertFailed("Argument for dev.flutter.pigeon.FirebaseCoreHostApi.initializeApp was null, expected non-null String.", I[126], 74, 13, "arg_appName != null");
            let arg_initializeAppRequest = T$.PigeonFirebaseOptionsN().as(args[S$.$_get](1));
            if (!(arg_initializeAppRequest != null)) dart.assertFailed("Argument for dev.flutter.pigeon.FirebaseCoreHostApi.initializeApp was null, expected non-null PigeonFirebaseOptions.", I[126], 80, 13, "arg_initializeAppRequest != null");
            let output = (yield api.initializeApp(dart.nullCheck(arg_appName), dart.nullCheck(arg_initializeAppRequest)));
            return new (T$.LinkedMapOfObjectN$ObjectN()).from(["result", output]);
          }), T$.ObjectNToFutureOfMapOfObjectN$ObjectN()));
        }
      }
      {
        let channel = new (T$.BasicMessageChannelOfObjectN()).new("dev.flutter.pigeon.FirebaseCoreHostApi.initializeCore", test_api.TestFirebaseCoreHostApi.codec, {binaryMessenger: binaryMessenger});
        if (api == null) {
          deprecated['TestBasicMessageChannelExtension|setMockMessageHandler'](T$.ObjectN(), channel, null);
        } else {
          deprecated['TestBasicMessageChannelExtension|setMockMessageHandler'](T$.ObjectN(), channel, dart.fn(message => async.async(T$.MapOfObjectN$ObjectN(), function*() {
            let output = (yield api.initializeCore());
            return new (T$.LinkedMapOfObjectN$ObjectN()).from(["result", output]);
          }), T$.ObjectNToFutureOfMapOfObjectN$ObjectN()));
        }
      }
      {
        let channel = new (T$.BasicMessageChannelOfObjectN()).new("dev.flutter.pigeon.FirebaseCoreHostApi.optionsFromResource", test_api.TestFirebaseCoreHostApi.codec, {binaryMessenger: binaryMessenger});
        if (api == null) {
          deprecated['TestBasicMessageChannelExtension|setMockMessageHandler'](T$.ObjectN(), channel, null);
        } else {
          deprecated['TestBasicMessageChannelExtension|setMockMessageHandler'](T$.ObjectN(), channel, dart.fn(message => async.async(T$.MapOfObjectN$ObjectN(), function*() {
            let output = (yield api.optionsFromResource());
            return new (T$.LinkedMapOfObjectN$ObjectN()).from(["result", output]);
          }), T$.ObjectNToFutureOfMapOfObjectN$ObjectN()));
        }
      }
    }
  };
  (test_api.TestFirebaseCoreHostApi.new = function() {
    ;
  }).prototype = test_api.TestFirebaseCoreHostApi.prototype;
  dart.addTypeTests(test_api.TestFirebaseCoreHostApi);
  dart.addTypeCaches(test_api.TestFirebaseCoreHostApi);
  dart.setStaticMethodSignature(test_api.TestFirebaseCoreHostApi, () => ['setup']);
  dart.setLibraryUri(test_api.TestFirebaseCoreHostApi, I[125]);
  dart.setStaticFieldSignature(test_api.TestFirebaseCoreHostApi, () => ['codec']);
  dart.defineLazy(test_api.TestFirebaseCoreHostApi, {
    /*test_api.TestFirebaseCoreHostApi.codec*/get codec() {
      return C[82] || CT.C82;
    }
  }, false);
  test_api._TestFirebaseAppHostApiCodec = class _TestFirebaseAppHostApiCodec extends message_codecs.StandardMessageCodec {
    static ['_#new#tearOff']() {
      return new test_api._TestFirebaseAppHostApiCodec.new();
    }
  };
  (test_api._TestFirebaseAppHostApiCodec.new = function() {
    test_api._TestFirebaseAppHostApiCodec.__proto__.new.call(this);
    ;
  }).prototype = test_api._TestFirebaseAppHostApiCodec.prototype;
  dart.addTypeTests(test_api._TestFirebaseAppHostApiCodec);
  dart.addTypeCaches(test_api._TestFirebaseAppHostApiCodec);
  dart.setLibraryUri(test_api._TestFirebaseAppHostApiCodec, I[125]);
  test_api.TestFirebaseAppHostApi = class TestFirebaseAppHostApi extends core.Object {
    static setup(api, opts) {
      let binaryMessenger = opts && 'binaryMessenger' in opts ? opts.binaryMessenger : null;
      {
        let channel = new (T$.BasicMessageChannelOfObjectN()).new("dev.flutter.pigeon.FirebaseAppHostApi.setAutomaticDataCollectionEnabled", test_api.TestFirebaseAppHostApi.codec, {binaryMessenger: binaryMessenger});
        if (api == null) {
          deprecated['TestBasicMessageChannelExtension|setMockMessageHandler'](T$.ObjectN(), channel, null);
        } else {
          deprecated['TestBasicMessageChannelExtension|setMockMessageHandler'](T$.ObjectN(), channel, dart.fn(message => async.async(T$.MapOfObjectN$ObjectN(), function*() {
            if (!(message != null)) dart.assertFailed("Argument for dev.flutter.pigeon.FirebaseAppHostApi.setAutomaticDataCollectionEnabled was null.", I[126], 153, 13, "message != null");
            let args = dart.nullCheck(T$.ListNOfObjectN().as(message));
            let arg_appName = T$.StringN().as(args[S$.$_get](0));
            if (!(arg_appName != null)) dart.assertFailed("Argument for dev.flutter.pigeon.FirebaseAppHostApi.setAutomaticDataCollectionEnabled was null, expected non-null String.", I[126], 159, 13, "arg_appName != null");
            let arg_enabled = T$.boolN().as(args[S$.$_get](1));
            if (!(arg_enabled != null)) dart.assertFailed("Argument for dev.flutter.pigeon.FirebaseAppHostApi.setAutomaticDataCollectionEnabled was null, expected non-null bool.", I[126], 164, 13, "arg_enabled != null");
            yield api.setAutomaticDataCollectionEnabled(dart.nullCheck(arg_appName), dart.nullCheck(arg_enabled));
            return new (T$.LinkedMapOfObjectN$ObjectN()).new();
          }), T$.ObjectNToFutureOfMapOfObjectN$ObjectN()));
        }
      }
      {
        let channel = new (T$.BasicMessageChannelOfObjectN()).new("dev.flutter.pigeon.FirebaseAppHostApi.setAutomaticResourceManagementEnabled", test_api.TestFirebaseAppHostApi.codec, {binaryMessenger: binaryMessenger});
        if (api == null) {
          deprecated['TestBasicMessageChannelExtension|setMockMessageHandler'](T$.ObjectN(), channel, null);
        } else {
          deprecated['TestBasicMessageChannelExtension|setMockMessageHandler'](T$.ObjectN(), channel, dart.fn(message => async.async(T$.MapOfObjectN$ObjectN(), function*() {
            if (!(message != null)) dart.assertFailed("Argument for dev.flutter.pigeon.FirebaseAppHostApi.setAutomaticResourceManagementEnabled was null.", I[126], 186, 13, "message != null");
            let args = dart.nullCheck(T$.ListNOfObjectN().as(message));
            let arg_appName = T$.StringN().as(args[S$.$_get](0));
            if (!(arg_appName != null)) dart.assertFailed("Argument for dev.flutter.pigeon.FirebaseAppHostApi.setAutomaticResourceManagementEnabled was null, expected non-null String.", I[126], 192, 13, "arg_appName != null");
            let arg_enabled = T$.boolN().as(args[S$.$_get](1));
            if (!(arg_enabled != null)) dart.assertFailed("Argument for dev.flutter.pigeon.FirebaseAppHostApi.setAutomaticResourceManagementEnabled was null, expected non-null bool.", I[126], 197, 13, "arg_enabled != null");
            yield api.setAutomaticResourceManagementEnabled(dart.nullCheck(arg_appName), dart.nullCheck(arg_enabled));
            return new (T$.LinkedMapOfObjectN$ObjectN()).new();
          }), T$.ObjectNToFutureOfMapOfObjectN$ObjectN()));
        }
      }
      {
        let channel = new (T$.BasicMessageChannelOfObjectN()).new("dev.flutter.pigeon.FirebaseAppHostApi.delete", test_api.TestFirebaseAppHostApi.codec, {binaryMessenger: binaryMessenger});
        if (api == null) {
          deprecated['TestBasicMessageChannelExtension|setMockMessageHandler'](T$.ObjectN(), channel, null);
        } else {
          deprecated['TestBasicMessageChannelExtension|setMockMessageHandler'](T$.ObjectN(), channel, dart.fn(message => async.async(T$.MapOfObjectN$ObjectN(), function*() {
            if (!(message != null)) dart.assertFailed("Argument for dev.flutter.pigeon.FirebaseAppHostApi.delete was null.", I[126], 219, 13, "message != null");
            let args = dart.nullCheck(T$.ListNOfObjectN().as(message));
            let arg_appName = T$.StringN().as(args[S$.$_get](0));
            if (!(arg_appName != null)) dart.assertFailed("Argument for dev.flutter.pigeon.FirebaseAppHostApi.delete was null, expected non-null String.", I[126], 225, 13, "arg_appName != null");
            yield api.delete(dart.nullCheck(arg_appName));
            return new (T$.LinkedMapOfObjectN$ObjectN()).new();
          }), T$.ObjectNToFutureOfMapOfObjectN$ObjectN()));
        }
      }
    }
  };
  (test_api.TestFirebaseAppHostApi.new = function() {
    ;
  }).prototype = test_api.TestFirebaseAppHostApi.prototype;
  dart.addTypeTests(test_api.TestFirebaseAppHostApi);
  dart.addTypeCaches(test_api.TestFirebaseAppHostApi);
  dart.setStaticMethodSignature(test_api.TestFirebaseAppHostApi, () => ['setup']);
  dart.setLibraryUri(test_api.TestFirebaseAppHostApi, I[125]);
  dart.setStaticFieldSignature(test_api.TestFirebaseAppHostApi, () => ['codec']);
  dart.defineLazy(test_api.TestFirebaseAppHostApi, {
    /*test_api.TestFirebaseAppHostApi.codec*/get codec() {
      return C[83] || CT.C83;
    }
  }, false);
  app$.App = class App extends js$.JsObjectWrapper$(dart.packageJSType("firebase_core.FirebaseApp", false)) {
    static ['_#_fromJsObject#tearOff'](jsObject) {
      return new app$.App._fromJsObject(jsObject);
    }
    get name() {
      return this.jsObject.name;
    }
    get options() {
      return this.jsObject.options;
    }
    static getInstance(jsObject) {
      let t121, t120, t119, t118;
      t118 = app$.App._expando;
      t119 = jsObject;
      t120 = t118._get(t119);
      return t120 == null ? (t121 = new app$.App._fromJsObject(jsObject), t118._set(t119, t121), t121) : t120;
    }
    delete() {
      return utils.handleThenable(dart.void, dart.global.firebase_core.deleteApp(this.jsObject));
    }
  };
  (app$.App._fromJsObject = function(jsObject) {
    app$.App.__proto__.fromJsObject.call(this, jsObject);
    ;
  }).prototype = app$.App.prototype;
  dart.addTypeTests(app$.App);
  dart.addTypeCaches(app$.App);
  dart.setMethodSignature(app$.App, () => ({
    __proto__: dart.getMethods(app$.App.__proto__),
    delete: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setStaticMethodSignature(app$.App, () => ['getInstance']);
  dart.setGetterSignature(app$.App, () => ({
    __proto__: dart.getGetters(app$.App.__proto__),
    name: core.String,
    options: dart.packageJSType("FirebaseOptions", false)
  }));
  dart.setLibraryUri(app$.App, I[127]);
  dart.setStaticFieldSignature(app$.App, () => ['_expando']);
  dart.defineLazy(app$.App, {
    /*app$.App._expando*/get _expando() {
      return new (T$.ExpandoOfApp()).new();
    }
  }, false);
  storage.TaskState = class TaskState extends core._Enum {
    [S$._enumToString]() {
      return "TaskState." + this[S$._name];
    }
  };
  (storage.TaskState.new = function(index, name) {
    storage.TaskState.__proto__.new.call(this, index, name);
    ;
  }).prototype = storage.TaskState.prototype;
  dart.addTypeTests(storage.TaskState);
  dart.addTypeCaches(storage.TaskState);
  dart.setMethodSignature(storage.TaskState, () => ({
    __proto__: dart.getMethods(storage.TaskState.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(storage.TaskState, I[128]);
  dart.setStaticFieldSignature(storage.TaskState, () => ['values', 'RUNNING', 'PAUSED', 'SUCCESS', 'CANCELED', 'ERROR']);
  dart.defineLazy(storage.TaskState, {
    /*storage.TaskState.values*/get values() {
      return C[84] || CT.C84;
    },
    /*storage.TaskState.RUNNING*/get RUNNING() {
      return C[85] || CT.C85;
    },
    /*storage.TaskState.PAUSED*/get PAUSED() {
      return C[86] || CT.C86;
    },
    /*storage.TaskState.SUCCESS*/get SUCCESS() {
      return C[87] || CT.C87;
    },
    /*storage.TaskState.CANCELED*/get CANCELED() {
      return C[88] || CT.C88;
    },
    /*storage.TaskState.ERROR*/get ERROR() {
      return C[89] || CT.C89;
    }
  }, false);
  storage.Storage = class Storage extends js$.JsObjectWrapper$(dart.packageJSType("firebase_storage.FirebaseStorage", false)) {
    static ['_#_fromJsObject#tearOff'](jsObject) {
      return new storage.Storage._fromJsObject(jsObject);
    }
    get app() {
      return app$.App.getInstance(this.jsObject.app);
    }
    get maxOperationRetryTime() {
      return this.jsObject.maxOperationRetryTime;
    }
    get maxUploadRetryTime() {
      return this.jsObject.maxUploadRetryTime;
    }
    static getInstance(jsObject) {
      let t123, t122, t121, t120;
      t120 = storage.Storage._expando;
      t121 = jsObject;
      t122 = t120._get(t121);
      return t122 == null ? (t123 = new storage.Storage._fromJsObject(jsObject), t120._set(t121, t123), t123) : t122;
    }
    ref(path = null) {
      return storage.StorageReference.getInstance(dart.global.firebase_storage.ref(this.jsObject, path));
    }
    refFromURL(url) {
      return storage.StorageReference.getInstance(dart.global.firebase_storage.ref(this.jsObject, url));
    }
    set maxOperationRetryTime(time) {
      this.jsObject.maxOperationRetryTime = time;
    }
    set maxUploadRetryTime(time) {
      this.jsObject.maxUploadRetryTime = time;
    }
    useStorageEmulator(host, port) {
      return dart.global.firebase_storage.connectStorageEmulator(this.jsObject, host, port);
    }
  };
  (storage.Storage._fromJsObject = function(jsObject) {
    storage.Storage.__proto__.fromJsObject.call(this, jsObject);
    ;
  }).prototype = storage.Storage.prototype;
  dart.addTypeTests(storage.Storage);
  dart.addTypeCaches(storage.Storage);
  dart.setMethodSignature(storage.Storage, () => ({
    __proto__: dart.getMethods(storage.Storage.__proto__),
    ref: dart.fnType(storage.StorageReference, [], [dart.nullable(core.String)]),
    refFromURL: dart.fnType(storage.StorageReference, [core.String]),
    useStorageEmulator: dart.fnType(dart.void, [core.String, core.int])
  }));
  dart.setStaticMethodSignature(storage.Storage, () => ['getInstance']);
  dart.setGetterSignature(storage.Storage, () => ({
    __proto__: dart.getGetters(storage.Storage.__proto__),
    app: app$.App,
    maxOperationRetryTime: core.int,
    maxUploadRetryTime: core.int
  }));
  dart.setSetterSignature(storage.Storage, () => ({
    __proto__: dart.getSetters(storage.Storage.__proto__),
    maxOperationRetryTime: core.int,
    maxUploadRetryTime: core.int
  }));
  dart.setLibraryUri(storage.Storage, I[128]);
  dart.setStaticFieldSignature(storage.Storage, () => ['_expando']);
  dart.defineLazy(storage.Storage, {
    /*storage.Storage._expando*/get _expando() {
      return new (T$.ExpandoOfStorage()).new();
    }
  }, false);
  storage.StorageReference = class StorageReference extends js$.JsObjectWrapper$(dart.packageJSType("firebase_storage.StorageReference", false)) {
    static ['_#_fromJsObject#tearOff'](jsObject) {
      return new storage.StorageReference._fromJsObject(jsObject);
    }
    get bucket() {
      return this.jsObject.bucket;
    }
    get fullPath() {
      return this.jsObject.fullPath;
    }
    get name() {
      return this.jsObject.name;
    }
    get parent() {
      return storage.StorageReference.getInstance(this.jsObject.parent);
    }
    get root() {
      return storage.StorageReference.getInstance(this.jsObject.root);
    }
    get storage() {
      return storage.Storage.getInstance(this.jsObject.storage);
    }
    static getInstance(jsObject) {
      let t123, t122, t121, t120;
      t120 = storage.StorageReference._expando;
      t121 = jsObject;
      t122 = t120._get(t121);
      return t122 == null ? (t123 = new storage.StorageReference._fromJsObject(jsObject), t120._set(t121, t123), t123) : t122;
    }
    child(path) {
      return storage.StorageReference.getInstance(dart.global.firebase_storage.ref(this.jsObject, path));
    }
    delete() {
      return utils.handleThenable(dart.dynamic, dart.global.firebase_storage.deleteObject(this.jsObject));
    }
    getDownloadURL() {
      return async.async(core.Uri, (function* getDownloadURL() {
        let uriString = (yield utils.handleThenable(core.String, dart.global.firebase_storage.getDownloadURL(this.jsObject)));
        return core.Uri.parse(uriString);
      }).bind(this));
    }
    getMetadata() {
      return utils.handleThenable(dart.packageJSType("FullMetadataJsImpl", false), dart.global.firebase_storage.getMetadata(this.jsObject)).then(storage.FullMetadata, C[90] || CT.C90);
    }
    list(options) {
      let t120;
      return utils.handleThenable(dart.packageJSType("ListResultJsImpl", false), dart.global.firebase_storage.list(this.jsObject, (t120 = options, t120 == null ? null : t120.jsObject))).then(storage.ListResult, C[91] || CT.C91);
    }
    listAll() {
      return utils.handleThenable(dart.packageJSType("ListResultJsImpl", false), dart.global.firebase_storage.listAll(this.jsObject)).then(storage.ListResult, C[91] || CT.C91);
    }
    put(blob, metadata = null) {
      let taskImpl = null;
      if (metadata != null) {
        taskImpl = dart.global.firebase_storage.uploadBytesResumable(this.jsObject, blob, metadata.jsObject);
      } else {
        taskImpl = dart.global.firebase_storage.uploadBytesResumable(this.jsObject, blob);
      }
      return storage.UploadTask.getInstance(taskImpl);
    }
    toString() {
      return this.jsObject.toString();
    }
    updateMetadata(metadata) {
      return async.async(storage.FullMetadata, (function* updateMetadata() {
        yield utils.handleThenable(dart.packageJSType("FullMetadataJsImpl", false), dart.global.firebase_storage.updateMetadata(this.jsObject, metadata.jsObject));
        return this.getMetadata();
      }).bind(this));
    }
  };
  (storage.StorageReference._fromJsObject = function(jsObject) {
    storage.StorageReference.__proto__.fromJsObject.call(this, jsObject);
    ;
  }).prototype = storage.StorageReference.prototype;
  dart.addTypeTests(storage.StorageReference);
  dart.addTypeCaches(storage.StorageReference);
  dart.setMethodSignature(storage.StorageReference, () => ({
    __proto__: dart.getMethods(storage.StorageReference.__proto__),
    child: dart.fnType(storage.StorageReference, [core.String]),
    delete: dart.fnType(async.Future, []),
    getDownloadURL: dart.fnType(async.Future$(core.Uri), []),
    getMetadata: dart.fnType(async.Future$(storage.FullMetadata), []),
    list: dart.fnType(async.Future$(storage.ListResult), [dart.nullable(storage.ListOptions)]),
    listAll: dart.fnType(async.Future$(storage.ListResult), []),
    put: dart.fnType(storage.UploadTask, [dart.dynamic], [dart.nullable(storage.UploadMetadata)]),
    updateMetadata: dart.fnType(async.Future$(storage.FullMetadata), [storage.SettableMetadata])
  }));
  dart.setStaticMethodSignature(storage.StorageReference, () => ['getInstance']);
  dart.setGetterSignature(storage.StorageReference, () => ({
    __proto__: dart.getGetters(storage.StorageReference.__proto__),
    bucket: core.String,
    fullPath: core.String,
    name: core.String,
    parent: dart.nullable(storage.StorageReference),
    root: storage.StorageReference,
    storage: storage.Storage
  }));
  dart.setLibraryUri(storage.StorageReference, I[128]);
  dart.setStaticFieldSignature(storage.StorageReference, () => ['_expando']);
  dart.defineExtensionMethods(storage.StorageReference, ['toString']);
  dart.defineLazy(storage.StorageReference, {
    /*storage.StorageReference._expando*/get _expando() {
      return new (T$.ExpandoOfStorageReference()).new();
    }
  }, false);
  const _is__SettableMetadataBase_default = Symbol('_is__SettableMetadataBase_default');
  storage._SettableMetadataBase$ = dart.generic(T => {
    class _SettableMetadataBase extends js$.JsObjectWrapper$(T) {
      get cacheControl() {
        return this.jsObject.cacheControl;
      }
      set cacheControl(s) {
        this.jsObject.cacheControl = s;
      }
      get contentDisposition() {
        return this.jsObject.contentDisposition;
      }
      set contentDisposition(s) {
        this.jsObject.contentDisposition = s;
      }
      get contentEncoding() {
        return this.jsObject.contentEncoding;
      }
      set contentEncoding(s) {
        this.jsObject.contentEncoding = s;
      }
      get contentLanguage() {
        return this.jsObject.contentLanguage;
      }
      set contentLanguage(s) {
        this.jsObject.contentLanguage = s;
      }
      get contentType() {
        return this.jsObject.contentType;
      }
      set contentType(s) {
        this.jsObject.contentType = s;
      }
      get customMetadata() {
        let metadata = T$.MapNOfString$dynamic().as(utils.dartify(this.jsObject.customMetadata));
        if (metadata != null) {
          return T$.LinkedHashMapOfString$String().from(metadata);
        } else {
          return new (T$.IdentityMapOfString$String()).new();
        }
      }
      set customMetadata(m) {
        this.jsObject.customMetadata = utils.jsify(m);
      }
    }
    (_SettableMetadataBase.fromJsObject = function(jsObject) {
      _SettableMetadataBase.__proto__.fromJsObject.call(this, jsObject);
      ;
    }).prototype = _SettableMetadataBase.prototype;
    dart.addTypeTests(_SettableMetadataBase);
    _SettableMetadataBase.prototype[_is__SettableMetadataBase_default] = true;
    dart.addTypeCaches(_SettableMetadataBase);
    dart.setGetterSignature(_SettableMetadataBase, () => ({
      __proto__: dart.getGetters(_SettableMetadataBase.__proto__),
      cacheControl: core.String,
      contentDisposition: core.String,
      contentEncoding: core.String,
      contentLanguage: core.String,
      contentType: core.String,
      customMetadata: core.Map$(core.String, core.String)
    }));
    dart.setSetterSignature(_SettableMetadataBase, () => ({
      __proto__: dart.getSetters(_SettableMetadataBase.__proto__),
      cacheControl: core.String,
      contentDisposition: core.String,
      contentEncoding: core.String,
      contentLanguage: core.String,
      contentType: core.String,
      customMetadata: core.Map$(core.String, core.String)
    }));
    dart.setLibraryUri(_SettableMetadataBase, I[128]);
    return _SettableMetadataBase;
  });
  storage._SettableMetadataBase = storage._SettableMetadataBase$();
  dart.addTypeTests(storage._SettableMetadataBase, _is__SettableMetadataBase_default);
  const _is__UploadMetadataBase_default = Symbol('_is__UploadMetadataBase_default');
  storage._UploadMetadataBase$ = dart.generic(T => {
    class _UploadMetadataBase extends storage._SettableMetadataBase$(T) {
      get md5Hash() {
        return this.jsObject.md5Hash;
      }
      set md5Hash(s) {
        this.jsObject.md5Hash = s;
      }
    }
    (_UploadMetadataBase.fromJsObject = function(jsObject) {
      _UploadMetadataBase.__proto__.fromJsObject.call(this, jsObject);
      ;
    }).prototype = _UploadMetadataBase.prototype;
    dart.addTypeTests(_UploadMetadataBase);
    _UploadMetadataBase.prototype[_is__UploadMetadataBase_default] = true;
    dart.addTypeCaches(_UploadMetadataBase);
    dart.setGetterSignature(_UploadMetadataBase, () => ({
      __proto__: dart.getGetters(_UploadMetadataBase.__proto__),
      md5Hash: core.String
    }));
    dart.setSetterSignature(_UploadMetadataBase, () => ({
      __proto__: dart.getSetters(_UploadMetadataBase.__proto__),
      md5Hash: core.String
    }));
    dart.setLibraryUri(_UploadMetadataBase, I[128]);
    return _UploadMetadataBase;
  });
  storage._UploadMetadataBase = storage._UploadMetadataBase$();
  dart.addTypeTests(storage._UploadMetadataBase, _is__UploadMetadataBase_default);
  storage.FullMetadata = class FullMetadata extends storage._UploadMetadataBase$(dart.packageJSType("FullMetadataJsImpl", false)) {
    static ['_#_fromJsObject#tearOff'](jsObject) {
      return new storage.FullMetadata._fromJsObject(jsObject);
    }
    get bucket() {
      return this.jsObject.bucket;
    }
    get fullPath() {
      return this.jsObject.fullPath;
    }
    get generation() {
      return this.jsObject.generation;
    }
    get metageneration() {
      return this.jsObject.metageneration;
    }
    get name() {
      return this.jsObject.name;
    }
    get size() {
      return this.jsObject.size;
    }
    get timeCreated() {
      return this.jsObject.timeCreated == null ? null : core.DateTime.parse(dart.nullCheck(this.jsObject.timeCreated));
    }
    get updated() {
      return this.jsObject.updated == null ? null : core.DateTime.parse(dart.nullCheck(this.jsObject.updated));
    }
    static getInstance(jsObject) {
      let t123, t122, t121, t120;
      t120 = storage.FullMetadata._expando;
      t121 = jsObject;
      t122 = t120._get(t121);
      return t122 == null ? (t123 = new storage.FullMetadata._fromJsObject(jsObject), t120._set(t121, t123), t123) : t122;
    }
  };
  (storage.FullMetadata._fromJsObject = function(jsObject) {
    storage.FullMetadata.__proto__.fromJsObject.call(this, dart.packageJSType("FullMetadataJsImpl", false).as(jsObject));
    ;
  }).prototype = storage.FullMetadata.prototype;
  dart.addTypeTests(storage.FullMetadata);
  dart.addTypeCaches(storage.FullMetadata);
  dart.setStaticMethodSignature(storage.FullMetadata, () => ['getInstance']);
  dart.setGetterSignature(storage.FullMetadata, () => ({
    __proto__: dart.getGetters(storage.FullMetadata.__proto__),
    bucket: core.String,
    fullPath: dart.nullable(core.String),
    generation: dart.nullable(core.String),
    metageneration: dart.nullable(core.String),
    name: dart.nullable(core.String),
    size: dart.nullable(core.int),
    timeCreated: dart.nullable(core.DateTime),
    updated: dart.nullable(core.DateTime)
  }));
  dart.setLibraryUri(storage.FullMetadata, I[128]);
  dart.setStaticFieldSignature(storage.FullMetadata, () => ['_expando']);
  dart.defineLazy(storage.FullMetadata, {
    /*storage.FullMetadata._expando*/get _expando() {
      return new (T$.ExpandoOfFullMetadata()).new();
    }
  }, false);
  storage.UploadMetadata = class UploadMetadata extends storage._UploadMetadataBase$(dart.packageJSType("UploadMetadataJsImpl", false)) {
    static new(opts) {
      let md5Hash = opts && 'md5Hash' in opts ? opts.md5Hash : null;
      let cacheControl = opts && 'cacheControl' in opts ? opts.cacheControl : null;
      let contentDisposition = opts && 'contentDisposition' in opts ? opts.contentDisposition : null;
      let contentEncoding = opts && 'contentEncoding' in opts ? opts.contentEncoding : null;
      let contentLanguage = opts && 'contentLanguage' in opts ? opts.contentLanguage : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let customMetadata = opts && 'customMetadata' in opts ? opts.customMetadata : null;
      return new storage.UploadMetadata.fromJsObject({md5Hash: md5Hash, cacheControl: cacheControl, contentDisposition: contentDisposition, contentEncoding: contentEncoding, contentLanguage: contentLanguage, contentType: contentType, customMetadata: customMetadata != null ? utils.jsify(customMetadata) : null});
    }
    static ['_#new#tearOff'](opts) {
      let md5Hash = opts && 'md5Hash' in opts ? opts.md5Hash : null;
      let cacheControl = opts && 'cacheControl' in opts ? opts.cacheControl : null;
      let contentDisposition = opts && 'contentDisposition' in opts ? opts.contentDisposition : null;
      let contentEncoding = opts && 'contentEncoding' in opts ? opts.contentEncoding : null;
      let contentLanguage = opts && 'contentLanguage' in opts ? opts.contentLanguage : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let customMetadata = opts && 'customMetadata' in opts ? opts.customMetadata : null;
      return storage.UploadMetadata.new({md5Hash: md5Hash, cacheControl: cacheControl, contentDisposition: contentDisposition, contentEncoding: contentEncoding, contentLanguage: contentLanguage, contentType: contentType, customMetadata: customMetadata});
    }
    static ['_#fromJsObject#tearOff'](jsObject) {
      return new storage.UploadMetadata.fromJsObject(jsObject);
    }
  };
  (storage.UploadMetadata.fromJsObject = function(jsObject) {
    storage.UploadMetadata.__proto__.fromJsObject.call(this, jsObject);
    ;
  }).prototype = storage.UploadMetadata.prototype;
  dart.addTypeTests(storage.UploadMetadata);
  dart.addTypeCaches(storage.UploadMetadata);
  dart.setStaticMethodSignature(storage.UploadMetadata, () => ['new']);
  dart.setLibraryUri(storage.UploadMetadata, I[128]);
  storage.UploadTask = class UploadTask extends js$.JsObjectWrapper$(dart.packageJSType("firebase_storage.UploadTask", false)) {
    static ['_#_fromJsObject#tearOff'](jsObject) {
      return new storage.UploadTask._fromJsObject(jsObject);
    }
    get future() {
      let t120;
      t120 = this[S$._future];
      return t120 == null ? this[S$._future] = utils.handleThenable(dart.packageJSType("UploadTaskSnapshotJsImpl", false), this.jsObject).then(storage.UploadTaskSnapshot, C[92] || CT.C92) : t120;
    }
    get snapshot() {
      return storage.UploadTaskSnapshot.getInstance(this.jsObject.snapshot);
    }
    static getInstance(jsObject) {
      let t123, t122, t121, t120;
      t120 = storage.UploadTask._expando;
      t121 = jsObject;
      t122 = t120._get(t121);
      return t122 == null ? (t123 = new storage.UploadTask._fromJsObject(jsObject), t120._set(t121, t123), t123) : t122;
    }
    cancel() {
      return this.jsObject.cancel();
    }
    get onStateChanged() {
      let changeController = null;
      function changeController$35get() {
        let t121;
        t121 = changeController;
        return t121 == null ? dart.throw(new _internal.LateError.localNI("changeController")) : t121;
      }
      function changeController$35set(changeController$35param) {
        return changeController = changeController$35param;
      }
      let onStateChangedUnsubscribe = null;
      function onStateChangedUnsubscribe$35get() {
        let t124;
        t124 = onStateChangedUnsubscribe;
        return t124 == null ? dart.throw(new _internal.LateError.localNI("onStateChangedUnsubscribe")) : t124;
      }
      function onStateChangedUnsubscribe$35set(onStateChangedUnsubscribe$35param) {
        return onStateChangedUnsubscribe = onStateChangedUnsubscribe$35param;
      }
      let nextWrapper = js.allowInterop(T$.UploadTaskSnapshotJsImplToNull(), dart.fn(data => {
        changeController$35get().add(storage.UploadTaskSnapshot.getInstance(data));
      }, T$.UploadTaskSnapshotJsImplToNull()));
      let errorWrapper = js.allowInterop(T$.dynamicTovoid(), dart.fn(e => changeController$35get().addError(core.Object.as(e)), T$.dynamicTovoid()));
      let onCompletion = js.allowInterop(T$.VoidToNull(), dart.fn(() => {
        changeController$35get().close();
      }, T$.VoidToNull()));
      const startListen = () => {
        onStateChangedUnsubscribe$35set(this.jsObject.on(dart.global.firebase_storage.TaskEvent.STATE_CHANGED, dart.assertInterop(nextWrapper), dart.assertInterop(errorWrapper), dart.assertInterop(onCompletion)));
      };
      dart.fn(startListen, T$.VoidTovoid());
      function stopListen() {
        onStateChangedUnsubscribe$35get()();
        changeController$35get().close();
      }
      dart.fn(stopListen, T$.VoidTovoid());
      changeController$35set(T$.StreamControllerOfUploadTaskSnapshot().broadcast({onListen: startListen, onCancel: stopListen, sync: true}));
      return changeController$35get().stream;
    }
    pause() {
      return this.jsObject.pause();
    }
    resume() {
      return this.jsObject.resume();
    }
  };
  (storage.UploadTask._fromJsObject = function(jsObject) {
    this[S$._future] = null;
    storage.UploadTask.__proto__.fromJsObject.call(this, jsObject);
    ;
  }).prototype = storage.UploadTask.prototype;
  dart.addTypeTests(storage.UploadTask);
  dart.addTypeCaches(storage.UploadTask);
  dart.setMethodSignature(storage.UploadTask, () => ({
    __proto__: dart.getMethods(storage.UploadTask.__proto__),
    cancel: dart.fnType(core.bool, []),
    pause: dart.fnType(core.bool, []),
    resume: dart.fnType(core.bool, [])
  }));
  dart.setStaticMethodSignature(storage.UploadTask, () => ['getInstance']);
  dart.setGetterSignature(storage.UploadTask, () => ({
    __proto__: dart.getGetters(storage.UploadTask.__proto__),
    future: async.Future$(storage.UploadTaskSnapshot),
    snapshot: storage.UploadTaskSnapshot,
    onStateChanged: async.Stream$(storage.UploadTaskSnapshot)
  }));
  dart.setLibraryUri(storage.UploadTask, I[128]);
  dart.setFieldSignature(storage.UploadTask, () => ({
    __proto__: dart.getFields(storage.UploadTask.__proto__),
    [S$._future]: dart.fieldType(dart.nullable(async.Future$(storage.UploadTaskSnapshot)))
  }));
  dart.setStaticFieldSignature(storage.UploadTask, () => ['_expando']);
  dart.defineLazy(storage.UploadTask, {
    /*storage.UploadTask._expando*/get _expando() {
      return new (T$.ExpandoOfUploadTask()).new();
    }
  }, false);
  storage.UploadTaskSnapshot = class UploadTaskSnapshot extends js$.JsObjectWrapper$(dart.packageJSType("UploadTaskSnapshotJsImpl", false)) {
    static ['_#_fromJsObject#tearOff'](jsObject) {
      return new storage.UploadTaskSnapshot._fromJsObject(jsObject);
    }
    get bytesTransferred() {
      return this.jsObject.bytesTransferred;
    }
    get metadata() {
      return storage.FullMetadata.getInstance(this.jsObject.metadata);
    }
    get ref() {
      return storage.StorageReference.getInstance(this.jsObject.ref);
    }
    get state() {
      switch (this.jsObject.state) {
        case "running":
          {
            return storage.TaskState.RUNNING;
          }
        case "paused":
          {
            return storage.TaskState.PAUSED;
          }
        case "success":
          {
            return storage.TaskState.SUCCESS;
          }
        case "canceled":
          {
            return storage.TaskState.CANCELED;
          }
        case "error":
          {
            return storage.TaskState.ERROR;
          }
        default:
          {
            dart.throw(new core.UnsupportedError.new("Unknown state '" + this.jsObject.state + "' please file a bug."));
          }
      }
    }
    get task() {
      return storage.UploadTask.getInstance(this.jsObject.task);
    }
    get totalBytes() {
      return this.jsObject.totalBytes;
    }
    static getInstance(jsObject) {
      let t129, t128, t127, t126;
      t126 = storage.UploadTaskSnapshot._expando;
      t127 = jsObject;
      t128 = t126._get(t127);
      return t128 == null ? (t129 = new storage.UploadTaskSnapshot._fromJsObject(jsObject), t126._set(t127, t129), t129) : t128;
    }
  };
  (storage.UploadTaskSnapshot._fromJsObject = function(jsObject) {
    storage.UploadTaskSnapshot.__proto__.fromJsObject.call(this, jsObject);
    ;
  }).prototype = storage.UploadTaskSnapshot.prototype;
  dart.addTypeTests(storage.UploadTaskSnapshot);
  dart.addTypeCaches(storage.UploadTaskSnapshot);
  dart.setStaticMethodSignature(storage.UploadTaskSnapshot, () => ['getInstance']);
  dart.setGetterSignature(storage.UploadTaskSnapshot, () => ({
    __proto__: dart.getGetters(storage.UploadTaskSnapshot.__proto__),
    bytesTransferred: core.int,
    metadata: storage.FullMetadata,
    ref: storage.StorageReference,
    state: storage.TaskState,
    task: storage.UploadTask,
    totalBytes: core.int
  }));
  dart.setLibraryUri(storage.UploadTaskSnapshot, I[128]);
  dart.setStaticFieldSignature(storage.UploadTaskSnapshot, () => ['_expando']);
  dart.defineLazy(storage.UploadTaskSnapshot, {
    /*storage.UploadTaskSnapshot._expando*/get _expando() {
      return new (T$.ExpandoOfUploadTaskSnapshot()).new();
    }
  }, false);
  storage.SettableMetadata = class SettableMetadata extends storage._SettableMetadataBase$(dart.packageJSType("SettableMetadataJsImpl", false)) {
    static new(opts) {
      let cacheControl = opts && 'cacheControl' in opts ? opts.cacheControl : null;
      let contentDisposition = opts && 'contentDisposition' in opts ? opts.contentDisposition : null;
      let contentEncoding = opts && 'contentEncoding' in opts ? opts.contentEncoding : null;
      let contentLanguage = opts && 'contentLanguage' in opts ? opts.contentLanguage : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let customMetadata = opts && 'customMetadata' in opts ? opts.customMetadata : null;
      return new storage.SettableMetadata.fromJsObject({cacheControl: cacheControl, contentDisposition: contentDisposition, contentEncoding: contentEncoding, contentLanguage: contentLanguage, contentType: contentType, customMetadata: customMetadata != null ? utils.jsify(customMetadata) : null});
    }
    static ['_#new#tearOff'](opts) {
      let cacheControl = opts && 'cacheControl' in opts ? opts.cacheControl : null;
      let contentDisposition = opts && 'contentDisposition' in opts ? opts.contentDisposition : null;
      let contentEncoding = opts && 'contentEncoding' in opts ? opts.contentEncoding : null;
      let contentLanguage = opts && 'contentLanguage' in opts ? opts.contentLanguage : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let customMetadata = opts && 'customMetadata' in opts ? opts.customMetadata : null;
      return storage.SettableMetadata.new({cacheControl: cacheControl, contentDisposition: contentDisposition, contentEncoding: contentEncoding, contentLanguage: contentLanguage, contentType: contentType, customMetadata: customMetadata});
    }
    static ['_#fromJsObject#tearOff'](jsObject) {
      return new storage.SettableMetadata.fromJsObject(jsObject);
    }
  };
  (storage.SettableMetadata.fromJsObject = function(jsObject) {
    storage.SettableMetadata.__proto__.fromJsObject.call(this, jsObject);
    ;
  }).prototype = storage.SettableMetadata.prototype;
  dart.addTypeTests(storage.SettableMetadata);
  dart.addTypeCaches(storage.SettableMetadata);
  dart.setStaticMethodSignature(storage.SettableMetadata, () => ['new']);
  dart.setLibraryUri(storage.SettableMetadata, I[128]);
  storage.ListOptions = class ListOptions extends js$.JsObjectWrapper$(dart.packageJSType("ListOptionsJsImpl", false)) {
    static new(opts) {
      let maxResults = opts && 'maxResults' in opts ? opts.maxResults : null;
      let pageToken = opts && 'pageToken' in opts ? opts.pageToken : null;
      return new storage.ListOptions._fromJsObject({maxResults: maxResults, pageToken: pageToken});
    }
    static ['_#new#tearOff'](opts) {
      let maxResults = opts && 'maxResults' in opts ? opts.maxResults : null;
      let pageToken = opts && 'pageToken' in opts ? opts.pageToken : null;
      return storage.ListOptions.new({maxResults: maxResults, pageToken: pageToken});
    }
    static ['_#_fromJsObject#tearOff'](jsObject) {
      return new storage.ListOptions._fromJsObject(jsObject);
    }
    get maxResults() {
      return this.jsObject.maxResults;
    }
    set maxResults(n) {
      return this.jsObject.maxResults = n;
    }
    get pageToken() {
      return this.jsObject.pageToken;
    }
    set pageToken(t) {
      return this.jsObject.pageToken = t;
    }
  };
  (storage.ListOptions._fromJsObject = function(jsObject) {
    storage.ListOptions.__proto__.fromJsObject.call(this, jsObject);
    ;
  }).prototype = storage.ListOptions.prototype;
  dart.addTypeTests(storage.ListOptions);
  dart.addTypeCaches(storage.ListOptions);
  dart.setStaticMethodSignature(storage.ListOptions, () => ['new']);
  dart.setGetterSignature(storage.ListOptions, () => ({
    __proto__: dart.getGetters(storage.ListOptions.__proto__),
    maxResults: core.int,
    pageToken: core.String
  }));
  dart.setSetterSignature(storage.ListOptions, () => ({
    __proto__: dart.getSetters(storage.ListOptions.__proto__),
    maxResults: core.int,
    pageToken: core.String
  }));
  dart.setLibraryUri(storage.ListOptions, I[128]);
  storage.ListResult = class ListResult extends js$.JsObjectWrapper$(dart.packageJSType("ListResultJsImpl", false)) {
    static ['_#_fromJsObject#tearOff'](jsObject) {
      return new storage.ListResult._fromJsObject(jsObject);
    }
    get items() {
      return this.jsObject.items[S$.$map](storage.StorageReference, dart.fn(data => new storage.StorageReference._fromJsObject(dart.packageJSType("firebase_storage.StorageReference", false).as(data)), T$.dynamicToStorageReference()))[S$.$toList]();
    }
    get nextPageToken() {
      return this.jsObject.nextPageToken;
    }
    get prefixes() {
      return this.jsObject.prefixes[S$.$map](storage.StorageReference, dart.fn(data => new storage.StorageReference._fromJsObject(dart.packageJSType("firebase_storage.StorageReference", false).as(data)), T$.dynamicToStorageReference()))[S$.$toList]();
    }
    static getInstance(jsObject) {
      let t129, t128, t127, t126;
      t126 = storage.ListResult._expando;
      t127 = jsObject;
      t128 = t126._get(t127);
      return t128 == null ? (t129 = new storage.ListResult._fromJsObject(jsObject), t126._set(t127, t129), t129) : t128;
    }
  };
  (storage.ListResult._fromJsObject = function(jsObject) {
    storage.ListResult.__proto__.fromJsObject.call(this, jsObject);
    ;
  }).prototype = storage.ListResult.prototype;
  dart.addTypeTests(storage.ListResult);
  dart.addTypeCaches(storage.ListResult);
  dart.setStaticMethodSignature(storage.ListResult, () => ['getInstance']);
  dart.setGetterSignature(storage.ListResult, () => ({
    __proto__: dart.getGetters(storage.ListResult.__proto__),
    items: core.List$(storage.StorageReference),
    nextPageToken: core.String,
    prefixes: core.List$(storage.StorageReference)
  }));
  dart.setLibraryUri(storage.ListResult, I[128]);
  dart.setStaticFieldSignature(storage.ListResult, () => ['_expando']);
  dart.defineLazy(storage.ListResult, {
    /*storage.ListResult._expando*/get _expando() {
      return new (T$.ExpandoOfListResult()).new();
    }
  }, false);
  storage.getStorageInstance = function getStorageInstance(app = null, bucket = null) {
    let appImpl = app != null ? core$.app(app.name) : core$.app();
    return storage.Storage.getInstance(bucket != null ? dart.global.firebase_storage.getStorage(appImpl.jsObject, bucket) : dart.global.firebase_storage.getStorage(appImpl.jsObject));
  };
  platform_interface_reference.ReferencePlatform = class ReferencePlatform extends plugin_platform_interface.PlatformInterface {
    get storage() {
      return this[S$.storage];
    }
    set storage(value) {
      super.storage = value;
    }
    static verifyExtends(instance) {
      plugin_platform_interface.PlatformInterface.verifyToken(instance, platform_interface_reference.ReferencePlatform._token);
    }
    get bucket() {
      return this.storage.bucket;
    }
    get fullPath() {
      return this[S$._pointer$4].path;
    }
    get name() {
      return this[S$._pointer$4].name;
    }
    get parent() {
      let parentPath = this[S$._pointer$4].parent;
      if (parentPath == null) {
        return null;
      }
      return this.storage.ref(parentPath);
    }
    get root() {
      return this.storage.ref("/");
    }
    child(path) {
      return this.storage.ref(this[S$._pointer$4].child(path));
    }
    delete() {
      dart.throw(new core.UnimplementedError.new("delete() is not implemented"));
    }
    getDownloadURL() {
      dart.throw(new core.UnimplementedError.new("getDownloadURL() is not implemented"));
    }
    getMetadata() {
      dart.throw(new core.UnimplementedError.new("getMetadata() is not implemented"));
    }
    list(options = null) {
      dart.throw(new core.UnimplementedError.new("list() is not implemented"));
    }
    listAll() {
      dart.throw(new core.UnimplementedError.new("listAll() is not implemented"));
    }
    getData(maxSize) {
      return async.async(T$.Uint8ListN(), function* getData() {
        dart.throw(new core.UnimplementedError.new("getData() is not implemented"));
      });
    }
    putData(data, metadata = null) {
      dart.throw(new core.UnimplementedError.new("putData() is not implemented"));
    }
    putBlob(data, metadata = null) {
      dart.throw(new core.UnimplementedError.new("putBlob() is not implemented"));
    }
    putFile(file, metadata = null) {
      dart.throw(new core.UnimplementedError.new("putFile() is not implemented"));
    }
    putString(data, format, metadata = null) {
      dart.throw(new core.UnimplementedError.new("putString() is not implemented"));
    }
    updateMetadata(metadata) {
      dart.throw(new core.UnimplementedError.new("updateMetadata() is not implemented"));
    }
    writeToFile(file) {
      dart.throw(new core.UnimplementedError.new("writeToFile() is not implemented"));
    }
  };
  (platform_interface_reference.ReferencePlatform.new = function(storage, path) {
    this[S$.storage] = storage;
    this[S$._pointer$4] = new pointer$.Pointer.new(path);
    platform_interface_reference.ReferencePlatform.__proto__.new.call(this, {token: platform_interface_reference.ReferencePlatform._token});
    ;
  }).prototype = platform_interface_reference.ReferencePlatform.prototype;
  dart.addTypeTests(platform_interface_reference.ReferencePlatform);
  dart.addTypeCaches(platform_interface_reference.ReferencePlatform);
  dart.setMethodSignature(platform_interface_reference.ReferencePlatform, () => ({
    __proto__: dart.getMethods(platform_interface_reference.ReferencePlatform.__proto__),
    child: dart.fnType(platform_interface_reference.ReferencePlatform, [core.String]),
    delete: dart.fnType(async.Future$(dart.void), []),
    getDownloadURL: dart.fnType(async.Future$(core.String), []),
    getMetadata: dart.fnType(async.Future$(full_metadata.FullMetadata), []),
    list: dart.fnType(async.Future$(platform_interface_list_result.ListResultPlatform), [], [dart.nullable(list_options.ListOptions)]),
    listAll: dart.fnType(async.Future$(platform_interface_list_result.ListResultPlatform), []),
    getData: dart.fnType(async.Future$(dart.nullable(typed_data.Uint8List)), [core.int]),
    putData: dart.fnType(platform_interface_task.TaskPlatform, [typed_data.Uint8List], [dart.nullable(settable_metadata.SettableMetadata)]),
    putBlob: dart.fnType(platform_interface_task.TaskPlatform, [dart.dynamic], [dart.nullable(settable_metadata.SettableMetadata)]),
    putFile: dart.fnType(platform_interface_task.TaskPlatform, [io.File], [dart.nullable(settable_metadata.SettableMetadata)]),
    putString: dart.fnType(platform_interface_task.TaskPlatform, [core.String, put_string_format.PutStringFormat], [dart.nullable(settable_metadata.SettableMetadata)]),
    updateMetadata: dart.fnType(async.Future$(full_metadata.FullMetadata), [settable_metadata.SettableMetadata]),
    writeToFile: dart.fnType(platform_interface_task.TaskPlatform, [io.File])
  }));
  dart.setStaticMethodSignature(platform_interface_reference.ReferencePlatform, () => ['verifyExtends']);
  dart.setGetterSignature(platform_interface_reference.ReferencePlatform, () => ({
    __proto__: dart.getGetters(platform_interface_reference.ReferencePlatform.__proto__),
    bucket: core.String,
    fullPath: core.String,
    name: core.String,
    parent: dart.nullable(platform_interface_reference.ReferencePlatform),
    root: platform_interface_reference.ReferencePlatform
  }));
  dart.setLibraryUri(platform_interface_reference.ReferencePlatform, I[130]);
  dart.setFieldSignature(platform_interface_reference.ReferencePlatform, () => ({
    __proto__: dart.getFields(platform_interface_reference.ReferencePlatform.__proto__),
    [S$._pointer$4]: dart.fieldType(pointer$.Pointer),
    storage: dart.finalFieldType(platform_interface_firebase_storage.FirebaseStoragePlatform)
  }));
  dart.setStaticFieldSignature(platform_interface_reference.ReferencePlatform, () => ['_token']);
  dart.defineLazy(platform_interface_reference.ReferencePlatform, {
    /*platform_interface_reference.ReferencePlatform._token*/get _token() {
      return new core.Object.new();
    }
  }, false);
  reference_web.ReferenceWeb = class ReferenceWeb extends platform_interface_reference.ReferencePlatform {
    static ['_#new#tearOff'](storage, path) {
      return new reference_web.ReferenceWeb.new(storage, path);
    }
    get [S$._ref]() {
      let t126;
      t126 = this[S$.__ReferenceWeb__ref];
      return t126 == null ? dart.throw(new _internal.LateError.fieldNI("_ref")) : t126;
    }
    set [S$._ref](_ref$35param) {
      this[S$.__ReferenceWeb__ref] = _ref$35param;
    }
    delete() {
      return errors.guard(T$.FutureOfvoid(), dart.bind(this[S$._ref], 'delete'));
    }
    getDownloadURL() {
      return errors.guard(T$.FutureOfString(), dart.fn(() => async.async(core.String, (function*() {
        let uri = (yield this[S$._ref].getDownloadURL());
        return uri.toString();
      }).bind(this)), T$.VoidToFutureOfString()));
    }
    getMetadata() {
      return errors.guard(T$.FutureOfFullMetadata(), dart.fn(() => async.async(full_metadata.FullMetadata, (function*() {
        let fullMetadata = (yield this[S$._ref].getMetadata());
        return metadata$.fbFullMetadataToFullMetadata(fullMetadata);
      }).bind(this)), T$.VoidToFutureOfFullMetadata()));
    }
    list(options = null) {
      return async.async(platform_interface_list_result.ListResultPlatform, (function* list$() {
        return errors.guard(T$.FutureOrOfListResultPlatform(), dart.fn(() => async.async(list_result_web.ListResultWeb, (function*() {
          let listResult = (yield this[S$._ref].list(list.listOptionsToFbListOptions(options)));
          return list.fbListResultToListResultWeb(this.storage, listResult);
        }).bind(this)), T$.VoidToFutureOfListResultWeb()));
      }).bind(this));
    }
    listAll() {
      return errors.guard(T$.FutureOfListResultPlatform(), dart.fn(() => async.async(list_result_web.ListResultWeb, (function*() {
        let listResult = (yield this[S$._ref].listAll());
        return list.fbListResultToListResultWeb(this.storage, listResult);
      }).bind(this)), T$.VoidToFutureOfListResultWeb()));
    }
    getData(maxSize, opts) {
      let readBytes = opts && 'readBytes' in opts ? opts.readBytes : C[93] || CT.C93;
      return async.async(T$.Uint8ListN(), (function* getData() {
        if (maxSize > 0) {
          let metadata = (yield this.getMetadata());
          if (dart.nullCheck(metadata.size) > maxSize) {
            return null;
          }
        }
        return errors.guard(T$.FutureOrOfUint8ListN(), dart.fn(() => async.async(typed_data.Uint8List, (function*() {
          let url = (yield this.getDownloadURL());
          return readBytes(core.Uri.parse(url));
        }).bind(this)), T$.VoidToFutureOfUint8List()));
      }).bind(this));
    }
    putData(data, metadata = null) {
      return new task_web.TaskWeb.new(this, this[S$._ref].put(data, metadata$.settableMetadataToFbUploadMetadata(this[S$._cache$1].store(metadata))));
    }
    putBlob(data, metadata = null) {
      if (!html.Blob.is(data)) dart.assertFailed("data must be a dart:html Blob object.", I[129], 159, 12, "data is html.Blob");
      return new task_web.TaskWeb.new(this, this[S$._ref].put(data, metadata$.settableMetadataToFbUploadMetadata(this[S$._cache$1].store(metadata))));
    }
    putString(data, format, metadata = null) {
      let _data = data;
      if (format === put_string_format.PutStringFormat.base64) {
        _data = convert.base64Decode(data);
      }
      return new task_web.TaskWeb.new(this, this[S$._ref].put(_data, metadata$.settableMetadataToFbUploadMetadata(this[S$._cache$1].store(metadata))));
    }
    updateMetadata(metadata) {
      return errors.guard(T$.FutureOfFullMetadata(), dart.fn(() => async.async(full_metadata.FullMetadata, (function*() {
        let fullMetadata = (yield this[S$._ref].updateMetadata(metadata$.settableMetadataToFbSettableMetadata(this[S$._cache$1].store(metadata))));
        return metadata$.fbFullMetadataToFullMetadata(fullMetadata);
      }).bind(this)), T$.VoidToFutureOfFullMetadata()));
    }
  };
  (reference_web.ReferenceWeb.new = function(storage, path) {
    this[S$.__ReferenceWeb__ref] = null;
    this[S$._cache$1] = new metadata_cache.SettableMetadataCache.new();
    this[S$._path$1] = path;
    reference_web.ReferenceWeb.__proto__.new.call(this, storage, path);
    if (this[S$._path$1][S$.$startsWith](reference_web._storageUrlPrefix)) {
      this[S$._ref] = storage.delegate.refFromURL(this[S$._path$1]);
    } else {
      this[S$._ref] = storage.delegate.ref(this[S$._path$1]);
    }
  }).prototype = reference_web.ReferenceWeb.prototype;
  dart.addTypeTests(reference_web.ReferenceWeb);
  dart.addTypeCaches(reference_web.ReferenceWeb);
  dart.setMethodSignature(reference_web.ReferenceWeb, () => ({
    __proto__: dart.getMethods(reference_web.ReferenceWeb.__proto__),
    getData: dart.fnType(async.Future$(dart.nullable(typed_data.Uint8List)), [core.int], {readBytes: dart.fnType(async.Future$(typed_data.Uint8List), [core.Uri])}, {})
  }));
  dart.setGetterSignature(reference_web.ReferenceWeb, () => ({
    __proto__: dart.getGetters(reference_web.ReferenceWeb.__proto__),
    [S$._ref]: storage.StorageReference
  }));
  dart.setSetterSignature(reference_web.ReferenceWeb, () => ({
    __proto__: dart.getSetters(reference_web.ReferenceWeb.__proto__),
    [S$._ref]: storage.StorageReference
  }));
  dart.setLibraryUri(reference_web.ReferenceWeb, I[131]);
  dart.setFieldSignature(reference_web.ReferenceWeb, () => ({
    __proto__: dart.getFields(reference_web.ReferenceWeb.__proto__),
    [S$.__ReferenceWeb__ref]: dart.fieldType(dart.nullable(storage.StorageReference)),
    [S$._cache$1]: dart.finalFieldType(metadata_cache.SettableMetadataCache),
    [S$._path$1]: dart.finalFieldType(core.String)
  }));
  dart.defineLazy(reference_web, {
    /*reference_web._storageUrlPrefix*/get _storageUrlPrefix() {
      return core.RegExp.new("^(?:gs|https?):\\//");
    }
  }, false);
  errors.guard = function guard(R, cb) {
    return internals$.guardWebExceptions(R, cb, {plugin: "firebase_storage", codeParser: dart.fn(code => code[S$.$split]("/")[S$.$last], T$.StringToString()), messageParser: dart.fn((code, message) => {
        let t126;
        t126 = errors._errorCodeToMessage[S$.$_get](code);
        return t126 == null ? message : t126;
      }, T$.StringAndStringToString())});
  };
  dart.defineLazy(errors, {
    /*errors._errorCodeToMessage*/get _errorCodeToMessage() {
      return new (T$.IdentityMapOfString$StringN()).from(["unauthorized", "User is not authorized to perform the desired action.", "object-not-found", "No object exists at the desired reference.", "invalid-argument", null, "canceled", null]);
    },
    set _errorCodeToMessage(value) {}
  }, false);
  digest_sink.DigestSink = class DigestSink extends core.Object {
    get value() {
      return dart.nullCheck(this[S$._value]);
    }
    add(value) {
      digest.Digest.as(value);
      if (this[S$._value] != null) dart.throw(new core.StateError.new("add may only be called once."));
      this[S$._value] = value;
    }
    close() {
      if (this[S$._value] == null) dart.throw(new core.StateError.new("add must be called once."));
    }
    static ['_#new#tearOff']() {
      return new digest_sink.DigestSink.new();
    }
  };
  (digest_sink.DigestSink.new = function() {
    this[S$._value] = null;
    ;
  }).prototype = digest_sink.DigestSink.prototype;
  dart.addTypeTests(digest_sink.DigestSink);
  dart.addTypeCaches(digest_sink.DigestSink);
  digest_sink.DigestSink[dart.implements] = () => [core.Sink$(digest.Digest)];
  dart.setMethodSignature(digest_sink.DigestSink, () => ({
    __proto__: dart.getMethods(digest_sink.DigestSink.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(digest_sink.DigestSink, () => ({
    __proto__: dart.getGetters(digest_sink.DigestSink.__proto__),
    value: digest.Digest
  }));
  dart.setLibraryUri(digest_sink.DigestSink, I[132]);
  dart.setFieldSignature(digest_sink.DigestSink, () => ({
    __proto__: dart.getFields(digest_sink.DigestSink.__proto__),
    [S$._value]: dart.fieldType(dart.nullable(digest.Digest))
  }));
  utils$1.add32 = function add32(x, y) {
    return (x + y & 4294967295) >>> 0;
  };
  utils$1.rotl32 = function rotl32(val, shift) {
    let modShift = shift & 31;
    return (val[S$.$leftShift](modShift) & 4294967295 | ((val & 4294967295) >>> 0)[S$.$rightShift](32 - modShift)) >>> 0;
  };
  dart.defineLazy(utils$1, {
    /*utils$1.mask32*/get mask32() {
      return 4294967295;
    },
    /*utils$1.bitsPerByte*/get bitsPerByte() {
      return 8;
    },
    /*utils$1.bytesPerWord*/get bytesPerWord() {
      return 4;
    }
  }, false);
  sha512_slowsinks._Sha64BitSink = class _Sha64BitSink extends hash_sink.HashSink {
    get digest() {
      return typed_data.Uint32List.view(this[S$._digest$1][S$.$buffer], 0, this.digestBytes);
    }
    [S$._shr](bits, word, offset, ret, offsetR) {
      ret[S$.$_set](0 + offsetR, bits < 32 && bits >= 0 ? word[S$.$_get](0 + offset)[S$.$rightShift](bits) : 0);
      ret[S$.$_set](1 + offsetR, bits > 32 ? word[S$.$_get](0 + offset)[S$.$rightShift](bits - 32) : bits === 32 ? word[S$.$_get](0 + offset) : bits >= 0 ? (word[S$.$_get](0 + offset)[S$.$leftShift](32 - bits) | word[S$.$_get](1 + offset)[S$.$rightShift](bits)) >>> 0 : 0);
    }
    [S$._shl](bits, word, offset, ret, offsetR) {
      ret[S$.$_set](0 + offsetR, bits > 32 ? word[S$.$_get](1 + offset)[S$.$leftShift](bits - 32) : bits === 32 ? word[S$.$_get](1 + offset) : bits >= 0 ? (word[S$.$_get](0 + offset)[S$.$leftShift](bits) | word[S$.$_get](1 + offset)[S$.$rightShift](32 - bits)) >>> 0 : 0);
      ret[S$.$_set](1 + offsetR, bits < 32 && bits >= 0 ? word[S$.$_get](1 + offset)[S$.$leftShift](bits) : 0);
    }
    [S$._or](word1, offset1, word2, offset2, ret, offsetR) {
      ret[S$.$_set](0 + offsetR, (word1[S$.$_get](0 + offset1) | word2[S$.$_get](0 + offset2)) >>> 0);
      ret[S$.$_set](1 + offsetR, (word1[S$.$_get](1 + offset1) | word2[S$.$_get](1 + offset2)) >>> 0);
    }
    [S$._xor](word1, offset1, word2, offset2, ret, offsetR) {
      ret[S$.$_set](0 + offsetR, (word1[S$.$_get](0 + offset1) ^ word2[S$.$_get](0 + offset2)) >>> 0);
      ret[S$.$_set](1 + offsetR, (word1[S$.$_get](1 + offset1) ^ word2[S$.$_get](1 + offset2)) >>> 0);
    }
    [S$._add](word1, offset1, word2, offset2, ret, offsetR) {
      ret[S$.$_set](1 + offsetR, word1[S$.$_get](1 + offset1) + word2[S$.$_get](1 + offset2));
      ret[S$.$_set](0 + offsetR, word1[S$.$_get](0 + offset1) + word2[S$.$_get](0 + offset2) + (ret[S$.$_get](1 + offsetR) < word1[S$.$_get](1 + offset1) ? 1 : 0));
    }
    [S$._addTo2](word1, offset1, word2, offset2) {
      let t127, t126, t127$, t126$;
      let addTemp = word1[S$.$_get](1 + offset1);
      t126 = word1;
      t127 = 1 + offset1;
      t126[S$.$_set](t127, t126[S$.$_get](t127) + word2[S$.$_get](1 + offset2));
      t126$ = word1;
      t127$ = 0 + offset1;
      t126$[S$.$_set](t127$, t126$[S$.$_get](t127$) + (word2[S$.$_get](0 + offset2) + (word1[S$.$_get](1 + offset1) < addTemp ? 1 : 0)));
    }
    [S$._rotr](bits, word, offset, ret, offsetR) {
      this[S$._shr](bits, word, offset, this[S$._nums], 0);
      this[S$._shl](64 - bits, word, offset, this[S$._nums], 2);
      this[S$._or](this[S$._nums], 0, this[S$._nums], 2, ret, offsetR);
    }
    [S$._bsig0$1](word, offset, ret, offsetR) {
      this[S$._rotr](28, word, offset, this[S$._nums], 4);
      this[S$._rotr](34, word, offset, this[S$._nums], 6);
      this[S$._rotr](39, word, offset, this[S$._nums], 8);
      this[S$._xor](this[S$._nums], 6, this[S$._nums], 8, this[S$._nums], 10);
      this[S$._xor](this[S$._nums], 4, this[S$._nums], 10, ret, offsetR);
    }
    [S$._bsig1$1](word, offset, ret, offsetR) {
      this[S$._rotr](14, word, offset, this[S$._nums], 4);
      this[S$._rotr](18, word, offset, this[S$._nums], 6);
      this[S$._rotr](41, word, offset, this[S$._nums], 8);
      this[S$._xor](this[S$._nums], 6, this[S$._nums], 8, this[S$._nums], 10);
      this[S$._xor](this[S$._nums], 4, this[S$._nums], 10, ret, offsetR);
    }
    [S$._ssig0$1](word, offset, ret, offsetR) {
      this[S$._rotr](1, word, offset, this[S$._nums], 4);
      this[S$._rotr](8, word, offset, this[S$._nums], 6);
      this[S$._shr](7, word, offset, this[S$._nums], 8);
      this[S$._xor](this[S$._nums], 6, this[S$._nums], 8, this[S$._nums], 10);
      this[S$._xor](this[S$._nums], 4, this[S$._nums], 10, ret, offsetR);
    }
    [S$._ssig1$1](word, offset, ret, offsetR) {
      this[S$._rotr](19, word, offset, this[S$._nums], 4);
      this[S$._rotr](61, word, offset, this[S$._nums], 6);
      this[S$._shr](6, word, offset, this[S$._nums], 8);
      this[S$._xor](this[S$._nums], 6, this[S$._nums], 8, this[S$._nums], 10);
      this[S$._xor](this[S$._nums], 4, this[S$._nums], 10, ret, offsetR);
    }
    [S$._ch$1](x, offsetX, y, offsetY, z, offsetZ, ret, offsetR) {
      ret[S$.$_set](0 + offsetR, (x[S$.$_get](0 + offsetX) & (y[S$.$_get](0 + offsetY) ^ z[S$.$_get](0 + offsetZ)) >>> 0 ^ z[S$.$_get](0 + offsetZ)) >>> 0);
      ret[S$.$_set](1 + offsetR, (x[S$.$_get](1 + offsetX) & (y[S$.$_get](1 + offsetY) ^ z[S$.$_get](1 + offsetZ)) >>> 0 ^ z[S$.$_get](1 + offsetZ)) >>> 0);
    }
    [S$._maj$1](x, offsetX, y, offsetY, z, offsetZ, ret, offsetR) {
      ret[S$.$_set](0 + offsetR, (x[S$.$_get](0 + offsetX) & (y[S$.$_get](0 + offsetY) | z[S$.$_get](0 + offsetZ)) >>> 0 | (y[S$.$_get](0 + offsetY) & z[S$.$_get](0 + offsetZ)) >>> 0) >>> 0);
      ret[S$.$_set](1 + offsetR, (x[S$.$_get](1 + offsetX) & (y[S$.$_get](1 + offsetY) | z[S$.$_get](1 + offsetZ)) >>> 0 | (y[S$.$_get](1 + offsetY) & z[S$.$_get](1 + offsetZ)) >>> 0) >>> 0);
    }
    updateHash(chunk) {
      if (!(chunk[S$.$length] === 32)) dart.assertFailed(null, I[133], 213, 12, "chunk.length == 32");
      for (let i = 0; i < 32; i = i + 1) {
        this[S$._extended$2][S$.$_set](i, chunk[S$.$_get](i));
      }
      for (let i = 32; i < 160; i = i + 2) {
        this[S$._ssig1$1](this[S$._extended$2], i - 2 * 2, this[S$._nums], 28);
        this[S$._add](this[S$._nums], 28, this[S$._extended$2], i - 7 * 2, this[S$._nums], 30);
        this[S$._ssig0$1](this[S$._extended$2], i - 15 * 2, this[S$._nums], 28);
        this[S$._add](this[S$._nums], 28, this[S$._extended$2], i - 16 * 2, this[S$._nums], 32);
        this[S$._add](this[S$._nums], 30, this[S$._nums], 32, this[S$._extended$2], i);
      }
      this[S$._nums][S$.$setRange](12, 26 + 2, this[S$._digest$1]);
      for (let i = 0; i < 160; i = i + 2) {
        this[S$._bsig1$1](this[S$._nums], 20, this[S$._nums], 28);
        this[S$._add](this[S$._nums], 26, this[S$._nums], 28, this[S$._nums], 30);
        this[S$._ch$1](this[S$._nums], 20, this[S$._nums], 22, this[S$._nums], 24, this[S$._nums], 32);
        this[S$._add](this[S$._nums], 30, this[S$._nums], 32, this[S$._nums], 34);
        this[S$._add](sha512_slowsinks._noise32, i, this[S$._extended$2], i, this[S$._nums], 36);
        this[S$._add](this[S$._nums], 34, this[S$._nums], 36, this[S$._nums], 28);
        this[S$._bsig0$1](this[S$._nums], 12, this[S$._nums], 32);
        this[S$._maj$1](this[S$._nums], 12, this[S$._nums], 14, this[S$._nums], 16, this[S$._nums], 34);
        this[S$._add](this[S$._nums], 32, this[S$._nums], 34, this[S$._nums], 30);
        this[S$._nums][S$.$_set](26, this[S$._nums][S$.$_get](24));
        this[S$._nums][S$.$_set](26 + 1, this[S$._nums][S$.$_get](24 + 1));
        this[S$._nums][S$.$_set](24, this[S$._nums][S$.$_get](22));
        this[S$._nums][S$.$_set](24 + 1, this[S$._nums][S$.$_get](22 + 1));
        this[S$._nums][S$.$_set](22, this[S$._nums][S$.$_get](20));
        this[S$._nums][S$.$_set](22 + 1, this[S$._nums][S$.$_get](20 + 1));
        this[S$._add](this[S$._nums], 18, this[S$._nums], 28, this[S$._nums], 20);
        this[S$._nums][S$.$_set](18, this[S$._nums][S$.$_get](16));
        this[S$._nums][S$.$_set](18 + 1, this[S$._nums][S$.$_get](16 + 1));
        this[S$._nums][S$.$_set](16, this[S$._nums][S$.$_get](14));
        this[S$._nums][S$.$_set](16 + 1, this[S$._nums][S$.$_get](14 + 1));
        this[S$._nums][S$.$_set](14, this[S$._nums][S$.$_get](12));
        this[S$._nums][S$.$_set](14 + 1, this[S$._nums][S$.$_get](12 + 1));
        this[S$._add](this[S$._nums], 28, this[S$._nums], 30, this[S$._nums], 12);
      }
      this[S$._addTo2](this[S$._digest$1], 0, this[S$._nums], 12);
      this[S$._addTo2](this[S$._digest$1], 2, this[S$._nums], 14);
      this[S$._addTo2](this[S$._digest$1], 4, this[S$._nums], 16);
      this[S$._addTo2](this[S$._digest$1], 6, this[S$._nums], 18);
      this[S$._addTo2](this[S$._digest$1], 8, this[S$._nums], 20);
      this[S$._addTo2](this[S$._digest$1], 10, this[S$._nums], 22);
      this[S$._addTo2](this[S$._digest$1], 12, this[S$._nums], 24);
      this[S$._addTo2](this[S$._digest$1], 14, this[S$._nums], 26);
    }
  };
  (sha512_slowsinks._Sha64BitSink.new = function(sink, _digest) {
    this[S$._extended$2] = _native_typed_data.NativeUint32List.new(160);
    this[S$._nums] = _native_typed_data.NativeUint32List.new(12 + 16 + 10);
    this[S$._digest$1] = _digest;
    sha512_slowsinks._Sha64BitSink.__proto__.new.call(this, sink, 32, {signatureBytes: 16});
    ;
  }).prototype = sha512_slowsinks._Sha64BitSink.prototype;
  dart.addTypeTests(sha512_slowsinks._Sha64BitSink);
  dart.addTypeCaches(sha512_slowsinks._Sha64BitSink);
  dart.setMethodSignature(sha512_slowsinks._Sha64BitSink, () => ({
    __proto__: dart.getMethods(sha512_slowsinks._Sha64BitSink.__proto__),
    [S$._shr]: dart.fnType(dart.void, [core.int, typed_data.Uint32List, core.int, typed_data.Uint32List, core.int]),
    [S$._shl]: dart.fnType(dart.void, [core.int, typed_data.Uint32List, core.int, typed_data.Uint32List, core.int]),
    [S$._or]: dart.fnType(dart.void, [typed_data.Uint32List, core.int, typed_data.Uint32List, core.int, typed_data.Uint32List, core.int]),
    [S$._xor]: dart.fnType(dart.void, [typed_data.Uint32List, core.int, typed_data.Uint32List, core.int, typed_data.Uint32List, core.int]),
    [S$._add]: dart.fnType(dart.void, [typed_data.Uint32List, core.int, typed_data.Uint32List, core.int, typed_data.Uint32List, core.int]),
    [S$._addTo2]: dart.fnType(dart.void, [typed_data.Uint32List, core.int, typed_data.Uint32List, core.int]),
    [S$._rotr]: dart.fnType(dart.void, [core.int, typed_data.Uint32List, core.int, typed_data.Uint32List, core.int]),
    [S$._bsig0$1]: dart.fnType(dart.void, [typed_data.Uint32List, core.int, typed_data.Uint32List, core.int]),
    [S$._bsig1$1]: dart.fnType(dart.void, [typed_data.Uint32List, core.int, typed_data.Uint32List, core.int]),
    [S$._ssig0$1]: dart.fnType(dart.void, [typed_data.Uint32List, core.int, typed_data.Uint32List, core.int]),
    [S$._ssig1$1]: dart.fnType(dart.void, [typed_data.Uint32List, core.int, typed_data.Uint32List, core.int]),
    [S$._ch$1]: dart.fnType(dart.void, [typed_data.Uint32List, core.int, typed_data.Uint32List, core.int, typed_data.Uint32List, core.int, typed_data.Uint32List, core.int]),
    [S$._maj$1]: dart.fnType(dart.void, [typed_data.Uint32List, core.int, typed_data.Uint32List, core.int, typed_data.Uint32List, core.int, typed_data.Uint32List, core.int]),
    updateHash: dart.fnType(dart.void, [typed_data.Uint32List])
  }));
  dart.setGetterSignature(sha512_slowsinks._Sha64BitSink, () => ({
    __proto__: dart.getGetters(sha512_slowsinks._Sha64BitSink.__proto__),
    digest: typed_data.Uint32List
  }));
  dart.setLibraryUri(sha512_slowsinks._Sha64BitSink, I[134]);
  dart.setFieldSignature(sha512_slowsinks._Sha64BitSink, () => ({
    __proto__: dart.getFields(sha512_slowsinks._Sha64BitSink.__proto__),
    [S$._digest$1]: dart.finalFieldType(typed_data.Uint32List),
    [S$._extended$2]: dart.finalFieldType(typed_data.Uint32List),
    [S$._nums]: dart.finalFieldType(typed_data.Uint32List)
  }));
  dart.setStaticFieldSignature(sha512_slowsinks._Sha64BitSink, () => ['_rotrIndex1', '_rotrIndex2', '_sigIndex1', '_sigIndex2', '_sigIndex3', '_sigIndex4', '_aIndex', '_bIndex', '_cIndex', '_dIndex', '_eIndex', '_fIndex', '_gIndex', '_hIndex', '_tmp1', '_tmp2', '_tmp3', '_tmp4', '_tmp5']);
  dart.defineLazy(sha512_slowsinks._Sha64BitSink, {
    /*sha512_slowsinks._Sha64BitSink._rotrIndex1*/get _rotrIndex1() {
      return 0;
    },
    /*sha512_slowsinks._Sha64BitSink._rotrIndex2*/get _rotrIndex2() {
      return 2;
    },
    /*sha512_slowsinks._Sha64BitSink._sigIndex1*/get _sigIndex1() {
      return 4;
    },
    /*sha512_slowsinks._Sha64BitSink._sigIndex2*/get _sigIndex2() {
      return 6;
    },
    /*sha512_slowsinks._Sha64BitSink._sigIndex3*/get _sigIndex3() {
      return 8;
    },
    /*sha512_slowsinks._Sha64BitSink._sigIndex4*/get _sigIndex4() {
      return 10;
    },
    /*sha512_slowsinks._Sha64BitSink._aIndex*/get _aIndex() {
      return 12;
    },
    /*sha512_slowsinks._Sha64BitSink._bIndex*/get _bIndex() {
      return 14;
    },
    /*sha512_slowsinks._Sha64BitSink._cIndex*/get _cIndex() {
      return 16;
    },
    /*sha512_slowsinks._Sha64BitSink._dIndex*/get _dIndex() {
      return 18;
    },
    /*sha512_slowsinks._Sha64BitSink._eIndex*/get _eIndex() {
      return 20;
    },
    /*sha512_slowsinks._Sha64BitSink._fIndex*/get _fIndex() {
      return 22;
    },
    /*sha512_slowsinks._Sha64BitSink._gIndex*/get _gIndex() {
      return 24;
    },
    /*sha512_slowsinks._Sha64BitSink._hIndex*/get _hIndex() {
      return 26;
    },
    /*sha512_slowsinks._Sha64BitSink._tmp1*/get _tmp1() {
      return 28;
    },
    /*sha512_slowsinks._Sha64BitSink._tmp2*/get _tmp2() {
      return 30;
    },
    /*sha512_slowsinks._Sha64BitSink._tmp3*/get _tmp3() {
      return 32;
    },
    /*sha512_slowsinks._Sha64BitSink._tmp4*/get _tmp4() {
      return 34;
    },
    /*sha512_slowsinks._Sha64BitSink._tmp5*/get _tmp5() {
      return 36;
    }
  }, false);
  sha512_slowsinks.Sha384Sink = class Sha384Sink extends sha512_slowsinks._Sha64BitSink {
    get digestBytes() {
      return this[S$.digestBytes];
    }
    set digestBytes(value) {
      super.digestBytes = value;
    }
    static ['_#new#tearOff'](sink) {
      return new sha512_slowsinks.Sha384Sink.new(sink);
    }
  };
  (sha512_slowsinks.Sha384Sink.new = function(sink) {
    this[S$.digestBytes] = 12;
    sha512_slowsinks.Sha384Sink.__proto__.new.call(this, sink, _native_typed_data.NativeUint32List.fromList(T$.JSArrayOfint().of([3418070365, 3238371032, 1654270250, 914150663, 2438529370, 812702999, 355462360, 4144912697, 1731405415, 4290775857, 2394180231, 1750603025, 3675008525, 1694076839, 1203062813, 3204075428])));
    ;
  }).prototype = sha512_slowsinks.Sha384Sink.prototype;
  dart.addTypeTests(sha512_slowsinks.Sha384Sink);
  dart.addTypeCaches(sha512_slowsinks.Sha384Sink);
  dart.setLibraryUri(sha512_slowsinks.Sha384Sink, I[134]);
  dart.setFieldSignature(sha512_slowsinks.Sha384Sink, () => ({
    __proto__: dart.getFields(sha512_slowsinks.Sha384Sink.__proto__),
    digestBytes: dart.finalFieldType(core.int)
  }));
  sha512_slowsinks.Sha512Sink = class Sha512Sink extends sha512_slowsinks._Sha64BitSink {
    get digestBytes() {
      return this[S$.digestBytes$1];
    }
    set digestBytes(value) {
      super.digestBytes = value;
    }
    static ['_#new#tearOff'](sink) {
      return new sha512_slowsinks.Sha512Sink.new(sink);
    }
  };
  (sha512_slowsinks.Sha512Sink.new = function(sink) {
    this[S$.digestBytes$1] = 16;
    sha512_slowsinks.Sha512Sink.__proto__.new.call(this, sink, _native_typed_data.NativeUint32List.fromList(T$.JSArrayOfint().of([1779033703, 4089235720, 3144134277, 2227873595, 1013904242, 4271175723, 2773480762, 1595750129, 1359893119, 2917565137, 2600822924, 725511199, 528734635, 4215389547, 1541459225, 327033209])));
    ;
  }).prototype = sha512_slowsinks.Sha512Sink.prototype;
  dart.addTypeTests(sha512_slowsinks.Sha512Sink);
  dart.addTypeCaches(sha512_slowsinks.Sha512Sink);
  dart.setLibraryUri(sha512_slowsinks.Sha512Sink, I[134]);
  dart.setFieldSignature(sha512_slowsinks.Sha512Sink, () => ({
    __proto__: dart.getFields(sha512_slowsinks.Sha512Sink.__proto__),
    digestBytes: dart.finalFieldType(core.int)
  }));
  sha512_slowsinks.Sha512224Sink = class Sha512224Sink extends sha512_slowsinks._Sha64BitSink {
    get digestBytes() {
      return this[S$.digestBytes$2];
    }
    set digestBytes(value) {
      super.digestBytes = value;
    }
    static ['_#new#tearOff'](sink) {
      return new sha512_slowsinks.Sha512224Sink.new(sink);
    }
  };
  (sha512_slowsinks.Sha512224Sink.new = function(sink) {
    this[S$.digestBytes$2] = 7;
    sha512_slowsinks.Sha512224Sink.__proto__.new.call(this, sink, _native_typed_data.NativeUint32List.fromList(T$.JSArrayOfint().of([2352822216, 424955298, 1944164710, 2312950998, 502970286, 855612546, 1738396948, 1479516111, 258812777, 2077511080, 2011393907, 79989058, 1067287976, 1780299464, 286451373, 2446758561])));
    ;
  }).prototype = sha512_slowsinks.Sha512224Sink.prototype;
  dart.addTypeTests(sha512_slowsinks.Sha512224Sink);
  dart.addTypeCaches(sha512_slowsinks.Sha512224Sink);
  dart.setLibraryUri(sha512_slowsinks.Sha512224Sink, I[134]);
  dart.setFieldSignature(sha512_slowsinks.Sha512224Sink, () => ({
    __proto__: dart.getFields(sha512_slowsinks.Sha512224Sink.__proto__),
    digestBytes: dart.finalFieldType(core.int)
  }));
  sha512_slowsinks.Sha512256Sink = class Sha512256Sink extends sha512_slowsinks._Sha64BitSink {
    get digestBytes() {
      return this[S$.digestBytes$3];
    }
    set digestBytes(value) {
      super.digestBytes = value;
    }
    static ['_#new#tearOff'](sink) {
      return new sha512_slowsinks.Sha512256Sink.new(sink);
    }
  };
  (sha512_slowsinks.Sha512256Sink.new = function(sink) {
    this[S$.digestBytes$3] = 8;
    sha512_slowsinks.Sha512256Sink.__proto__.new.call(this, sink, _native_typed_data.NativeUint32List.fromList(T$.JSArrayOfint().of([573645204, 4230739756, 2673172387, 3360449730, 596883563, 1867755857, 2520282905, 1497426621, 2519219938, 2827943907, 3193839141, 1401305490, 721525244, 746961066, 246885852, 2177182882])));
    ;
  }).prototype = sha512_slowsinks.Sha512256Sink.prototype;
  dart.addTypeTests(sha512_slowsinks.Sha512256Sink);
  dart.addTypeCaches(sha512_slowsinks.Sha512256Sink);
  dart.setLibraryUri(sha512_slowsinks.Sha512256Sink, I[134]);
  dart.setFieldSignature(sha512_slowsinks.Sha512256Sink, () => ({
    __proto__: dart.getFields(sha512_slowsinks.Sha512256Sink.__proto__),
    digestBytes: dart.finalFieldType(core.int)
  }));
  dart.defineLazy(sha512_slowsinks, {
    /*sha512_slowsinks._noise32*/get _noise32() {
      return _native_typed_data.NativeUint32List.fromList(T$.JSArrayOfint().of([1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591]));
    }
  }, false);
  dart.defineLazy(aes_tables, {
    /*aes_tables.sBox*/get sBox() {
      return C[94] || CT.C94;
    },
    /*aes_tables.sBoxInv*/get sBoxInv() {
      return C[95] || CT.C95;
    },
    /*aes_tables.rcon*/get rcon() {
      return C[96] || CT.C96;
    },
    /*aes_tables.table0*/get table0() {
      return C[97] || CT.C97;
    },
    /*aes_tables.table1*/get table1() {
      return C[98] || CT.C98;
    },
    /*aes_tables.table2*/get table2() {
      return C[99] || CT.C99;
    },
    /*aes_tables.table3*/get table3() {
      return C[100] || CT.C100;
    },
    /*aes_tables.table0Inv*/get table0Inv() {
      return C[101] || CT.C101;
    },
    /*aes_tables.table1Inv*/get table1Inv() {
      return C[102] || CT.C102;
    },
    /*aes_tables.table2Inv*/get table2Inv() {
      return C[103] || CT.C103;
    },
    /*aes_tables.table3Inv*/get table3Inv() {
      return C[104] || CT.C104;
    }
  }, false);
  frame$.Frame = class Frame extends core.Object {
    get key() {
      return this[S$.key$1];
    }
    set key(value) {
      super.key = value;
    }
    get value() {
      return this[S$.value$1];
    }
    set value(value) {
      super.value = value;
    }
    get deleted() {
      return this[S$.deleted$1];
    }
    set deleted(value) {
      super.deleted = value;
    }
    get lazy() {
      return this[S$.lazy$2];
    }
    set lazy(value) {
      super.lazy = value;
    }
    get length() {
      return this[S$.length];
    }
    set length(value) {
      this[S$.length] = value;
    }
    get offset() {
      return this[S$.offset];
    }
    set offset(value) {
      this[S$.offset] = value;
    }
    static ['_#new#tearOff'](key, value, opts) {
      let length = opts && 'length' in opts ? opts.length : null;
      let offset = opts && 'offset' in opts ? opts.offset : -1;
      return new frame$.Frame.new(key, value, {length: length, offset: offset});
    }
    static ['_#deleted#tearOff'](key, opts) {
      let length = opts && 'length' in opts ? opts.length : null;
      return new frame$.Frame.deleted(key, {length: length});
    }
    static ['_#lazy#tearOff'](key, opts) {
      let length = opts && 'length' in opts ? opts.length : null;
      let offset = opts && 'offset' in opts ? opts.offset : -1;
      return new frame$.Frame.lazy(key, {length: length, offset: offset});
    }
    static assertKey(key) {
      if (core.int.is(key)) {
        if (dart.notNull(key) < 0 || dart.notNull(key) > 4294967295) {
          dart.throw(new hive.HiveError.new("Integer keys need to be in the range 0 - 0xFFFFFFFF"));
        }
      } else if (typeof key == 'string') {
        if (key.length > 255) {
          dart.throw(new hive.HiveError.new("String keys need to be a max length of 255"));
        }
      } else {
        dart.throw(new hive.HiveError.new("Keys need to be Strings or integers"));
      }
      return true;
    }
    toLazy() {
      if (this.deleted) return this;
      return new frame$.Frame.lazy(this.key, {length: this.length, offset: this.offset});
    }
    _equals(other) {
      if (other == null) return false;
      if (frame$.Frame.is(other)) {
        return dart.equals(this.key, other.key) && dart.equals(this.value, other.value) && this.length == other.length && this.deleted === other.deleted;
      } else {
        return false;
      }
    }
    toString() {
      if (this.deleted) {
        return "Frame.deleted(key: " + dart.str(this.key) + ", length: " + dart.str(this.length) + ")";
      } else if (this.lazy) {
        return "Frame.lazy(key: " + dart.str(this.key) + ", length: " + dart.str(this.length) + ", offset: " + dart.str(this.offset) + ")";
      } else {
        return "Frame(key: " + dart.str(this.key) + ", value: " + dart.str(this.value) + ", " + "length: " + dart.str(this.length) + ", offset: " + dart.str(this.offset) + ")";
      }
    }
    get hashCode() {
      return (this[S$.$runtimeType].hashCode ^ dart.hashCode(this.key) ^ dart.hashCode(this.value) ^ dart.hashCode(this.length) ^ this.deleted[S$.$hashCode]) >>> 0;
    }
  };
  (frame$.Frame.new = function(key, value, opts) {
    let length = opts && 'length' in opts ? opts.length : null;
    let offset = opts && 'offset' in opts ? opts.offset : -1;
    this[S$.offset] = -1;
    this[S$.key$1] = key;
    this[S$.value$1] = value;
    this[S$.length] = length;
    this[S$.offset] = offset;
    this[S$.lazy$2] = false;
    this[S$.deleted$1] = false;
    if (!frame$.Frame.assertKey(this.key)) dart.assertFailed(null, I[135], 27, 12, "assertKey(key)");
  }).prototype = frame$.Frame.prototype;
  (frame$.Frame.deleted = function(key, opts) {
    let length = opts && 'length' in opts ? opts.length : null;
    this[S$.offset] = -1;
    this[S$.key$1] = key;
    this[S$.length] = length;
    this[S$.value$1] = null;
    this[S$.lazy$2] = false;
    this[S$.deleted$1] = true;
    this[S$.offset] = -1;
    if (!frame$.Frame.assertKey(this.key)) dart.assertFailed(null, I[135], 36, 12, "assertKey(key)");
  }).prototype = frame$.Frame.prototype;
  (frame$.Frame.lazy = function(key, opts) {
    let length = opts && 'length' in opts ? opts.length : null;
    let offset = opts && 'offset' in opts ? opts.offset : -1;
    this[S$.offset] = -1;
    this[S$.key$1] = key;
    this[S$.length] = length;
    this[S$.offset] = offset;
    this[S$.value$1] = null;
    this[S$.lazy$2] = true;
    this[S$.deleted$1] = false;
    if (!frame$.Frame.assertKey(this.key)) dart.assertFailed(null, I[135], 44, 12, "assertKey(key)");
  }).prototype = frame$.Frame.prototype;
  dart.addTypeTests(frame$.Frame);
  dart.addTypeCaches(frame$.Frame);
  dart.setMethodSignature(frame$.Frame, () => ({
    __proto__: dart.getMethods(frame$.Frame.__proto__),
    toLazy: dart.fnType(frame$.Frame, []),
    _equals: dart.fnType(core.bool, [dart.dynamic]),
    [S$.$_equals]: dart.fnType(core.bool, [dart.dynamic])
  }));
  dart.setStaticMethodSignature(frame$.Frame, () => ['assertKey']);
  dart.setLibraryUri(frame$.Frame, I[136]);
  dart.setFieldSignature(frame$.Frame, () => ({
    __proto__: dart.getFields(frame$.Frame.__proto__),
    key: dart.finalFieldType(dart.dynamic),
    value: dart.finalFieldType(dart.dynamic),
    deleted: dart.finalFieldType(core.bool),
    lazy: dart.finalFieldType(core.bool),
    length: dart.fieldType(dart.nullable(core.int)),
    offset: dart.fieldType(core.int)
  }));
  dart.defineExtensionMethods(frame$.Frame, ['_equals', 'toString']);
  dart.defineExtensionAccessors(frame$.Frame, ['hashCode']);
  frame$.FrameKeyType = class FrameKeyType extends core.Object {
    static ['_#new#tearOff']() {
      return new frame$.FrameKeyType.new();
    }
  };
  (frame$.FrameKeyType.new = function() {
    ;
  }).prototype = frame$.FrameKeyType.prototype;
  dart.addTypeTests(frame$.FrameKeyType);
  dart.addTypeCaches(frame$.FrameKeyType);
  dart.setLibraryUri(frame$.FrameKeyType, I[136]);
  dart.setStaticFieldSignature(frame$.FrameKeyType, () => ['uintT', 'utf8StringT']);
  dart.defineLazy(frame$.FrameKeyType, {
    /*frame$.FrameKeyType.uintT*/get uintT() {
      return 0;
    },
    /*frame$.FrameKeyType.utf8StringT*/get utf8StringT() {
      return 1;
    }
  }, false);
  frame$.FrameValueType = class FrameValueType extends core.Object {
    static ['_#new#tearOff']() {
      return new frame$.FrameValueType.new();
    }
  };
  (frame$.FrameValueType.new = function() {
    ;
  }).prototype = frame$.FrameValueType.prototype;
  dart.addTypeTests(frame$.FrameValueType);
  dart.addTypeCaches(frame$.FrameValueType);
  dart.setLibraryUri(frame$.FrameValueType, I[136]);
  dart.setStaticFieldSignature(frame$.FrameValueType, () => ['nullT', 'intT', 'doubleT', 'boolT', 'stringT', 'byteListT', 'intListT', 'doubleListT', 'boolListT', 'stringListT', 'listT', 'mapT', 'hiveListT']);
  dart.defineLazy(frame$.FrameValueType, {
    /*frame$.FrameValueType.nullT*/get nullT() {
      return 0;
    },
    /*frame$.FrameValueType.intT*/get intT() {
      return 1;
    },
    /*frame$.FrameValueType.doubleT*/get doubleT() {
      return 2;
    },
    /*frame$.FrameValueType.boolT*/get boolT() {
      return 3;
    },
    /*frame$.FrameValueType.stringT*/get stringT() {
      return 4;
    },
    /*frame$.FrameValueType.byteListT*/get byteListT() {
      return 5;
    },
    /*frame$.FrameValueType.intListT*/get intListT() {
      return 6;
    },
    /*frame$.FrameValueType.doubleListT*/get doubleListT() {
      return 7;
    },
    /*frame$.FrameValueType.boolListT*/get boolListT() {
      return 8;
    },
    /*frame$.FrameValueType.stringListT*/get stringListT() {
      return 9;
    },
    /*frame$.FrameValueType.listT*/get listT() {
      return 10;
    },
    /*frame$.FrameValueType.mapT*/get mapT() {
      return 11;
    },
    /*frame$.FrameValueType.hiveListT*/get hiveListT() {
      return 12;
    }
  }, false);
  frame_helper.FrameHelper = class FrameHelper extends core.Object {
    framesFromBytes(bytes, keystore, registry, cipher) {
      let reader = new binary_reader_impl.BinaryReaderImpl.new(bytes, registry);
      while (reader.availableBytes !== 0) {
        let frameOffset = reader.usedBytes;
        let frame = reader.readFrame({cipher: cipher, lazy: false, frameOffset: frameOffset});
        if (frame == null) return frameOffset;
        dart.nullCheck(keystore).insert(frame, {notify: false});
      }
      return -1;
    }
    static ['_#new#tearOff']() {
      return new frame_helper.FrameHelper.new();
    }
  };
  (frame_helper.FrameHelper.new = function() {
    ;
  }).prototype = frame_helper.FrameHelper.prototype;
  dart.addTypeTests(frame_helper.FrameHelper);
  dart.addTypeCaches(frame_helper.FrameHelper);
  dart.setMethodSignature(frame_helper.FrameHelper, () => ({
    __proto__: dart.getMethods(frame_helper.FrameHelper.__proto__),
    framesFromBytes: dart.fnType(core.int, [typed_data.Uint8List, dart.nullable(keystore$.Keystore), hive.TypeRegistry, dart.nullable(hive.HiveCipher)])
  }));
  dart.setLibraryUri(frame_helper.FrameHelper, I[137]);
  const _is_KeyTransaction_default = Symbol('_is_KeyTransaction_default');
  keystore$.KeyTransaction$ = dart.generic(E => {
    class KeyTransaction extends core.Object {
      get added() {
        return this[S$.added];
      }
      set added(value) {
        super.added = value;
      }
      get deleted() {
        return this[S$.deleted$2];
      }
      set deleted(value) {
        super.deleted = value;
      }
      static ['_#new#tearOff'](E) {
        return new (keystore$.KeyTransaction$(E)).new();
      }
    }
    (KeyTransaction.new = function() {
      this[S$.added] = [];
      this[S$.deleted$2] = new (T$.LinkedMapOfdynamic$Frame()).new();
      ;
    }).prototype = KeyTransaction.prototype;
    dart.addTypeTests(KeyTransaction);
    KeyTransaction.prototype[_is_KeyTransaction_default] = true;
    dart.addTypeCaches(KeyTransaction);
    dart.setLibraryUri(KeyTransaction, I[138]);
    dart.setFieldSignature(KeyTransaction, () => ({
      __proto__: dart.getFields(KeyTransaction.__proto__),
      added: dart.finalFieldType(core.List),
      deleted: dart.finalFieldType(core.Map$(dart.dynamic, frame$.Frame))
    }));
    return KeyTransaction;
  });
  keystore$.KeyTransaction = keystore$.KeyTransaction$();
  dart.addTypeTests(keystore$.KeyTransaction, _is_KeyTransaction_default);
  const _is_Keystore_default = Symbol('_is_Keystore_default');
  keystore$.Keystore$ = dart.generic(E => {
    var __t$KeyTransactionOfE = () => (__t$KeyTransactionOfE = dart.constFn(keystore$.KeyTransaction$(E)))();
    var __t$ListQueueOfKeyTransactionOfE = () => (__t$ListQueueOfKeyTransactionOfE = dart.constFn(collection.ListQueue$(__t$KeyTransactionOfE())))();
    var __t$FrameToE = () => (__t$FrameToE = dart.constFn(dart.fnType(E, [frame$.Frame])))();
    var __t$SyncIterableOfE = () => (__t$SyncIterableOfE = dart.constFn(_js_helper.SyncIterable$(E)))();
    class Keystore extends core.Object {
      get transactions() {
        return this[S$.transactions];
      }
      set transactions(value) {
        super.transactions = value;
      }
      static ['_#new#tearOff'](E, _box, _notifier, keyComparator) {
        return new (keystore$.Keystore$(E)).new(_box, _notifier, keyComparator);
      }
      static debug(opts) {
        let t126, t126$;
        let frames = opts && 'frames' in opts ? opts.frames : C[105] || CT.C105;
        let box = opts && 'box' in opts ? opts.box : null;
        let notifier = opts && 'notifier' in opts ? opts.notifier : null;
        let keyComparator = opts && 'keyComparator' in opts ? opts.keyComparator : C[16] || CT.C16;
        let keystore = new (keystore$.Keystore$(E)).new((t126 = box, t126 == null ? box_base_impl.BoxBaseImpl.nullImpl(E) : t126), (t126$ = notifier, t126$ == null ? new change_notifier$.ChangeNotifier.new() : t126$), keyComparator);
        for (let frame of frames) {
          keystore.insert(frame);
        }
        return keystore;
      }
      static ['_#debug#tearOff'](E, opts) {
        let frames = opts && 'frames' in opts ? opts.frames : C[105] || CT.C105;
        let box = opts && 'box' in opts ? opts.box : null;
        let notifier = opts && 'notifier' in opts ? opts.notifier : null;
        let keyComparator = opts && 'keyComparator' in opts ? opts.keyComparator : C[16] || CT.C16;
        return keystore$.Keystore$(E).debug({frames: frames, box: box, notifier: notifier, keyComparator: keyComparator});
      }
      get deletedEntries() {
        return this[S$._deletedEntries];
      }
      get length() {
        return this[S$._store].length;
      }
      get frames() {
        return this[S$._store].values;
      }
      resetDeletedEntries() {
        this[S$._deletedEntries] = 0;
      }
      autoIncrement() {
        return this[S$._autoIncrement] = this[S$._autoIncrement] + 1;
      }
      updateAutoIncrement(key) {
        if (key > this[S$._autoIncrement]) {
          this[S$._autoIncrement] = key;
        }
      }
      containsKey(key) {
        return this[S$._store].get(key) != null;
      }
      keyAt(index) {
        return this[S$._store].getKeyAt(index);
      }
      get(key) {
        return this[S$._store].get(key);
      }
      getAt(index) {
        return this[S$._store].getAt(index);
      }
      getKeys() {
        return this[S$._store].keys;
      }
      getValues() {
        return this[S$._store].values[S$.$map](E, dart.fn(e => E.as(e.value), __t$FrameToE()));
      }
      getValuesBetween(startKey = null, endKey = null) {
        return new (__t$SyncIterableOfE()).new((function* getValuesBetween() {
          let iterable = null;
          if (startKey != null) {
            iterable = this[S$._store].valuesFromKey(startKey);
          } else {
            iterable = this[S$._store].values;
          }
          for (let frame of iterable) {
            yield E.as(frame.value);
            if (dart.equals(frame.key, endKey)) break;
          }
        }).bind(this));
      }
      watch(opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        return this[S$._notifier].watch({key: key});
      }
      insert(frame, opts) {
        let notify = opts && 'notify' in opts ? opts.notify : true;
        let lazy = opts && 'lazy' in opts ? opts.lazy : false;
        let value = frame.value;
        let deletedFrame = null;
        if (!frame.deleted) {
          let key = frame.key;
          if (core.int.is(key) && dart.notNull(key) > this[S$._autoIncrement]) {
            this[S$._autoIncrement] = key;
          }
          if (hive_object.HiveObjectMixin.is(value)) {
            hive_object['HiveObjectInternal|init'](value, key, this[S$._box$3]);
          }
          deletedFrame = this[S$._store].insert(key, lazy ? frame.toLazy() : frame);
        } else {
          deletedFrame = this[S$._store].delete(frame.key);
        }
        if (deletedFrame != null) {
          this[S$._deletedEntries] = this[S$._deletedEntries] + 1;
          if (hive_object.HiveObjectMixin.is(deletedFrame.value) && !core.identical(deletedFrame.value, value)) {
            hive_object['HiveObjectInternal|dispose'](hive_object.HiveObjectMixin.as(deletedFrame.value));
          }
        }
        if (notify && (!frame.deleted || deletedFrame != null)) {
          this[S$._notifier].notify(frame);
        }
        return deletedFrame;
      }
      beginTransaction(newFrames) {
        let transaction = new (__t$KeyTransactionOfE()).new();
        for (let frame of newFrames) {
          if (!frame.deleted) {
            transaction.added[S$.$add](frame.key);
          }
          let deletedFrame = this.insert(frame);
          if (deletedFrame != null) {
            transaction.deleted[S$.$_set](frame.key, deletedFrame);
          }
        }
        if (transaction.added[S$.$isNotEmpty] || transaction.deleted[S$.$isNotEmpty]) {
          this.transactions.add(transaction);
          return true;
        } else {
          return false;
        }
      }
      commitTransaction() {
        this.transactions.removeFirst();
      }
      cancelTransaction() {
        let canceled = this.transactions.removeFirst();
        L0:
          for (let key of canceled.deleted[S$.$keys]) {
            let deletedFrame = canceled.deleted[S$.$_get](key);
            for (let t of this.transactions) {
              if (t.deleted[S$.$containsKey](key)) {
                t.deleted[S$.$_set](key, dart.nullCheck(deletedFrame));
                continue L0;
              }
              if (t.added[S$.$contains](key)) {
                t.deleted[S$.$_set](key, dart.nullCheck(deletedFrame));
                continue L0;
              }
            }
            this[S$._store].insert(key, deletedFrame);
            this[S$._notifier].notify(dart.nullCheck(deletedFrame));
          }
        L1:
          for (let key of canceled.added) {
            let isOverride = canceled.deleted[S$.$containsKey](key);
            for (let t of this.transactions) {
              if (t.deleted[S$.$containsKey](key)) {
                if (!isOverride) {
                  t.deleted[S$.$remove](key);
                }
                continue L1;
              }
              if (t.added[S$.$contains](key)) {
                continue L1;
              }
            }
            if (!isOverride) {
              this[S$._store].delete(key);
              this[S$._notifier].notify(new frame$.Frame.deleted(key));
            }
          }
      }
      clear() {
        let frameList = this.frames[S$.$toList]();
        this[S$._store].clear();
        for (let frame of frameList) {
          if (hive_object.HiveObjectMixin.is(frame.value)) {
            hive_object['HiveObjectInternal|dispose'](hive_object.HiveObjectMixin.as(frame.value));
          }
          this[S$._notifier].notify(new frame$.Frame.deleted(frame.key));
        }
        this[S$._deletedEntries] = 0;
        this[S$._autoIncrement] = -1;
        return frameList[S$.$length];
      }
      close() {
        return this[S$._notifier].close();
      }
    }
    (Keystore.new = function(_box, _notifier, keyComparator) {
      let t126;
      this[S$.transactions] = new (__t$ListQueueOfKeyTransactionOfE()).new();
      this[S$._deletedEntries] = 0;
      this[S$._autoIncrement] = -1;
      this[S$._box$3] = _box;
      this[S$._notifier] = _notifier;
      this[S$._store] = new (T$.IndexableSkipListOfdynamic$Frame()).new((t126 = keyComparator, t126 == null ? C[16] || CT.C16 : t126));
      ;
    }).prototype = Keystore.prototype;
    dart.addTypeTests(Keystore);
    Keystore.prototype[_is_Keystore_default] = true;
    dart.addTypeCaches(Keystore);
    dart.setMethodSignature(Keystore, () => ({
      __proto__: dart.getMethods(Keystore.__proto__),
      resetDeletedEntries: dart.fnType(dart.void, []),
      autoIncrement: dart.fnType(core.int, []),
      updateAutoIncrement: dart.fnType(dart.void, [core.int]),
      containsKey: dart.fnType(core.bool, [dart.dynamic]),
      keyAt: dart.fnType(dart.dynamic, [core.int]),
      get: dart.fnType(dart.nullable(frame$.Frame), [dart.dynamic]),
      getAt: dart.fnType(dart.nullable(frame$.Frame), [core.int]),
      getKeys: dart.fnType(core.Iterable, []),
      getValues: dart.fnType(core.Iterable$(E), []),
      getValuesBetween: dart.fnType(core.Iterable$(E), [], [dart.dynamic, dart.dynamic]),
      watch: dart.fnType(async.Stream$(hive.BoxEvent), [], {key: dart.dynamic}, {}),
      insert: dart.fnType(dart.nullable(frame$.Frame), [frame$.Frame], {lazy: core.bool, notify: core.bool}, {}),
      beginTransaction: dart.fnType(core.bool, [core.List$(frame$.Frame)]),
      commitTransaction: dart.fnType(dart.void, []),
      cancelTransaction: dart.fnType(dart.void, []),
      clear: dart.fnType(core.int, []),
      close: dart.fnType(async.Future, [])
    }));
    dart.setStaticMethodSignature(Keystore, () => ['debug']);
    dart.setGetterSignature(Keystore, () => ({
      __proto__: dart.getGetters(Keystore.__proto__),
      deletedEntries: core.int,
      length: core.int,
      frames: core.Iterable$(frame$.Frame)
    }));
    dart.setLibraryUri(Keystore, I[138]);
    dart.setFieldSignature(Keystore, () => ({
      __proto__: dart.getFields(Keystore.__proto__),
      [S$._box$3]: dart.finalFieldType(hive.BoxBase$(E)),
      [S$._notifier]: dart.finalFieldType(change_notifier$.ChangeNotifier),
      [S$._store]: dart.finalFieldType(indexable_skip_list.IndexableSkipList$(dart.dynamic, frame$.Frame)),
      transactions: dart.finalFieldType(collection.ListQueue$(keystore$.KeyTransaction$(E))),
      [S$._deletedEntries]: dart.fieldType(core.int),
      [S$._autoIncrement]: dart.fieldType(core.int)
    }));
    return Keystore;
  });
  keystore$.Keystore = keystore$.Keystore$();
  dart.addTypeTests(keystore$.Keystore, _is_Keystore_default);
  change_notifier$.ChangeNotifier = class ChangeNotifier extends core.Object {
    static ['_#new#tearOff']() {
      return new change_notifier$.ChangeNotifier.new();
    }
    static ['_#debug#tearOff'](_streamController) {
      return new change_notifier$.ChangeNotifier.debug(_streamController);
    }
    notify(frame) {
      this[S$._streamController].add(new hive.BoxEvent.new(frame.key, frame.value, frame.deleted));
    }
    watch(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      if (key != null) {
        return this[S$._streamController].stream.where(dart.fn(it => dart.equals(it.key, key), T$.BoxEventTobool()));
      } else {
        return this[S$._streamController].stream;
      }
    }
    close() {
      return this[S$._streamController].close();
    }
  };
  (change_notifier$.ChangeNotifier.new = function() {
    this[S$._streamController] = T$.StreamControllerOfBoxEvent().broadcast();
    ;
  }).prototype = change_notifier$.ChangeNotifier.prototype;
  (change_notifier$.ChangeNotifier.debug = function(_streamController) {
    this[S$._streamController] = _streamController;
    ;
  }).prototype = change_notifier$.ChangeNotifier.prototype;
  dart.addTypeTests(change_notifier$.ChangeNotifier);
  dart.addTypeCaches(change_notifier$.ChangeNotifier);
  dart.setMethodSignature(change_notifier$.ChangeNotifier, () => ({
    __proto__: dart.getMethods(change_notifier$.ChangeNotifier.__proto__),
    notify: dart.fnType(dart.void, [frame$.Frame]),
    watch: dart.fnType(async.Stream$(hive.BoxEvent), [], {key: dart.dynamic}, {}),
    close: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setLibraryUri(change_notifier$.ChangeNotifier, I[139]);
  dart.setFieldSignature(change_notifier$.ChangeNotifier, () => ({
    __proto__: dart.getFields(change_notifier$.ChangeNotifier.__proto__),
    [S$._streamController]: dart.finalFieldType(async.StreamController$(hive.BoxEvent))
  }));
  const _is_IgnoredTypeAdapter_default = Symbol('_is_IgnoredTypeAdapter_default');
  ignored_type_adapter.IgnoredTypeAdapter$ = dart.generic(T => {
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    class IgnoredTypeAdapter extends core.Object {
      get typeId() {
        return this[S$.typeId$5];
      }
      set typeId(value) {
        super.typeId = value;
      }
      static ['_#new#tearOff'](T, typeId = 0) {
        return new (ignored_type_adapter.IgnoredTypeAdapter$(T)).new(typeId);
      }
      read(reader) {
        return null;
      }
      write(writer, obj) {
        __t$TN().as(obj);
      }
    }
    (IgnoredTypeAdapter.new = function(typeId = 0) {
      this[S$.typeId$5] = typeId;
      ;
    }).prototype = IgnoredTypeAdapter.prototype;
    dart.addTypeTests(IgnoredTypeAdapter);
    IgnoredTypeAdapter.prototype[_is_IgnoredTypeAdapter_default] = true;
    dart.addTypeCaches(IgnoredTypeAdapter);
    IgnoredTypeAdapter[dart.implements] = () => [hive.TypeAdapter$(dart.nullable(T))];
    dart.setMethodSignature(IgnoredTypeAdapter, () => ({
      __proto__: dart.getMethods(IgnoredTypeAdapter.__proto__),
      read: dart.fnType(dart.nullable(T), [hive.BinaryReader]),
      write: dart.fnType(dart.void, [hive.BinaryWriter, dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(IgnoredTypeAdapter, I[140]);
    dart.setFieldSignature(IgnoredTypeAdapter, () => ({
      __proto__: dart.getFields(IgnoredTypeAdapter.__proto__),
      typeId: dart.finalFieldType(core.int)
    }));
    return IgnoredTypeAdapter;
  });
  ignored_type_adapter.IgnoredTypeAdapter = ignored_type_adapter.IgnoredTypeAdapter$();
  dart.addTypeTests(ignored_type_adapter.IgnoredTypeAdapter, _is_IgnoredTypeAdapter_default);
  backend_manager.BackendManager = class BackendManager extends core.Object {
    static select(backendPreference = null) {
      switch (backendPreference) {
        default:
          {
            return new backend_manager$.BackendManager.new();
          }
      }
    }
  };
  (backend_manager.BackendManager.__ = function() {
    ;
  }).prototype = backend_manager.BackendManager.prototype;
  dart.addTypeTests(backend_manager.BackendManager);
  dart.addTypeCaches(backend_manager.BackendManager);
  dart.setStaticMethodSignature(backend_manager.BackendManager, () => ['select']);
  dart.setLibraryUri(backend_manager.BackendManager, I[141]);
  field_path_type.FieldPathType = class FieldPathType extends core._Enum {
    [S$._enumToString]() {
      return "FieldPathType." + this[S$._name];
    }
  };
  (field_path_type.FieldPathType.new = function(index, name) {
    field_path_type.FieldPathType.__proto__.new.call(this, index, name);
    ;
  }).prototype = field_path_type.FieldPathType.prototype;
  dart.addTypeTests(field_path_type.FieldPathType);
  dart.addTypeCaches(field_path_type.FieldPathType);
  dart.setMethodSignature(field_path_type.FieldPathType, () => ({
    __proto__: dart.getMethods(field_path_type.FieldPathType.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(field_path_type.FieldPathType, I[142]);
  dart.setStaticFieldSignature(field_path_type.FieldPathType, () => ['values', 'documentId']);
  dart.defineLazy(field_path_type.FieldPathType, {
    /*field_path_type.FieldPathType.values*/get values() {
      return C[106] || CT.C106;
    },
    /*field_path_type.FieldPathType.documentId*/get documentId() {
      return C[107] || CT.C107;
    }
  }, false);
  method_channel_firestore.MethodChannelFirebaseFirestore = class MethodChannelFirebaseFirestore extends platform_interface_firestore.FirebaseFirestorePlatform {
    get settings() {
      return this[S$.settings];
    }
    set settings(value) {
      this[S$.settings] = value;
    }
    static ['_#new#tearOff'](opts) {
      let app = opts && 'app' in opts ? opts.app : null;
      return new method_channel_firestore.MethodChannelFirebaseFirestore.new({app: app});
    }
    static querySnapshotChannel(id) {
      return new platform_channel.EventChannel.new("plugins.flutter.io/firebase_firestore/query/" + id, C[108] || CT.C108);
    }
    static documentSnapshotChannel(id) {
      return new platform_channel.EventChannel.new("plugins.flutter.io/firebase_firestore/document/" + id, C[108] || CT.C108);
    }
    static snapshotsInSyncChannel(id) {
      return new platform_channel.EventChannel.new("plugins.flutter.io/firebase_firestore/snapshotsInSync/" + id, C[108] || CT.C108);
    }
    static loadBundleChannel(id) {
      return new platform_channel.EventChannel.new("plugins.flutter.io/firebase_firestore/loadBundle/" + id, C[108] || CT.C108);
    }
    delegateFor(opts) {
      let app = opts && 'app' in opts ? opts.app : null;
      return new method_channel_firestore.MethodChannelFirebaseFirestore.new({app: app});
    }
    loadBundle(bundle) {
      return new method_channel_load_bundle_task.MethodChannelLoadBundleTask.new({task: method_channel_firestore.MethodChannelFirebaseFirestore.channel.invokeMethod(core.String, "LoadBundle#snapshots"), bundle: bundle, firestore: this});
    }
    namedQueryGet(name, opts) {
      let options = opts && 'options' in opts ? opts.options : C[10] || CT.C10;
      return async.async(platform_interface_query_snapshot.QuerySnapshotPlatform, function* namedQueryGet() {
        try {
          let data = (yield method_channel_firestore.MethodChannelFirebaseFirestore.channel.invokeMapMethod(core.String, dart.dynamic, "Firestore#namedQueryGet", new (T$.IdentityMapOfString$dynamic()).from(["name", name, "firestore", platform_interface_firestore.FirebaseFirestorePlatform.instance, "source", source$.getSourceString(options.source)])));
          return new method_channel_query_snapshot.MethodChannelQuerySnapshot.new(platform_interface_firestore.FirebaseFirestorePlatform.instance, dart.nullCheck(data));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            if (e[S$.$toString]()[S$.$contains]("Named query has not been found")) {
              core.Error.throwWithStackTrace(new firebase_core_platform_interface.FirebaseException.new({plugin: "cloud_firestore", code: "non-existent-named-query", message: "Named query has not been found. " + "Please check it has been loaded properly via loadBundle()."}), stack);
            }
            exception$.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      });
    }
    batch() {
      return new method_channel_write_batch.MethodChannelWriteBatch.new(this);
    }
    clearPersistence() {
      return async.async(dart.void, (function* clearPersistence() {
        try {
          yield method_channel_firestore.MethodChannelFirebaseFirestore.channel.invokeMethod(dart.void, "Firestore#clearPersistence", new (T$.IdentityMapOfString$dynamic()).from(["firestore", this]));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    enablePersistence(persistenceSettings = null) {
      return async.async(dart.void, function* enablePersistence() {
        dart.throw(new core.UnimplementedError.new("enablePersistence() is only available for Web. Use [Settings.persistenceEnabled] for other platforms."));
      });
    }
    collection(collectionPath) {
      return new method_channel_collection_reference.MethodChannelCollectionReference.new(this, collectionPath);
    }
    collectionGroup(collectionPath) {
      return new method_channel_query.MethodChannelQuery.new(this, collectionPath, {isCollectionGroupQuery: true});
    }
    disableNetwork() {
      return async.async(dart.void, (function* disableNetwork() {
        try {
          yield method_channel_firestore.MethodChannelFirebaseFirestore.channel.invokeMethod(dart.void, "Firestore#disableNetwork", new (T$.IdentityMapOfString$dynamic()).from(["firestore", this]));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    doc(documentPath) {
      return new method_channel_document_reference.MethodChannelDocumentReference.new(this, documentPath);
    }
    enableNetwork() {
      return async.async(dart.void, (function* enableNetwork() {
        try {
          yield method_channel_firestore.MethodChannelFirebaseFirestore.channel.invokeMethod(dart.void, "Firestore#enableNetwork", new (T$.IdentityMapOfString$dynamic()).from(["firestore", this]));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    snapshotsInSync() {
      let snapshotStream = null;
      let controller = null;
      function controller$35get() {
        let t133;
        t133 = controller;
        return t133 == null ? dart.throw(new _internal.LateError.localNI("controller")) : t133;
      }
      function controller$35set(controller$35param) {
        return controller = controller$35param;
      }
      controller$35set(T$.StreamControllerOfvoid().broadcast({onListen: dart.fn(() => async.async(dart.void, (function*() {
          let observerId = (yield method_channel_firestore.MethodChannelFirebaseFirestore.channel.invokeMethod(core.String, "SnapshotsInSync#setup"));
          snapshotStream = method_channel_firestore.MethodChannelFirebaseFirestore.snapshotsInSyncChannel(dart.nullCheck(observerId)).receiveBroadcastStream(new (T$.IdentityMapOfString$dynamic()).from(["firestore", this])).handleError(C[110] || CT.C110).listen(dart.fn(event => controller$35get().add(null), T$.dynamicTovoid()), {onError: dart.bind(controller$35get(), 'addError')});
        }).bind(this)), T$.VoidToFutureOfvoid()), onCancel: dart.fn(() => {
          let t135;
          t135 = snapshotStream;
          t135 == null ? null : t135.cancel();
        }, T$.VoidTovoid())}));
      return controller$35get().stream;
    }
    runTransaction(T, transactionHandler, opts) {
      let timeout = opts && 'timeout' in opts ? opts.timeout : C[8] || CT.C8;
      return async.async(T, (function* runTransaction() {
        if (!(timeout.inMilliseconds > 0)) dart.assertFailed("Transaction timeout must be more than 0 milliseconds", I[143], 225, 12, "timeout.inMilliseconds > 0");
        let transactionId = (yield method_channel_firestore.MethodChannelFirebaseFirestore.channel.invokeMethod(core.String, "Transaction#create"));
        let snapshotStream = null;
        let completer = async.Completer$(T).new();
        let result = null;
        let result$35isSet = false;
        function result$35get() {
          return result$35isSet ? result : dart.throw(new _internal.LateError.localNI("result"));
        }
        function result$35set(result$35param) {
          result$35isSet = true;
          return result = result$35param;
        }
        let eventChannel = new platform_channel.EventChannel.new("plugins.flutter.io/firebase_firestore/transaction/" + dart.str(transactionId), C[108] || CT.C108);
        snapshotStream = eventChannel.receiveBroadcastStream(new (T$.IdentityMapOfString$dynamic()).from(["firestore", this, "timeout", timeout.inMilliseconds])).listen(dart.fn(event => async.async(dart.void, function*() {
          if (dart.dsend(event, '_get', ["error"]) != null) {
            completer.completeError(new firebase_core_platform_interface.FirebaseException.new({plugin: "cloud_firestore", code: T$.StringN().as(dart.dsend(dart.dsend(event, '_get', ["error"]), '_get', ["code"])), message: T$.StringN().as(dart.dsend(dart.dsend(event, '_get', ["error"]), '_get', ["message"]))}));
            return;
          } else if (dart.equals(dart.dsend(event, '_get', ["complete"]), true)) {
            completer.complete(result$35get());
            return;
          }
          let transaction = new method_channel_transaction.MethodChannelTransaction.new(dart.nullCheck(transactionId), core.String.as(dart.dsend(event, '_get', ["appName"])));
          try {
            result$35set(T.as(yield transactionHandler(transaction)));
          } catch (e) {
            let error = dart.getThrown(e);
            let stack = dart.stackTrace(e);
            if (core.Object.is(error)) {
              yield method_channel_firestore.MethodChannelFirebaseFirestore.channel.invokeMethod(dart.dynamic, "Transaction#storeResult", new (T$.IdentityMapOfString$dynamic()).from(["transactionId", transactionId, "result", new (T$.IdentityMapOfString$String()).from(["type", "ERROR"])]));
              completer.completeError(error, stack);
              return;
            } else
              throw e;
          }
          yield method_channel_firestore.MethodChannelFirebaseFirestore.channel.invokeMethod(dart.dynamic, "Transaction#storeResult", new (T$.IdentityMapOfString$dynamic()).from(["transactionId", transactionId, "result", new (T$.IdentityMapOfString$Object()).from(["type", "SUCCESS", "commands", transaction.commands])]));
        }), T$.dynamicToFutureOfvoid()));
        return completer.future.whenComplete(dart.fn(() => {
          snapshotStream.cancel();
        }, T$.VoidToNull()));
      }).bind(this));
    }
    terminate() {
      return async.async(dart.void, (function* terminate() {
        try {
          yield method_channel_firestore.MethodChannelFirebaseFirestore.channel.invokeMethod(dart.void, "Firestore#terminate", new (T$.IdentityMapOfString$dynamic()).from(["firestore", this]));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    waitForPendingWrites() {
      return async.async(dart.void, (function* waitForPendingWrites() {
        try {
          yield method_channel_firestore.MethodChannelFirebaseFirestore.channel.invokeMethod(dart.void, "Firestore#waitForPendingWrites", new (T$.IdentityMapOfString$dynamic()).from(["firestore", this]));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
  };
  (method_channel_firestore.MethodChannelFirebaseFirestore.new = function(opts) {
    let app = opts && 'app' in opts ? opts.app : null;
    this[S$.settings] = C[9] || CT.C9;
    method_channel_firestore.MethodChannelFirebaseFirestore.__proto__.new.call(this, {appInstance: app});
    ;
  }).prototype = method_channel_firestore.MethodChannelFirebaseFirestore.prototype;
  dart.addTypeTests(method_channel_firestore.MethodChannelFirebaseFirestore);
  dart.addTypeCaches(method_channel_firestore.MethodChannelFirebaseFirestore);
  dart.setMethodSignature(method_channel_firestore.MethodChannelFirebaseFirestore, () => ({
    __proto__: dart.getMethods(method_channel_firestore.MethodChannelFirebaseFirestore.__proto__),
    runTransaction: dart.gFnType(T => [async.Future$(T), [dart.fnType(dart.nullable(async.Future$(dart.nullable(T))), [platform_interface_transaction.TransactionPlatform])], {timeout: core.Duration}, {}], T => [dart.nullable(core.Object)])
  }));
  dart.setStaticMethodSignature(method_channel_firestore.MethodChannelFirebaseFirestore, () => ['querySnapshotChannel', 'documentSnapshotChannel', 'snapshotsInSyncChannel', 'loadBundleChannel']);
  dart.setLibraryUri(method_channel_firestore.MethodChannelFirebaseFirestore, I[144]);
  dart.setFieldSignature(method_channel_firestore.MethodChannelFirebaseFirestore, () => ({
    __proto__: dart.getFields(method_channel_firestore.MethodChannelFirebaseFirestore.__proto__),
    settings: dart.fieldType(settings.Settings)
  }));
  dart.setStaticFieldSignature(method_channel_firestore.MethodChannelFirebaseFirestore, () => ['channel']);
  dart.defineLazy(method_channel_firestore.MethodChannelFirebaseFirestore, {
    /*method_channel_firestore.MethodChannelFirebaseFirestore.channel*/get channel() {
      return C[111] || CT.C111;
    },
    set channel(value) {}
  }, false);
  method_channel_field_value_factory.MethodChannelFieldValueFactory = class MethodChannelFieldValueFactory extends platform_interface_field_value_factory.FieldValueFactoryPlatform {
    arrayRemove(elements) {
      return new method_channel_field_value.MethodChannelFieldValue.new(method_channel_field_value.FieldValueType.arrayRemove, elements);
    }
    arrayUnion(elements) {
      return new method_channel_field_value.MethodChannelFieldValue.new(method_channel_field_value.FieldValueType.arrayUnion, elements);
    }
    delete() {
      return new method_channel_field_value.MethodChannelFieldValue.new(method_channel_field_value.FieldValueType.delete, null);
    }
    increment(value) {
      if (!(core.int.is(value) || typeof value == 'number')) dart.assertFailed(null, I[145], 31, 12, "value is int || value is double");
      if (typeof value == 'number') {
        return new method_channel_field_value.MethodChannelFieldValue.new(method_channel_field_value.FieldValueType.incrementDouble, value);
      } else if (core.int.is(value)) {
        return new method_channel_field_value.MethodChannelFieldValue.new(method_channel_field_value.FieldValueType.incrementInteger, value);
      }
      dart.throw(new core.StateError.new("MethodChannelFieldValue().increment() expects a \"num\" value"));
    }
    serverTimestamp() {
      return new method_channel_field_value.MethodChannelFieldValue.new(method_channel_field_value.FieldValueType.serverTimestamp, null);
    }
    static ['_#new#tearOff']() {
      return new method_channel_field_value_factory.MethodChannelFieldValueFactory.new();
    }
  };
  (method_channel_field_value_factory.MethodChannelFieldValueFactory.new = function() {
    method_channel_field_value_factory.MethodChannelFieldValueFactory.__proto__.new.call(this);
    ;
  }).prototype = method_channel_field_value_factory.MethodChannelFieldValueFactory.prototype;
  dart.addTypeTests(method_channel_field_value_factory.MethodChannelFieldValueFactory);
  dart.addTypeCaches(method_channel_field_value_factory.MethodChannelFieldValueFactory);
  dart.setMethodSignature(method_channel_field_value_factory.MethodChannelFieldValueFactory, () => ({
    __proto__: dart.getMethods(method_channel_field_value_factory.MethodChannelFieldValueFactory.__proto__),
    arrayRemove: dart.fnType(method_channel_field_value.MethodChannelFieldValue, [core.List]),
    arrayUnion: dart.fnType(method_channel_field_value.MethodChannelFieldValue, [core.List]),
    delete: dart.fnType(method_channel_field_value.MethodChannelFieldValue, []),
    increment: dart.fnType(method_channel_field_value.MethodChannelFieldValue, [core.num]),
    serverTimestamp: dart.fnType(method_channel_field_value.MethodChannelFieldValue, [])
  }));
  dart.setLibraryUri(method_channel_field_value_factory.MethodChannelFieldValueFactory, I[146]);
  method_channel_firebase_auth.MethodChannelFirebaseAuth = class MethodChannelFirebaseAuth extends platform_interface_firebase_auth.FirebaseAuthPlatform {
    get currentUser() {
      return this[S$.currentUser];
    }
    set currentUser(value) {
      this[S$.currentUser] = value;
    }
    get languageCode() {
      return this[S$.languageCode];
    }
    set languageCode(value) {
      this[S$.languageCode] = value;
    }
    [S$._createBroadcastStream](T) {
      return async.StreamController$(T).broadcast();
    }
    static get instance() {
      return new method_channel_firebase_auth.MethodChannelFirebaseAuth.__();
    }
    static ['_#_#tearOff']() {
      return new method_channel_firebase_auth.MethodChannelFirebaseAuth.__();
    }
    static ['_#new#tearOff'](opts) {
      let app = opts && 'app' in opts ? opts.app : null;
      return new method_channel_firebase_auth.MethodChannelFirebaseAuth.new({app: app});
    }
    sendAuthChangesEvent(appName, userPlatform) {
      if (!(method_channel_firebase_auth.MethodChannelFirebaseAuth._userChangesListeners[S$.$_get](appName) != null)) dart.assertFailed(null, I[147], 99, 12, "_userChangesListeners[appName] != null");
      dart.nullCheck(method_channel_firebase_auth.MethodChannelFirebaseAuth._userChangesListeners[S$.$_get](appName)).add(new (T$._ValueWrapperOfUserPlatform()).new(userPlatform));
    }
    [S$._handleAuthStateChangesListener](appName, $arguments) {
      return async.async(dart.void, function* _handleAuthStateChangesListener() {
        let streamController = dart.nullCheck(method_channel_firebase_auth.MethodChannelFirebaseAuth._authStateChangesListeners[S$.$_get](appName));
        let instance = dart.nullCheck(method_channel_firebase_auth.MethodChannelFirebaseAuth._methodChannelFirebaseAuthInstances[S$.$_get](appName));
        let userMap = $arguments[S$.$_get]("user");
        if (userMap == null) {
          instance.currentUser = null;
          streamController.add(C[112] || CT.C112);
        } else {
          let user = new method_channel_user.MethodChannelUser.new(instance, T$.MapOfString$dynamic().as(dart.dgsend(userMap, [core.String, dart.dynamic], 'cast', [])));
          instance.currentUser = user;
          streamController.add(new (T$._ValueWrapperOfUserPlatform()).new(instance.currentUser));
        }
      });
    }
    [S$._handleIdTokenChangesListener](appName, $arguments) {
      return async.async(dart.void, function* _handleIdTokenChangesListener() {
        let idTokenStreamController = dart.nullCheck(method_channel_firebase_auth.MethodChannelFirebaseAuth._idTokenChangesListeners[S$.$_get](appName));
        let userChangesStreamController = dart.nullCheck(method_channel_firebase_auth.MethodChannelFirebaseAuth._userChangesListeners[S$.$_get](appName));
        let instance = dart.nullCheck(method_channel_firebase_auth.MethodChannelFirebaseAuth._methodChannelFirebaseAuthInstances[S$.$_get](appName));
        let userMap = $arguments[S$.$_get]("user");
        if (userMap == null) {
          instance.currentUser = null;
          idTokenStreamController.add(C[112] || CT.C112);
          userChangesStreamController.add(C[112] || CT.C112);
        } else {
          let user = new method_channel_user.MethodChannelUser.new(instance, T$.MapOfString$dynamic().as(dart.dgsend(userMap, [core.String, dart.dynamic], 'cast', [])));
          instance.currentUser = user;
          idTokenStreamController.add(new (T$._ValueWrapperOfUserPlatform()).new(user));
          userChangesStreamController.add(new (T$._ValueWrapperOfUserPlatform()).new(user));
        }
      });
    }
    [S._withChannelDefaults](other) {
      let t142;
      t142 = new (T$.IdentityMapOfString$dynamic()).from(["appName", this.app.name, "tenantId", this.tenantId]);
      return (() => {
        t142[S$.$addAll](other);
        return t142;
      })();
    }
    delegateFor(opts) {
      let app = opts && 'app' in opts ? opts.app : null;
      return method_channel_firebase_auth.MethodChannelFirebaseAuth._methodChannelFirebaseAuthInstances[S$.$putIfAbsent](app.name, dart.fn(() => new method_channel_firebase_auth.MethodChannelFirebaseAuth.new({app: app}), T$.VoidToMethodChannelFirebaseAuth()));
    }
    setInitialValues(opts) {
      let currentUser = opts && 'currentUser' in opts ? opts.currentUser : null;
      let languageCode = opts && 'languageCode' in opts ? opts.languageCode : null;
      if (currentUser != null) {
        this.currentUser = new method_channel_user.MethodChannelUser.new(this, currentUser);
      }
      this.languageCode = languageCode;
      return this;
    }
    useAuthEmulator(host, port) {
      return async.async(dart.void, (function* useAuthEmulator() {
        try {
          yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMethod(dart.void, "Auth#useEmulator", this[S._withChannelDefaults](new (T$.IdentityMapOfString$dynamic()).from(["host", host, "port", port])));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$0.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    applyActionCode(code) {
      return async.async(dart.void, (function* applyActionCode() {
        try {
          yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMethod(dart.void, "Auth#applyActionCode", this[S._withChannelDefaults](new (T$.IdentityMapOfString$dynamic()).from(["code", code])));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$0.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    checkActionCode(code) {
      return async.async(action_code_info.ActionCodeInfo, (function* checkActionCode() {
        try {
          let result = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "Auth#checkActionCode", this[S._withChannelDefaults](new (T$.IdentityMapOfString$dynamic()).from(["code", code]))));
          return new action_code_info.ActionCodeInfo.new({operation: core.int.as(result[S$.$_get]("operation")), data: T$.LinkedHashMapOfString$dynamic().from(core.Map.as(result[S$.$_get]("data")))});
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$0.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    confirmPasswordReset(code, newPassword) {
      return async.async(dart.void, (function* confirmPasswordReset() {
        try {
          yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMethod(dart.void, "Auth#confirmPasswordReset", this[S._withChannelDefaults](new (T$.IdentityMapOfString$dynamic()).from(["code", code, "newPassword", newPassword])));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$0.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    createUserWithEmailAndPassword(email, password) {
      return async.async(platform_interface_user_credential.UserCredentialPlatform, (function* createUserWithEmailAndPassword() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "Auth#createUserWithEmailAndPassword", this[S._withChannelDefaults](new (T$.IdentityMapOfString$dynamic()).from(["email", email, "password", password]))));
          let userCredential = new method_channel_user_credential.MethodChannelUserCredential.new(this, data);
          this.currentUser = userCredential.user;
          return userCredential;
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$0.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    fetchSignInMethodsForEmail(email) {
      return async.async(T$.ListOfString(), (function* fetchSignInMethodsForEmail() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "Auth#fetchSignInMethodsForEmail", this[S._withChannelDefaults](new (T$.IdentityMapOfString$dynamic()).from(["email", email]))));
          return T$.ListOfString().from(core.Iterable.as(data[S$.$_get]("providers")));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$0.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    authStateChanges() {
      return new (T$._AsyncStarImplOfUserPlatformN()).new((function* authStateChanges(stream) {
        if (stream.add(this.currentUser)) return;
        yield;
        if (stream.addStream(dart.nullCheck(method_channel_firebase_auth.MethodChannelFirebaseAuth._authStateChangesListeners[S$.$_get](this.app.name)).stream.map(T$.UserPlatformN(), dart.fn(event => event.value, T$._ValueWrapperOfUserPlatformToUserPlatformN())))) return;
        yield;
      }).bind(this)).stream;
    }
    idTokenChanges() {
      return new (T$._AsyncStarImplOfUserPlatformN()).new((function* idTokenChanges(stream) {
        if (stream.add(this.currentUser)) return;
        yield;
        if (stream.addStream(dart.nullCheck(method_channel_firebase_auth.MethodChannelFirebaseAuth._idTokenChangesListeners[S$.$_get](this.app.name)).stream.map(T$.UserPlatformN(), dart.fn(event => event.value, T$._ValueWrapperOfUserPlatformToUserPlatformN())))) return;
        yield;
      }).bind(this)).stream;
    }
    userChanges() {
      return new (T$._AsyncStarImplOfUserPlatformN()).new((function* userChanges(stream) {
        if (stream.add(this.currentUser)) return;
        yield;
        if (stream.addStream(dart.nullCheck(method_channel_firebase_auth.MethodChannelFirebaseAuth._userChangesListeners[S$.$_get](this.app.name)).stream.map(T$.UserPlatformN(), dart.fn(event => event.value, T$._ValueWrapperOfUserPlatformToUserPlatformN())))) return;
        yield;
      }).bind(this)).stream;
    }
    sendPasswordResetEmail(email, actionCodeSettings = null) {
      return async.async(dart.void, (function* sendPasswordResetEmail() {
        let t148;
        try {
          yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMethod(dart.void, "Auth#sendPasswordResetEmail", this[S._withChannelDefaults](new (T$.IdentityMapOfString$dynamic()).from(["email", email, "actionCodeSettings", (t148 = actionCodeSettings, t148 == null ? null : t148.asMap())])));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$0.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    sendSignInLinkToEmail(email, actionCodeSettings) {
      return async.async(dart.void, (function* sendSignInLinkToEmail() {
        try {
          yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMethod(dart.void, "Auth#sendSignInLinkToEmail", this[S._withChannelDefaults](new (T$.IdentityMapOfString$dynamic()).from(["email", email, "actionCodeSettings", actionCodeSettings.asMap()])));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$0.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    setLanguageCode(languageCode) {
      return async.async(dart.void, (function* setLanguageCode() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "Auth#setLanguageCode", this[S._withChannelDefaults](new (T$.IdentityMapOfString$dynamic()).from(["appName", this.app.name, "languageCode", languageCode]))));
          this.languageCode = T$.StringN().as(data[S$.$_get]("languageCode"));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$0.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    setSettings(opts) {
      let appVerificationDisabledForTesting = opts && 'appVerificationDisabledForTesting' in opts ? opts.appVerificationDisabledForTesting : null;
      let userAccessGroup = opts && 'userAccessGroup' in opts ? opts.userAccessGroup : null;
      let phoneNumber = opts && 'phoneNumber' in opts ? opts.phoneNumber : null;
      let smsCode = opts && 'smsCode' in opts ? opts.smsCode : null;
      let forceRecaptchaFlow = opts && 'forceRecaptchaFlow' in opts ? opts.forceRecaptchaFlow : null;
      return async.async(dart.void, (function* setSettings() {
        if (phoneNumber != null && smsCode == null || phoneNumber == null && smsCode != null) {
          dart.throw(new core.ArgumentError.new("The [smsCode] and the [phoneNumber] must both be either 'null' or a 'String''."));
        }
        let $arguments = new (T$.IdentityMapOfString$dynamic()).from(["appVerificationDisabledForTesting", appVerificationDisabledForTesting]);
        if (io.Platform.isIOS || io.Platform.isMacOS) {
          $arguments[S$.$_set]("userAccessGroup", userAccessGroup);
        }
        if (io.Platform.isAndroid) {
          if (phoneNumber != null && smsCode != null) {
            $arguments[S$.$_set]("phoneNumber", phoneNumber);
            $arguments[S$.$_set]("smsCode", smsCode);
          }
          if (forceRecaptchaFlow != null) {
            $arguments[S$.$_set]("forceRecaptchaFlow", forceRecaptchaFlow);
          }
        }
        try {
          yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMethod(dart.dynamic, "Auth#setSettings", this[S._withChannelDefaults]($arguments));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$0.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    setPersistence(persistence) {
      dart.throw(new core.UnimplementedError.new("setPersistence() is only supported on web based platforms"));
    }
    signInAnonymously() {
      return async.async(platform_interface_user_credential.UserCredentialPlatform, (function* signInAnonymously() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "Auth#signInAnonymously", this[S._withChannelDefaults](new (T$.IdentityMapOfString$dynamic()).new())));
          let userCredential = new method_channel_user_credential.MethodChannelUserCredential.new(this, data);
          this.currentUser = userCredential.user;
          return userCredential;
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$0.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    signInWithCredential(credential) {
      return async.async(platform_interface_user_credential.UserCredentialPlatform, (function* signInWithCredential() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "Auth#signInWithCredential", this[S._withChannelDefaults](new (T$.IdentityMapOfString$dynamic()).from(["credential", credential.asMap()]))));
          let userCredential = new method_channel_user_credential.MethodChannelUserCredential.new(this, data);
          this.currentUser = userCredential.user;
          return userCredential;
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$0.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    signInWithCustomToken(token) {
      return async.async(platform_interface_user_credential.UserCredentialPlatform, (function* signInWithCustomToken() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "Auth#signInWithCustomToken", this[S._withChannelDefaults](new (T$.IdentityMapOfString$dynamic()).from(["token", token]))));
          let userCredential = new method_channel_user_credential.MethodChannelUserCredential.new(this, data);
          this.currentUser = userCredential.user;
          return userCredential;
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$0.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    signInWithEmailAndPassword(email, password) {
      return async.async(platform_interface_user_credential.UserCredentialPlatform, (function* signInWithEmailAndPassword() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "Auth#signInWithEmailAndPassword", this[S._withChannelDefaults](new (T$.IdentityMapOfString$dynamic()).from(["email", email, "password", password]))));
          let userCredential = new method_channel_user_credential.MethodChannelUserCredential.new(this, data);
          this.currentUser = userCredential.user;
          return userCredential;
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$0.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    signInWithEmailLink(email, emailLink) {
      return async.async(platform_interface_user_credential.UserCredentialPlatform, (function* signInWithEmailLink() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "Auth#signInWithEmailLink", this[S._withChannelDefaults](new (T$.IdentityMapOfString$dynamic()).from(["email", email, "emailLink", emailLink]))));
          let userCredential = new method_channel_user_credential.MethodChannelUserCredential.new(this, data);
          this.currentUser = userCredential.user;
          return userCredential;
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$0.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    signInWithPopup(provider) {
      dart.throw(new core.UnimplementedError.new("signInWithPopup() is only supported on web based platforms"));
    }
    signInWithRedirect(provider) {
      dart.throw(new core.UnimplementedError.new("signInWithRedirect() is only supported on web based platforms"));
    }
    signOut() {
      return async.async(dart.void, (function* signOut() {
        try {
          yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMethod(dart.void, "Auth#signOut", this[S._withChannelDefaults](new (T$.IdentityMapOfString$dynamic()).new()));
          this.currentUser = null;
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$0.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    verifyPasswordResetCode(code) {
      return async.async(core.String, (function* verifyPasswordResetCode() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "Auth#verifyPasswordResetCode", this[S._withChannelDefaults](new (T$.IdentityMapOfString$dynamic()).from(["code", code]))));
          return T$.FutureOrOfString().as(data[S$.$_get]("email"));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$0.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    signInWithAuthProvider(provider) {
      return async.async(platform_interface_user_credential.UserCredentialPlatform, (function* signInWithAuthProvider() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "Auth#signInWithAuthProvider", this[S._withChannelDefaults](new (T$.IdentityMapOfString$dynamic()).from(["signInProvider", provider.providerId]))));
          let userCredential = new method_channel_user_credential.MethodChannelUserCredential.new(this, data);
          this.currentUser = userCredential.user;
          return userCredential;
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$0.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    verifyPhoneNumber(opts) {
      let phoneNumber = opts && 'phoneNumber' in opts ? opts.phoneNumber : null;
      let verificationCompleted = opts && 'verificationCompleted' in opts ? opts.verificationCompleted : null;
      let verificationFailed = opts && 'verificationFailed' in opts ? opts.verificationFailed : null;
      let codeSent = opts && 'codeSent' in opts ? opts.codeSent : null;
      let codeAutoRetrievalTimeout = opts && 'codeAutoRetrievalTimeout' in opts ? opts.codeAutoRetrievalTimeout : null;
      let autoRetrievedSmsCodeForTesting = opts && 'autoRetrievedSmsCodeForTesting' in opts ? opts.autoRetrievedSmsCodeForTesting : null;
      let timeout = opts && 'timeout' in opts ? opts.timeout : C[8] || CT.C8;
      let forceResendingToken = opts && 'forceResendingToken' in opts ? opts.forceResendingToken : null;
      return async.async(dart.void, (function* verifyPhoneNumber() {
        if (platform.defaultTargetPlatform === platform.TargetPlatform.macOS) {
          dart.throw(new core.UnimplementedError.new("verifyPhoneNumber() is not available on MacOS platforms."));
        }
        try {
          let eventChannelName = (yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMethod(core.String, "Auth#verifyPhoneNumber", this[S._withChannelDefaults](new (T$.IdentityMapOfString$dynamic()).from(["phoneNumber", phoneNumber, "timeout", timeout.inMilliseconds, "forceResendingToken", forceResendingToken, "autoRetrievedSmsCodeForTesting", autoRetrievedSmsCodeForTesting]))));
          new platform_channel.EventChannel.new(dart.nullCheck(eventChannelName)).receiveBroadcastStream().listen(dart.fn($arguments => {
            let t160, t160$;
            let name = dart.dsend($arguments, '_get', ["name"]);
            if (dart.equals(name, "Auth#phoneVerificationCompleted")) {
              let token = core.int.as(dart.dsend($arguments, '_get', ["token"]));
              let smsCode = T$.StringN().as(dart.dsend($arguments, '_get', ["smsCode"]));
              let phoneAuthCredential = phone_auth.PhoneAuthProvider.credentialFromToken(token, {smsCode: smsCode});
              verificationCompleted(phoneAuthCredential);
            } else if (dart.equals(name, "Auth#phoneVerificationFailed")) {
              let error = T$.MapN().as(dart.dsend($arguments, '_get', ["error"]));
              let details = T$.MapN().as((t160 = error, t160 == null ? null : t160[S$.$_get]("details")));
              let exception = new firebase_auth_exception.FirebaseAuthException.new({message: T$.StringN().as(details != null ? details[S$.$_get]("message") : (t160$ = error, t160$ == null ? null : t160$[S$.$_get]("message"))), code: core.String.as(details != null ? details[S$.$_get]("code") : "unknown")});
              verificationFailed(exception);
            } else if (dart.equals(name, "Auth#phoneCodeSent")) {
              let verificationId = core.String.as(dart.dsend($arguments, '_get', ["verificationId"]));
              let forceResendingToken = T$.intN().as(dart.dsend($arguments, '_get', ["forceResendingToken"]));
              codeSent(verificationId, forceResendingToken);
            } else if (dart.equals(name, "Auth#phoneCodeAutoRetrievalTimeout")) {
              let verificationId = core.String.as(dart.dsend($arguments, '_get', ["verificationId"]));
              codeAutoRetrievalTimeout(verificationId);
            }
          }, T$.dynamicTovoid()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$0.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
  };
  (method_channel_firebase_auth.MethodChannelFirebaseAuth.__ = function() {
    this[S$.currentUser] = null;
    this[S$.languageCode] = null;
    method_channel_firebase_auth.MethodChannelFirebaseAuth.__proto__.new.call(this, {appInstance: null});
    ;
  }).prototype = method_channel_firebase_auth.MethodChannelFirebaseAuth.prototype;
  (method_channel_firebase_auth.MethodChannelFirebaseAuth.new = function(opts) {
    let app = opts && 'app' in opts ? opts.app : null;
    this[S$.currentUser] = null;
    this[S$.languageCode] = null;
    method_channel_firebase_auth.MethodChannelFirebaseAuth.__proto__.new.call(this, {appInstance: app});
    method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMethod(core.String, "Auth#registerIdTokenListener", new (T$.IdentityMapOfString$String()).from(["appName", app.name])).then(core.Null, dart.fn(channelName => {
      let events = new platform_channel.EventChannel.new(dart.nullCheck(channelName), method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.codec);
      events.receiveBroadcastStream().listen(dart.fn($arguments => {
        this[S$._handleIdTokenChangesListener](app.name, core.Map.as($arguments));
      }, T$.dynamicTovoid()));
    }, T$.StringNToNull()));
    method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMethod(core.String, "Auth#registerAuthStateListener", new (T$.IdentityMapOfString$String()).from(["appName", app.name])).then(core.Null, dart.fn(channelName => {
      let events = new platform_channel.EventChannel.new(dart.nullCheck(channelName), method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.codec);
      events.receiveBroadcastStream().listen(dart.fn($arguments => {
        this[S$._handleAuthStateChangesListener](app.name, core.Map.as($arguments));
      }, T$.dynamicTovoid()));
    }, T$.StringNToNull()));
    method_channel_firebase_auth.MethodChannelFirebaseAuth._authStateChangesListeners[S$.$_set](app.name, this[S$._createBroadcastStream](T$._ValueWrapperOfUserPlatform()));
    method_channel_firebase_auth.MethodChannelFirebaseAuth._idTokenChangesListeners[S$.$_set](app.name, this[S$._createBroadcastStream](T$._ValueWrapperOfUserPlatform()));
    method_channel_firebase_auth.MethodChannelFirebaseAuth._userChangesListeners[S$.$_set](app.name, this[S$._createBroadcastStream](T$._ValueWrapperOfUserPlatform()));
  }).prototype = method_channel_firebase_auth.MethodChannelFirebaseAuth.prototype;
  dart.addTypeTests(method_channel_firebase_auth.MethodChannelFirebaseAuth);
  dart.addTypeCaches(method_channel_firebase_auth.MethodChannelFirebaseAuth);
  dart.setMethodSignature(method_channel_firebase_auth.MethodChannelFirebaseAuth, () => ({
    __proto__: dart.getMethods(method_channel_firebase_auth.MethodChannelFirebaseAuth.__proto__),
    [S$._createBroadcastStream]: dart.gFnType(T => [async.StreamController$(T), []], T => [dart.nullable(core.Object)]),
    [S$._handleAuthStateChangesListener]: dart.fnType(async.Future$(dart.void), [core.String, core.Map]),
    [S$._handleIdTokenChangesListener]: dart.fnType(async.Future$(dart.void), [core.String, core.Map]),
    [S._withChannelDefaults]: dart.fnType(core.Map$(core.String, dart.dynamic), [core.Map$(core.String, dart.dynamic)]),
    setInitialValues: dart.fnType(method_channel_firebase_auth.MethodChannelFirebaseAuth, [], {currentUser: dart.nullable(core.Map$(core.String, dart.dynamic)), languageCode: dart.nullable(core.String)}, {})
  }));
  dart.setStaticGetterSignature(method_channel_firebase_auth.MethodChannelFirebaseAuth, () => ['instance']);
  dart.setLibraryUri(method_channel_firebase_auth.MethodChannelFirebaseAuth, I[148]);
  dart.setFieldSignature(method_channel_firebase_auth.MethodChannelFirebaseAuth, () => ({
    __proto__: dart.getFields(method_channel_firebase_auth.MethodChannelFirebaseAuth.__proto__),
    currentUser: dart.fieldType(dart.nullable(platform_interface_user.UserPlatform)),
    languageCode: dart.fieldType(dart.nullable(core.String))
  }));
  dart.setStaticFieldSignature(method_channel_firebase_auth.MethodChannelFirebaseAuth, () => ['channel', '_methodChannelFirebaseAuthInstances', '_authStateChangesListeners', '_idTokenChangesListeners', '_userChangesListeners']);
  dart.defineLazy(method_channel_firebase_auth.MethodChannelFirebaseAuth, {
    /*method_channel_firebase_auth.MethodChannelFirebaseAuth.channel*/get channel() {
      return C[113] || CT.C113;
    },
    /*method_channel_firebase_auth.MethodChannelFirebaseAuth._methodChannelFirebaseAuthInstances*/get _methodChannelFirebaseAuthInstances() {
      return new (T$.IdentityMapOfString$MethodChannelFirebaseAuth()).new();
    },
    set _methodChannelFirebaseAuthInstances(value) {},
    /*method_channel_firebase_auth.MethodChannelFirebaseAuth._authStateChangesListeners*/get _authStateChangesListeners() {
      return new (T$.IdentityMapOfString$StreamControllerOf_ValueWrapperOfUserPlatform()).new();
    },
    /*method_channel_firebase_auth.MethodChannelFirebaseAuth._idTokenChangesListeners*/get _idTokenChangesListeners() {
      return new (T$.IdentityMapOfString$StreamControllerOf_ValueWrapperOfUserPlatform()).new();
    },
    /*method_channel_firebase_auth.MethodChannelFirebaseAuth._userChangesListeners*/get _userChangesListeners() {
      return new (T$.IdentityMapOfString$StreamControllerOf_ValueWrapperOfUserPlatform()).new();
    }
  }, false);
  const _is__ValueWrapper_default = Symbol('_is__ValueWrapper_default');
  method_channel_firebase_auth._ValueWrapper$ = dart.generic(T => {
    class _ValueWrapper extends core.Object {
      get value() {
        return this[S.value$2];
      }
      set value(value) {
        super.value = value;
      }
      static ['_#new#tearOff'](T, value) {
        return new (method_channel_firebase_auth._ValueWrapper$(T)).new(value);
      }
      static ['_#absent#tearOff'](T) {
        return new (method_channel_firebase_auth._ValueWrapper$(T)).absent();
      }
    }
    (_ValueWrapper.new = function(value) {
      this[S.value$2] = value;
      ;
    }).prototype = _ValueWrapper.prototype;
    (_ValueWrapper.absent = function() {
      this[S.value$2] = null;
      ;
    }).prototype = _ValueWrapper.prototype;
    dart.addTypeTests(_ValueWrapper);
    _ValueWrapper.prototype[_is__ValueWrapper_default] = true;
    dart.addTypeCaches(_ValueWrapper);
    dart.setLibraryUri(_ValueWrapper, I[148]);
    dart.setFieldSignature(_ValueWrapper, () => ({
      __proto__: dart.getFields(_ValueWrapper.__proto__),
      value: dart.finalFieldType(dart.nullable(T))
    }));
    return _ValueWrapper;
  });
  method_channel_firebase_auth._ValueWrapper = method_channel_firebase_auth._ValueWrapper$();
  dart.addTypeTests(method_channel_firebase_auth._ValueWrapper, _is__ValueWrapper_default);
  authentication_challenge.AuthenticationChallenge = class AuthenticationChallenge extends core.Object {
    get scheme() {
      return this[S.scheme];
    }
    set scheme(value) {
      super.scheme = value;
    }
    get parameters() {
      return this[S.parameters$1];
    }
    set parameters(value) {
      super.parameters = value;
    }
    static parseHeader(header) {
      return utils$2.wrapFormatException(T$.ListOfAuthenticationChallenge(), "authentication header", header, dart.fn(() => {
        let scanner = new string_scanner.StringScanner.new(header);
        scanner.scan(scan.whitespace);
        let challenges = scan.parseList(authentication_challenge.AuthenticationChallenge, scanner, dart.fn(() => {
          let scheme = authentication_challenge.AuthenticationChallenge._scanScheme(scanner, {whitespaceName: "\" \" or \"=\""});
          let params = new (T$.IdentityMapOfString$String()).new();
          while (scanner.scan(",")) {
            scanner.scan(scan.whitespace);
          }
          authentication_challenge.AuthenticationChallenge._scanAuthParam(scanner, params);
          let beforeComma = scanner.position;
          while (scanner.scan(",")) {
            scanner.scan(scan.whitespace);
            if (scanner.matches(",") || scanner.isDone) continue;
            scanner.expect(scan.token, {name: "a token"});
            let name = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));
            scanner.scan(scan.whitespace);
            if (!scanner.scan("=")) {
              scanner.position = beforeComma;
              break;
            }
            scanner.scan(scan.whitespace);
            if (scanner.scan(scan.token)) {
              params[S$.$_set](name, dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0)));
            } else {
              params[S$.$_set](name, scan.expectQuotedString(scanner, {name: "a token or a quoted string"}));
            }
            scanner.scan(scan.whitespace);
            beforeComma = scanner.position;
          }
          return new authentication_challenge.AuthenticationChallenge.new(scheme, params);
        }, T$.VoidToAuthenticationChallenge()));
        scanner.expectDone();
        return challenges;
      }, T$.VoidToListOfAuthenticationChallenge()));
    }
    static parse(challenge) {
      return utils$2.wrapFormatException(authentication_challenge.AuthenticationChallenge, "authentication challenge", challenge, dart.fn(() => {
        let scanner = new string_scanner.StringScanner.new(challenge);
        scanner.scan(scan.whitespace);
        let scheme = authentication_challenge.AuthenticationChallenge._scanScheme(scanner);
        let params = new (T$.IdentityMapOfString$String()).new();
        scan.parseList(dart.void, scanner, dart.fn(() => authentication_challenge.AuthenticationChallenge._scanAuthParam(scanner, params), T$.VoidTovoid()));
        scanner.expectDone();
        return new authentication_challenge.AuthenticationChallenge.new(scheme, params);
      }, T$.VoidToAuthenticationChallenge()));
    }
    static ['_#parse#tearOff'](challenge) {
      return authentication_challenge.AuthenticationChallenge.parse(challenge);
    }
    static _scanScheme(scanner, opts) {
      let whitespaceName = opts && 'whitespaceName' in opts ? opts.whitespaceName : null;
      scanner.expect(scan.token, {name: "a token"});
      let scheme = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0))[S$.$toLowerCase]();
      scanner.scan(scan.whitespace);
      if (scanner.lastMatch == null || !dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0))[S$.$contains](" ")) {
        scanner.expect(" ", {name: whitespaceName});
      }
      return scheme;
    }
    static _scanAuthParam(scanner, params) {
      scanner.expect(scan.token, {name: "a token"});
      let name = dart.nullCheck(scanner.lastMatch)._get(0);
      scanner.scan(scan.whitespace);
      scanner.expect("=");
      scanner.scan(scan.whitespace);
      if (scanner.scan(scan.token)) {
        params[S$.$_set](name, dart.nullCheck(scanner.lastMatch)._get(0));
      } else {
        params[S$.$_set](name, scan.expectQuotedString(scanner, {name: "a token or a quoted string"}));
      }
      scanner.scan(scan.whitespace);
    }
    static ['_#new#tearOff'](scheme, parameters) {
      return new authentication_challenge.AuthenticationChallenge.new(scheme, parameters);
    }
  };
  (authentication_challenge.AuthenticationChallenge.new = function(scheme, parameters) {
    this[S.scheme] = scheme;
    this[S.parameters$1] = new (T$.UnmodifiableMapViewOfString$String()).new(new (T$.CaseInsensitiveMapOfString()).from(parameters));
    ;
  }).prototype = authentication_challenge.AuthenticationChallenge.prototype;
  dart.addTypeTests(authentication_challenge.AuthenticationChallenge);
  dart.addTypeCaches(authentication_challenge.AuthenticationChallenge);
  dart.setStaticMethodSignature(authentication_challenge.AuthenticationChallenge, () => ['parseHeader', 'parse', '_scanScheme', '_scanAuthParam']);
  dart.setLibraryUri(authentication_challenge.AuthenticationChallenge, I[149]);
  dart.setFieldSignature(authentication_challenge.AuthenticationChallenge, () => ({
    __proto__: dart.getFields(authentication_challenge.AuthenticationChallenge.__proto__),
    scheme: dart.finalFieldType(core.String),
    parameters: dart.finalFieldType(core.Map$(core.String, core.String))
  }));
  const _is_CaseInsensitiveMap_default = Symbol('_is_CaseInsensitiveMap_default');
  case_insensitive_map.CaseInsensitiveMap$ = dart.generic(V => {
    class CaseInsensitiveMap extends canonicalized_map.CanonicalizedMap$(core.String, core.String, V) {
      static ['_#new#tearOff'](V) {
        return new (case_insensitive_map.CaseInsensitiveMap$(V)).new();
      }
      static ['_#from#tearOff'](V, other) {
        return new (case_insensitive_map.CaseInsensitiveMap$(V)).from(other);
      }
    }
    (CaseInsensitiveMap.new = function() {
      CaseInsensitiveMap.__proto__.new.call(this, dart.fn(key => key[S$.$toLowerCase](), T$.StringToString()));
      ;
    }).prototype = CaseInsensitiveMap.prototype;
    (CaseInsensitiveMap.from = function(other) {
      CaseInsensitiveMap.__proto__.from.call(this, other, dart.fn(key => key[S$.$toLowerCase](), T$.StringToString()));
      ;
    }).prototype = CaseInsensitiveMap.prototype;
    dart.addTypeTests(CaseInsensitiveMap);
    CaseInsensitiveMap.prototype[_is_CaseInsensitiveMap_default] = true;
    dart.addTypeCaches(CaseInsensitiveMap);
    dart.setLibraryUri(CaseInsensitiveMap, I[150]);
    return CaseInsensitiveMap;
  });
  case_insensitive_map.CaseInsensitiveMap = case_insensitive_map.CaseInsensitiveMap$();
  dart.addTypeTests(case_insensitive_map.CaseInsensitiveMap, _is_CaseInsensitiveMap_default);
  chunked_coding.ChunkedCodingCodec = class ChunkedCodingCodec extends convert.Codec$(core.List$(core.int), core.List$(core.int)) {
    get encoder() {
      return encoder.chunkedCodingEncoder;
    }
    get decoder() {
      return decoder.chunkedCodingDecoder;
    }
    static ['_#_#tearOff']() {
      return new chunked_coding.ChunkedCodingCodec.__();
    }
  };
  (chunked_coding.ChunkedCodingCodec.__ = function() {
    chunked_coding.ChunkedCodingCodec.__proto__.new.call(this);
    ;
  }).prototype = chunked_coding.ChunkedCodingCodec.prototype;
  dart.addTypeTests(chunked_coding.ChunkedCodingCodec);
  dart.addTypeCaches(chunked_coding.ChunkedCodingCodec);
  dart.setGetterSignature(chunked_coding.ChunkedCodingCodec, () => ({
    __proto__: dart.getGetters(chunked_coding.ChunkedCodingCodec.__proto__),
    encoder: encoder.ChunkedCodingEncoder,
    decoder: decoder.ChunkedCodingDecoder
  }));
  dart.setLibraryUri(chunked_coding.ChunkedCodingCodec, I[151]);
  dart.defineLazy(chunked_coding, {
    /*chunked_coding.chunkedCoding*/get chunkedCoding() {
      return C[116] || CT.C116;
    }
  }, false);
  http_date.formatHttpDate = function formatHttpDate(date) {
    let t161;
    date = date.toUtc();
    let buffer = (t161 = new core.StringBuffer.new(), (() => {
      t161.write(http_date._weekdays[S$.$_get](date.weekday - 1));
      t161.write(", ");
      t161.write(date.day <= 9 ? "0" : "");
      t161.write(date.day[S$.$toString]());
      t161.write(" ");
      t161.write(http_date._months[S$.$_get](date.month - 1));
      t161.write(" ");
      t161.write(date.year[S$.$toString]());
      t161.write(date.hour <= 9 ? " 0" : " ");
      t161.write(date.hour[S$.$toString]());
      t161.write(date.minute <= 9 ? ":0" : ":");
      t161.write(date.minute[S$.$toString]());
      t161.write(date.second <= 9 ? ":0" : ":");
      t161.write(date.second[S$.$toString]());
      t161.write(" GMT");
      return t161;
    })());
    return buffer.toString();
  };
  http_date.parseHttpDate = function parseHttpDate(date) {
    return utils$2.wrapFormatException(core.DateTime, "HTTP date", date, dart.fn(() => {
      let scanner = new string_scanner.StringScanner.new(date);
      if (scanner.scan(http_date._longWeekdayRegExp)) {
        scanner.expect(", ");
        let day = http_date._parseInt(scanner, 2);
        scanner.expect("-");
        let month = http_date._parseMonth(scanner);
        scanner.expect("-");
        let year = 1900 + http_date._parseInt(scanner, 2);
        scanner.expect(" ");
        let time = http_date._parseTime(scanner);
        scanner.expect(" GMT");
        scanner.expectDone();
        return http_date._makeDateTime(year, month, day, time);
      }
      scanner.expect(http_date._shortWeekdayRegExp);
      if (scanner.scan(", ")) {
        let day = http_date._parseInt(scanner, 2);
        scanner.expect(" ");
        let month = http_date._parseMonth(scanner);
        scanner.expect(" ");
        let year = http_date._parseInt(scanner, 4);
        scanner.expect(" ");
        let time = http_date._parseTime(scanner);
        scanner.expect(" GMT");
        scanner.expectDone();
        return http_date._makeDateTime(year, month, day, time);
      }
      scanner.expect(" ");
      let month = http_date._parseMonth(scanner);
      scanner.expect(" ");
      let day = scanner.scan(" ") ? http_date._parseInt(scanner, 1) : http_date._parseInt(scanner, 2);
      scanner.expect(" ");
      let time = http_date._parseTime(scanner);
      scanner.expect(" ");
      let year = http_date._parseInt(scanner, 4);
      scanner.expectDone();
      return http_date._makeDateTime(year, month, day, time);
    }, T$.VoidToDateTime()));
  };
  http_date._parseMonth = function _parseMonth(scanner) {
    scanner.expect(http_date._monthRegExp);
    return http_date._months[S$.$indexOf](dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0))) + 1;
  };
  http_date._parseInt = function _parseInt(scanner, digits) {
    scanner.expect(http_date._digitRegExp);
    if (dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0)).length !== digits) {
      scanner.error("expected a " + dart.str(digits) + "-digit number.");
    }
    return core.int.parse(dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0)));
  };
  http_date._parseTime = function _parseTime(scanner) {
    let hours = http_date._parseInt(scanner, 2);
    if (hours >= 24) scanner.error("hours may not be greater than 24.");
    scanner.expect(":");
    let minutes = http_date._parseInt(scanner, 2);
    if (minutes >= 60) scanner.error("minutes may not be greater than 60.");
    scanner.expect(":");
    let seconds = http_date._parseInt(scanner, 2);
    if (seconds >= 60) scanner.error("seconds may not be greater than 60.");
    return new core.DateTime.new(1, 1, 1, hours, minutes, seconds);
  };
  http_date._makeDateTime = function _makeDateTime(year, month, day, time) {
    let dateTime = new core.DateTime.utc(year, month, day, time.hour, time.minute, time.second);
    if (dateTime.month !== month) {
      dart.throw(new core.FormatException.new("invalid day '" + dart.str(day) + "' for month '" + dart.str(month) + "'."));
    }
    return dateTime;
  };
  dart.defineLazy(http_date, {
    /*http_date._weekdays*/get _weekdays() {
      return C[117] || CT.C117;
    },
    /*http_date._months*/get _months() {
      return C[118] || CT.C118;
    },
    /*http_date._shortWeekdayRegExp*/get _shortWeekdayRegExp() {
      return core.RegExp.new("Mon|Tue|Wed|Thu|Fri|Sat|Sun");
    },
    /*http_date._longWeekdayRegExp*/get _longWeekdayRegExp() {
      return core.RegExp.new("Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday");
    },
    /*http_date._monthRegExp*/get _monthRegExp() {
      return core.RegExp.new("Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec");
    },
    /*http_date._digitRegExp*/get _digitRegExp() {
      return core.RegExp.new("\\d+");
    }
  }, false);
  media_type.MediaType = class MediaType extends core.Object {
    get type() {
      return this[S.type$1];
    }
    set type(value) {
      super.type = value;
    }
    get subtype() {
      return this[S.subtype];
    }
    set subtype(value) {
      super.subtype = value;
    }
    get parameters() {
      return this[S.parameters$2];
    }
    set parameters(value) {
      super.parameters = value;
    }
    get mimeType() {
      return this.type + "/" + this.subtype;
    }
    static parse(mediaType) {
      return utils$2.wrapFormatException(media_type.MediaType, "media type", mediaType, dart.fn(() => {
        let scanner = new string_scanner.StringScanner.new(mediaType);
        scanner.scan(scan.whitespace);
        scanner.expect(scan.token);
        let type = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));
        scanner.expect("/");
        scanner.expect(scan.token);
        let subtype = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));
        scanner.scan(scan.whitespace);
        let parameters = new (T$.IdentityMapOfString$String()).new();
        while (scanner.scan(";")) {
          scanner.scan(scan.whitespace);
          scanner.expect(scan.token);
          let attribute = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));
          scanner.expect("=");
          let value = null;
          if (scanner.scan(scan.token)) {
            value = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));
          } else {
            value = scan.expectQuotedString(scanner);
          }
          scanner.scan(scan.whitespace);
          parameters[S$.$_set](attribute, value);
        }
        scanner.expectDone();
        return new media_type.MediaType.new(type, subtype, parameters);
      }, T$.VoidToMediaType()));
    }
    static ['_#parse#tearOff'](mediaType) {
      return media_type.MediaType.parse(mediaType);
    }
    static ['_#new#tearOff'](type, subtype, parameters = null) {
      return new media_type.MediaType.new(type, subtype, parameters);
    }
    change(opts) {
      let type = opts && 'type' in opts ? opts.type : null;
      let subtype = opts && 'subtype' in opts ? opts.subtype : null;
      let mimeType = opts && 'mimeType' in opts ? opts.mimeType : null;
      let parameters = opts && 'parameters' in opts ? opts.parameters : null;
      let clearParameters = opts && 'clearParameters' in opts ? opts.clearParameters : false;
      if (mimeType != null) {
        if (type != null) {
          dart.throw(new core.ArgumentError.new("You may not pass both [type] and [mimeType]."));
        } else if (subtype != null) {
          dart.throw(new core.ArgumentError.new("You may not pass both [subtype] and " + "[mimeType]."));
        }
        let segments = mimeType[S$.$split]("/");
        if (segments[S$.$length] !== 2) {
          dart.throw(new core.FormatException.new("Invalid mime type \"" + dart.str(mimeType) + "\"."));
        }
        type = segments[S$.$_get](0);
        subtype = segments[S$.$_get](1);
      }
      type == null ? type = this.type : null;
      subtype == null ? subtype = this.subtype : null;
      parameters == null ? parameters = new (T$.IdentityMapOfString$String()).new() : null;
      if (!clearParameters) {
        let newParameters = parameters;
        parameters = T$.LinkedHashMapOfString$String().from(this.parameters);
        parameters[S$.$addAll](newParameters);
      }
      return new media_type.MediaType.new(type, subtype, parameters);
    }
    toString() {
      let t161;
      let buffer = (t161 = new core.StringBuffer.new(), (() => {
        t161.write(this.type);
        t161.write("/");
        t161.write(this.subtype);
        return t161;
      })());
      this.parameters[S$.$forEach](dart.fn((attribute, value) => {
        let t161;
        buffer.write("; " + attribute + "=");
        if (scan.nonToken.hasMatch(value)) {
          t161 = buffer;
          (() => {
            t161.write("\"");
            t161.write(value[S.$replaceAllMapped](media_type._escapedChar, dart.fn(match => "\\" + dart.str(match._get(0)), T$.MatchToString())));
            t161.write("\"");
            return t161;
          })();
        } else {
          buffer.write(value);
        }
      }, T$.StringAndStringTovoid()));
      return buffer.toString();
    }
  };
  (media_type.MediaType.new = function(type, subtype, parameters = null) {
    this[S.type$1] = type[S$.$toLowerCase]();
    this[S.subtype] = subtype[S$.$toLowerCase]();
    this[S.parameters$2] = new (T$.UnmodifiableMapViewOfString$String()).new(parameters == null ? new (T$.IdentityMapOfString$String()).new() : new (T$.CaseInsensitiveMapOfString()).from(parameters));
    ;
  }).prototype = media_type.MediaType.prototype;
  dart.addTypeTests(media_type.MediaType);
  dart.addTypeCaches(media_type.MediaType);
  dart.setMethodSignature(media_type.MediaType, () => ({
    __proto__: dart.getMethods(media_type.MediaType.__proto__),
    change: dart.fnType(media_type.MediaType, [], {clearParameters: core.bool, mimeType: dart.nullable(core.String), parameters: dart.nullable(core.Map$(core.String, core.String)), subtype: dart.nullable(core.String), type: dart.nullable(core.String)}, {})
  }));
  dart.setStaticMethodSignature(media_type.MediaType, () => ['parse']);
  dart.setGetterSignature(media_type.MediaType, () => ({
    __proto__: dart.getGetters(media_type.MediaType.__proto__),
    mimeType: core.String
  }));
  dart.setLibraryUri(media_type.MediaType, I[152]);
  dart.setFieldSignature(media_type.MediaType, () => ({
    __proto__: dart.getFields(media_type.MediaType.__proto__),
    type: dart.finalFieldType(core.String),
    subtype: dart.finalFieldType(core.String),
    parameters: dart.finalFieldType(core.Map$(core.String, core.String))
  }));
  dart.defineExtensionMethods(media_type.MediaType, ['toString']);
  dart.defineLazy(media_type, {
    /*media_type._escapedChar*/get _escapedChar() {
      return core.RegExp.new("[\"\\x00-\\x1F\\x7F]");
    }
  }, false);
  full_metadata.FullMetadata = class FullMetadata extends core.Object {
    static ['_#new#tearOff'](_metadata) {
      return new full_metadata.FullMetadata.new(_metadata);
    }
    get bucket() {
      return T$.StringN().as(this[S._metadata][S$.$_get]("bucket"));
    }
    get cacheControl() {
      return T$.StringN().as(this[S._metadata][S$.$_get]("cacheControl"));
    }
    get contentDisposition() {
      return T$.StringN().as(this[S._metadata][S$.$_get]("contentDisposition"));
    }
    get contentEncoding() {
      return T$.StringN().as(this[S._metadata][S$.$_get]("contentEncoding"));
    }
    get contentLanguage() {
      return T$.StringN().as(this[S._metadata][S$.$_get]("contentLanguage"));
    }
    get contentType() {
      return T$.StringN().as(this[S._metadata][S$.$_get]("contentType"));
    }
    get customMetadata() {
      return this[S._metadata][S$.$_get]("customMetadata") == null ? null : T$.LinkedHashMapOfString$String().from(core.Map.as(this[S._metadata][S$.$_get]("customMetadata")));
    }
    get fullPath() {
      return core.String.as(this[S._metadata][S$.$_get]("fullPath"));
    }
    get generation() {
      return T$.StringN().as(this[S._metadata][S$.$_get]("generation"));
    }
    get metadataGeneration() {
      return T$.StringN().as(this[S._metadata][S$.$_get]("metadataGeneration"));
    }
    get md5Hash() {
      return T$.StringN().as(this[S._metadata][S$.$_get]("md5Hash"));
    }
    get metageneration() {
      return T$.StringN().as(this[S._metadata][S$.$_get]("metageneration"));
    }
    get name() {
      return core.String.as(this[S._metadata][S$.$_get]("name"));
    }
    get size() {
      return T$.intN().as(this[S._metadata][S$.$_get]("size"));
    }
    get timeCreated() {
      return this[S._metadata][S$.$_get]("creationTimeMillis") == null ? null : new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(this[S._metadata][S$.$_get]("creationTimeMillis")));
    }
    get updated() {
      return this[S._metadata][S$.$_get]("updatedTimeMillis") == null ? null : new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(this[S._metadata][S$.$_get]("updatedTimeMillis")));
    }
  };
  (full_metadata.FullMetadata.new = function(_metadata) {
    this[S._metadata] = _metadata;
    ;
  }).prototype = full_metadata.FullMetadata.prototype;
  dart.addTypeTests(full_metadata.FullMetadata);
  dart.addTypeCaches(full_metadata.FullMetadata);
  dart.setGetterSignature(full_metadata.FullMetadata, () => ({
    __proto__: dart.getGetters(full_metadata.FullMetadata.__proto__),
    bucket: dart.nullable(core.String),
    cacheControl: dart.nullable(core.String),
    contentDisposition: dart.nullable(core.String),
    contentEncoding: dart.nullable(core.String),
    contentLanguage: dart.nullable(core.String),
    contentType: dart.nullable(core.String),
    customMetadata: dart.nullable(core.Map$(core.String, core.String)),
    fullPath: core.String,
    generation: dart.nullable(core.String),
    metadataGeneration: dart.nullable(core.String),
    md5Hash: dart.nullable(core.String),
    metageneration: dart.nullable(core.String),
    name: core.String,
    size: dart.nullable(core.int),
    timeCreated: dart.nullable(core.DateTime),
    updated: dart.nullable(core.DateTime)
  }));
  dart.setLibraryUri(full_metadata.FullMetadata, I[153]);
  dart.setFieldSignature(full_metadata.FullMetadata, () => ({
    __proto__: dart.getFields(full_metadata.FullMetadata.__proto__),
    [S._metadata]: dart.finalFieldType(core.Map$(core.String, dart.dynamic))
  }));
  list_options.ListOptions = class ListOptions extends core.Object {
    get maxResults() {
      return this[S.maxResults];
    }
    set maxResults(value) {
      super.maxResults = value;
    }
    get pageToken() {
      return this[S.pageToken];
    }
    set pageToken(value) {
      super.pageToken = value;
    }
    static ['_#new#tearOff'](opts) {
      let maxResults = opts && 'maxResults' in opts ? opts.maxResults : null;
      let pageToken = opts && 'pageToken' in opts ? opts.pageToken : null;
      return new list_options.ListOptions.new({maxResults: maxResults, pageToken: pageToken});
    }
  };
  (list_options.ListOptions.new = function(opts) {
    let maxResults = opts && 'maxResults' in opts ? opts.maxResults : null;
    let pageToken = opts && 'pageToken' in opts ? opts.pageToken : null;
    this[S.maxResults] = maxResults;
    this[S.pageToken] = pageToken;
    ;
  }).prototype = list_options.ListOptions.prototype;
  dart.addTypeTests(list_options.ListOptions);
  dart.addTypeCaches(list_options.ListOptions);
  dart.setLibraryUri(list_options.ListOptions, I[154]);
  dart.setFieldSignature(list_options.ListOptions, () => ({
    __proto__: dart.getFields(list_options.ListOptions.__proto__),
    maxResults: dart.finalFieldType(dart.nullable(core.int)),
    pageToken: dart.finalFieldType(dart.nullable(core.String))
  }));
  platform_interface_list_result.ListResultPlatform = class ListResultPlatform extends plugin_platform_interface.PlatformInterface {
    get storage() {
      return this[S.storage$1];
    }
    set storage(value) {
      super.storage = value;
    }
    get nextPageToken() {
      return this[S.nextPageToken];
    }
    set nextPageToken(value) {
      super.nextPageToken = value;
    }
    static verifyExtends(instance) {
      plugin_platform_interface.PlatformInterface.verifyToken(instance, platform_interface_list_result.ListResultPlatform._token);
    }
    get items() {
      dart.throw(new core.UnimplementedError.new("items is not implemented"));
    }
    get prefixes() {
      dart.throw(new core.UnimplementedError.new("prefixes is not implemented"));
    }
  };
  (platform_interface_list_result.ListResultPlatform.new = function(storage, nextPageToken) {
    this[S.storage$1] = storage;
    this[S.nextPageToken] = nextPageToken;
    platform_interface_list_result.ListResultPlatform.__proto__.new.call(this, {token: platform_interface_list_result.ListResultPlatform._token});
    ;
  }).prototype = platform_interface_list_result.ListResultPlatform.prototype;
  dart.addTypeTests(platform_interface_list_result.ListResultPlatform);
  dart.addTypeCaches(platform_interface_list_result.ListResultPlatform);
  dart.setStaticMethodSignature(platform_interface_list_result.ListResultPlatform, () => ['verifyExtends']);
  dart.setGetterSignature(platform_interface_list_result.ListResultPlatform, () => ({
    __proto__: dart.getGetters(platform_interface_list_result.ListResultPlatform.__proto__),
    items: core.List$(platform_interface_reference.ReferencePlatform),
    prefixes: core.List$(platform_interface_reference.ReferencePlatform)
  }));
  dart.setLibraryUri(platform_interface_list_result.ListResultPlatform, I[155]);
  dart.setFieldSignature(platform_interface_list_result.ListResultPlatform, () => ({
    __proto__: dart.getFields(platform_interface_list_result.ListResultPlatform.__proto__),
    storage: dart.finalFieldType(dart.nullable(platform_interface_firebase_storage.FirebaseStoragePlatform)),
    nextPageToken: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.setStaticFieldSignature(platform_interface_list_result.ListResultPlatform, () => ['_token']);
  dart.defineLazy(platform_interface_list_result.ListResultPlatform, {
    /*platform_interface_list_result.ListResultPlatform._token*/get _token() {
      return new core.Object.new();
    }
  }, false);
  platform_interface_task.TaskPlatform = class TaskPlatform extends plugin_platform_interface.PlatformInterface {
    static verifyExtends(instance) {
      plugin_platform_interface.PlatformInterface.verifyToken(instance, platform_interface_task.TaskPlatform._token);
    }
    get snapshotEvents() {
      dart.throw(new core.UnimplementedError.new("snapshotEvents is not implemented"));
    }
    get snapshot() {
      dart.throw(new core.UnimplementedError.new("snapshot is not implemented"));
    }
    get onComplete() {
      dart.throw(new core.UnimplementedError.new("onComplete is not implemented"));
    }
    pause() {
      dart.throw(new core.UnimplementedError.new("pause() is not implemented"));
    }
    resume() {
      dart.throw(new core.UnimplementedError.new("resume() is not implemented"));
    }
    cancel() {
      dart.throw(new core.UnimplementedError.new("cancel() is not implemented"));
    }
  };
  (platform_interface_task.TaskPlatform.new = function() {
    platform_interface_task.TaskPlatform.__proto__.new.call(this, {token: platform_interface_task.TaskPlatform._token});
    ;
  }).prototype = platform_interface_task.TaskPlatform.prototype;
  dart.addTypeTests(platform_interface_task.TaskPlatform);
  dart.addTypeCaches(platform_interface_task.TaskPlatform);
  dart.setMethodSignature(platform_interface_task.TaskPlatform, () => ({
    __proto__: dart.getMethods(platform_interface_task.TaskPlatform.__proto__),
    pause: dart.fnType(async.Future$(core.bool), []),
    resume: dart.fnType(async.Future$(core.bool), []),
    cancel: dart.fnType(async.Future$(core.bool), [])
  }));
  dart.setStaticMethodSignature(platform_interface_task.TaskPlatform, () => ['verifyExtends']);
  dart.setGetterSignature(platform_interface_task.TaskPlatform, () => ({
    __proto__: dart.getGetters(platform_interface_task.TaskPlatform.__proto__),
    snapshotEvents: async.Stream$(platform_interface_task_snapshot.TaskSnapshotPlatform),
    snapshot: platform_interface_task_snapshot.TaskSnapshotPlatform,
    onComplete: async.Future$(platform_interface_task_snapshot.TaskSnapshotPlatform)
  }));
  dart.setLibraryUri(platform_interface_task.TaskPlatform, I[156]);
  dart.setStaticFieldSignature(platform_interface_task.TaskPlatform, () => ['_token']);
  dart.defineLazy(platform_interface_task.TaskPlatform, {
    /*platform_interface_task.TaskPlatform._token*/get _token() {
      return new core.Object.new();
    }
  }, false);
  platform_interface_task_snapshot.TaskSnapshotPlatform = class TaskSnapshotPlatform extends plugin_platform_interface.PlatformInterface {
    static verifyExtends(instance) {
      plugin_platform_interface.PlatformInterface.verifyToken(instance, platform_interface_task_snapshot.TaskSnapshotPlatform._token);
    }
    get bytesTransferred() {
      return core.int.as(this[S._data$4][S$.$_get]("bytesTransferred"));
    }
    get metadata() {
      return this[S._data$4][S$.$_get]("metadata") == null ? null : new full_metadata.FullMetadata.new(T$.LinkedHashMapOfString$dynamic().from(core.Map.as(this[S._data$4][S$.$_get]("metadata"))));
    }
    get ref() {
      dart.throw(new core.UnimplementedError.new("ref is not implemented"));
    }
    get state() {
      return this[S._state];
    }
    get totalBytes() {
      return core.int.as(this[S._data$4][S$.$_get]("totalBytes"));
    }
  };
  (platform_interface_task_snapshot.TaskSnapshotPlatform.new = function(_state, _data) {
    this[S._state] = _state;
    this[S._data$4] = _data;
    platform_interface_task_snapshot.TaskSnapshotPlatform.__proto__.new.call(this, {token: platform_interface_task_snapshot.TaskSnapshotPlatform._token});
    ;
  }).prototype = platform_interface_task_snapshot.TaskSnapshotPlatform.prototype;
  dart.addTypeTests(platform_interface_task_snapshot.TaskSnapshotPlatform);
  dart.addTypeCaches(platform_interface_task_snapshot.TaskSnapshotPlatform);
  dart.setStaticMethodSignature(platform_interface_task_snapshot.TaskSnapshotPlatform, () => ['verifyExtends']);
  dart.setGetterSignature(platform_interface_task_snapshot.TaskSnapshotPlatform, () => ({
    __proto__: dart.getGetters(platform_interface_task_snapshot.TaskSnapshotPlatform.__proto__),
    bytesTransferred: core.int,
    metadata: dart.nullable(full_metadata.FullMetadata),
    ref: platform_interface_reference.ReferencePlatform,
    state: task_state.TaskState,
    totalBytes: core.int
  }));
  dart.setLibraryUri(platform_interface_task_snapshot.TaskSnapshotPlatform, I[157]);
  dart.setFieldSignature(platform_interface_task_snapshot.TaskSnapshotPlatform, () => ({
    __proto__: dart.getFields(platform_interface_task_snapshot.TaskSnapshotPlatform.__proto__),
    [S._state]: dart.finalFieldType(task_state.TaskState),
    [S._data$4]: dart.finalFieldType(core.Map$(core.String, dart.dynamic))
  }));
  dart.setStaticFieldSignature(platform_interface_task_snapshot.TaskSnapshotPlatform, () => ['_token']);
  dart.defineLazy(platform_interface_task_snapshot.TaskSnapshotPlatform, {
    /*platform_interface_task_snapshot.TaskSnapshotPlatform._token*/get _token() {
      return new core.Object.new();
    }
  }, false);
  put_string_format.PutStringFormat = class PutStringFormat extends core._Enum {
    [S$._enumToString]() {
      return "PutStringFormat." + this[S$._name];
    }
  };
  (put_string_format.PutStringFormat.new = function(index, name) {
    put_string_format.PutStringFormat.__proto__.new.call(this, index, name);
    ;
  }).prototype = put_string_format.PutStringFormat.prototype;
  dart.addTypeTests(put_string_format.PutStringFormat);
  dart.addTypeCaches(put_string_format.PutStringFormat);
  dart.setMethodSignature(put_string_format.PutStringFormat, () => ({
    __proto__: dart.getMethods(put_string_format.PutStringFormat.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(put_string_format.PutStringFormat, I[158]);
  dart.setStaticFieldSignature(put_string_format.PutStringFormat, () => ['values', 'raw', 'base64', 'base64Url', 'dataUrl']);
  dart.defineLazy(put_string_format.PutStringFormat, {
    /*put_string_format.PutStringFormat.values*/get values() {
      return C[119] || CT.C119;
    },
    /*put_string_format.PutStringFormat.raw*/get raw() {
      return C[120] || CT.C120;
    },
    /*put_string_format.PutStringFormat.base64*/get base64() {
      return C[121] || CT.C121;
    },
    /*put_string_format.PutStringFormat.base64Url*/get base64Url() {
      return C[122] || CT.C122;
    },
    /*put_string_format.PutStringFormat.dataUrl*/get dataUrl() {
      return C[123] || CT.C123;
    }
  }, false);
  settable_metadata.SettableMetadata = class SettableMetadata extends core.Object {
    get cacheControl() {
      return this[S.cacheControl];
    }
    set cacheControl(value) {
      super.cacheControl = value;
    }
    get contentDisposition() {
      return this[S.contentDisposition];
    }
    set contentDisposition(value) {
      super.contentDisposition = value;
    }
    get contentEncoding() {
      return this[S.contentEncoding];
    }
    set contentEncoding(value) {
      super.contentEncoding = value;
    }
    get contentLanguage() {
      return this[S.contentLanguage];
    }
    set contentLanguage(value) {
      super.contentLanguage = value;
    }
    get contentType() {
      return this[S.contentType];
    }
    set contentType(value) {
      super.contentType = value;
    }
    get customMetadata() {
      return this[S.customMetadata];
    }
    set customMetadata(value) {
      super.customMetadata = value;
    }
    static ['_#new#tearOff'](opts) {
      let cacheControl = opts && 'cacheControl' in opts ? opts.cacheControl : null;
      let contentDisposition = opts && 'contentDisposition' in opts ? opts.contentDisposition : null;
      let contentEncoding = opts && 'contentEncoding' in opts ? opts.contentEncoding : null;
      let contentLanguage = opts && 'contentLanguage' in opts ? opts.contentLanguage : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let customMetadata = opts && 'customMetadata' in opts ? opts.customMetadata : null;
      return new settable_metadata.SettableMetadata.new({cacheControl: cacheControl, contentDisposition: contentDisposition, contentEncoding: contentEncoding, contentLanguage: contentLanguage, contentType: contentType, customMetadata: customMetadata});
    }
    asMap() {
      return new (T$.IdentityMapOfString$dynamic()).from(["cacheControl", this.cacheControl, "contentDisposition", this.contentDisposition, "contentEncoding", this.contentEncoding, "contentLanguage", this.contentLanguage, "contentType", this.contentType, "customMetadata", this.customMetadata]);
    }
  };
  (settable_metadata.SettableMetadata.new = function(opts) {
    let cacheControl = opts && 'cacheControl' in opts ? opts.cacheControl : null;
    let contentDisposition = opts && 'contentDisposition' in opts ? opts.contentDisposition : null;
    let contentEncoding = opts && 'contentEncoding' in opts ? opts.contentEncoding : null;
    let contentLanguage = opts && 'contentLanguage' in opts ? opts.contentLanguage : null;
    let contentType = opts && 'contentType' in opts ? opts.contentType : null;
    let customMetadata = opts && 'customMetadata' in opts ? opts.customMetadata : null;
    this[S.cacheControl] = cacheControl;
    this[S.contentDisposition] = contentDisposition;
    this[S.contentEncoding] = contentEncoding;
    this[S.contentLanguage] = contentLanguage;
    this[S.contentType] = contentType;
    this[S.customMetadata] = customMetadata;
    ;
  }).prototype = settable_metadata.SettableMetadata.prototype;
  dart.addTypeTests(settable_metadata.SettableMetadata);
  dart.addTypeCaches(settable_metadata.SettableMetadata);
  dart.setMethodSignature(settable_metadata.SettableMetadata, () => ({
    __proto__: dart.getMethods(settable_metadata.SettableMetadata.__proto__),
    asMap: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setLibraryUri(settable_metadata.SettableMetadata, I[159]);
  dart.setFieldSignature(settable_metadata.SettableMetadata, () => ({
    __proto__: dart.getFields(settable_metadata.SettableMetadata.__proto__),
    cacheControl: dart.finalFieldType(dart.nullable(core.String)),
    contentDisposition: dart.finalFieldType(dart.nullable(core.String)),
    contentEncoding: dart.finalFieldType(dart.nullable(core.String)),
    contentLanguage: dart.finalFieldType(dart.nullable(core.String)),
    contentType: dart.finalFieldType(dart.nullable(core.String)),
    customMetadata: dart.finalFieldType(dart.nullable(core.Map$(core.String, core.String)))
  }));
  task_state.TaskState = class TaskState extends core._Enum {
    [S$._enumToString]() {
      return "TaskState." + this[S$._name];
    }
  };
  (task_state.TaskState.new = function(index, name) {
    task_state.TaskState.__proto__.new.call(this, index, name);
    ;
  }).prototype = task_state.TaskState.prototype;
  dart.addTypeTests(task_state.TaskState);
  dart.addTypeCaches(task_state.TaskState);
  dart.setMethodSignature(task_state.TaskState, () => ({
    __proto__: dart.getMethods(task_state.TaskState.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(task_state.TaskState, I[160]);
  dart.setStaticFieldSignature(task_state.TaskState, () => ['values', 'paused', 'running', 'success', 'canceled', 'error']);
  dart.defineLazy(task_state.TaskState, {
    /*task_state.TaskState.values*/get values() {
      return C[124] || CT.C124;
    },
    /*task_state.TaskState.paused*/get paused() {
      return C[125] || CT.C125;
    },
    /*task_state.TaskState.running*/get running() {
      return C[126] || CT.C126;
    },
    /*task_state.TaskState.success*/get success() {
      return C[127] || CT.C127;
    },
    /*task_state.TaskState.canceled*/get canceled() {
      return C[128] || CT.C128;
    },
    /*task_state.TaskState.error*/get error() {
      return C[129] || CT.C129;
    }
  }, false);
  http.head = function head(url, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : null;
    return http._withClient(response$.Response, dart.fn(client => client.head(url, {headers: headers}), T$.ClientToFutureOfResponse()));
  };
  http.get = function get(url, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : null;
    return http._withClient(response$.Response, dart.fn(client => client.get(url, {headers: headers}), T$.ClientToFutureOfResponse()));
  };
  http.post = function post(url, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let body = opts && 'body' in opts ? opts.body : null;
    let encoding = opts && 'encoding' in opts ? opts.encoding : null;
    return http._withClient(response$.Response, dart.fn(client => client.post(url, {headers: headers, body: body, encoding: encoding}), T$.ClientToFutureOfResponse()));
  };
  http.put = function put(url, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let body = opts && 'body' in opts ? opts.body : null;
    let encoding = opts && 'encoding' in opts ? opts.encoding : null;
    return http._withClient(response$.Response, dart.fn(client => client.put(url, {headers: headers, body: body, encoding: encoding}), T$.ClientToFutureOfResponse()));
  };
  http.patch = function patch(url, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let body = opts && 'body' in opts ? opts.body : null;
    let encoding = opts && 'encoding' in opts ? opts.encoding : null;
    return http._withClient(response$.Response, dart.fn(client => client.patch(url, {headers: headers, body: body, encoding: encoding}), T$.ClientToFutureOfResponse()));
  };
  http.delete = function $delete(url, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let body = opts && 'body' in opts ? opts.body : null;
    let encoding = opts && 'encoding' in opts ? opts.encoding : null;
    return http._withClient(response$.Response, dart.fn(client => client.delete(url, {headers: headers, body: body, encoding: encoding}), T$.ClientToFutureOfResponse()));
  };
  http.read = function read(url, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : null;
    return http._withClient(core.String, dart.fn(client => client.read(url, {headers: headers}), T$.ClientToFutureOfString()));
  };
  http.readBytes = function readBytes(url, opts) {
    let headers = opts && 'headers' in opts ? opts.headers : null;
    return http._withClient(typed_data.Uint8List, dart.fn(client => client.readBytes(url, {headers: headers}), T$.ClientToFutureOfUint8List()));
  };
  http._withClient = function _withClient(T, fn) {
    return async.async(T, function* _withClient() {
      let client = client$.Client.new();
      try {
        return yield fn(client);
      } finally {
        client.close();
      }
    });
  };
  metadata$.fbFullMetadataToFullMetadata = function fbFullMetadataToFullMetadata(metadata) {
    return new full_metadata.FullMetadata.new(new (T$.IdentityMapOfString$dynamic()).from(["bucket", metadata.bucket, "cacheControl", metadata.cacheControl, "contentDisposition", metadata.contentDisposition, "contentEncoding", metadata.contentEncoding, "contentLanguage", metadata.contentLanguage, "contentType", metadata.contentType, "customMetadata", metadata.customMetadata, "fullPath", metadata.fullPath, "generation", metadata.generation, "md5Hash", metadata.md5Hash, "metageneration", metadata.metageneration, "name", metadata.name, "size", metadata.size, "creationTimeMillis", dart.nullCheck(metadata.timeCreated).millisecondsSinceEpoch, "updatedTimeMillis", dart.nullCheck(metadata.updated).millisecondsSinceEpoch]));
  };
  metadata$.settableMetadataToFbSettableMetadata = function settableMetadataToFbSettableMetadata(metadata) {
    return storage.SettableMetadata.new({cacheControl: metadata.cacheControl, contentDisposition: metadata.contentDisposition, contentEncoding: metadata.contentEncoding, contentLanguage: metadata.contentLanguage, contentType: metadata.contentType, customMetadata: metadata.customMetadata});
  };
  metadata$.settableMetadataToFbUploadMetadata = function settableMetadataToFbUploadMetadata(metadata, opts) {
    let md5Hash = opts && 'md5Hash' in opts ? opts.md5Hash : null;
    return storage.UploadMetadata.new({cacheControl: metadata.cacheControl, contentDisposition: metadata.contentDisposition, contentEncoding: metadata.contentEncoding, contentLanguage: metadata.contentLanguage, contentType: metadata.contentType, customMetadata: metadata.customMetadata, md5Hash: md5Hash});
  };
  metadata$.putStringFormatToString = function putStringFormatToString(format) {
    return metadata$._putStringFormatToFbStringFormat[S$.$_get](format);
  };
  dart.defineLazy(metadata$, {
    /*metadata$._putStringFormatToFbStringFormat*/get _putStringFormatToFbStringFormat() {
      return new (T$.LinkedMapOfPutStringFormat$String()).from([put_string_format.PutStringFormat.base64, dart.global.firebase_storage.StringFormat.BASE64, put_string_format.PutStringFormat.base64Url, dart.global.firebase_storage.StringFormat.BASE64URL, put_string_format.PutStringFormat.dataUrl, dart.global.firebase_storage.StringFormat.DATA_URL, put_string_format.PutStringFormat.raw, dart.global.firebase_storage.StringFormat.RAW]);
    },
    set _putStringFormatToFbStringFormat(value) {}
  }, false);
  task_web.TaskWeb = class TaskWeb extends platform_interface_task.TaskPlatform {
    static ['_#new#tearOff'](reference, task) {
      return new task_web.TaskWeb.new(reference, task);
    }
    get snapshotEvents() {
      return errors.guard(T$.StreamOfTaskSnapshotPlatform(), dart.fn(() => {
        let group = new (T$.StreamGroupOfTaskSnapshotPlatform()).broadcast();
        let onStateChangedStream = this[S._task].onStateChanged.map(platform_interface_task_snapshot.TaskSnapshotPlatform, dart.fn(snapshot => task.fbUploadTaskSnapshotToTaskSnapshot(this[S._reference], snapshot), T$.UploadTaskSnapshotToTaskSnapshotWeb()));
        group.add(onStateChangedStream);
        group.add(this.onComplete.asStream());
        return group.stream;
      }, T$.VoidToStreamOfTaskSnapshotPlatform()));
    }
    get onComplete() {
      return errors.guard(T$.FutureOfTaskSnapshotPlatform(), dart.fn(() => async.async(task_snapshot_web.TaskSnapshotWeb, (function*() {
        return task.fbUploadTaskSnapshotToTaskSnapshot(this[S._reference], yield this[S._task].future);
      }).bind(this)), T$.VoidToFutureOfTaskSnapshotWeb()));
    }
    get snapshot() {
      return task.fbUploadTaskSnapshotToTaskSnapshot(this[S._reference], this[S._task].snapshot);
    }
    pause() {
      return async.async(core.bool, (function* pause() {
        if (this.snapshot.state === task_state.TaskState.paused) {
          return true;
        }
        let paused = this[S._task].pause();
        return this.snapshotEvents.takeWhile(dart.fn(snapshot => snapshot.state !== task_state.TaskState.paused, T$.TaskSnapshotPlatformTobool())).last.then(core.bool, dart.fn(_ => paused, T$.TaskSnapshotPlatformTobool()));
      }).bind(this));
    }
    resume() {
      return async.async(core.bool, (function* resume() {
        return this[S._task].resume();
      }).bind(this));
    }
    cancel() {
      return async.async(core.bool, (function* cancel() {
        if (this.snapshot.state === task_state.TaskState.canceled) {
          return true;
        }
        let canceled = this[S._task].cancel();
        return this.snapshotEvents.drain(dart.dynamic).then(core.bool, dart.fn(_ => canceled, T$.dynamicTobool()), {onError: dart.fn(_ => canceled, T$.dynamicTobool())});
      }).bind(this));
    }
  };
  (task_web.TaskWeb.new = function(reference, task) {
    this[S._reference] = reference;
    this[S._task] = task;
    task_web.TaskWeb.__proto__.new.call(this);
    ;
  }).prototype = task_web.TaskWeb.prototype;
  dart.addTypeTests(task_web.TaskWeb);
  dart.addTypeCaches(task_web.TaskWeb);
  dart.setLibraryUri(task_web.TaskWeb, I[161]);
  dart.setFieldSignature(task_web.TaskWeb, () => ({
    __proto__: dart.getFields(task_web.TaskWeb.__proto__),
    [S._reference]: dart.finalFieldType(platform_interface_reference.ReferencePlatform),
    [S._task]: dart.finalFieldType(storage.UploadTask)
  }));
  list.listOptionsToFbListOptions = function listOptionsToFbListOptions(options) {
    if (options == null) {
      return null;
    }
    return storage.ListOptions.new({maxResults: options.maxResults, pageToken: options.pageToken});
  };
  list.fbListResultToListResultWeb = function fbListResultToListResultWeb(storage, result) {
    return new list_result_web.ListResultWeb.new(storage, {nextPageToken: result.nextPageToken, items: result.items[S$.$map](core.String, dart.fn(item => item.fullPath, T$.StorageReferenceToString()))[S$.$toList](), prefixes: result.prefixes[S$.$map](core.String, dart.fn(prefix => prefix.fullPath, T$.StorageReferenceToString()))[S$.$toList]()});
  };
  metadata_cache.SettableMetadataCache = class SettableMetadataCache extends core.Object {
    store(incoming, opts) {
      let t165, t168, t168$, t168$0, t168$1, t168$2;
      let overwrite = opts && 'overwrite' in opts ? opts.overwrite : false;
      if (overwrite) {
        return this[S._cache$2] = (t165 = incoming, t165 == null ? new settable_metadata.SettableMetadata.new() : t165);
      }
      if (incoming == null) {
        return this[S._cache$2];
      }
      let newMetadata = (() => {
        let t165 = new (T$.IdentityMapOfString$String()).new();
        let t166 = incoming.customMetadata;
        if (t166 != null) t165[S$.$addAll](t166);
        let t167 = this[S._cache$2].customMetadata;
        if (t167 != null) t165[S$.$addAll](t167);
        return t165;
      })();
      return this[S._cache$2] = new settable_metadata.SettableMetadata.new({cacheControl: (t168 = this[S._cache$2].cacheControl, t168 == null ? incoming.cacheControl : t168), contentDisposition: (t168$ = this[S._cache$2].contentDisposition, t168$ == null ? incoming.contentDisposition : t168$), contentEncoding: (t168$0 = this[S._cache$2].contentEncoding, t168$0 == null ? incoming.contentEncoding : t168$0), contentLanguage: (t168$1 = this[S._cache$2].contentLanguage, t168$1 == null ? incoming.contentLanguage : t168$1), contentType: (t168$2 = this[S._cache$2].contentType, t168$2 == null ? incoming.contentType : t168$2), customMetadata: newMetadata[S$.$isEmpty] ? null : newMetadata});
    }
    static ['_#new#tearOff']() {
      return new metadata_cache.SettableMetadataCache.new();
    }
  };
  (metadata_cache.SettableMetadataCache.new = function() {
    this[S._cache$2] = new settable_metadata.SettableMetadata.new();
    ;
  }).prototype = metadata_cache.SettableMetadataCache.prototype;
  dart.addTypeTests(metadata_cache.SettableMetadataCache);
  dart.addTypeCaches(metadata_cache.SettableMetadataCache);
  dart.setMethodSignature(metadata_cache.SettableMetadataCache, () => ({
    __proto__: dart.getMethods(metadata_cache.SettableMetadataCache.__proto__),
    store: dart.fnType(settable_metadata.SettableMetadata, [dart.nullable(settable_metadata.SettableMetadata)], {overwrite: core.bool}, {})
  }));
  dart.setLibraryUri(metadata_cache.SettableMetadataCache, I[162]);
  dart.setFieldSignature(metadata_cache.SettableMetadataCache, () => ({
    __proto__: dart.getFields(metadata_cache.SettableMetadataCache.__proto__),
    [S._cache$2]: dart.fieldType(settable_metadata.SettableMetadata)
  }));
  binary_reader_impl.BinaryReaderImpl = class BinaryReaderImpl extends hive.BinaryReader {
    static ['_#new#tearOff'](_buffer, typeRegistry, bufferLength = null) {
      return new binary_reader_impl.BinaryReaderImpl.new(_buffer, typeRegistry, bufferLength);
    }
    get availableBytes() {
      return this[S._bufferLimit] - this[S._offset];
    }
    get usedBytes() {
      return this[S._offset];
    }
    [S._limitAvailableBytes](bytes) {
      this[S._requireBytes](bytes);
      this[S._bufferLimit] = this[S._offset] + bytes;
    }
    [S._resetLimit]() {
      this[S._bufferLimit] = this[S._bufferLength];
    }
    [S._requireBytes](bytes) {
      if (this[S._offset] + bytes > this[S._bufferLimit]) {
        dart.throw(new core.RangeError.new("Not enough bytes available."));
      }
    }
    skip(bytes) {
      this[S._requireBytes](bytes);
      this[S._offset] = this[S._offset] + bytes;
    }
    readByte() {
      let t168;
      this[S._requireBytes](1);
      return this[S._buffer][S$.$_get]((t168 = this[S._offset], this[S._offset] = t168 + 1, t168));
    }
    viewBytes(bytes) {
      this[S._requireBytes](bytes);
      this[S._offset] = this[S._offset] + bytes;
      return extensions['Uint8ListX|view'](this[S._buffer], this[S._offset] - bytes, bytes);
    }
    peekBytes(bytes) {
      this[S._requireBytes](bytes);
      return extensions['Uint8ListX|view'](this[S._buffer], this[S._offset], bytes);
    }
    readWord() {
      let t168, t168$;
      this[S._requireBytes](2);
      return (this[S._buffer][S$.$_get]((t168 = this[S._offset], this[S._offset] = t168 + 1, t168)) | this[S._buffer][S$.$_get]((t168$ = this[S._offset], this[S._offset] = t168$ + 1, t168$)) << 8 >>> 0) >>> 0;
    }
    readInt32() {
      this[S._requireBytes](4);
      this[S._offset] = this[S._offset] + 4;
      return this[S._byteData][S.$getInt32](this[S._offset] - 4, typed_data.Endian.little);
    }
    readUint32() {
      this[S._requireBytes](4);
      this[S._offset] = this[S._offset] + 4;
      return extensions['ListIntX|readUint32'](this[S._buffer], this[S._offset] - 4);
    }
    peekUint32() {
      this[S._requireBytes](4);
      return extensions['ListIntX|readUint32'](this[S._buffer], this[S._offset]);
    }
    readInt() {
      return this.readDouble()[S.$toInt]();
    }
    readDouble() {
      this[S._requireBytes](8);
      let value = this[S._byteData][S.$getFloat64](this[S._offset], typed_data.Endian.little);
      this[S._offset] = this[S._offset] + 8;
      return value;
    }
    readBool() {
      return this.readByte() > 0;
    }
    readString(byteCount = null, decoder = C[2] || CT.C2) {
      byteCount == null ? byteCount = this.readUint32() : null;
      let view = this.viewBytes(byteCount);
      return decoder.convert(view);
    }
    readByteList(length = null) {
      length == null ? length = this.readUint32() : null;
      this[S._requireBytes](length);
      let byteList = this[S._buffer][S$.$sublist](this[S._offset], this[S._offset] + dart.notNull(length));
      this[S._offset] = this[S._offset] + dart.notNull(length);
      return byteList;
    }
    readIntList(length = null) {
      length == null ? length = this.readUint32() : null;
      this[S._requireBytes](dart.notNull(length) * 8);
      let byteData = this[S._byteData];
      let list = T$.ListOfint().filled(length, 0, {growable: true});
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        list[S$.$_set](i, byteData[S.$getFloat64](this[S._offset], typed_data.Endian.little)[S.$toInt]());
        this[S._offset] = this[S._offset] + 8;
      }
      return list;
    }
    readDoubleList(length = null) {
      length == null ? length = this.readUint32() : null;
      this[S._requireBytes](dart.notNull(length) * 8);
      let byteData = this[S._byteData];
      let list = T$.ListOfdouble().filled(length, 0, {growable: true});
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        list[S$.$_set](i, byteData[S.$getFloat64](this[S._offset], typed_data.Endian.little));
        this[S._offset] = this[S._offset] + 8;
      }
      return list;
    }
    readBoolList(length = null) {
      let t168;
      length == null ? length = this.readUint32() : null;
      this[S._requireBytes](length);
      let list = T$.ListOfbool().filled(length, false, {growable: true});
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        list[S$.$_set](i, this[S._buffer][S$.$_get]((t168 = this[S._offset], this[S._offset] = t168 + 1, t168)) > 0);
      }
      return list;
    }
    readStringList(length = null, decoder = C[2] || CT.C2) {
      length == null ? length = this.readUint32() : null;
      let list = T$.ListOfString().filled(length, "", {growable: true});
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        list[S$.$_set](i, this.readString(null, decoder));
      }
      return list;
    }
    readList(length = null) {
      length == null ? length = this.readUint32() : null;
      let list = core.List.filled(length, null, {growable: true});
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        list[S$.$_set](i, this.read());
      }
      return list;
    }
    readMap(length = null) {
      length == null ? length = this.readUint32() : null;
      let map = new _js_helper.LinkedMap.new();
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        map[S$.$_set](this.read(), this.read());
      }
      return map;
    }
    readKey() {
      let keyType = this.readByte();
      if (keyType === 0) {
        return this.readUint32();
      } else if (keyType === 1) {
        let byteCount = this.readByte();
        return hive.BinaryReader.utf8Decoder.convert(this.viewBytes(byteCount));
      } else {
        dart.throw(new hive.HiveError.new("Unsupported key type. Frame might be corrupted."));
      }
    }
    readHiveList(length = null) {
      length == null ? length = this.readUint32() : null;
      let boxNameLength = this.readByte();
      let boxName = core.String.fromCharCodes(this.viewBytes(boxNameLength));
      let keys = core.List.filled(length, null, {growable: true});
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        keys[S$.$_set](i, this.readKey());
      }
      return new (T$.HiveListImplOfHiveObjectMixin()).lazy(boxName, keys);
    }
    readFrame(opts) {
      let t168, t168$, t168$0;
      let cipher = opts && 'cipher' in opts ? opts.cipher : null;
      let lazy = opts && 'lazy' in opts ? opts.lazy : false;
      let frameOffset = opts && 'frameOffset' in opts ? opts.frameOffset : 0;
      if (this.availableBytes < 4) return null;
      let frameLength = this.readUint32();
      if (frameLength < 8) return null;
      if (this.availableBytes < frameLength - 4) return null;
      let crc = extensions['ListIntX|readUint32'](this[S._buffer], this[S._offset] + frameLength - 8);
      let computedCrc = crc32.Crc32.compute(this[S._buffer], {offset: this[S._offset] - 4, length: frameLength - 4, crc: (t168$ = (t168 = cipher, t168 == null ? null : t168.calculateKeyCrc()), t168$ == null ? 0 : t168$)});
      if (computedCrc !== crc) return null;
      this[S._limitAvailableBytes](frameLength - 8);
      let frame = null;
      let key = this.readKey();
      if (this.availableBytes === 0) {
        frame = new frame$.Frame.deleted(key);
      } else if (lazy) {
        frame = new frame$.Frame.lazy(key);
      } else if (cipher == null) {
        frame = new frame$.Frame.new(key, this.read());
      } else {
        frame = new frame$.Frame.new(key, this.readEncrypted(cipher));
      }
      t168$0 = frame;
      (() => {
        t168$0.length = frameLength;
        t168$0.offset = frameOffset;
        return t168$0;
      })();
      this.skip(this.availableBytes);
      this[S._resetLimit]();
      this.skip(4);
      return frame;
    }
    read(typeId = null) {
      typeId == null ? typeId = this.readByte() : null;
      switch (typeId) {
        case 0:
          {
            return null;
          }
        case 1:
          {
            return this.readInt();
          }
        case 2:
          {
            return this.readDouble();
          }
        case 3:
          {
            return this.readBool();
          }
        case 4:
          {
            return this.readString();
          }
        case 5:
          {
            return this.readByteList();
          }
        case 6:
          {
            return this.readIntList();
          }
        case 7:
          {
            return this.readDoubleList();
          }
        case 8:
          {
            return this.readBoolList();
          }
        case 9:
          {
            return this.readStringList();
          }
        case 10:
          {
            return this.readList();
          }
        case 11:
          {
            return this.readMap();
          }
        case 12:
          {
            return this.readHiveList();
          }
        default:
          {
            let resolved = this[S._typeRegistry].findAdapterForTypeId(typeId);
            if (resolved == null) {
              dart.throw(new hive.HiveError.new("Cannot read, unknown typeId: " + dart.str(typeId) + ". " + "Did you forget to register an adapter?"));
            }
            return resolved.adapter.read(this);
          }
      }
    }
    readEncrypted(cipher) {
      let inpLength = this.availableBytes;
      let out = _native_typed_data.NativeUint8List.new(inpLength);
      let outLength = cipher.decrypt(this[S._buffer], this[S._offset], inpLength, out, 0);
      this[S._offset] = this[S._offset] + inpLength;
      let valueReader = new binary_reader_impl.BinaryReaderImpl.new(out, this[S._typeRegistry], outLength);
      return valueReader.read();
    }
  };
  (binary_reader_impl.BinaryReaderImpl.new = function(_buffer, typeRegistry, bufferLength = null) {
    let t168, t168$;
    this[S._offset] = 0;
    this[S._buffer] = _buffer;
    this[S._byteData] = typed_data.ByteData.view(_buffer[S$.$buffer], _buffer[S$.$offsetInBytes]);
    this[S._bufferLength] = (t168 = bufferLength, t168 == null ? _buffer[S$.$length] : t168);
    this[S._bufferLimit] = (t168$ = bufferLength, t168$ == null ? _buffer[S$.$length] : t168$);
    this[S._typeRegistry] = type_registry_impl.TypeRegistryImpl.as(typeRegistry);
    ;
  }).prototype = binary_reader_impl.BinaryReaderImpl.prototype;
  dart.addTypeTests(binary_reader_impl.BinaryReaderImpl);
  dart.addTypeCaches(binary_reader_impl.BinaryReaderImpl);
  dart.setMethodSignature(binary_reader_impl.BinaryReaderImpl, () => ({
    __proto__: dart.getMethods(binary_reader_impl.BinaryReaderImpl.__proto__),
    [S._limitAvailableBytes]: dart.fnType(dart.void, [core.int]),
    [S._resetLimit]: dart.fnType(dart.void, []),
    [S._requireBytes]: dart.fnType(dart.void, [core.int]),
    skip: dart.fnType(dart.void, [core.int]),
    readByte: dart.fnType(core.int, []),
    viewBytes: dart.fnType(typed_data.Uint8List, [core.int]),
    peekBytes: dart.fnType(typed_data.Uint8List, [core.int]),
    readWord: dart.fnType(core.int, []),
    readInt32: dart.fnType(core.int, []),
    readUint32: dart.fnType(core.int, []),
    peekUint32: dart.fnType(core.int, []),
    readInt: dart.fnType(core.int, []),
    readDouble: dart.fnType(core.double, []),
    readBool: dart.fnType(core.bool, []),
    readString: dart.fnType(core.String, [], [dart.nullable(core.int), convert.Converter$(core.List$(core.int), core.String)]),
    readByteList: dart.fnType(typed_data.Uint8List, [], [dart.nullable(core.int)]),
    readIntList: dart.fnType(core.List$(core.int), [], [dart.nullable(core.int)]),
    readDoubleList: dart.fnType(core.List$(core.double), [], [dart.nullable(core.int)]),
    readBoolList: dart.fnType(core.List$(core.bool), [], [dart.nullable(core.int)]),
    readStringList: dart.fnType(core.List$(core.String), [], [dart.nullable(core.int), convert.Converter$(core.List$(core.int), core.String)]),
    readList: dart.fnType(core.List, [], [dart.nullable(core.int)]),
    readMap: dart.fnType(core.Map, [], [dart.nullable(core.int)]),
    readKey: dart.fnType(dart.dynamic, []),
    readHiveList: dart.fnType(hive.HiveList$(hive_object.HiveObjectMixin), [], [dart.nullable(core.int)]),
    readFrame: dart.fnType(dart.nullable(frame$.Frame), [], {cipher: dart.nullable(hive.HiveCipher), frameOffset: core.int, lazy: core.bool}, {}),
    read: dart.fnType(dart.dynamic, [], [dart.nullable(core.int)]),
    readEncrypted: dart.fnType(dart.dynamic, [hive.HiveCipher])
  }));
  dart.setGetterSignature(binary_reader_impl.BinaryReaderImpl, () => ({
    __proto__: dart.getGetters(binary_reader_impl.BinaryReaderImpl.__proto__),
    availableBytes: core.int,
    usedBytes: core.int
  }));
  dart.setLibraryUri(binary_reader_impl.BinaryReaderImpl, I[163]);
  dart.setFieldSignature(binary_reader_impl.BinaryReaderImpl, () => ({
    __proto__: dart.getFields(binary_reader_impl.BinaryReaderImpl.__proto__),
    [S._buffer]: dart.finalFieldType(typed_data.Uint8List),
    [S._byteData]: dart.finalFieldType(typed_data.ByteData),
    [S._bufferLength]: dart.finalFieldType(core.int),
    [S._typeRegistry]: dart.finalFieldType(type_registry_impl.TypeRegistryImpl),
    [S._bufferLimit]: dart.fieldType(core.int),
    [S._offset]: dart.fieldType(core.int)
  }));
  const _is_IndexableSkipList_default = Symbol('_is_IndexableSkipList_default');
  indexable_skip_list.IndexableSkipList$ = dart.generic((K, V) => {
    var __t$_NodeOfK$V = () => (__t$_NodeOfK$V = dart.constFn(indexable_skip_list._Node$(K, V)))();
    var __t$_NodeNOfK$V = () => (__t$_NodeNOfK$V = dart.constFn(dart.nullable(__t$_NodeOfK$V())))();
    var __t$ListOf_NodeNOfK$V = () => (__t$ListOf_NodeNOfK$V = dart.constFn(core.List$(__t$_NodeNOfK$V())))();
    var __t$_KeyIterableOfK$V = () => (__t$_KeyIterableOfK$V = dart.constFn(indexable_skip_list._KeyIterable$(K, V)))();
    var __t$_ValueIterableOfK$V = () => (__t$_ValueIterableOfK$V = dart.constFn(indexable_skip_list._ValueIterable$(K, V)))();
    var __t$KN = () => (__t$KN = dart.constFn(dart.nullable(K)))();
    var __t$_NodeOfKN$VN = () => (__t$_NodeOfKN$VN = dart.constFn(indexable_skip_list._Node$(__t$KN(), __t$VN())))();
    var __t$JSArrayOf_NodeNOfK$V = () => (__t$JSArrayOf_NodeNOfK$V = dart.constFn(_interceptors.JSArray$(__t$_NodeNOfK$V())))();
    var __t$VN = () => (__t$VN = dart.constFn(dart.nullable(V)))();
    class IndexableSkipList extends core.Object {
      static ['_#new#tearOff'](K, V, _comparator, random = null) {
        return new (indexable_skip_list.IndexableSkipList$(K, V)).new(_comparator, random);
      }
      get length() {
        return this[S._length];
      }
      get keys() {
        return new (__t$_KeyIterableOfK$V()).new(this[S._head]);
      }
      get values() {
        return new (__t$_ValueIterableOfK$V()).new(this[S._head]);
      }
      insert(key, value) {
        let t168, t169, t168$, t169$, t168$0, t169$0, t168$1, t169$1, t168$2, t169$2, t168$3, t169$3, t168$4;
        K.as(key);
        __t$VN().as(value);
        let existingNode = this[S._getNode](key);
        if (existingNode != null) {
          let oldValue = existingNode.value;
          existingNode.value = value;
          return oldValue;
        }
        let newLevel = 0;
        while (this[S._random].nextBool() && dart.notNull(newLevel) < 12 - 1) {
          newLevel = dart.notNull(newLevel) + 1;
        }
        if (dart.notNull(newLevel) >= this[S._height]) {
          newLevel = (t168 = this[S._height], this[S._height] = t168 + 1, t168);
        }
        let newNode = new (__t$_NodeOfK$V()).new(key, value, __t$ListOf_NodeNOfK$V().filled(dart.notNull(newLevel) + 1, null), T$.ListOfint().filled(dart.notNull(newLevel) + 1, 0));
        let current = this[S._head];
        for (let level = this[S._height] - 1; level >= 0; level = level - 1) {
          while (true) {
            let next = current.next[S$.$_get](level);
            if (next == null || (t168$ = key, t169 = dart.nullCheck(next.key), this[S._comparator](t168$, t169)) < 0) break;
            current = next;
          }
          if (level > dart.notNull(newLevel)) {
            let next = current.next[S$.$_get](level);
            if (next != null) {
              t168$0 = next.width;
              t169$ = level;
              t168$0[S$.$_set](t169$, t168$0[S$.$_get](t169$) + 1);
            }
            continue;
          }
          if (level === 0) {
            newNode.width[S$.$_set](0, 1);
          } else {
            let width = 0;
            let node = current.next[S$.$_get](level - 1);
            while (node != null && (t168$1 = key, t169$0 = dart.nullCheck(node.key), this[S._comparator](t168$1, t169$0)) >= 0) {
              width = width + node.width[S$.$_get](level - 1);
              node = node.next[S$.$_get](level - 1);
            }
            for (let j = level; j <= dart.notNull(newLevel); j = j + 1) {
              t168$2 = newNode.width;
              t169$1 = j;
              t168$2[S$.$_set](t169$1, t168$2[S$.$_get](t169$1) + width);
            }
            t168$3 = newNode.width;
            t169$2 = level;
            t168$3[S$.$_set](t169$2, t168$3[S$.$_get](t169$2) + 1);
          }
          newNode.next[S$.$_set](level, current.next[S$.$_get](level));
          current.next[S$.$_set](level, newNode);
        }
        for (let i = 1; i <= dart.notNull(newLevel); i = i + 1) {
          let next = newNode.next[S$.$_get](i);
          if (next != null) {
            t168$4 = next.width;
            t169$3 = i;
            t168$4[S$.$_set](t169$3, t168$4[S$.$_get](t169$3) - (newNode.width[S$.$_get](i) - 1));
          }
        }
        this[S._length] = this[S._length] + 1;
        return null;
      }
      delete(key) {
        let t169, t168, t169$, t168$, t169$0, t168$0;
        K.as(key);
        let node = this[S._getNode](key);
        if (node == null) return null;
        let current = this[S._head];
        for (let level = this[S._height] - 1; level >= 0; level = level - 1) {
          while (true) {
            let next = current.next[S$.$_get](level);
            if (next == null || (t168 = key, t169 = dart.nullCheck(next.key), this[S._comparator](t168, t169)) <= 0) break;
            current = next;
          }
          if (level > node.level) {
            let next = current.next[S$.$_get](level);
            if (next != null) {
              t168$ = next.width;
              t169$ = level;
              t168$[S$.$_set](t169$, t168$[S$.$_get](t169$) - 1);
            }
          } else {
            let next = node.next[S$.$_get](level);
            current.next[S$.$_set](level, next);
            if (next != null) {
              t168$0 = next.width;
              t169$0 = level;
              t168$0[S$.$_set](t169$0, t168$0[S$.$_get](t169$0) + (node.width[S$.$_get](level) - 1));
            }
          }
        }
        if (node.level === this[S._height] - 1 && this[S._height] > 1 && this[S._head].next[S$.$_get](node.level) == null) {
          this[S._height] = this[S._height] - 1;
        }
        this[S._length] = this[S._length] - 1;
        return node.value;
      }
      get(key) {
        let t168;
        K.as(key);
        t168 = this[S._getNode](key);
        return t168 == null ? null : t168.value;
      }
      valuesFromKey(key) {
        K.as(key);
        let node = this[S._getNode](key);
        let virtualHead = new (__t$_NodeOfKN$VN()).new(null, null, __t$JSArrayOf_NodeNOfK$V().of([node]), T$.JSArrayOfint().of([0]));
        return new (__t$_ValueIterableOfK$V()).new(virtualHead);
      }
      [S._getNode](key) {
        let t169, t168, t169$, t168$;
        let prev = this[S._head];
        let node = null;
        for (let i = this[S._height] - 1; i >= 0; i = i - 1) {
          node = prev.next[S$.$_get](i);
          while (node != null && (t168 = key, t169 = dart.nullCheck(node.key), this[S._comparator](t168, t169)) > 0) {
            prev = node;
            node = node.next[S$.$_get](i);
          }
        }
        if (node != null && (t168$ = key, t169$ = dart.nullCheck(node.key), this[S._comparator](t168$, t169$)) === 0) {
          return node;
        }
        return null;
      }
      getAt(index) {
        return this[S._getNodeAt](index).value;
      }
      getKeyAt(index) {
        return this[S._getNodeAt](index).key;
      }
      [S._getNodeAt](index) {
        core.RangeError.checkValidIndex(index, this);
        let prev = this[S._head];
        let node = null;
        for (let level = this[S._height] - 1; level >= 0; level = level - 1) {
          node = prev.next[S$.$_get](level);
          while (node != null && index >= node.width[S$.$_get](level)) {
            index = index - node.width[S$.$_get](level);
            prev = node;
            node = node.next[S$.$_get](level);
          }
        }
        return dart.nullCheck(node);
      }
      clear() {
        this[S._height] = 1;
        for (let i = 0; i < 12; i = i + 1) {
          this[S._head].next[S$.$_set](i, null);
        }
        this[S._height] = 1;
        this[S._length] = 0;
      }
    }
    (IndexableSkipList.new = function(_comparator, random = null) {
      let t168;
      this[S._head] = new (__t$_NodeOfK$V()).new(null, null, __t$ListOf_NodeNOfK$V().filled(12, null), T$.ListOfint().filled(12, 0));
      this[S._height] = 1;
      this[S._length] = 0;
      this[S._comparator] = _comparator;
      this[S._random] = (t168 = random, t168 == null ? math.Random.new() : t168);
      ;
    }).prototype = IndexableSkipList.prototype;
    dart.addTypeTests(IndexableSkipList);
    IndexableSkipList.prototype[_is_IndexableSkipList_default] = true;
    dart.addTypeCaches(IndexableSkipList);
    dart.setMethodSignature(IndexableSkipList, () => ({
      __proto__: dart.getMethods(IndexableSkipList.__proto__),
      insert: dart.fnType(dart.nullable(V), [dart.nullable(core.Object), dart.nullable(core.Object)]),
      delete: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      get: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      valuesFromKey: dart.fnType(core.Iterable$(V), [dart.nullable(core.Object)]),
      [S._getNode]: dart.fnType(dart.nullable(indexable_skip_list._Node$(K, V)), [K]),
      getAt: dart.fnType(dart.nullable(V), [core.int]),
      getKeyAt: dart.fnType(dart.nullable(K), [core.int]),
      [S._getNodeAt]: dart.fnType(indexable_skip_list._Node$(K, V), [core.int]),
      clear: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(IndexableSkipList, () => ({
      __proto__: dart.getGetters(IndexableSkipList.__proto__),
      length: core.int,
      keys: core.Iterable$(K),
      values: core.Iterable$(V)
    }));
    dart.setLibraryUri(IndexableSkipList, I[164]);
    dart.setFieldSignature(IndexableSkipList, () => ({
      __proto__: dart.getFields(IndexableSkipList.__proto__),
      [S._head]: dart.finalFieldType(indexable_skip_list._Node$(K, V)),
      [S._random]: dart.finalFieldType(math.Random),
      [S._comparator]: dart.finalFieldType(dart.fnType(core.int, [K, K])),
      [S._height]: dart.fieldType(core.int),
      [S._length]: dart.fieldType(core.int)
    }));
    dart.setStaticFieldSignature(IndexableSkipList, () => ['_maxHeight']);
    return IndexableSkipList;
  });
  indexable_skip_list.IndexableSkipList = indexable_skip_list.IndexableSkipList$();
  dart.defineLazy(indexable_skip_list.IndexableSkipList, {
    /*indexable_skip_list.IndexableSkipList._maxHeight*/get _maxHeight() {
      return 12;
    }
  }, false);
  dart.addTypeTests(indexable_skip_list.IndexableSkipList, _is_IndexableSkipList_default);
  const _is__Node_default = Symbol('_is__Node_default');
  indexable_skip_list._Node$ = dart.generic((K, V) => {
    var __t$VN = () => (__t$VN = dart.constFn(dart.nullable(V)))();
    class _Node extends core.Object {
      get value() {
        return this[S.value$3];
      }
      set value(value) {
        this[S.value$3] = __t$VN().as(value);
      }
      get level() {
        return this.next[S$.$length] - 1;
      }
      static ['_#new#tearOff'](K, V, key, value, next, width) {
        return new (indexable_skip_list._Node$(K, V)).new(key, value, next, width);
      }
    }
    (_Node.new = function(key, value, next, width) {
      this.key = key;
      this[S.value$3] = value;
      this.next = next;
      this.width = width;
      ;
    }).prototype = _Node.prototype;
    dart.addTypeTests(_Node);
    _Node.prototype[_is__Node_default] = true;
    dart.addTypeCaches(_Node);
    dart.setGetterSignature(_Node, () => ({
      __proto__: dart.getGetters(_Node.__proto__),
      level: core.int
    }));
    dart.setLibraryUri(_Node, I[164]);
    dart.setFieldSignature(_Node, () => ({
      __proto__: dart.getFields(_Node.__proto__),
      key: dart.finalFieldType(dart.nullable(K)),
      value: dart.fieldType(dart.nullable(V)),
      next: dart.finalFieldType(core.List$(dart.nullable(indexable_skip_list._Node$(K, V)))),
      width: dart.finalFieldType(core.List$(core.int))
    }));
    return _Node;
  });
  indexable_skip_list._Node = indexable_skip_list._Node$();
  dart.addTypeTests(indexable_skip_list._Node, _is__Node_default);
  const _is__Iterator_default = Symbol('_is__Iterator_default');
  indexable_skip_list._Iterator$ = dart.generic((K, V, E) => {
    var __t$KN = () => (__t$KN = dart.constFn(dart.nullable(K)))();
    var __t$_NodeOfKN$VN = () => (__t$_NodeOfKN$VN = dart.constFn(indexable_skip_list._Node$(__t$KN(), __t$VN())))();
    var __t$_NodeNOfKN$VN = () => (__t$_NodeNOfKN$VN = dart.constFn(dart.nullable(__t$_NodeOfKN$VN())))();
    var __t$VN = () => (__t$VN = dart.constFn(dart.nullable(V)))();
    class _Iterator extends core.Object {
      get node() {
        return this[S.node];
      }
      set node(value) {
        this[S.node] = __t$_NodeNOfKN$VN().as(value);
      }
      moveNext() {
        return (this.node = dart.nullCheck(this.node).next[S$.$_get](0)) != null;
      }
    }
    (_Iterator.new = function(node) {
      this[S.node] = node;
      ;
    }).prototype = _Iterator.prototype;
    dart.addTypeTests(_Iterator);
    _Iterator.prototype[_is__Iterator_default] = true;
    dart.addTypeCaches(_Iterator);
    _Iterator[dart.implements] = () => [core.Iterator$(E)];
    dart.setMethodSignature(_Iterator, () => ({
      __proto__: dart.getMethods(_Iterator.__proto__),
      moveNext: dart.fnType(core.bool, [])
    }));
    dart.setLibraryUri(_Iterator, I[164]);
    dart.setFieldSignature(_Iterator, () => ({
      __proto__: dart.getFields(_Iterator.__proto__),
      node: dart.fieldType(dart.nullable(indexable_skip_list._Node$(dart.nullable(K), dart.nullable(V))))
    }));
    return _Iterator;
  });
  indexable_skip_list._Iterator = indexable_skip_list._Iterator$();
  dart.addTypeTests(indexable_skip_list._Iterator, _is__Iterator_default);
  const _is__KeyIterator_default = Symbol('_is__KeyIterator_default');
  indexable_skip_list._KeyIterator$ = dart.generic((K, V) => {
    class _KeyIterator extends indexable_skip_list._Iterator$(K, V, K) {
      static ['_#new#tearOff'](K, V, node) {
        return new (indexable_skip_list._KeyIterator$(K, V)).new(node);
      }
      get current() {
        return dart.nullCheck(dart.nullCheck(this.node).key);
      }
    }
    (_KeyIterator.new = function(node) {
      _KeyIterator.__proto__.new.call(this, node);
      ;
    }).prototype = _KeyIterator.prototype;
    dart.addTypeTests(_KeyIterator);
    _KeyIterator.prototype[_is__KeyIterator_default] = true;
    dart.addTypeCaches(_KeyIterator);
    dart.setGetterSignature(_KeyIterator, () => ({
      __proto__: dart.getGetters(_KeyIterator.__proto__),
      current: K
    }));
    dart.setLibraryUri(_KeyIterator, I[164]);
    return _KeyIterator;
  });
  indexable_skip_list._KeyIterator = indexable_skip_list._KeyIterator$();
  dart.addTypeTests(indexable_skip_list._KeyIterator, _is__KeyIterator_default);
  const _is__KeyIterable_default = Symbol('_is__KeyIterable_default');
  indexable_skip_list._KeyIterable$ = dart.generic((K, V) => {
    var __t$_KeyIteratorOfK$V = () => (__t$_KeyIteratorOfK$V = dart.constFn(indexable_skip_list._KeyIterator$(K, V)))();
    class _KeyIterable extends collection.IterableBase$(K) {
      static ['_#new#tearOff'](K, V, head) {
        return new (indexable_skip_list._KeyIterable$(K, V)).new(head);
      }
      get iterator() {
        return new (__t$_KeyIteratorOfK$V()).new(this.head);
      }
    }
    (_KeyIterable.new = function(head) {
      this.head = head;
      _KeyIterable.__proto__.new.call(this);
      ;
    }).prototype = _KeyIterable.prototype;
    dart.addTypeTests(_KeyIterable);
    _KeyIterable.prototype[_is__KeyIterable_default] = true;
    dart.addTypeCaches(_KeyIterable);
    dart.setGetterSignature(_KeyIterable, () => ({
      __proto__: dart.getGetters(_KeyIterable.__proto__),
      iterator: core.Iterator$(K),
      [S$.$iterator]: core.Iterator$(K)
    }));
    dart.setLibraryUri(_KeyIterable, I[164]);
    dart.setFieldSignature(_KeyIterable, () => ({
      __proto__: dart.getFields(_KeyIterable.__proto__),
      head: dart.finalFieldType(indexable_skip_list._Node$(dart.nullable(K), dart.nullable(V)))
    }));
    dart.defineExtensionAccessors(_KeyIterable, ['iterator']);
    return _KeyIterable;
  });
  indexable_skip_list._KeyIterable = indexable_skip_list._KeyIterable$();
  dart.addTypeTests(indexable_skip_list._KeyIterable, _is__KeyIterable_default);
  const _is__ValueIterator_default = Symbol('_is__ValueIterator_default');
  indexable_skip_list._ValueIterator$ = dart.generic((K, V) => {
    class _ValueIterator extends indexable_skip_list._Iterator$(K, V, V) {
      static ['_#new#tearOff'](K, V, node) {
        return new (indexable_skip_list._ValueIterator$(K, V)).new(node);
      }
      get current() {
        return dart.nullCheck(dart.nullCheck(this.node).value);
      }
    }
    (_ValueIterator.new = function(node) {
      _ValueIterator.__proto__.new.call(this, node);
      ;
    }).prototype = _ValueIterator.prototype;
    dart.addTypeTests(_ValueIterator);
    _ValueIterator.prototype[_is__ValueIterator_default] = true;
    dart.addTypeCaches(_ValueIterator);
    dart.setGetterSignature(_ValueIterator, () => ({
      __proto__: dart.getGetters(_ValueIterator.__proto__),
      current: V
    }));
    dart.setLibraryUri(_ValueIterator, I[164]);
    return _ValueIterator;
  });
  indexable_skip_list._ValueIterator = indexable_skip_list._ValueIterator$();
  dart.addTypeTests(indexable_skip_list._ValueIterator, _is__ValueIterator_default);
  const _is__ValueIterable_default = Symbol('_is__ValueIterable_default');
  indexable_skip_list._ValueIterable$ = dart.generic((K, V) => {
    var __t$_ValueIteratorOfK$V = () => (__t$_ValueIteratorOfK$V = dart.constFn(indexable_skip_list._ValueIterator$(K, V)))();
    class _ValueIterable extends collection.IterableBase$(V) {
      static ['_#new#tearOff'](K, V, head) {
        return new (indexable_skip_list._ValueIterable$(K, V)).new(head);
      }
      get iterator() {
        return new (__t$_ValueIteratorOfK$V()).new(this.head);
      }
    }
    (_ValueIterable.new = function(head) {
      this.head = head;
      _ValueIterable.__proto__.new.call(this);
      ;
    }).prototype = _ValueIterable.prototype;
    dart.addTypeTests(_ValueIterable);
    _ValueIterable.prototype[_is__ValueIterable_default] = true;
    dart.addTypeCaches(_ValueIterable);
    dart.setGetterSignature(_ValueIterable, () => ({
      __proto__: dart.getGetters(_ValueIterable.__proto__),
      iterator: core.Iterator$(V),
      [S$.$iterator]: core.Iterator$(V)
    }));
    dart.setLibraryUri(_ValueIterable, I[164]);
    dart.setFieldSignature(_ValueIterable, () => ({
      __proto__: dart.getFields(_ValueIterable.__proto__),
      head: dart.finalFieldType(indexable_skip_list._Node$(dart.nullable(K), dart.nullable(V)))
    }));
    dart.defineExtensionAccessors(_ValueIterable, ['iterator']);
    return _ValueIterable;
  });
  indexable_skip_list._ValueIterable = indexable_skip_list._ValueIterable$();
  dart.addTypeTests(indexable_skip_list._ValueIterable, _is__ValueIterable_default);
  backend_manager$.BackendManager = class BackendManager extends core.Object {
    get indexedDB() {
      return js.context.hasProperty("window") ? html.window[S$.$indexedDB] : html.WorkerGlobalScope.instance.indexedDB;
    }
    open(name, path, crashRecovery, cipher, collection) {
      return async.async(storage_backend.StorageBackend, (function* open() {
        let t168, t168$, t168$0;
        let databaseName = (t168 = collection, t168 == null ? name : t168);
        let objectStoreName = collection == null ? "box" : name;
        let db = (yield dart.nullCheck(this.indexedDB)[S$.$open](databaseName, {version: 1, onUpgradeNeeded: dart.fn(e => {
            let t168;
            let db = indexed_db.Database.as(e[S$.$target][S$.$result]);
            if (!(t168 = db.objectStoreNames, t168 == null ? T$.JSArrayOfString().of([]) : t168)[S$.$contains](objectStoreName)) {
              db[S.$createObjectStore](objectStoreName);
            }
          }, T$.VersionChangeEventTovoid())}));
        if (!(t168$ = db.objectStoreNames, t168$ == null ? T$.JSArrayOfString().of([]) : t168$)[S$.$contains](objectStoreName)) {
          core.print("Creating objectStore " + objectStoreName + " in database " + databaseName + "...");
          db = (yield dart.nullCheck(this.indexedDB)[S$.$open](databaseName, {version: dart.notNull((t168$0 = db.version, t168$0 == null ? 1 : t168$0)) + 1, onUpgradeNeeded: dart.fn(e => {
              let t168;
              let db = indexed_db.Database.as(e[S$.$target][S$.$result]);
              if (!(t168 = db.objectStoreNames, t168 == null ? T$.JSArrayOfString().of([]) : t168)[S$.$contains](objectStoreName)) {
                db[S.$createObjectStore](objectStoreName);
              }
            }, T$.VersionChangeEventTovoid())}));
        }
        core.print("Got object store " + objectStoreName + " in database " + databaseName + ".");
        return new storage_backend_js.StorageBackendJs.new(db, cipher, objectStoreName);
      }).bind(this));
    }
    deleteBox(name, path, collection) {
      return async.async(dart.void, (function* deleteBox() {
        let t168, t168$;
        core.print("Delete " + name + " // " + dart.str(collection) + " from disk");
        let databaseName = (t168 = collection, t168 == null ? name : t168);
        let objectStoreName = collection == null ? "box" : name;
        if (collection == null) {
          yield dart.nullCheck(this.indexedDB)[S$.$deleteDatabase](databaseName);
        } else {
          let db = (yield dart.nullCheck(this.indexedDB)[S$.$open](databaseName, {version: 1, onUpgradeNeeded: dart.fn(e => {
              let t168;
              let db = indexed_db.Database.as(e[S$.$target][S$.$result]);
              if ((t168 = db.objectStoreNames, t168 == null ? T$.JSArrayOfString().of([]) : t168)[S$.$contains](objectStoreName)) {
                db.deleteObjectStore(objectStoreName);
              }
            }, T$.VersionChangeEventTovoid())}));
          if ((t168$ = db.objectStoreNames, t168$ == null ? T$.JSArrayOfString().of([]) : t168$)[S$.$isEmpty]) {
            dart.nullCheck(this.indexedDB)[S$.$deleteDatabase](databaseName);
          }
        }
      }).bind(this));
    }
    boxExists(name, path, collection) {
      return async.async(core.bool, (function* boxExists() {
        let t168, t168$;
        let databaseName = (t168 = collection, t168 == null ? name : t168);
        let objectStoreName = collection == null ? "box" : name;
        try {
          let _exists = true;
          if (collection == null) {
            yield dart.nullCheck(this.indexedDB)[S$.$open](databaseName, {version: 1, onUpgradeNeeded: dart.fn(e => {
                dart.nullCheck(e[S$.$target].transaction).abort();
                _exists = false;
              }, T$.VersionChangeEventTovoid())});
          } else {
            let db = (yield dart.nullCheck(this.indexedDB)[S$.$open](collection, {version: 1, onUpgradeNeeded: dart.fn(e => {
                let t168;
                let db = indexed_db.Database.as(e[S$.$target][S$.$result]);
                _exists = (t168 = db.objectStoreNames, t168 == null ? T$.JSArrayOfString().of([]) : t168)[S$.$contains](objectStoreName);
              }, T$.VersionChangeEventTovoid())}));
            _exists = (t168$ = db.objectStoreNames, t168$ == null ? T$.JSArrayOfString().of([]) : t168$)[S$.$contains](objectStoreName);
          }
          return _exists;
        } catch (e) {
          let error = dart.getThrown(e);
          if (core.Object.is(error)) {
            return false;
          } else
            throw e;
        }
      }).bind(this));
    }
    static ['_#new#tearOff']() {
      return new backend_manager$.BackendManager.new();
    }
  };
  (backend_manager$.BackendManager.new = function() {
    ;
  }).prototype = backend_manager$.BackendManager.prototype;
  dart.addTypeTests(backend_manager$.BackendManager);
  dart.addTypeCaches(backend_manager$.BackendManager);
  backend_manager$.BackendManager[dart.implements] = () => [storage_backend.BackendManagerInterface];
  dart.setMethodSignature(backend_manager$.BackendManager, () => ({
    __proto__: dart.getMethods(backend_manager$.BackendManager.__proto__),
    open: dart.fnType(async.Future$(storage_backend.StorageBackend), [core.String, dart.nullable(core.String), core.bool, dart.nullable(hive.HiveCipher), dart.nullable(core.String)]),
    deleteBox: dart.fnType(async.Future$(dart.void), [core.String, dart.nullable(core.String), dart.nullable(core.String)]),
    boxExists: dart.fnType(async.Future$(core.bool), [core.String, dart.nullable(core.String), dart.nullable(core.String)])
  }));
  dart.setGetterSignature(backend_manager$.BackendManager, () => ({
    __proto__: dart.getGetters(backend_manager$.BackendManager.__proto__),
    indexedDB: dart.nullable(indexed_db.IdbFactory)
  }));
  dart.setLibraryUri(backend_manager$.BackendManager, I[165]);
  method_channel_load_bundle_task.MethodChannelLoadBundleTask = class MethodChannelLoadBundleTask extends platform_interface_load_bundle_task.LoadBundleTaskPlatform {
    static ['_#new#tearOff'](opts) {
      let task = opts && 'task' in opts ? opts.task : null;
      let bundle = opts && 'bundle' in opts ? opts.bundle : null;
      let firestore = opts && 'firestore' in opts ? opts.firestore : null;
      return new method_channel_load_bundle_task.MethodChannelLoadBundleTask.new({task: task, bundle: bundle, firestore: firestore});
    }
    get stream() {
      let t170;
      t170 = this[S.__MethodChannelLoadBundleTask_stream];
      return t170 == null ? dart.throw(new _internal.LateError.fieldNI("stream")) : t170;
    }
    set stream(stream$35param) {
      if (this[S.__MethodChannelLoadBundleTask_stream] == null)
        this[S.__MethodChannelLoadBundleTask_stream] = stream$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("stream"));
    }
  };
  (method_channel_load_bundle_task.MethodChannelLoadBundleTask.new = function(opts) {
    let task = opts && 'task' in opts ? opts.task : null;
    let bundle = opts && 'bundle' in opts ? opts.bundle : null;
    let firestore = opts && 'firestore' in opts ? opts.firestore : null;
    this[S.__MethodChannelLoadBundleTask_stream] = null;
    method_channel_load_bundle_task.MethodChannelLoadBundleTask.__proto__.new.call(this);
    function mapNativeStream() {
      return new (T$._AsyncStarImplOfLoadBundleTaskSnapshotPlatform()).new(function* mapNativeStream(stream) {
        let t170, t170$;
        let observerId = (yield task);
        let nativePlatformStream = method_channel_firestore.MethodChannelFirebaseFirestore.loadBundleChannel(dart.nullCheck(observerId)).receiveBroadcastStream(new (T$.IdentityMapOfString$Object()).from(["bundle", bundle, "firestore", firestore]));
        try {
          let iter = async.StreamIterator.new(nativePlatformStream);
          try {
            while (yield iter.moveNext()) {
              let snapshot = iter.current;
              {
                let taskState = load_bundle_task_state$.convertToTaskState(core.String.as(dart.dsend(snapshot, '_get', ["taskState"])));
                if (stream.add(new platform_interface_load_bundle_task_snapshot.LoadBundleTaskSnapshotPlatform.new(taskState, T$.LinkedHashMapOfString$dynamic().from(core.Map.as(snapshot))))) return;
                yield;
                if (taskState === load_bundle_task_state.LoadBundleTaskState.success) {
                  return;
                }
              }
            }
          } finally {
            yield iter.cancel();
          }
        } catch (e) {
          let exception = dart.getThrown(e);
          if (core.Object.is(exception)) {
            if (!core.Exception.is(exception) || !message_codec.PlatformException.is(exception)) {
              dart.rethrow(e);
            }
            let details = exception.details != null ? T$.LinkedHashMapOfString$String().from(core.Map.as(exception.details)) : null;
            dart.throw(new firebase_core_platform_interface.FirebaseException.new({plugin: "cloud_firestore", code: "load-bundle-error", message: (t170$ = (t170 = details, t170 == null ? null : t170[S$.$_get]("message")), t170$ == null ? "" : t170$)}));
          } else
            throw e;
        }
      }).stream;
    }
    dart.fn(mapNativeStream, T$.VoidToStreamOfLoadBundleTaskSnapshotPlatform());
    this.stream = mapNativeStream().asBroadcastStream({onListen: dart.fn(sub => sub.resume(), T$.StreamSubscriptionOfLoadBundleTaskSnapshotPlatformTovoid()), onCancel: dart.fn(sub => sub.pause(), T$.StreamSubscriptionOfLoadBundleTaskSnapshotPlatformTovoid())});
  }).prototype = method_channel_load_bundle_task.MethodChannelLoadBundleTask.prototype;
  dart.addTypeTests(method_channel_load_bundle_task.MethodChannelLoadBundleTask);
  dart.addTypeCaches(method_channel_load_bundle_task.MethodChannelLoadBundleTask);
  dart.setGetterSignature(method_channel_load_bundle_task.MethodChannelLoadBundleTask, () => ({
    __proto__: dart.getGetters(method_channel_load_bundle_task.MethodChannelLoadBundleTask.__proto__),
    stream: async.Stream$(platform_interface_load_bundle_task_snapshot.LoadBundleTaskSnapshotPlatform)
  }));
  dart.setSetterSignature(method_channel_load_bundle_task.MethodChannelLoadBundleTask, () => ({
    __proto__: dart.getSetters(method_channel_load_bundle_task.MethodChannelLoadBundleTask.__proto__),
    stream: async.Stream$(platform_interface_load_bundle_task_snapshot.LoadBundleTaskSnapshotPlatform)
  }));
  dart.setLibraryUri(method_channel_load_bundle_task.MethodChannelLoadBundleTask, I[166]);
  dart.setFieldSignature(method_channel_load_bundle_task.MethodChannelLoadBundleTask, () => ({
    __proto__: dart.getFields(method_channel_load_bundle_task.MethodChannelLoadBundleTask.__proto__),
    [S.__MethodChannelLoadBundleTask_stream]: dart.fieldType(dart.nullable(async.Stream$(platform_interface_load_bundle_task_snapshot.LoadBundleTaskSnapshotPlatform)))
  }));
  method_channel_query_snapshot.MethodChannelQuerySnapshot = class MethodChannelQuerySnapshot extends platform_interface_query_snapshot.QuerySnapshotPlatform {
    static ['_#new#tearOff'](firestore, data) {
      return new method_channel_query_snapshot.MethodChannelQuerySnapshot.new(firestore, data);
    }
  };
  (method_channel_query_snapshot.MethodChannelQuerySnapshot.new = function(firestore, data) {
    method_channel_query_snapshot.MethodChannelQuerySnapshot.__proto__.new.call(this, T$.ListOfDocumentSnapshotPlatform().generate(core.int.as(dart.dload(data[S$.$_get]("documents"), 'length')), dart.fn(index => new platform_interface_document_snapshot.DocumentSnapshotPlatform.new(firestore, core.String.as(dart.dsend(data[S$.$_get]("paths"), '_get', [index])), new (T$.IdentityMapOfString$dynamic()).from(["data", T$.LinkedHashMapOfString$dynamic().from(core.Map.as(dart.dsend(data[S$.$_get]("documents"), '_get', [index]))), "metadata", new (T$.IdentityMapOfString$dynamic()).from(["isFromCache", dart.dsend(dart.dsend(data[S$.$_get]("metadatas"), '_get', [index]), '_get', ["isFromCache"]), "hasPendingWrites", dart.dsend(dart.dsend(data[S$.$_get]("metadatas"), '_get', [index]), '_get', ["hasPendingWrites"])])])), T$.intToDocumentSnapshotPlatform())), T$.ListOfDocumentChangePlatform().generate(core.int.as(dart.dload(data[S$.$_get]("documentChanges"), 'length')), dart.fn(index => new method_channel_document_change.MethodChannelDocumentChange.new(firestore, T$.LinkedHashMapOfString$dynamic().from(core.Map.as(dart.dsend(data[S$.$_get]("documentChanges"), '_get', [index])))), T$.intToMethodChannelDocumentChange())), new snapshot_metadata.SnapshotMetadataPlatform.new(core.bool.as(dart.dsend(data[S$.$_get]("metadata"), '_get', ["hasPendingWrites"])), core.bool.as(dart.dsend(data[S$.$_get]("metadata"), '_get', ["isFromCache"]))));
    ;
  }).prototype = method_channel_query_snapshot.MethodChannelQuerySnapshot.prototype;
  dart.addTypeTests(method_channel_query_snapshot.MethodChannelQuerySnapshot);
  dart.addTypeCaches(method_channel_query_snapshot.MethodChannelQuerySnapshot);
  dart.setLibraryUri(method_channel_query_snapshot.MethodChannelQuerySnapshot, I[167]);
  source$.getSourceString = function getSourceString(source) {
    switch (source) {
      case C[20] || CT.C20:
        {
          return "server";
        }
      case C[19] || CT.C19:
        {
          return "cache";
        }
      default:
        {
          return "default";
        }
    }
  };
  method_channel_query.MethodChannelQuery = class MethodChannelQuery extends platform_interface_query.QueryPlatform {
    get isCollectionGroupQuery() {
      return this[S.isCollectionGroupQuery$1];
    }
    set isCollectionGroupQuery(value) {
      super.isCollectionGroupQuery = value;
    }
    static ['_#new#tearOff'](_firestore, path, opts) {
      let parameters = opts && 'parameters' in opts ? opts.parameters : null;
      let isCollectionGroupQuery = opts && 'isCollectionGroupQuery' in opts ? opts.isCollectionGroupQuery : false;
      return new method_channel_query.MethodChannelQuery.new(_firestore, path, {parameters: parameters, isCollectionGroupQuery: isCollectionGroupQuery});
    }
    get path() {
      return this[S._pointer$7].path;
    }
    [S._copyWithParameters$1](parameters) {
      let t170;
      return new method_channel_query.MethodChannelQuery.new(this.firestore, this[S._pointer$7].path, {isCollectionGroupQuery: this.isCollectionGroupQuery, parameters: T$.MapOfString$dynamic().unmodifiable((t170 = T$.LinkedHashMapOfString$dynamic().from(this.parameters), (() => {
          t170[S$.$addAll](parameters);
          return t170;
        })()))});
    }
    endAtDocument(orders, values) {
      return this[S._copyWithParameters$1](new (T$.IdentityMapOfString$dynamic()).from(["orderBy", orders, "endAt", values, "endBefore", null]));
    }
    endAt(fields) {
      return this[S._copyWithParameters$1](new (T$.IdentityMapOfString$dynamic()).from(["endAt", fields, "endBefore", null]));
    }
    endBeforeDocument(orders, values) {
      return this[S._copyWithParameters$1](new (T$.IdentityMapOfString$dynamic()).from(["orderBy", orders, "endAt", null, "endBefore", values]));
    }
    endBefore(fields) {
      return this[S._copyWithParameters$1](new (T$.IdentityMapOfString$dynamic()).from(["endAt", null, "endBefore", fields]));
    }
    get(options = C[10] || CT.C10) {
      return async.async(platform_interface_query_snapshot.QuerySnapshotPlatform, (function* get() {
        try {
          let data = (yield method_channel_firestore.MethodChannelFirebaseFirestore.channel.invokeMapMethod(core.String, dart.dynamic, "Query#get", new (T$.IdentityMapOfString$dynamic()).from(["query", this, "firestore", this.firestore, "source", source$.getSourceString(options.source)])));
          return new method_channel_query_snapshot.MethodChannelQuerySnapshot.new(this.firestore, dart.nullCheck(data));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    limit(limit) {
      return this[S._copyWithParameters$1](new (T$.IdentityMapOfString$dynamic()).from(["limit", limit, "limitToLast", null]));
    }
    limitToLast(limit) {
      return this[S._copyWithParameters$1](new (T$.IdentityMapOfString$dynamic()).from(["limit", null, "limitToLast", limit]));
    }
    snapshots(opts) {
      let includeMetadataChanges = opts && 'includeMetadataChanges' in opts ? opts.includeMetadataChanges : false;
      let controller = null;
      function controller$35get() {
        let t172;
        t172 = controller;
        return t172 == null ? dart.throw(new _internal.LateError.localNI("controller")) : t172;
      }
      function controller$35set(controller$35param) {
        return controller = controller$35param;
      }
      let snapshotStream = null;
      controller$35set(T$.StreamControllerOfQuerySnapshotPlatform().broadcast({onListen: dart.fn(() => async.async(dart.void, (function*() {
          let observerId = (yield method_channel_firestore.MethodChannelFirebaseFirestore.channel.invokeMethod(core.String, "Query#snapshots"));
          snapshotStream = method_channel_firestore.MethodChannelFirebaseFirestore.querySnapshotChannel(dart.nullCheck(observerId)).receiveBroadcastStream(new (T$.IdentityMapOfString$dynamic()).from(["query", this, "includeMetadataChanges", includeMetadataChanges])).handleError(C[110] || CT.C110).listen(dart.fn(snapshot => {
            controller$35get().add(new method_channel_query_snapshot.MethodChannelQuerySnapshot.new(this.firestore, core.Map.as(snapshot)));
          }, T$.dynamicTovoid()), {onError: dart.bind(controller$35get(), 'addError')});
        }).bind(this)), T$.VoidToFutureOfvoid()), onCancel: dart.fn(() => {
          let t174;
          t174 = snapshotStream;
          t174 == null ? null : t174.cancel();
        }, T$.VoidTovoid())}));
      return controller$35get().stream;
    }
    orderBy(orders) {
      return this[S._copyWithParameters$1](new (T$.IdentityMapOfString$dynamic()).from(["orderBy", orders]));
    }
    startAfterDocument(orders, values) {
      return this[S._copyWithParameters$1](new (T$.IdentityMapOfString$dynamic()).from(["orderBy", orders, "startAt", null, "startAfter", values]));
    }
    startAfter(fields) {
      return this[S._copyWithParameters$1](new (T$.IdentityMapOfString$dynamic()).from(["startAt", null, "startAfter", fields]));
    }
    startAtDocument(orders, values) {
      return this[S._copyWithParameters$1](new (T$.IdentityMapOfString$dynamic()).from(["orderBy", orders, "startAt", values, "startAfter", null]));
    }
    startAt(fields) {
      return this[S._copyWithParameters$1](new (T$.IdentityMapOfString$dynamic()).from(["startAt", fields, "startAfter", null]));
    }
    where(conditions) {
      return this[S._copyWithParameters$1](new (T$.IdentityMapOfString$dynamic()).from(["where", conditions]));
    }
    _equals(other) {
      if (other == null) return false;
      return this[S$.$runtimeType]._equals(other[S$.$runtimeType]) && method_channel_query.MethodChannelQuery.is(other) && other.firestore._equals(this.firestore) && other[S._pointer$7]._equals(this[S._pointer$7]) && other.isCollectionGroupQuery === this.isCollectionGroupQuery && (C[23] || CT.C23).equals(other.parameters, this.parameters);
    }
    get hashCode() {
      return core.Object.hash(this[S$.$runtimeType], this.firestore, this[S._pointer$7], this.isCollectionGroupQuery, (C[23] || CT.C23).hash(this.parameters));
    }
  };
  (method_channel_query.MethodChannelQuery.new = function(_firestore, path, opts) {
    let parameters = opts && 'parameters' in opts ? opts.parameters : null;
    let isCollectionGroupQuery = opts && 'isCollectionGroupQuery' in opts ? opts.isCollectionGroupQuery : false;
    this[S.isCollectionGroupQuery$1] = isCollectionGroupQuery;
    this[S._pointer$7] = new pointer.Pointer.new(path);
    method_channel_query.MethodChannelQuery.__proto__.new.call(this, _firestore, parameters);
    ;
  }).prototype = method_channel_query.MethodChannelQuery.prototype;
  dart.addTypeTests(method_channel_query.MethodChannelQuery);
  dart.addTypeCaches(method_channel_query.MethodChannelQuery);
  dart.setMethodSignature(method_channel_query.MethodChannelQuery, () => ({
    __proto__: dart.getMethods(method_channel_query.MethodChannelQuery.__proto__),
    [S._copyWithParameters$1]: dart.fnType(method_channel_query.MethodChannelQuery, [core.Map$(core.String, dart.dynamic)])
  }));
  dart.setGetterSignature(method_channel_query.MethodChannelQuery, () => ({
    __proto__: dart.getGetters(method_channel_query.MethodChannelQuery.__proto__),
    path: core.String
  }));
  dart.setLibraryUri(method_channel_query.MethodChannelQuery, I[168]);
  dart.setFieldSignature(method_channel_query.MethodChannelQuery, () => ({
    __proto__: dart.getFields(method_channel_query.MethodChannelQuery.__proto__),
    isCollectionGroupQuery: dart.finalFieldType(core.bool),
    [S._pointer$7]: dart.finalFieldType(pointer.Pointer)
  }));
  dart.defineExtensionMethods(method_channel_query.MethodChannelQuery, ['_equals']);
  dart.defineExtensionAccessors(method_channel_query.MethodChannelQuery, ['hashCode']);
  method_channel_collection_reference.MethodChannelCollectionReference = class MethodChannelCollectionReference extends method_channel_query.MethodChannelQuery {
    get [S._pointer$6]() {
      return this[S._pointer$5];
    }
    set [S._pointer$6](value) {
      super[S._pointer$6] = value;
    }
    static ['_#new#tearOff'](firestore, path) {
      return new method_channel_collection_reference.MethodChannelCollectionReference.new(firestore, path);
    }
    get id() {
      return this[S._pointer$6].id;
    }
    get parent() {
      let parentPath = this[S._pointer$6].parentPath();
      return parentPath == null ? null : new method_channel_document_reference.MethodChannelDocumentReference.new(this.firestore, parentPath);
    }
    get path() {
      return this[S._pointer$6].path;
    }
    doc(path = null) {
      let documentPath = null;
      if (path != null) {
        documentPath = this[S._pointer$6].documentPath(path);
      } else {
        let autoId = auto_id_generator.AutoIdGenerator.autoId();
        documentPath = this[S._pointer$6].documentPath(autoId);
      }
      return new method_channel_document_reference.MethodChannelDocumentReference.new(this.firestore, documentPath);
    }
    get [S$._pointer$1]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[130] || CT.C130)));
    }
  };
  (method_channel_collection_reference.MethodChannelCollectionReference.new = function(firestore, path) {
    this[S._pointer$5] = new pointer.Pointer.new(path);
    method_channel_collection_reference.MethodChannelCollectionReference.__proto__.new.call(this, firestore, path);
    ;
  }).prototype = method_channel_collection_reference.MethodChannelCollectionReference.prototype;
  dart.addTypeTests(method_channel_collection_reference.MethodChannelCollectionReference);
  dart.addTypeCaches(method_channel_collection_reference.MethodChannelCollectionReference);
  method_channel_collection_reference.MethodChannelCollectionReference[dart.implements] = () => [platform_interface_collection_reference.CollectionReferencePlatform];
  dart.setMethodSignature(method_channel_collection_reference.MethodChannelCollectionReference, () => ({
    __proto__: dart.getMethods(method_channel_collection_reference.MethodChannelCollectionReference.__proto__),
    doc: dart.fnType(platform_interface_document_reference.DocumentReferencePlatform, [], [dart.nullable(core.String)])
  }));
  dart.setGetterSignature(method_channel_collection_reference.MethodChannelCollectionReference, () => ({
    __proto__: dart.getGetters(method_channel_collection_reference.MethodChannelCollectionReference.__proto__),
    id: core.String,
    parent: dart.nullable(platform_interface_document_reference.DocumentReferencePlatform),
    [S$._pointer$1]: pointer.Pointer
  }));
  dart.setLibraryUri(method_channel_collection_reference.MethodChannelCollectionReference, I[169]);
  dart.setFieldSignature(method_channel_collection_reference.MethodChannelCollectionReference, () => ({
    __proto__: dart.getFields(method_channel_collection_reference.MethodChannelCollectionReference.__proto__),
    [S._pointer$6]: dart.finalFieldType(pointer.Pointer)
  }));
  method_channel_document_reference.MethodChannelDocumentReference = class MethodChannelDocumentReference extends platform_interface_document_reference.DocumentReferencePlatform {
    get [S._pointer$8]() {
      let t174;
      t174 = this[S.__MethodChannelDocumentReference__pointer];
      return t174 == null ? dart.throw(new _internal.LateError.fieldNI("_pointer")) : t174;
    }
    set [S._pointer$8](_pointer$35param) {
      this[S.__MethodChannelDocumentReference__pointer] = _pointer$35param;
    }
    static ['_#new#tearOff'](firestore, path) {
      return new method_channel_document_reference.MethodChannelDocumentReference.new(firestore, path);
    }
    set(data, options = null) {
      return async.async(dart.void, (function* set() {
        let t174, t174$;
        try {
          yield method_channel_firestore.MethodChannelFirebaseFirestore.channel.invokeMethod(dart.void, "DocumentReference#set", new (T$.IdentityMapOfString$dynamic()).from(["firestore", this.firestore, "reference", this, "data", data, "options", new (T$.IdentityMapOfString$dynamic()).from(["merge", (t174 = options, t174 == null ? null : t174.merge), "mergeFields", (t174$ = options, t174$ == null ? null : t174$.mergeFields)])]));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    update(data) {
      return async.async(dart.void, (function* update() {
        try {
          yield method_channel_firestore.MethodChannelFirebaseFirestore.channel.invokeMethod(dart.void, "DocumentReference#update", new (T$.IdentityMapOfString$dynamic()).from(["firestore", this.firestore, "reference", this, "data", data]));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    get(options = C[10] || CT.C10) {
      return async.async(platform_interface_document_snapshot.DocumentSnapshotPlatform, (function* get() {
        try {
          let data = (yield method_channel_firestore.MethodChannelFirebaseFirestore.channel.invokeMapMethod(core.String, dart.dynamic, "DocumentReference#get", new (T$.IdentityMapOfString$dynamic()).from(["firestore", this.firestore, "reference", this, "source", source$.getSourceString(options.source)])));
          return new platform_interface_document_snapshot.DocumentSnapshotPlatform.new(this.firestore, this[S._pointer$8].path, dart.nullCheck(data));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    delete() {
      return async.async(dart.void, (function* $delete() {
        try {
          yield method_channel_firestore.MethodChannelFirebaseFirestore.channel.invokeMethod(dart.void, "DocumentReference#delete", new (T$.IdentityMapOfString$dynamic()).from(["firestore", this.firestore, "reference", this]));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    snapshots(opts) {
      let includeMetadataChanges = opts && 'includeMetadataChanges' in opts ? opts.includeMetadataChanges : false;
      let controller = null;
      function controller$35get() {
        let t179;
        t179 = controller;
        return t179 == null ? dart.throw(new _internal.LateError.localNI("controller")) : t179;
      }
      function controller$35set(controller$35param) {
        return controller = controller$35param;
      }
      let snapshotStream = null;
      controller$35set(T$.StreamControllerOfDocumentSnapshotPlatform().broadcast({onListen: dart.fn(() => async.async(dart.void, (function*() {
          let observerId = (yield method_channel_firestore.MethodChannelFirebaseFirestore.channel.invokeMethod(core.String, "DocumentReference#snapshots"));
          snapshotStream = method_channel_firestore.MethodChannelFirebaseFirestore.documentSnapshotChannel(dart.nullCheck(observerId)).receiveBroadcastStream(new (T$.IdentityMapOfString$dynamic()).from(["reference", this, "includeMetadataChanges", includeMetadataChanges])).handleError(C[110] || CT.C110).listen(dart.fn(snapshot => {
            controller$35get().add(new platform_interface_document_snapshot.DocumentSnapshotPlatform.new(this.firestore, core.String.as(dart.dsend(snapshot, '_get', ["path"])), new (T$.IdentityMapOfString$dynamic()).from(["data", dart.dsend(snapshot, '_get', ["data"]), "metadata", dart.dsend(snapshot, '_get', ["metadata"])])));
          }, T$.dynamicTovoid()), {onError: dart.bind(controller$35get(), 'addError')});
        }).bind(this)), T$.VoidToFutureOfvoid()), onCancel: dart.fn(() => {
          let t181;
          t181 = snapshotStream;
          t181 == null ? null : t181.cancel();
        }, T$.VoidTovoid())}));
      return controller$35get().stream;
    }
  };
  (method_channel_document_reference.MethodChannelDocumentReference.new = function(firestore, path) {
    this[S.__MethodChannelDocumentReference__pointer] = null;
    method_channel_document_reference.MethodChannelDocumentReference.__proto__.new.call(this, firestore, path);
    this[S._pointer$8] = new pointer.Pointer.new(path);
  }).prototype = method_channel_document_reference.MethodChannelDocumentReference.prototype;
  dart.addTypeTests(method_channel_document_reference.MethodChannelDocumentReference);
  dart.addTypeCaches(method_channel_document_reference.MethodChannelDocumentReference);
  dart.setGetterSignature(method_channel_document_reference.MethodChannelDocumentReference, () => ({
    __proto__: dart.getGetters(method_channel_document_reference.MethodChannelDocumentReference.__proto__),
    [S._pointer$8]: pointer.Pointer
  }));
  dart.setSetterSignature(method_channel_document_reference.MethodChannelDocumentReference, () => ({
    __proto__: dart.getSetters(method_channel_document_reference.MethodChannelDocumentReference.__proto__),
    [S._pointer$8]: pointer.Pointer
  }));
  dart.setLibraryUri(method_channel_document_reference.MethodChannelDocumentReference, I[170]);
  dart.setFieldSignature(method_channel_document_reference.MethodChannelDocumentReference, () => ({
    __proto__: dart.getFields(method_channel_document_reference.MethodChannelDocumentReference.__proto__),
    [S.__MethodChannelDocumentReference__pointer]: dart.fieldType(dart.nullable(pointer.Pointer))
  }));
  method_channel_transaction.MethodChannelTransaction = class MethodChannelTransaction extends platform_interface_transaction.TransactionPlatform {
    get appName() {
      return this[S.appName];
    }
    set appName(value) {
      super.appName = value;
    }
    get [S._transactionId]() {
      let t181;
      t181 = this[S.__MethodChannelTransaction__transactionId];
      return t181 == null ? dart.throw(new _internal.LateError.fieldNI("_transactionId")) : t181;
    }
    set [S._transactionId](_transactionId$35param) {
      this[S.__MethodChannelTransaction__transactionId] = _transactionId$35param;
    }
    get [S._firestore$2]() {
      let t181;
      t181 = this[S.__MethodChannelTransaction__firestore];
      return t181 == null ? dart.throw(new _internal.LateError.fieldNI("_firestore")) : t181;
    }
    set [S._firestore$2](_firestore$35param) {
      this[S.__MethodChannelTransaction__firestore] = _firestore$35param;
    }
    static ['_#new#tearOff'](transactionId, appName) {
      return new method_channel_transaction.MethodChannelTransaction.new(transactionId, appName);
    }
    get commands() {
      return this[S._commands];
    }
    get(documentPath) {
      return async.async(platform_interface_document_snapshot.DocumentSnapshotPlatform, (function* get() {
        if (!this[S._commands][S$.$isEmpty]) dart.assertFailed("Transactions require all reads to be executed before all writes.", I[171], 43, 12, "_commands.isEmpty");
        let result = (yield method_channel_firestore.MethodChannelFirebaseFirestore.channel.invokeMapMethod(core.String, dart.dynamic, "Transaction#get", new (T$.IdentityMapOfString$dynamic()).from(["firestore", this[S._firestore$2], "transactionId", this[S._transactionId], "reference", this[S._firestore$2].doc(documentPath)])));
        return new platform_interface_document_snapshot.DocumentSnapshotPlatform.new(this[S._firestore$2], documentPath, T$.LinkedHashMapOfString$dynamic().from(dart.nullCheck(result)));
      }).bind(this));
    }
    delete(documentPath) {
      this[S._commands][S$.$add](new (T$.IdentityMapOfString$String()).from(["type", "DELETE", "path", documentPath]));
      return this;
    }
    update(documentPath, data) {
      this[S._commands][S$.$add](new (T$.IdentityMapOfString$dynamic()).from(["type", "UPDATE", "path", documentPath, "data", data]));
      return this;
    }
    set(documentPath, data, options = null) {
      let t181, t181$;
      this[S._commands][S$.$add](new (T$.IdentityMapOfString$dynamic()).from(["type", "SET", "path", documentPath, "data", data, "options", new (T$.IdentityMapOfString$ObjectN()).from(["merge", (t181 = options, t181 == null ? null : t181.merge), "mergeFields", (t181$ = options, t181$ == null ? null : t181$.mergeFields)])]));
      return this;
    }
  };
  (method_channel_transaction.MethodChannelTransaction.new = function(transactionId, appName) {
    this[S.__MethodChannelTransaction__transactionId] = null;
    this[S.__MethodChannelTransaction__firestore] = null;
    this[S._commands] = T$.JSArrayOfMapOfString$dynamic().of([]);
    this[S.appName] = appName;
    this[S.__MethodChannelTransaction__transactionId] = transactionId;
    method_channel_transaction.MethodChannelTransaction.__proto__.new.call(this);
    this[S._firestore$2] = platform_interface_firestore.FirebaseFirestorePlatform.instanceFor({app: firebase_core.Firebase.app(this.appName)});
  }).prototype = method_channel_transaction.MethodChannelTransaction.prototype;
  dart.addTypeTests(method_channel_transaction.MethodChannelTransaction);
  dart.addTypeCaches(method_channel_transaction.MethodChannelTransaction);
  dart.setMethodSignature(method_channel_transaction.MethodChannelTransaction, () => ({
    __proto__: dart.getMethods(method_channel_transaction.MethodChannelTransaction.__proto__),
    delete: dart.fnType(method_channel_transaction.MethodChannelTransaction, [core.String]),
    update: dart.fnType(method_channel_transaction.MethodChannelTransaction, [core.String, core.Map$(core.String, dart.dynamic)]),
    set: dart.fnType(method_channel_transaction.MethodChannelTransaction, [core.String, core.Map$(core.String, dart.dynamic)], [dart.nullable(set_options.SetOptions)])
  }));
  dart.setGetterSignature(method_channel_transaction.MethodChannelTransaction, () => ({
    __proto__: dart.getGetters(method_channel_transaction.MethodChannelTransaction.__proto__),
    [S._transactionId]: core.String,
    [S._firestore$2]: platform_interface_firestore.FirebaseFirestorePlatform
  }));
  dart.setSetterSignature(method_channel_transaction.MethodChannelTransaction, () => ({
    __proto__: dart.getSetters(method_channel_transaction.MethodChannelTransaction.__proto__),
    [S._transactionId]: core.String,
    [S._firestore$2]: platform_interface_firestore.FirebaseFirestorePlatform
  }));
  dart.setLibraryUri(method_channel_transaction.MethodChannelTransaction, I[172]);
  dart.setFieldSignature(method_channel_transaction.MethodChannelTransaction, () => ({
    __proto__: dart.getFields(method_channel_transaction.MethodChannelTransaction.__proto__),
    appName: dart.finalFieldType(core.String),
    [S.__MethodChannelTransaction__transactionId]: dart.fieldType(dart.nullable(core.String)),
    [S.__MethodChannelTransaction__firestore]: dart.fieldType(dart.nullable(platform_interface_firestore.FirebaseFirestorePlatform)),
    [S._commands]: dart.fieldType(core.List$(core.Map$(core.String, dart.dynamic)))
  }));
  method_channel_write_batch.MethodChannelWriteBatch = class MethodChannelWriteBatch extends platform_interface_write_batch.WriteBatchPlatform {
    static ['_#new#tearOff'](_firestore) {
      return new method_channel_write_batch.MethodChannelWriteBatch.new(_firestore);
    }
    commit() {
      return async.async(dart.void, (function* commit() {
        this[S._assertNotCommitted]();
        this[S._committed] = true;
        if (this[S._writes][S$.$isEmpty]) {
          return;
        }
        try {
          yield method_channel_firestore.MethodChannelFirebaseFirestore.channel.invokeMethod(dart.void, "WriteBatch#commit", new (T$.IdentityMapOfString$dynamic()).from(["firestore", this[S._firestore$3], "writes", this[S._writes]]));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    delete(documentPath) {
      this[S._assertNotCommitted]();
      this[S._writes][S$.$add](new (T$.IdentityMapOfString$dynamic()).from(["path", documentPath, "type", "DELETE"]));
    }
    set(documentPath, data, options = null) {
      let t182, t182$;
      this[S._assertNotCommitted]();
      this[S._writes][S$.$add](new (T$.IdentityMapOfString$dynamic()).from(["path", documentPath, "type", "SET", "data", data, "options", new (T$.IdentityMapOfString$dynamic()).from(["merge", (t182 = options, t182 == null ? null : t182.merge), "mergeFields", (t182$ = options, t182$ == null ? null : t182$.mergeFields)])]));
    }
    update(documentPath, data) {
      this[S._assertNotCommitted]();
      this[S._writes][S$.$add](new (T$.IdentityMapOfString$dynamic()).from(["path", documentPath, "type", "UPDATE", "data", data]));
    }
    [S._assertNotCommitted]() {
      if (this[S._committed]) {
        dart.throw(new core.StateError.new("This batch has already been committed and can no longer be changed."));
      }
    }
  };
  (method_channel_write_batch.MethodChannelWriteBatch.new = function(_firestore) {
    this[S._writes] = T$.JSArrayOfMapOfString$dynamic().of([]);
    this[S._committed] = false;
    this[S._firestore$3] = _firestore;
    method_channel_write_batch.MethodChannelWriteBatch.__proto__.new.call(this);
    ;
  }).prototype = method_channel_write_batch.MethodChannelWriteBatch.prototype;
  dart.addTypeTests(method_channel_write_batch.MethodChannelWriteBatch);
  dart.addTypeCaches(method_channel_write_batch.MethodChannelWriteBatch);
  dart.setMethodSignature(method_channel_write_batch.MethodChannelWriteBatch, () => ({
    __proto__: dart.getMethods(method_channel_write_batch.MethodChannelWriteBatch.__proto__),
    [S._assertNotCommitted]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(method_channel_write_batch.MethodChannelWriteBatch, I[173]);
  dart.setFieldSignature(method_channel_write_batch.MethodChannelWriteBatch, () => ({
    __proto__: dart.getFields(method_channel_write_batch.MethodChannelWriteBatch.__proto__),
    [S._firestore$3]: dart.finalFieldType(platform_interface_firestore.FirebaseFirestorePlatform),
    [S._writes]: dart.fieldType(core.List$(core.Map$(core.String, dart.dynamic))),
    [S._committed]: dart.fieldType(core.bool)
  }));
  firestore_message_codec.FirestoreMessageCodec = class FirestoreMessageCodec extends message_codecs.StandardMessageCodec {
    static ['_#new#tearOff']() {
      return new firestore_message_codec.FirestoreMessageCodec.new();
    }
    writeValue(buffer, value) {
      if (core.DateTime.is(value)) {
        buffer.putUint8(128);
        buffer.putInt64(value.millisecondsSinceEpoch);
      } else if (timestamp.Timestamp.is(value)) {
        buffer.putUint8(136);
        buffer.putInt64(value.seconds);
        buffer.putInt32(value.nanoseconds);
      } else if (geo_point.GeoPoint.is(value)) {
        buffer.putUint8(129);
        buffer.putFloat64(value.latitude);
        buffer.putFloat64(value.longitude);
      } else if (platform_interface_document_reference.DocumentReferencePlatform.is(value)) {
        buffer.putUint8(130);
        this.writeValue(buffer, value.firestore);
        this.writeValue(buffer, value.path);
      } else if (blob.Blob.is(value)) {
        buffer.putUint8(131);
        this.writeSize(buffer, value.bytes[S$.$length]);
        buffer.putUint8List(value.bytes);
      } else if (platform_interface_field_value.FieldValuePlatform.is(value)) {
        let delegate = method_channel_field_value.MethodChannelFieldValue.as(platform_interface_field_value.FieldValuePlatform.getDelegate(value));
        let code = dart.nullCheck(firestore_message_codec.FirestoreMessageCodec._kFieldValueCodes[S$.$_get](delegate.type));
        buffer.putUint8(code);
        if (delegate.value != null) this.writeValue(buffer, delegate.value);
      } else if (field_path_type.FieldPathType.is(value)) {
        let code = dart.nullCheck(firestore_message_codec.FirestoreMessageCodec._kFieldPathCodes[S$.$_get](value));
        buffer.putUint8(code);
      } else if (field_path.FieldPath.is(value)) {
        buffer.putUint8(140);
        this.writeSize(buffer, value.components[S$.$length]);
        for (let item of value.components) {
          this.writeValue(buffer, item);
        }
      } else if (method_channel_firestore.MethodChannelFirebaseFirestore.is(value)) {
        buffer.putUint8(144);
        this.writeValue(buffer, value.app.name);
        this.writeValue(buffer, value.settings);
      } else if (method_channel_query.MethodChannelQuery.is(value)) {
        buffer.putUint8(145);
        this.writeValue(buffer, new (T$.IdentityMapOfString$dynamic()).from(["firestore", value.firestore, "path", value.path, "isCollectionGroup", value.isCollectionGroupQuery, "parameters", value.parameters]));
      } else if (settings.Settings.is(value)) {
        buffer.putUint8(146);
        this.writeValue(buffer, value.asMap);
      } else if (dart.equals(value, 0 / 0)) {
        buffer.putUint8(141);
      } else if (dart.equals(value, 1 / 0)) {
        buffer.putUint8(142);
      } else if (dart.equals(value, -1 / 0)) {
        buffer.putUint8(143);
      } else {
        super.writeValue(buffer, value);
      }
    }
    readValueOfType(type, buffer) {
      switch (type) {
        case 128:
          {
            return new core.DateTime.fromMillisecondsSinceEpoch(buffer.getInt64());
          }
        case 136:
          {
            return new timestamp.Timestamp.new(buffer.getInt64(), buffer.getInt32());
          }
        case 129:
          {
            return new geo_point.GeoPoint.new(buffer.getFloat64(), buffer.getFloat64());
          }
        case 130:
          {
            let appName = core.String.as(dart.nullCheck(this.readValue(buffer)));
            let path = core.String.as(dart.nullCheck(this.readValue(buffer)));
            let app = firebase_core.Firebase.app(appName);
            let firestore = platform_interface_firestore.FirebaseFirestorePlatform.instanceFor({app: app});
            return firestore.doc(path);
          }
        case 131:
          {
            let length = this.readSize(buffer);
            let bytes = buffer.getUint8List(length);
            return new blob.Blob.new(typed_data.Uint8List.as(bytes));
          }
        case 139:
          {
            return field_path.FieldPath.documentId;
          }
        case 141:
          {
            return 0 / 0;
          }
        case 142:
          {
            return 1 / 0;
          }
        case 143:
          {
            return -1 / 0;
          }
        case 144:
        case 145:
        case 146:
        case 132:
        case 133:
        case 134:
        case 135:
        case 137:
        case 138:
        default:
          {
            return super.readValueOfType(type, buffer);
          }
      }
    }
  };
  (firestore_message_codec.FirestoreMessageCodec.new = function() {
    firestore_message_codec.FirestoreMessageCodec.__proto__.new.call(this);
    ;
  }).prototype = firestore_message_codec.FirestoreMessageCodec.prototype;
  dart.addTypeTests(firestore_message_codec.FirestoreMessageCodec);
  dart.addTypeCaches(firestore_message_codec.FirestoreMessageCodec);
  dart.setMethodSignature(firestore_message_codec.FirestoreMessageCodec, () => ({
    __proto__: dart.getMethods(firestore_message_codec.FirestoreMessageCodec.__proto__),
    writeValue: dart.fnType(dart.void, [serialization.WriteBuffer, dart.dynamic])
  }));
  dart.setLibraryUri(firestore_message_codec.FirestoreMessageCodec, I[174]);
  dart.setStaticFieldSignature(firestore_message_codec.FirestoreMessageCodec, () => ['_kDateTime', '_kGeoPoint', '_kDocumentReference', '_kBlob', '_kArrayUnion', '_kArrayRemove', '_kDelete', '_kServerTimestamp', '_kTimestamp', '_kIncrementDouble', '_kIncrementInteger', '_kDocumentId', '_kFieldPath', '_kNaN', '_kInfinity', '_kNegativeInfinity', '_kFirestoreInstance', '_kFirestoreQuery', '_kFirestoreSettings', '_kFieldValueCodes', '_kFieldPathCodes']);
  dart.defineLazy(firestore_message_codec.FirestoreMessageCodec, {
    /*firestore_message_codec.FirestoreMessageCodec._kDateTime*/get _kDateTime() {
      return 128;
    },
    /*firestore_message_codec.FirestoreMessageCodec._kGeoPoint*/get _kGeoPoint() {
      return 129;
    },
    /*firestore_message_codec.FirestoreMessageCodec._kDocumentReference*/get _kDocumentReference() {
      return 130;
    },
    /*firestore_message_codec.FirestoreMessageCodec._kBlob*/get _kBlob() {
      return 131;
    },
    /*firestore_message_codec.FirestoreMessageCodec._kArrayUnion*/get _kArrayUnion() {
      return 132;
    },
    /*firestore_message_codec.FirestoreMessageCodec._kArrayRemove*/get _kArrayRemove() {
      return 133;
    },
    /*firestore_message_codec.FirestoreMessageCodec._kDelete*/get _kDelete() {
      return 134;
    },
    /*firestore_message_codec.FirestoreMessageCodec._kServerTimestamp*/get _kServerTimestamp() {
      return 135;
    },
    /*firestore_message_codec.FirestoreMessageCodec._kTimestamp*/get _kTimestamp() {
      return 136;
    },
    /*firestore_message_codec.FirestoreMessageCodec._kIncrementDouble*/get _kIncrementDouble() {
      return 137;
    },
    /*firestore_message_codec.FirestoreMessageCodec._kIncrementInteger*/get _kIncrementInteger() {
      return 138;
    },
    /*firestore_message_codec.FirestoreMessageCodec._kDocumentId*/get _kDocumentId() {
      return 139;
    },
    /*firestore_message_codec.FirestoreMessageCodec._kFieldPath*/get _kFieldPath() {
      return 140;
    },
    /*firestore_message_codec.FirestoreMessageCodec._kNaN*/get _kNaN() {
      return 141;
    },
    /*firestore_message_codec.FirestoreMessageCodec._kInfinity*/get _kInfinity() {
      return 142;
    },
    /*firestore_message_codec.FirestoreMessageCodec._kNegativeInfinity*/get _kNegativeInfinity() {
      return 143;
    },
    /*firestore_message_codec.FirestoreMessageCodec._kFirestoreInstance*/get _kFirestoreInstance() {
      return 144;
    },
    /*firestore_message_codec.FirestoreMessageCodec._kFirestoreQuery*/get _kFirestoreQuery() {
      return 145;
    },
    /*firestore_message_codec.FirestoreMessageCodec._kFirestoreSettings*/get _kFirestoreSettings() {
      return 146;
    },
    /*firestore_message_codec.FirestoreMessageCodec._kFieldValueCodes*/get _kFieldValueCodes() {
      return C[131] || CT.C131;
    },
    /*firestore_message_codec.FirestoreMessageCodec._kFieldPathCodes*/get _kFieldPathCodes() {
      return C[138] || CT.C138;
    }
  }, false);
  exception$.convertPlatformException = function convertPlatformException(exception, stackTrace) {
    if (!core.Exception.is(exception) || !message_codec.PlatformException.is(exception)) {
      core.Error.throwWithStackTrace(exception, stackTrace);
    }
    core.Error.throwWithStackTrace(exception$.platformExceptionToFirebaseException(exception), stackTrace);
  };
  exception$.platformExceptionToFirebaseException = function platformExceptionToFirebaseException(platformException) {
    let t182, t182$, t182$0;
    let details = platformException.details != null ? T$.LinkedHashMapOfString$String().from(core.Map.as(platformException.details)) : null;
    let code = "unknown";
    let message = (t182 = platformException.message, t182 == null ? "" : t182);
    if (details != null) {
      code = (t182$ = details[S$.$_get]("code"), t182$ == null ? code : t182$);
      message = (t182$0 = details[S$.$_get]("message"), t182$0 == null ? message : t182$0);
    }
    return new firebase_core_platform_interface.FirebaseException.new({plugin: "cloud_firestore", code: code, message: message});
  };
  method_channel_field_value.FieldValueType = class FieldValueType extends core._Enum {
    [S$._enumToString]() {
      return "FieldValueType." + this[S$._name];
    }
  };
  (method_channel_field_value.FieldValueType.new = function(index, name) {
    method_channel_field_value.FieldValueType.__proto__.new.call(this, index, name);
    ;
  }).prototype = method_channel_field_value.FieldValueType.prototype;
  dart.addTypeTests(method_channel_field_value.FieldValueType);
  dart.addTypeCaches(method_channel_field_value.FieldValueType);
  dart.setMethodSignature(method_channel_field_value.FieldValueType, () => ({
    __proto__: dart.getMethods(method_channel_field_value.FieldValueType.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(method_channel_field_value.FieldValueType, I[175]);
  dart.setStaticFieldSignature(method_channel_field_value.FieldValueType, () => ['values', 'arrayUnion', 'arrayRemove', 'delete', 'serverTimestamp', 'incrementDouble', 'incrementInteger']);
  dart.defineLazy(method_channel_field_value.FieldValueType, {
    /*method_channel_field_value.FieldValueType.values*/get values() {
      return C[139] || CT.C139;
    },
    /*method_channel_field_value.FieldValueType.arrayUnion*/get arrayUnion() {
      return C[132] || CT.C132;
    },
    /*method_channel_field_value.FieldValueType.arrayRemove*/get arrayRemove() {
      return C[133] || CT.C133;
    },
    /*method_channel_field_value.FieldValueType.delete*/get delete() {
      return C[134] || CT.C134;
    },
    /*method_channel_field_value.FieldValueType.serverTimestamp*/get serverTimestamp() {
      return C[135] || CT.C135;
    },
    /*method_channel_field_value.FieldValueType.incrementDouble*/get incrementDouble() {
      return C[136] || CT.C136;
    },
    /*method_channel_field_value.FieldValueType.incrementInteger*/get incrementInteger() {
      return C[137] || CT.C137;
    }
  }, false);
  method_channel_field_value.MethodChannelFieldValue = class MethodChannelFieldValue extends core.Object {
    get type() {
      return this[S.type$2];
    }
    set type(value) {
      super.type = value;
    }
    get value() {
      return this[S.value$4];
    }
    set value(value) {
      super.value = value;
    }
    static ['_#new#tearOff'](type, value) {
      return new method_channel_field_value.MethodChannelFieldValue.new(type, value);
    }
    _equals(other) {
      if (other == null) return false;
      return method_channel_field_value.MethodChannelFieldValue.is(other) && other.type === this.type && (C[23] || CT.C23).equals(other.value, this.value);
    }
    get hashCode() {
      return core.Object.hash(this.type, this.value);
    }
  };
  (method_channel_field_value.MethodChannelFieldValue.new = function(type, value) {
    this[S.type$2] = type;
    this[S.value$4] = value;
    ;
  }).prototype = method_channel_field_value.MethodChannelFieldValue.prototype;
  dart.addTypeTests(method_channel_field_value.MethodChannelFieldValue);
  dart.addTypeCaches(method_channel_field_value.MethodChannelFieldValue);
  dart.setLibraryUri(method_channel_field_value.MethodChannelFieldValue, I[175]);
  dart.setFieldSignature(method_channel_field_value.MethodChannelFieldValue, () => ({
    __proto__: dart.getFields(method_channel_field_value.MethodChannelFieldValue.__proto__),
    type: dart.finalFieldType(method_channel_field_value.FieldValueType),
    value: dart.finalFieldType(dart.dynamic)
  }));
  dart.defineExtensionMethods(method_channel_field_value.MethodChannelFieldValue, ['_equals']);
  dart.defineExtensionAccessors(method_channel_field_value.MethodChannelFieldValue, ['hashCode']);
  method_channel_user.MethodChannelUser = class MethodChannelUser extends platform_interface_user.UserPlatform {
    static ['_#new#tearOff'](auth, data) {
      return new method_channel_user.MethodChannelUser.new(auth, data);
    }
    [S._withChannelDefaults$1](other) {
      let t184;
      t184 = new (T$.IdentityMapOfString$dynamic()).from(["appName", this.auth.app.name, "tenantId", this.auth.tenantId]);
      return (() => {
        t184[S$.$addAll](other);
        return t184;
      })();
    }
    delete() {
      return async.async(dart.void, (function* $delete() {
        try {
          yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMethod(dart.void, "User#delete", this[S._withChannelDefaults$1](new (T$.IdentityMapOfString$dynamic()).new()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$0.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    getIdToken(forceRefresh) {
      return async.async(core.String, (function* getIdToken() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "User#getIdToken", this[S._withChannelDefaults$1](new (T$.IdentityMapOfString$dynamic()).from(["forceRefresh", forceRefresh, "tokenOnly", true]))));
          return T$.FutureOrOfString().as(data[S$.$_get]("token"));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$0.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    getIdTokenResult(forceRefresh) {
      return async.async(id_token_result.IdTokenResult, (function* getIdTokenResult() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "User#getIdToken", this[S._withChannelDefaults$1](new (T$.IdentityMapOfString$dynamic()).from(["forceRefresh", forceRefresh, "tokenOnly", false]))));
          return new id_token_result.IdTokenResult.new(data);
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$0.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    linkWithCredential(credential) {
      return async.async(platform_interface_user_credential.UserCredentialPlatform, (function* linkWithCredential() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "User#linkWithCredential", this[S._withChannelDefaults$1](new (T$.IdentityMapOfString$dynamic()).from(["credential", credential.asMap()]))));
          let userCredential = new method_channel_user_credential.MethodChannelUserCredential.new(this.auth, data);
          this.auth.currentUser = userCredential.user;
          return userCredential;
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$0.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    reauthenticateWithCredential(credential) {
      return async.async(platform_interface_user_credential.UserCredentialPlatform, (function* reauthenticateWithCredential() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "User#reauthenticateUserWithCredential", this[S._withChannelDefaults$1](new (T$.IdentityMapOfString$dynamic()).from(["credential", credential.asMap()]))));
          let userCredential = new method_channel_user_credential.MethodChannelUserCredential.new(this.auth, data);
          this.auth.currentUser = userCredential.user;
          return userCredential;
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$0.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    reload() {
      return async.async(dart.void, (function* reload() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "User#reload", this[S._withChannelDefaults$1](new (T$.IdentityMapOfString$dynamic()).new())));
          let user = new method_channel_user.MethodChannelUser.new(this.auth, data);
          this.auth.currentUser = user;
          this.auth.sendAuthChangesEvent(this.auth.app.name, user);
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$0.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    sendEmailVerification(actionCodeSettings) {
      return async.async(dart.void, (function* sendEmailVerification() {
        let t190;
        try {
          yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMethod(dart.void, "User#sendEmailVerification", this[S._withChannelDefaults$1](new (T$.IdentityMapOfString$dynamic()).from(["actionCodeSettings", (t190 = actionCodeSettings, t190 == null ? null : t190.asMap())])));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$0.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    unlink(providerId) {
      return async.async(platform_interface_user.UserPlatform, (function* unlink() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "User#unlink", this[S._withChannelDefaults$1](new (T$.IdentityMapOfString$dynamic()).from(["providerId", providerId]))));
          let userCredential = new method_channel_user_credential.MethodChannelUserCredential.new(this.auth, data);
          let user = T$.MethodChannelUserN().as(userCredential.user);
          this.auth.currentUser = user;
          this.auth.sendAuthChangesEvent(this.auth.app.name, user);
          return dart.nullCheck(user);
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$0.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    updateEmail(newEmail) {
      return async.async(dart.void, (function* updateEmail() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "User#updateEmail", this[S._withChannelDefaults$1](new (T$.IdentityMapOfString$dynamic()).from(["newEmail", newEmail]))));
          let user = new method_channel_user.MethodChannelUser.new(this.auth, data);
          this.auth.currentUser = user;
          this.auth.sendAuthChangesEvent(this.auth.app.name, user);
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$0.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    updatePassword(newPassword) {
      return async.async(dart.void, (function* updatePassword() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "User#updatePassword", this[S._withChannelDefaults$1](new (T$.IdentityMapOfString$dynamic()).from(["newPassword", newPassword]))));
          let user = new method_channel_user.MethodChannelUser.new(this.auth, data);
          this.auth.currentUser = user;
          this.auth.sendAuthChangesEvent(this.auth.app.name, user);
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$0.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    updatePhoneNumber(phoneCredential) {
      return async.async(dart.void, (function* updatePhoneNumber() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "User#updatePhoneNumber", this[S._withChannelDefaults$1](new (T$.IdentityMapOfString$dynamic()).from(["credential", phoneCredential.asMap()]))));
          let user = new method_channel_user.MethodChannelUser.new(this.auth, data);
          this.auth.currentUser = user;
          this.auth.sendAuthChangesEvent(this.auth.app.name, user);
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$0.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    updateProfile(profile) {
      return async.async(dart.void, (function* updateProfile() {
        try {
          let data = dart.nullCheck(yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMapMethod(core.String, dart.dynamic, "User#updateProfile", this[S._withChannelDefaults$1](new (T$.IdentityMapOfString$dynamic()).from(["profile", profile]))));
          let user = new method_channel_user.MethodChannelUser.new(this.auth, data);
          this.auth.currentUser = user;
          this.auth.sendAuthChangesEvent(this.auth.app.name, user);
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$0.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    verifyBeforeUpdateEmail(newEmail, actionCodeSettings = null) {
      return async.async(dart.void, (function* verifyBeforeUpdateEmail() {
        let t196;
        try {
          yield method_channel_firebase_auth.MethodChannelFirebaseAuth.channel.invokeMethod(dart.void, "User#verifyBeforeUpdateEmail", this[S._withChannelDefaults$1](new (T$.IdentityMapOfString$dynamic()).from(["newEmail", newEmail, "actionCodeSettings", (t196 = actionCodeSettings, t196 == null ? null : t196.asMap())])));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$0.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
  };
  (method_channel_user.MethodChannelUser.new = function(auth, data) {
    method_channel_user.MethodChannelUser.__proto__.new.call(this, auth, data);
    ;
  }).prototype = method_channel_user.MethodChannelUser.prototype;
  dart.addTypeTests(method_channel_user.MethodChannelUser);
  dart.addTypeCaches(method_channel_user.MethodChannelUser);
  dart.setMethodSignature(method_channel_user.MethodChannelUser, () => ({
    __proto__: dart.getMethods(method_channel_user.MethodChannelUser.__proto__),
    [S._withChannelDefaults$1]: dart.fnType(core.Map$(core.String, dart.dynamic), [core.Map$(core.String, dart.dynamic)])
  }));
  dart.setLibraryUri(method_channel_user.MethodChannelUser, I[176]);
  method_channel_user_credential.MethodChannelUserCredential = class MethodChannelUserCredential extends platform_interface_user_credential.UserCredentialPlatform {
    static ['_#new#tearOff'](auth, data) {
      return new method_channel_user_credential.MethodChannelUserCredential.new(auth, data);
    }
  };
  (method_channel_user_credential.MethodChannelUserCredential.new = function(auth, data) {
    let t197;
    method_channel_user_credential.MethodChannelUserCredential.__proto__.new.call(this, {auth: auth, additionalUserInfo: data[S$.$_get]("additionalUserInfo") == null ? null : new additional_user_info.AdditionalUserInfo.new({isNewUser: core.bool.as(dart.dsend(data[S$.$_get]("additionalUserInfo"), '_get', ["isNewUser"])), profile: T$.LinkedHashMapOfString$dynamic().from(core.Map.as((t197 = dart.dsend(data[S$.$_get]("additionalUserInfo"), '_get', ["profile"]), t197 == null ? new _js_helper.LinkedMap.new() : t197))), providerId: T$.StringN().as(dart.dsend(data[S$.$_get]("additionalUserInfo"), '_get', ["providerId"])), username: T$.StringN().as(dart.dsend(data[S$.$_get]("additionalUserInfo"), '_get', ["username"]))}), credential: data[S$.$_get]("authCredential") == null ? null : new auth_credential.AuthCredential.new({providerId: core.String.as(dart.dsend(data[S$.$_get]("authCredential"), '_get', ["providerId"])), signInMethod: core.String.as(dart.dsend(data[S$.$_get]("authCredential"), '_get', ["signInMethod"]))}), user: data[S$.$_get]("user") == null ? null : new method_channel_user.MethodChannelUser.new(auth, T$.LinkedHashMapOfString$dynamic().from(core.Map.as(data[S$.$_get]("user"))))});
    ;
  }).prototype = method_channel_user_credential.MethodChannelUserCredential.prototype;
  dart.addTypeTests(method_channel_user_credential.MethodChannelUserCredential);
  dart.addTypeCaches(method_channel_user_credential.MethodChannelUserCredential);
  dart.setLibraryUri(method_channel_user_credential.MethodChannelUserCredential, I[177]);
  exception$0.convertPlatformException = function convertPlatformException$(exception, stackTrace) {
    if (!message_codec.PlatformException.is(exception)) {
      core.Error.throwWithStackTrace(exception, stackTrace);
    }
    core.Error.throwWithStackTrace(exception$0.platformExceptionToFirebaseAuthException(exception), stackTrace);
  };
  exception$0.platformExceptionToFirebaseAuthException = function platformExceptionToFirebaseAuthException(platformException) {
    let t197, t197$;
    let details = platformException.details != null ? T$.LinkedHashMapOfString$dynamic().from(core.Map.as(platformException.details)) : null;
    let code = "unknown";
    let message = platformException.message;
    let email = null;
    let credential = null;
    if (details != null) {
      code = core.String.as((t197 = details[S$.$_get]("code"), t197 == null ? code : t197));
      message = T$.StringN().as((t197$ = details[S$.$_get]("message"), t197$ == null ? message : t197$));
      if (details[S$.$_get]("additionalData") != null) {
        if (dart.dsend(details[S$.$_get]("additionalData"), '_get', ["authCredential"]) != null) {
          credential = new auth_credential.AuthCredential.new({providerId: core.String.as(dart.dsend(dart.dsend(details[S$.$_get]("additionalData"), '_get', ["authCredential"]), '_get', ["providerId"])), signInMethod: core.String.as(dart.dsend(dart.dsend(details[S$.$_get]("additionalData"), '_get', ["authCredential"]), '_get', ["signInMethod"])), token: T$.intN().as(dart.dsend(dart.dsend(details[S$.$_get]("additionalData"), '_get', ["authCredential"]), '_get', ["token"]))});
        }
        if (dart.dsend(details[S$.$_get]("additionalData"), '_get', ["email"]) != null) {
          email = T$.StringN().as(dart.dsend(details[S$.$_get]("additionalData"), '_get', ["email"]));
        }
      }
    }
    return new firebase_auth_exception.FirebaseAuthException.new({code: code, message: message, email: email, credential: credential});
  };
  scan.parseList = function parseList(T, scanner, parseElement) {
    let result = _interceptors.JSArray$(T).of([]);
    while (scanner.scan(",")) {
      scanner.scan(scan.whitespace);
    }
    result[S$.$add](parseElement());
    scanner.scan(scan.whitespace);
    while (scanner.scan(",")) {
      scanner.scan(scan.whitespace);
      if (scanner.matches(",") || scanner.isDone) continue;
      result[S$.$add](parseElement());
      scanner.scan(scan.whitespace);
    }
    return result;
  };
  scan.expectQuotedString = function expectQuotedString(scanner, opts) {
    let name = opts && 'name' in opts ? opts.name : "quoted string";
    scanner.expect(scan._quotedString, {name: name});
    let string = dart.nullCheck(dart.nullCheck(scanner.lastMatch)._get(0));
    return string[S.$substring](1, string.length - 1)[S.$replaceAllMapped](scan._quotedPair, dart.fn(match => dart.nullCheck(match._get(1)), T$.MatchToString()));
  };
  dart.defineLazy(scan, {
    /*scan.token*/get token() {
      return core.RegExp.new("[^()<>@,;:\"\\\\/[\\]?={} \\t\\x00-\\x1F\\x7F]+");
    },
    /*scan._lws*/get _lws() {
      return core.RegExp.new("(?:\\r\\n)?[ \\t]+");
    },
    /*scan._quotedString*/get _quotedString() {
      return core.RegExp.new("\"(?:[^\"\\x00-\\x1F\\x7F]|\\\\.)*\"");
    },
    /*scan._quotedPair*/get _quotedPair() {
      return core.RegExp.new("\\\\(.)");
    },
    /*scan.nonToken*/get nonToken() {
      return core.RegExp.new("[()<>@,;:\"\\\\/\\[\\]?={} \\t\\x00-\\x1F\\x7F]");
    },
    /*scan.whitespace*/get whitespace() {
      return core.RegExp.new("(?:" + scan._lws.pattern + ")*");
    }
  }, false);
  utils$2.wrapFormatException = function wrapFormatException(T, name, value, body) {
    try {
      return body();
    } catch (e) {
      let ex = dart.getThrown(e);
      if (span_exception.SourceSpanFormatException.is(ex)) {
        let error = ex;
        dart.throw(new span_exception.SourceSpanFormatException.new("Invalid " + name + ": " + error.message, error.span, error.source));
      } else if (core.FormatException.is(ex)) {
        let error = ex;
        dart.throw(new core.FormatException.new("Invalid " + name + " \"" + value + "\": " + error.message, error.source, error.offset));
      } else
        throw e;
    }
  };
  decoder.ChunkedCodingDecoder = class ChunkedCodingDecoder extends convert.Converter$(core.List$(core.int), core.List$(core.int)) {
    static ['_#_#tearOff']() {
      return new decoder.ChunkedCodingDecoder.__();
    }
    convert(input) {
      T$.ListOfint().as(input);
      let sink = new decoder._Sink.new(T$.StreamControllerOfListOfint().new());
      let output = sink[S._decode](input, 0, input[S$.$length]);
      if (sink[S._state$1][S$.$_equals](decoder._State.end)) return output;
      dart.throw(new core.FormatException.new("Input ended unexpectedly.", input, input[S$.$length]));
    }
    startChunkedConversion(sink) {
      T$.SinkOfListOfint().as(sink);
      return new decoder._Sink.new(sink);
    }
  };
  (decoder.ChunkedCodingDecoder.__ = function() {
    decoder.ChunkedCodingDecoder.__proto__.new.call(this);
    ;
  }).prototype = decoder.ChunkedCodingDecoder.prototype;
  dart.addTypeTests(decoder.ChunkedCodingDecoder);
  dart.addTypeCaches(decoder.ChunkedCodingDecoder);
  dart.setMethodSignature(decoder.ChunkedCodingDecoder, () => ({
    __proto__: dart.getMethods(decoder.ChunkedCodingDecoder.__proto__),
    convert: dart.fnType(core.List$(core.int), [dart.nullable(core.Object)]),
    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(decoder.ChunkedCodingDecoder, I[178]);
  decoder._Sink = class _Sink extends convert.ByteConversionSinkBase {
    get [S._size]() {
      let t199;
      t199 = this[S.___Sink__size];
      return t199 == null ? dart.throw(new _internal.LateError.fieldNI("_size")) : t199;
    }
    set [S._size](_size$35param) {
      this[S.___Sink__size] = _size$35param;
    }
    static ['_#new#tearOff'](_sink) {
      return new decoder._Sink.new(_sink);
    }
    add(chunk) {
      T$.ListOfint().as(chunk);
      return this.addSlice(chunk, 0, chunk[S$.$length], false);
    }
    addSlice(chunk, start, end, isLast) {
      core.RangeError.checkValidRange(start, end, chunk[S$.$length]);
      let output = this[S._decode](chunk, start, end);
      if (output[S$.$isNotEmpty]) this[S._sink$1].add(output);
      if (isLast) this[S._close](chunk, end);
    }
    close() {
      return this[S._close]();
    }
    [S._close](chunk = null, index = null) {
      if (!this[S._state$1][S$.$_equals](decoder._State.end)) {
        dart.throw(new core.FormatException.new("Input ended unexpectedly.", chunk, index));
      }
      this[S._sink$1].close();
    }
    [S._decode](bytes, start, end) {
      function assertCurrentChar(char, name) {
        if (bytes[S$.$_get](start) !== char) {
          dart.throw(new core.FormatException.new("Expected " + name + ".", bytes, start));
        }
      }
      dart.fn(assertCurrentChar, T$.intAndStringTovoid());
      let buffer = new typed_buffer.Uint8Buffer.new();
      while (start !== end) {
        switch (this[S._state$1]) {
          case C[140] || CT.C140:
            {
              this[S._size] = this[S._digitForByte](bytes, start);
              this[S._state$1] = decoder._State.size;
              start = start + 1;
              break;
            }
          case C[141] || CT.C141:
            {
              if (bytes[S$.$_get](start) === 13) {
                this[S._state$1] = decoder._State.sizeBeforeLF;
              } else {
                this[S._size] = (this[S._size] << 4 >>> 0) + this[S._digitForByte](bytes, start);
              }
              start = start + 1;
              break;
            }
          case C[142] || CT.C142:
            {
              assertCurrentChar(10, "LF");
              this[S._state$1] = this[S._size] === 0 ? decoder._State.endBeforeCR : decoder._State.body;
              start = start + 1;
              break;
            }
          case C[143] || CT.C143:
            {
              let chunkEnd = math.min(core.int, end, start + this[S._size]);
              buffer.addAll(bytes, start, chunkEnd);
              this[S._size] = this[S._size] - (chunkEnd - start);
              start = chunkEnd;
              if (this[S._size] === 0) this[S._state$1] = decoder._State.bodyBeforeCR;
              break;
            }
          case C[144] || CT.C144:
            {
              assertCurrentChar(13, "CR");
              this[S._state$1] = decoder._State.bodyBeforeLF;
              start = start + 1;
              break;
            }
          case C[145] || CT.C145:
            {
              assertCurrentChar(10, "LF");
              this[S._state$1] = decoder._State.boundary;
              start = start + 1;
              break;
            }
          case C[146] || CT.C146:
            {
              assertCurrentChar(13, "CR");
              this[S._state$1] = decoder._State.endBeforeLF;
              start = start + 1;
              break;
            }
          case C[147] || CT.C147:
            {
              assertCurrentChar(10, "LF");
              this[S._state$1] = decoder._State.end;
              start = start + 1;
              break;
            }
          case C[148] || CT.C148:
            {
              dart.throw(new core.FormatException.new("Expected no more data.", bytes, start));
            }
        }
      }
      return buffer.buffer[S$.$asUint8List](0, buffer.length);
    }
    [S._digitForByte](bytes, index) {
      let byte = bytes[S$.$_get](index);
      let digit = (48 ^ byte) >>> 0;
      if (digit <= 9) {
        if (digit >= 0) return digit;
      } else {
        let letter = (32 | byte) >>> 0;
        if (97 <= letter && letter <= 102) return letter - 97 + 10;
      }
      dart.throw(new core.FormatException.new("Invalid hexadecimal byte 0x" + byte[S.$toRadixString](16)[S.$toUpperCase]() + ".", bytes, index));
    }
  };
  (decoder._Sink.new = function(_sink) {
    this[S._state$1] = decoder._State.boundary;
    this[S.___Sink__size] = null;
    this[S._sink$1] = _sink;
    decoder._Sink.__proto__.new.call(this);
    ;
  }).prototype = decoder._Sink.prototype;
  dart.addTypeTests(decoder._Sink);
  dart.addTypeCaches(decoder._Sink);
  dart.setMethodSignature(decoder._Sink, () => ({
    __proto__: dart.getMethods(decoder._Sink.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    close: dart.fnType(dart.void, []),
    [S._close]: dart.fnType(dart.void, [], [dart.nullable(core.List$(core.int)), dart.nullable(core.int)]),
    [S._decode]: dart.fnType(typed_data.Uint8List, [core.List$(core.int), core.int, core.int]),
    [S._digitForByte]: dart.fnType(core.int, [core.List$(core.int), core.int])
  }));
  dart.setGetterSignature(decoder._Sink, () => ({
    __proto__: dart.getGetters(decoder._Sink.__proto__),
    [S._size]: core.int
  }));
  dart.setSetterSignature(decoder._Sink, () => ({
    __proto__: dart.getSetters(decoder._Sink.__proto__),
    [S._size]: core.int
  }));
  dart.setLibraryUri(decoder._Sink, I[178]);
  dart.setFieldSignature(decoder._Sink, () => ({
    __proto__: dart.getFields(decoder._Sink.__proto__),
    [S._sink$1]: dart.finalFieldType(core.Sink$(core.List$(core.int))),
    [S._state$1]: dart.fieldType(decoder._State),
    [S.___Sink__size]: dart.fieldType(dart.nullable(core.int))
  }));
  decoder._State = class _State extends core.Object {
    get [S._name$2]() {
      return this[S._name$1];
    }
    set [S._name$2](value) {
      super[S._name$2] = value;
    }
    static ['_#_#tearOff'](_name) {
      return new decoder._State.__(_name);
    }
    toString() {
      return this[S._name$2];
    }
  };
  (decoder._State.__ = function(_name) {
    this[S._name$1] = _name;
    ;
  }).prototype = decoder._State.prototype;
  dart.addTypeTests(decoder._State);
  dart.addTypeCaches(decoder._State);
  dart.setLibraryUri(decoder._State, I[178]);
  dart.setFieldSignature(decoder._State, () => ({
    __proto__: dart.getFields(decoder._State.__proto__),
    [S._name$2]: dart.finalFieldType(core.String)
  }));
  dart.setStaticFieldSignature(decoder._State, () => ['boundary', 'size', 'sizeBeforeLF', 'body', 'bodyBeforeCR', 'bodyBeforeLF', 'endBeforeCR', 'endBeforeLF', 'end']);
  dart.defineExtensionMethods(decoder._State, ['toString']);
  dart.defineLazy(decoder._State, {
    /*decoder._State.boundary*/get boundary() {
      return C[140] || CT.C140;
    },
    /*decoder._State.size*/get size() {
      return C[141] || CT.C141;
    },
    /*decoder._State.sizeBeforeLF*/get sizeBeforeLF() {
      return C[142] || CT.C142;
    },
    /*decoder._State.body*/get body() {
      return C[143] || CT.C143;
    },
    /*decoder._State.bodyBeforeCR*/get bodyBeforeCR() {
      return C[144] || CT.C144;
    },
    /*decoder._State.bodyBeforeLF*/get bodyBeforeLF() {
      return C[145] || CT.C145;
    },
    /*decoder._State.endBeforeCR*/get endBeforeCR() {
      return C[146] || CT.C146;
    },
    /*decoder._State.endBeforeLF*/get endBeforeLF() {
      return C[147] || CT.C147;
    },
    /*decoder._State.end*/get end() {
      return C[148] || CT.C148;
    }
  }, false);
  dart.defineLazy(decoder, {
    /*decoder.chunkedCodingDecoder*/get chunkedCodingDecoder() {
      return C[149] || CT.C149;
    }
  }, false);
  encoder.ChunkedCodingEncoder = class ChunkedCodingEncoder extends convert.Converter$(core.List$(core.int), core.List$(core.int)) {
    static ['_#_#tearOff']() {
      return new encoder.ChunkedCodingEncoder.__();
    }
    convert(input) {
      T$.ListOfint().as(input);
      return encoder._convert(input, 0, input[S$.$length], {isLast: true});
    }
    startChunkedConversion(sink) {
      T$.SinkOfListOfint().as(sink);
      return new encoder._Sink.new(sink);
    }
  };
  (encoder.ChunkedCodingEncoder.__ = function() {
    encoder.ChunkedCodingEncoder.__proto__.new.call(this);
    ;
  }).prototype = encoder.ChunkedCodingEncoder.prototype;
  dart.addTypeTests(encoder.ChunkedCodingEncoder);
  dart.addTypeCaches(encoder.ChunkedCodingEncoder);
  dart.setMethodSignature(encoder.ChunkedCodingEncoder, () => ({
    __proto__: dart.getMethods(encoder.ChunkedCodingEncoder.__proto__),
    convert: dart.fnType(core.List$(core.int), [dart.nullable(core.Object)]),
    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(encoder.ChunkedCodingEncoder, I[179]);
  encoder._Sink = class _Sink extends convert.ByteConversionSinkBase {
    static ['_#new#tearOff'](_sink) {
      return new encoder._Sink.new(_sink);
    }
    add(chunk) {
      T$.ListOfint().as(chunk);
      this[S._sink$2].add(encoder._convert(chunk, 0, chunk[S$.$length]));
    }
    addSlice(chunk, start, end, isLast) {
      core.RangeError.checkValidRange(start, end, chunk[S$.$length]);
      this[S._sink$2].add(encoder._convert(chunk, start, end, {isLast: isLast}));
      if (isLast) this[S._sink$2].close();
    }
    close() {
      this[S._sink$2].add(encoder._doneChunk);
      this[S._sink$2].close();
    }
  };
  (encoder._Sink.new = function(_sink) {
    this[S._sink$2] = _sink;
    encoder._Sink.__proto__.new.call(this);
    ;
  }).prototype = encoder._Sink.prototype;
  dart.addTypeTests(encoder._Sink);
  dart.addTypeCaches(encoder._Sink);
  dart.setMethodSignature(encoder._Sink, () => ({
    __proto__: dart.getMethods(encoder._Sink.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(encoder._Sink, I[179]);
  dart.setFieldSignature(encoder._Sink, () => ({
    __proto__: dart.getFields(encoder._Sink.__proto__),
    [S._sink$2]: dart.finalFieldType(core.Sink$(core.List$(core.int)))
  }));
  encoder._convert = function _convert(bytes, start, end, opts) {
    let t199, t199$, t199$0, t199$1;
    let isLast = opts && 'isLast' in opts ? opts.isLast : false;
    if (end === start) return isLast ? encoder._doneChunk : C[150] || CT.C150;
    let size = end - start;
    let sizeInHex = size[S.$toRadixString](16);
    let footerSize = isLast ? encoder._doneChunk[S$.$length] : 0;
    let list = _native_typed_data.NativeUint8List.new(sizeInHex.length + 4 + size + footerSize);
    list[S$.$setRange](0, sizeInHex.length, sizeInHex[S$.$codeUnits]);
    let cursor = sizeInHex.length;
    list[S$.$_set]((t199 = cursor, cursor = t199 + 1, t199), 13);
    list[S$.$_set]((t199$ = cursor, cursor = t199$ + 1, t199$), 10);
    list[S$.$setRange](cursor, cursor + end - start, bytes, start);
    cursor = cursor + (end - start);
    list[S$.$_set]((t199$0 = cursor, cursor = t199$0 + 1, t199$0), 13);
    list[S$.$_set]((t199$1 = cursor, cursor = t199$1 + 1, t199$1), 10);
    if (isLast) {
      list[S$.$setRange](list[S$.$length] - footerSize, list[S$.$length], encoder._doneChunk);
    }
    return list;
  };
  dart.defineLazy(encoder, {
    /*encoder.chunkedCodingEncoder*/get chunkedCodingEncoder() {
      return C[151] || CT.C151;
    },
    /*encoder._doneChunk*/get _doneChunk() {
      return _native_typed_data.NativeUint8List.fromList(T$.JSArrayOfint().of([48, 13, 10, 13, 10]));
    }
  }, false);
  method_channel_firebase_storage.MethodChannelFirebaseStorage = class MethodChannelFirebaseStorage extends platform_interface_firebase_storage.FirebaseStoragePlatform {
    get maxOperationRetryTime() {
      return this[S.maxOperationRetryTime];
    }
    set maxOperationRetryTime(value) {
      this[S.maxOperationRetryTime] = value;
    }
    get maxUploadRetryTime() {
      return this[S.maxUploadRetryTime];
    }
    set maxUploadRetryTime(value) {
      this[S.maxUploadRetryTime] = value;
    }
    get maxDownloadRetryTime() {
      return this[S.maxDownloadRetryTime];
    }
    set maxDownloadRetryTime(value) {
      this[S.maxDownloadRetryTime] = value;
    }
    static ['_#new#tearOff'](opts) {
      let app = opts && 'app' in opts ? opts.app : null;
      let bucket = opts && 'bucket' in opts ? opts.bucket : null;
      return new method_channel_firebase_storage.MethodChannelFirebaseStorage.new({app: app, bucket: bucket});
    }
    static ['_#_#tearOff']() {
      return new method_channel_firebase_storage.MethodChannelFirebaseStorage.__();
    }
    static _getInstanceKey(appName, bucket) {
      return appName + "|" + bucket;
    }
    static get instance() {
      return new method_channel_firebase_storage.MethodChannelFirebaseStorage.__();
    }
    static get nextMethodChannelHandleId() {
      let t199;
      t199 = method_channel_firebase_storage.MethodChannelFirebaseStorage._methodChannelHandleId;
      method_channel_firebase_storage.MethodChannelFirebaseStorage._methodChannelHandleId = t199 + 1;
      return t199;
    }
    [S._handleTaskStateChange](taskState, $arguments) {
      return async.async(dart.void, function* _handleTaskStateChange() {
        let snapshotData = T$.LinkedHashMapOfString$dynamic().from(core.Map.as($arguments[S$.$_get]("snapshot")));
        let storage = dart.nullCheck(method_channel_firebase_storage.MethodChannelFirebaseStorage._methodChannelFirebaseStorageInstances[S$.$_get](method_channel_firebase_storage.MethodChannelFirebaseStorage._getInstanceKey(core.String.as($arguments[S$.$_get]("appName")), core.String.as($arguments[S$.$_get]("bucket")))));
        let snapshot = new method_channel_task_snapshot.MethodChannelTaskSnapshot.new(storage, taskState, snapshotData);
        dart.nullCheck(method_channel_firebase_storage.MethodChannelFirebaseStorage.taskObservers[S$.$_get]($arguments[S$.$_get]("handle"))).add(snapshot);
      });
    }
    [S._sendTaskException](handle, exception) {
      dart.nullCheck(method_channel_firebase_storage.MethodChannelFirebaseStorage.taskObservers[S$.$_get](handle)).addError(exception);
    }
    delegateFor(opts) {
      let t202, t201, t200, t199;
      let app = opts && 'app' in opts ? opts.app : null;
      let bucket = opts && 'bucket' in opts ? opts.bucket : null;
      let key = method_channel_firebase_storage.MethodChannelFirebaseStorage._getInstanceKey(app.name, bucket);
      t199 = method_channel_firebase_storage.MethodChannelFirebaseStorage._methodChannelFirebaseStorageInstances;
      t200 = key;
      t201 = t199[S$.$_get](t200);
      return t201 == null ? (t202 = new method_channel_firebase_storage.MethodChannelFirebaseStorage.new({app: app, bucket: bucket}), t199[S$.$_set](t200, t202), t202) : t201;
    }
    ref(path) {
      return new method_channel_reference.MethodChannelReference.new(this, path);
    }
    useStorageEmulator(host, port) {
      return async.async(dart.void, (function* useStorageEmulator() {
        this.emulatorHost = host;
        this.emulatorPort = port;
        try {
          yield method_channel_firebase_storage.MethodChannelFirebaseStorage.channel.invokeMethod(dart.dynamic, "Storage#useEmulator", new (T$.IdentityMapOfString$dynamic()).from(["appName", this.app.name, "maxOperationRetryTime", this.maxOperationRetryTime, "maxUploadRetryTime", this.maxUploadRetryTime, "maxDownloadRetryTime", this.maxDownloadRetryTime, "bucket", this.bucket, "host", this.emulatorHost, "port", this.emulatorPort]));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$1.convertPlatformException(e, s);
          } else
            throw e$;
        }
      }).bind(this));
    }
    setMaxOperationRetryTime(time) {
      this.maxOperationRetryTime = time;
    }
    setMaxUploadRetryTime(time) {
      this.maxUploadRetryTime = time;
    }
    setMaxDownloadRetryTime(time) {
      return async.async(dart.void, (function* setMaxDownloadRetryTime() {
        this.maxDownloadRetryTime = time;
      }).bind(this));
    }
  };
  (method_channel_firebase_storage.MethodChannelFirebaseStorage.new = function(opts) {
    let app = opts && 'app' in opts ? opts.app : null;
    let bucket = opts && 'bucket' in opts ? opts.bucket : null;
    this[S.maxOperationRetryTime] = (C[43] || CT.C43).inMilliseconds;
    this[S.maxUploadRetryTime] = (C[42] || CT.C42).inMilliseconds;
    this[S.maxDownloadRetryTime] = (C[42] || CT.C42).inMilliseconds;
    method_channel_firebase_storage.MethodChannelFirebaseStorage.__proto__.new.call(this, {appInstance: app, bucket: bucket});
    if (method_channel_firebase_storage.MethodChannelFirebaseStorage._initialized) return;
    method_channel_firebase_storage.MethodChannelFirebaseStorage.channel.setMethodCallHandler(dart.fn(call => async.async(dart.void, (function*() {
      let $arguments = core.Map.as(call.arguments);
      switch (call.method) {
        case "Task#onProgress":
          {
            return this[S._handleTaskStateChange](task_state.TaskState.running, $arguments);
          }
        case "Task#onPaused":
          {
            return this[S._handleTaskStateChange](task_state.TaskState.paused, $arguments);
          }
        case "Task#onSuccess":
          {
            return this[S._handleTaskStateChange](task_state.TaskState.success, $arguments);
          }
        case "Task#onCanceled":
          {
            return this[S._sendTaskException](core.int.as($arguments[S$.$_get]("handle")), new firebase_core_platform_interface.FirebaseException.new({plugin: "firebase_storage", code: "canceled", message: "User canceled the upload/download."}));
          }
        case "Task#onFailure":
          {
            let errorMap = T$.LinkedHashMapOfString$dynamic().from(core.Map.as($arguments[S$.$_get]("error")));
            return this[S._sendTaskException](core.int.as($arguments[S$.$_get]("handle")), new firebase_core_platform_interface.FirebaseException.new({plugin: "firebase_storage", code: T$.StringN().as(errorMap[S$.$_get]("code")), message: T$.StringN().as(errorMap[S$.$_get]("message"))}));
          }
      }
    }).bind(this)), T$.MethodCallToFutureOfvoid()));
    method_channel_firebase_storage.MethodChannelFirebaseStorage._initialized = true;
  }).prototype = method_channel_firebase_storage.MethodChannelFirebaseStorage.prototype;
  (method_channel_firebase_storage.MethodChannelFirebaseStorage.__ = function() {
    this[S.maxOperationRetryTime] = (C[43] || CT.C43).inMilliseconds;
    this[S.maxUploadRetryTime] = (C[42] || CT.C42).inMilliseconds;
    this[S.maxDownloadRetryTime] = (C[42] || CT.C42).inMilliseconds;
    method_channel_firebase_storage.MethodChannelFirebaseStorage.__proto__.new.call(this, {appInstance: null, bucket: ""});
    ;
  }).prototype = method_channel_firebase_storage.MethodChannelFirebaseStorage.prototype;
  dart.addTypeTests(method_channel_firebase_storage.MethodChannelFirebaseStorage);
  dart.addTypeCaches(method_channel_firebase_storage.MethodChannelFirebaseStorage);
  dart.setMethodSignature(method_channel_firebase_storage.MethodChannelFirebaseStorage, () => ({
    __proto__: dart.getMethods(method_channel_firebase_storage.MethodChannelFirebaseStorage.__proto__),
    [S._handleTaskStateChange]: dart.fnType(async.Future$(dart.void), [task_state.TaskState, core.Map]),
    [S._sendTaskException]: dart.fnType(dart.void, [core.int, firebase_core_platform_interface.FirebaseException]),
    setMaxDownloadRetryTime: dart.fnType(async.Future$(dart.void), [core.int])
  }));
  dart.setStaticMethodSignature(method_channel_firebase_storage.MethodChannelFirebaseStorage, () => ['_getInstanceKey']);
  dart.setStaticGetterSignature(method_channel_firebase_storage.MethodChannelFirebaseStorage, () => ['instance', 'nextMethodChannelHandleId']);
  dart.setLibraryUri(method_channel_firebase_storage.MethodChannelFirebaseStorage, I[180]);
  dart.setFieldSignature(method_channel_firebase_storage.MethodChannelFirebaseStorage, () => ({
    __proto__: dart.getFields(method_channel_firebase_storage.MethodChannelFirebaseStorage.__proto__),
    maxOperationRetryTime: dart.fieldType(core.int),
    maxUploadRetryTime: dart.fieldType(core.int),
    maxDownloadRetryTime: dart.fieldType(core.int)
  }));
  dart.setStaticFieldSignature(method_channel_firebase_storage.MethodChannelFirebaseStorage, () => ['_initialized', 'channel', '_methodChannelFirebaseStorageInstances', '_methodChannelHandleId', 'taskObservers']);
  dart.defineLazy(method_channel_firebase_storage.MethodChannelFirebaseStorage, {
    /*method_channel_firebase_storage.MethodChannelFirebaseStorage._initialized*/get _initialized() {
      return false;
    },
    set _initialized(value) {},
    /*method_channel_firebase_storage.MethodChannelFirebaseStorage.channel*/get channel() {
      return C[152] || CT.C152;
    },
    /*method_channel_firebase_storage.MethodChannelFirebaseStorage._methodChannelFirebaseStorageInstances*/get _methodChannelFirebaseStorageInstances() {
      return new (T$.IdentityMapOfString$MethodChannelFirebaseStorage()).new();
    },
    set _methodChannelFirebaseStorageInstances(value) {},
    /*method_channel_firebase_storage.MethodChannelFirebaseStorage._methodChannelHandleId*/get _methodChannelHandleId() {
      return 0;
    },
    set _methodChannelHandleId(value) {},
    /*method_channel_firebase_storage.MethodChannelFirebaseStorage.taskObservers*/get taskObservers() {
      return new (T$.IdentityMapOfint$StreamControllerOfTaskSnapshotPlatform()).new();
    }
  }, false);
  pointer$.Pointer = class Pointer extends core.Object {
    static ['_#new#tearOff'](path) {
      return new pointer$.Pointer.new(path);
    }
    get isRoot() {
      return this.path === "/";
    }
    get path() {
      return this[S._path$2];
    }
    get name() {
      return this.path[S$.$split]("/")[S$.$last];
    }
    get parent() {
      if (this.isRoot) {
        return null;
      }
      let chunks = this.path[S$.$split]("/");
      chunks[S$.$removeLast]();
      return chunks[S$.$join]("/");
    }
    child(childPath) {
      let childPointer = new pointer$.Pointer.new(childPath);
      if (this.isRoot) {
        return childPointer.path;
      }
      return this.path + "/" + childPointer.path;
    }
  };
  (pointer$.Pointer.new = function(path) {
    let t200;
    this[S._path$2] = (t200 = path, t200 == null ? "/" : t200);
    if (this[S._path$2][S$.$isEmpty]) {
      this[S._path$2] = "/";
    } else {
      let _parsedPath = this[S._path$2];
      if (this[S._path$2].length > 1 && this[S._path$2][S$.$endsWith]("/")) {
        _parsedPath = _parsedPath[S.$substring](0, _parsedPath.length - 1);
      }
      if (this[S._path$2][S$.$startsWith]("/") && this[S._path$2].length > 1) {
        _parsedPath = _parsedPath[S.$substring](1, _parsedPath.length);
      }
      this[S._path$2] = _parsedPath;
    }
  }).prototype = pointer$.Pointer.prototype;
  dart.addTypeTests(pointer$.Pointer);
  dart.addTypeCaches(pointer$.Pointer);
  dart.setMethodSignature(pointer$.Pointer, () => ({
    __proto__: dart.getMethods(pointer$.Pointer.__proto__),
    child: dart.fnType(core.String, [core.String])
  }));
  dart.setGetterSignature(pointer$.Pointer, () => ({
    __proto__: dart.getGetters(pointer$.Pointer.__proto__),
    isRoot: core.bool,
    path: core.String,
    name: core.String,
    parent: dart.nullable(core.String)
  }));
  dart.setLibraryUri(pointer$.Pointer, I[181]);
  dart.setFieldSignature(pointer$.Pointer, () => ({
    __proto__: dart.getFields(pointer$.Pointer.__proto__),
    [S._path$2]: dart.fieldType(core.String)
  }));
  client$.Client = class Client extends core.Object {
    static new() {
      return browser_client.createClient();
    }
    static ['_#new#tearOff']() {
      return client$.Client.new();
    }
  };
  (client$.Client[dart.mixinNew] = function() {
  }).prototype = client$.Client.prototype;
  dart.addTypeTests(client$.Client);
  dart.addTypeCaches(client$.Client);
  dart.setStaticMethodSignature(client$.Client, () => ['new']);
  dart.setLibraryUri(client$.Client, I[182]);
  exception.ClientException = class ClientException extends core.Object {
    get message() {
      return this[S.message$2];
    }
    set message(value) {
      super.message = value;
    }
    get uri() {
      return this[S.uri];
    }
    set uri(value) {
      super.uri = value;
    }
    static ['_#new#tearOff'](message, uri = null) {
      return new exception.ClientException.new(message, uri);
    }
    toString() {
      return this.message;
    }
  };
  (exception.ClientException.new = function(message, uri = null) {
    this[S.message$2] = message;
    this[S.uri] = uri;
    ;
  }).prototype = exception.ClientException.prototype;
  dart.addTypeTests(exception.ClientException);
  dart.addTypeCaches(exception.ClientException);
  exception.ClientException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(exception.ClientException, I[183]);
  dart.setFieldSignature(exception.ClientException, () => ({
    __proto__: dart.getFields(exception.ClientException.__proto__),
    message: dart.finalFieldType(core.String),
    uri: dart.finalFieldType(dart.nullable(core.Uri))
  }));
  dart.defineExtensionMethods(exception.ClientException, ['toString']);
  base_request.BaseRequest = class BaseRequest extends core.Object {
    get method() {
      return this[S.method];
    }
    set method(value) {
      super.method = value;
    }
    get url() {
      return this[S.url$1];
    }
    set url(value) {
      super.url = value;
    }
    get headers() {
      return this[S.headers];
    }
    set headers(value) {
      super.headers = value;
    }
    get contentLength() {
      return this[S._contentLength];
    }
    set contentLength(value) {
      if (value != null && dart.notNull(value) < 0) {
        dart.throw(new core.ArgumentError.new("Invalid content length " + dart.str(value) + "."));
      }
      this[S._checkFinalized$1]();
      this[S._contentLength] = value;
    }
    get persistentConnection() {
      return this[S._persistentConnection];
    }
    set persistentConnection(value) {
      this[S._checkFinalized$1]();
      this[S._persistentConnection] = value;
    }
    get followRedirects() {
      return this[S._followRedirects];
    }
    set followRedirects(value) {
      this[S._checkFinalized$1]();
      this[S._followRedirects] = value;
    }
    get maxRedirects() {
      return this[S._maxRedirects];
    }
    set maxRedirects(value) {
      this[S._checkFinalized$1]();
      this[S._maxRedirects] = value;
    }
    get finalized() {
      return this[S._finalized];
    }
    static _validateMethod(method) {
      if (!base_request.BaseRequest._tokenRE.hasMatch(method)) {
        dart.throw(new core.ArgumentError.value(method, "method", "Not a valid method"));
      }
      return method;
    }
    finalize() {
      if (this.finalized) dart.throw(new core.StateError.new("Can't finalize a finalized Request."));
      this[S._finalized] = true;
      return C[153] || CT.C153;
    }
    send() {
      return async.async(streamed_response.StreamedResponse, (function* send() {
        let client = client$.Client.new();
        try {
          let response = (yield client.send(this));
          let stream = utils$3.onDone(T$.ListOfint(), response.stream, dart.bind(client, 'close'));
          return new streamed_response.StreamedResponse.new(new byte_stream.ByteStream.new(stream), response.statusCode, {contentLength: response.contentLength, request: response.request, headers: response.headers, isRedirect: response.isRedirect, persistentConnection: response.persistentConnection, reasonPhrase: response.reasonPhrase});
        } catch (e) {
          let _ = dart.getThrown(e);
          if (core.Object.is(_)) {
            client.close();
            dart.rethrow(e);
          } else
            throw e;
        }
      }).bind(this));
    }
    [S._checkFinalized$1]() {
      if (!this.finalized) return;
      dart.throw(new core.StateError.new("Can't modify a finalized Request."));
    }
    toString() {
      return this.method + " " + dart.str(this.url);
    }
  };
  (base_request.BaseRequest.new = function(method, url) {
    this[S._contentLength] = null;
    this[S._persistentConnection] = true;
    this[S._followRedirects] = true;
    this[S._maxRedirects] = 5;
    this[S._finalized] = false;
    this[S.url$1] = url;
    this[S.method] = base_request.BaseRequest._validateMethod(method);
    this[S.headers] = T$.LinkedHashMapOfString$String().new({equals: dart.fn((key1, key2) => key1[S$.$toLowerCase]() === key2[S$.$toLowerCase](), T$.StringAndStringTobool()), hashCode: dart.fn(key => key[S$.$toLowerCase]()[S$.$hashCode], T$.StringToint())});
    ;
  }).prototype = base_request.BaseRequest.prototype;
  dart.addTypeTests(base_request.BaseRequest);
  dart.addTypeCaches(base_request.BaseRequest);
  dart.setMethodSignature(base_request.BaseRequest, () => ({
    __proto__: dart.getMethods(base_request.BaseRequest.__proto__),
    finalize: dart.fnType(byte_stream.ByteStream, []),
    send: dart.fnType(async.Future$(streamed_response.StreamedResponse), []),
    [S._checkFinalized$1]: dart.fnType(dart.void, [])
  }));
  dart.setStaticMethodSignature(base_request.BaseRequest, () => ['_validateMethod']);
  dart.setGetterSignature(base_request.BaseRequest, () => ({
    __proto__: dart.getGetters(base_request.BaseRequest.__proto__),
    contentLength: dart.nullable(core.int),
    persistentConnection: core.bool,
    followRedirects: core.bool,
    maxRedirects: core.int,
    finalized: core.bool
  }));
  dart.setSetterSignature(base_request.BaseRequest, () => ({
    __proto__: dart.getSetters(base_request.BaseRequest.__proto__),
    contentLength: dart.nullable(core.int),
    persistentConnection: core.bool,
    followRedirects: core.bool,
    maxRedirects: core.int
  }));
  dart.setLibraryUri(base_request.BaseRequest, I[184]);
  dart.setFieldSignature(base_request.BaseRequest, () => ({
    __proto__: dart.getFields(base_request.BaseRequest.__proto__),
    method: dart.finalFieldType(core.String),
    url: dart.finalFieldType(core.Uri),
    [S._contentLength]: dart.fieldType(dart.nullable(core.int)),
    [S._persistentConnection]: dart.fieldType(core.bool),
    [S._followRedirects]: dart.fieldType(core.bool),
    [S._maxRedirects]: dart.fieldType(core.int),
    headers: dart.finalFieldType(core.Map$(core.String, core.String)),
    [S._finalized]: dart.fieldType(core.bool)
  }));
  dart.setStaticFieldSignature(base_request.BaseRequest, () => ['_tokenRE']);
  dart.defineExtensionMethods(base_request.BaseRequest, ['toString']);
  dart.defineLazy(base_request.BaseRequest, {
    /*base_request.BaseRequest._tokenRE*/get _tokenRE() {
      return core.RegExp.new("^[\\w!#%&'*+\\-.^`|~]+$");
    }
  }, false);
  request$.Request = class Request extends base_request.BaseRequest {
    get contentLength() {
      return this.bodyBytes[S$.$length];
    }
    set contentLength(value) {
      dart.throw(new core.UnsupportedError.new("Cannot set the contentLength property of " + "non-streaming Request objects."));
    }
    get encoding() {
      if (this[S._contentType] == null || !dart.nullCheck(this[S._contentType]).parameters[S$.$containsKey]("charset")) {
        return this[S._defaultEncoding];
      }
      return utils$3.requiredEncodingForCharset(dart.nullCheck(dart.nullCheck(this[S._contentType]).parameters[S$.$_get]("charset")));
    }
    set encoding(value) {
      this[S._checkFinalized]();
      this[S._defaultEncoding] = value;
      let contentType = this[S._contentType];
      if (contentType == null) return;
      this[S._contentType] = contentType.change({parameters: new (T$.IdentityMapOfString$String()).from(["charset", value.name])});
    }
    get bodyBytes() {
      return this[S._bodyBytes];
    }
    set bodyBytes(value) {
      this[S._checkFinalized]();
      this[S._bodyBytes] = utils$3.toUint8List(value);
    }
    get body() {
      return this.encoding.decode(this.bodyBytes);
    }
    set body(value) {
      this.bodyBytes = this.encoding.encode(value);
      let contentType = this[S._contentType];
      if (contentType == null) {
        this[S._contentType] = new media_type.MediaType.new("text", "plain", new (T$.IdentityMapOfString$String()).from(["charset", this.encoding.name]));
      } else if (!contentType.parameters[S$.$containsKey]("charset")) {
        this[S._contentType] = contentType.change({parameters: new (T$.IdentityMapOfString$String()).from(["charset", this.encoding.name])});
      }
    }
    get bodyFields() {
      let contentType = this[S._contentType];
      if (contentType == null || contentType.mimeType !== "application/x-www-form-urlencoded") {
        dart.throw(new core.StateError.new("Cannot access the body fields of a Request without " + "content-type \"application/x-www-form-urlencoded\"."));
      }
      return core.Uri.splitQueryString(this.body, {encoding: this.encoding});
    }
    set bodyFields(fields) {
      let contentType = this[S._contentType];
      if (contentType == null) {
        this[S._contentType] = new media_type.MediaType.new("application", "x-www-form-urlencoded");
      } else if (contentType.mimeType !== "application/x-www-form-urlencoded") {
        dart.throw(new core.StateError.new("Cannot set the body fields of a Request with " + "content-type \"" + contentType.mimeType + "\"."));
      }
      this.body = utils$3.mapToQuery(fields, {encoding: this.encoding});
    }
    static ['_#new#tearOff'](method, url) {
      return new request$.Request.new(method, url);
    }
    finalize() {
      super.finalize();
      return byte_stream.ByteStream.fromBytes(this.bodyBytes);
    }
    get [S._contentType]() {
      let contentType = this.headers[S$.$_get]("content-type");
      if (contentType == null) return null;
      return media_type.MediaType.parse(contentType);
    }
    set [S._contentType](value) {
      if (value == null) {
        this.headers[S$.$remove]("content-type");
      } else {
        this.headers[S$.$_set]("content-type", dart.toString(value));
      }
    }
    [S._checkFinalized]() {
      if (!this.finalized) return;
      dart.throw(new core.StateError.new("Can't modify a finalized Request."));
    }
  };
  (request$.Request.new = function(method, url) {
    this[S._defaultEncoding] = convert.utf8;
    this[S._bodyBytes] = _native_typed_data.NativeUint8List.new(0);
    request$.Request.__proto__.new.call(this, method, url);
    ;
  }).prototype = request$.Request.prototype;
  dart.addTypeTests(request$.Request);
  dart.addTypeCaches(request$.Request);
  dart.setMethodSignature(request$.Request, () => ({
    __proto__: dart.getMethods(request$.Request.__proto__),
    [S._checkFinalized]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(request$.Request, () => ({
    __proto__: dart.getGetters(request$.Request.__proto__),
    contentLength: core.int,
    encoding: convert.Encoding,
    bodyBytes: typed_data.Uint8List,
    body: core.String,
    bodyFields: core.Map$(core.String, core.String),
    [S._contentType]: dart.nullable(media_type.MediaType)
  }));
  dart.setSetterSignature(request$.Request, () => ({
    __proto__: dart.getSetters(request$.Request.__proto__),
    encoding: convert.Encoding,
    bodyBytes: core.List$(core.int),
    body: core.String,
    bodyFields: core.Map$(core.String, core.String),
    [S._contentType]: dart.nullable(media_type.MediaType)
  }));
  dart.setLibraryUri(request$.Request, I[185]);
  dart.setFieldSignature(request$.Request, () => ({
    __proto__: dart.getFields(request$.Request.__proto__),
    [S._defaultEncoding]: dart.fieldType(convert.Encoding),
    [S._bodyBytes]: dart.fieldType(typed_data.Uint8List)
  }));
  base_response.BaseResponse = class BaseResponse extends core.Object {
    get request() {
      return this[S.request];
    }
    set request(value) {
      super.request = value;
    }
    get statusCode() {
      return this[S.statusCode];
    }
    set statusCode(value) {
      super.statusCode = value;
    }
    get reasonPhrase() {
      return this[S.reasonPhrase];
    }
    set reasonPhrase(value) {
      super.reasonPhrase = value;
    }
    get contentLength() {
      return this[S.contentLength];
    }
    set contentLength(value) {
      super.contentLength = value;
    }
    get headers() {
      return this[S.headers$1];
    }
    set headers(value) {
      super.headers = value;
    }
    get isRedirect() {
      return this[S.isRedirect];
    }
    set isRedirect(value) {
      super.isRedirect = value;
    }
    get persistentConnection() {
      return this[S.persistentConnection];
    }
    set persistentConnection(value) {
      super.persistentConnection = value;
    }
  };
  (base_response.BaseResponse.new = function(statusCode, opts) {
    let contentLength = opts && 'contentLength' in opts ? opts.contentLength : null;
    let request = opts && 'request' in opts ? opts.request : null;
    let headers = opts && 'headers' in opts ? opts.headers : C[155] || CT.C155;
    let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;
    let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : true;
    let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;
    this[S.statusCode] = statusCode;
    this[S.contentLength] = contentLength;
    this[S.request] = request;
    this[S.headers$1] = headers;
    this[S.isRedirect] = isRedirect;
    this[S.persistentConnection] = persistentConnection;
    this[S.reasonPhrase] = reasonPhrase;
    if (this.statusCode < 100) {
      dart.throw(new core.ArgumentError.new("Invalid status code " + dart.str(this.statusCode) + "."));
    } else if (this.contentLength != null && dart.nullCheck(this.contentLength) < 0) {
      dart.throw(new core.ArgumentError.new("Invalid content length " + dart.str(this.contentLength) + "."));
    }
  }).prototype = base_response.BaseResponse.prototype;
  dart.addTypeTests(base_response.BaseResponse);
  dart.addTypeCaches(base_response.BaseResponse);
  dart.setLibraryUri(base_response.BaseResponse, I[186]);
  dart.setFieldSignature(base_response.BaseResponse, () => ({
    __proto__: dart.getFields(base_response.BaseResponse.__proto__),
    request: dart.finalFieldType(dart.nullable(base_request.BaseRequest)),
    statusCode: dart.finalFieldType(core.int),
    reasonPhrase: dart.finalFieldType(dart.nullable(core.String)),
    contentLength: dart.finalFieldType(dart.nullable(core.int)),
    headers: dart.finalFieldType(core.Map$(core.String, core.String)),
    isRedirect: dart.finalFieldType(core.bool),
    persistentConnection: dart.finalFieldType(core.bool)
  }));
  response$.Response = class Response extends base_response.BaseResponse {
    get bodyBytes() {
      return this[S.bodyBytes];
    }
    set bodyBytes(value) {
      super.bodyBytes = value;
    }
    get body() {
      return response$._encodingForHeaders(this.headers).decode(this.bodyBytes);
    }
    static ['_#new#tearOff'](body, statusCode, opts) {
      let request = opts && 'request' in opts ? opts.request : null;
      let headers = opts && 'headers' in opts ? opts.headers : C[155] || CT.C155;
      let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;
      let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : true;
      let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;
      return new response$.Response.new(body, statusCode, {request: request, headers: headers, isRedirect: isRedirect, persistentConnection: persistentConnection, reasonPhrase: reasonPhrase});
    }
    static ['_#bytes#tearOff'](bodyBytes, statusCode, opts) {
      let request = opts && 'request' in opts ? opts.request : null;
      let headers = opts && 'headers' in opts ? opts.headers : C[155] || CT.C155;
      let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;
      let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : true;
      let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;
      return new response$.Response.bytes(bodyBytes, statusCode, {request: request, headers: headers, isRedirect: isRedirect, persistentConnection: persistentConnection, reasonPhrase: reasonPhrase});
    }
    static fromStream(response) {
      return async.async(response$.Response, function* fromStream() {
        let body = (yield response.stream.toBytes());
        return new response$.Response.bytes(body, response.statusCode, {request: response.request, headers: response.headers, isRedirect: response.isRedirect, persistentConnection: response.persistentConnection, reasonPhrase: response.reasonPhrase});
      });
    }
  };
  (response$.Response.new = function(body, statusCode, opts) {
    let request = opts && 'request' in opts ? opts.request : null;
    let headers = opts && 'headers' in opts ? opts.headers : C[155] || CT.C155;
    let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;
    let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : true;
    let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;
    response$.Response.bytes.call(this, response$._encodingForHeaders(headers).encode(body), statusCode, {request: request, headers: headers, isRedirect: isRedirect, persistentConnection: persistentConnection, reasonPhrase: reasonPhrase});
  }).prototype = response$.Response.prototype;
  (response$.Response.bytes = function(bodyBytes, statusCode, opts) {
    let request = opts && 'request' in opts ? opts.request : null;
    let headers = opts && 'headers' in opts ? opts.headers : C[155] || CT.C155;
    let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;
    let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : true;
    let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;
    this[S.bodyBytes] = utils$3.toUint8List(bodyBytes);
    response$.Response.__proto__.new.call(this, statusCode, {contentLength: bodyBytes[S$.$length], request: request, headers: headers, isRedirect: isRedirect, persistentConnection: persistentConnection, reasonPhrase: reasonPhrase});
    ;
  }).prototype = response$.Response.prototype;
  dart.addTypeTests(response$.Response);
  dart.addTypeCaches(response$.Response);
  dart.setStaticMethodSignature(response$.Response, () => ['fromStream']);
  dart.setGetterSignature(response$.Response, () => ({
    __proto__: dart.getGetters(response$.Response.__proto__),
    body: core.String
  }));
  dart.setLibraryUri(response$.Response, I[187]);
  dart.setFieldSignature(response$.Response, () => ({
    __proto__: dart.getFields(response$.Response.__proto__),
    bodyBytes: dart.finalFieldType(typed_data.Uint8List)
  }));
  response$._encodingForHeaders = function _encodingForHeaders(headers) {
    return utils$3.encodingForCharset(response$._contentTypeForHeaders(headers).parameters[S$.$_get]("charset"));
  };
  response$._contentTypeForHeaders = function _contentTypeForHeaders(headers) {
    let contentType = headers[S$.$_get]("content-type");
    if (contentType != null) return media_type.MediaType.parse(contentType);
    return new media_type.MediaType.new("application", "octet-stream");
  };
  streamed_request.StreamedRequest = class StreamedRequest extends base_request.BaseRequest {
    get sink() {
      return this[S._controller].sink;
    }
    static ['_#new#tearOff'](method, url) {
      return new streamed_request.StreamedRequest.new(method, url);
    }
    finalize() {
      super.finalize();
      return new byte_stream.ByteStream.new(this[S._controller].stream);
    }
  };
  (streamed_request.StreamedRequest.new = function(method, url) {
    this[S._controller] = T$.StreamControllerOfListOfint().new({sync: true});
    streamed_request.StreamedRequest.__proto__.new.call(this, method, url);
    ;
  }).prototype = streamed_request.StreamedRequest.prototype;
  dart.addTypeTests(streamed_request.StreamedRequest);
  dart.addTypeCaches(streamed_request.StreamedRequest);
  dart.setGetterSignature(streamed_request.StreamedRequest, () => ({
    __proto__: dart.getGetters(streamed_request.StreamedRequest.__proto__),
    sink: async.EventSink$(core.List$(core.int))
  }));
  dart.setLibraryUri(streamed_request.StreamedRequest, I[188]);
  dart.setFieldSignature(streamed_request.StreamedRequest, () => ({
    __proto__: dart.getFields(streamed_request.StreamedRequest.__proto__),
    [S._controller]: dart.finalFieldType(async.StreamController$(core.List$(core.int)))
  }));
  base_client.BaseClient = class BaseClient extends core.Object {
    head(url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return this[S._sendUnstreamed]("HEAD", url, headers);
    }
    get(url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return this[S._sendUnstreamed]("GET", url, headers);
    }
    post(url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let body = opts && 'body' in opts ? opts.body : null;
      let encoding = opts && 'encoding' in opts ? opts.encoding : null;
      return this[S._sendUnstreamed]("POST", url, headers, body, encoding);
    }
    put(url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let body = opts && 'body' in opts ? opts.body : null;
      let encoding = opts && 'encoding' in opts ? opts.encoding : null;
      return this[S._sendUnstreamed]("PUT", url, headers, body, encoding);
    }
    patch(url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let body = opts && 'body' in opts ? opts.body : null;
      let encoding = opts && 'encoding' in opts ? opts.encoding : null;
      return this[S._sendUnstreamed]("PATCH", url, headers, body, encoding);
    }
    delete(url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let body = opts && 'body' in opts ? opts.body : null;
      let encoding = opts && 'encoding' in opts ? opts.encoding : null;
      return this[S._sendUnstreamed]("DELETE", url, headers, body, encoding);
    }
    read(url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return async.async(core.String, (function* read() {
        let response = (yield this.get(url, {headers: headers}));
        this[S._checkResponseSuccess](url, response);
        return response.body;
      }).bind(this));
    }
    readBytes(url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return async.async(typed_data.Uint8List, (function* readBytes() {
        let response = (yield this.get(url, {headers: headers}));
        this[S._checkResponseSuccess](url, response);
        return response.bodyBytes;
      }).bind(this));
    }
    [S._sendUnstreamed](method, url, headers, body = null, encoding = null) {
      return async.async(response$.Response, (function* _sendUnstreamed() {
        let request = new request$.Request.new(method, url);
        if (headers != null) request.headers[S$.$addAll](headers);
        if (encoding != null) request.encoding = encoding;
        if (body != null) {
          if (typeof body == 'string') {
            request.body = body;
          } else if (core.List.is(body)) {
            request.bodyBytes = body[S$.$cast](core.int);
          } else if (core.Map.is(body)) {
            request.bodyFields = body[S$.$cast](core.String, core.String);
          } else {
            dart.throw(new core.ArgumentError.new("Invalid request body \"" + dart.str(body) + "\"."));
          }
        }
        return response$.Response.fromStream(yield this.send(request));
      }).bind(this));
    }
    [S._checkResponseSuccess](url, response) {
      if (response.statusCode < 400) return;
      let message = "Request to " + dart.str(url) + " failed with status " + dart.str(response.statusCode);
      if (response.reasonPhrase != null) {
        message = message + ": " + dart.str(response.reasonPhrase);
      }
      dart.throw(new exception.ClientException.new(message + ".", url));
    }
    close() {
    }
  };
  (base_client.BaseClient.new = function() {
    ;
  }).prototype = base_client.BaseClient.prototype;
  dart.addTypeTests(base_client.BaseClient);
  dart.addTypeCaches(base_client.BaseClient);
  base_client.BaseClient[dart.implements] = () => [client$.Client];
  dart.setMethodSignature(base_client.BaseClient, () => ({
    __proto__: dart.getMethods(base_client.BaseClient.__proto__),
    head: dart.fnType(async.Future$(response$.Response), [core.Uri], {headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    get: dart.fnType(async.Future$(response$.Response), [core.Uri], {headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    post: dart.fnType(async.Future$(response$.Response), [core.Uri], {body: dart.nullable(core.Object), encoding: dart.nullable(convert.Encoding), headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    put: dart.fnType(async.Future$(response$.Response), [core.Uri], {body: dart.nullable(core.Object), encoding: dart.nullable(convert.Encoding), headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    patch: dart.fnType(async.Future$(response$.Response), [core.Uri], {body: dart.nullable(core.Object), encoding: dart.nullable(convert.Encoding), headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    delete: dart.fnType(async.Future$(response$.Response), [core.Uri], {body: dart.nullable(core.Object), encoding: dart.nullable(convert.Encoding), headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    read: dart.fnType(async.Future$(core.String), [core.Uri], {headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    readBytes: dart.fnType(async.Future$(typed_data.Uint8List), [core.Uri], {headers: dart.nullable(core.Map$(core.String, core.String))}, {}),
    [S._sendUnstreamed]: dart.fnType(async.Future$(response$.Response), [core.String, core.Uri, dart.nullable(core.Map$(core.String, core.String))], [dart.dynamic, dart.nullable(convert.Encoding)]),
    [S._checkResponseSuccess]: dart.fnType(dart.void, [core.Uri, response$.Response]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(base_client.BaseClient, I[189]);
  byte_stream.ByteStream = class ByteStream extends async.StreamView$(core.List$(core.int)) {
    static ['_#new#tearOff'](stream) {
      return new byte_stream.ByteStream.new(stream);
    }
    static fromBytes(bytes) {
      return new byte_stream.ByteStream.new(T$.StreamOfListOfint().value(bytes));
    }
    static ['_#fromBytes#tearOff'](bytes) {
      return byte_stream.ByteStream.fromBytes(bytes);
    }
    toBytes() {
      let completer = T$.CompleterOfUint8List().new();
      let sink = new convert._ByteCallbackSink.new(dart.fn(bytes => completer.complete(_native_typed_data.NativeUint8List.fromList(bytes)), T$.ListOfintTovoid()));
      this.listen(T$.ListOfintTovoid().as(dart.bind(sink, 'add')), {onError: dart.bind(completer, 'completeError'), onDone: dart.bind(sink, 'close'), cancelOnError: true});
      return completer.future;
    }
    bytesToString(encoding = C[156] || CT.C156) {
      return encoding.decodeStream(this);
    }
    toStringStream(encoding = C[156] || CT.C156) {
      return encoding.decoder.bind(this);
    }
  };
  (byte_stream.ByteStream.new = function(stream) {
    byte_stream.ByteStream.__proto__.new.call(this, stream);
    ;
  }).prototype = byte_stream.ByteStream.prototype;
  dart.addTypeTests(byte_stream.ByteStream);
  dart.addTypeCaches(byte_stream.ByteStream);
  dart.setMethodSignature(byte_stream.ByteStream, () => ({
    __proto__: dart.getMethods(byte_stream.ByteStream.__proto__),
    toBytes: dart.fnType(async.Future$(typed_data.Uint8List), []),
    bytesToString: dart.fnType(async.Future$(core.String), [], [convert.Encoding]),
    toStringStream: dart.fnType(async.Stream$(core.String), [], [convert.Encoding])
  }));
  dart.setStaticMethodSignature(byte_stream.ByteStream, () => ['fromBytes']);
  dart.setLibraryUri(byte_stream.ByteStream, I[190]);
  multipart_file.MultipartFile = class MultipartFile extends core.Object {
    get field() {
      return this[S.field];
    }
    set field(value) {
      super.field = value;
    }
    get length() {
      return this[S.length$1];
    }
    set length(value) {
      super.length = value;
    }
    get filename() {
      return this[S.filename];
    }
    set filename(value) {
      super.filename = value;
    }
    get contentType() {
      return this[S.contentType$1];
    }
    set contentType(value) {
      super.contentType = value;
    }
    get isFinalized() {
      return this[S._isFinalized];
    }
    static ['_#new#tearOff'](field, stream, length, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      return new multipart_file.MultipartFile.new(field, stream, length, {filename: filename, contentType: contentType});
    }
    static fromBytes(field, value, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let stream = byte_stream.ByteStream.fromBytes(value);
      return new multipart_file.MultipartFile.new(field, stream, value[S$.$length], {filename: filename, contentType: contentType});
    }
    static ['_#fromBytes#tearOff'](field, value, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      return multipart_file.MultipartFile.fromBytes(field, value, {filename: filename, contentType: contentType});
    }
    static fromString(field, value, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      contentType == null ? contentType = new media_type.MediaType.new("text", "plain") : null;
      let encoding = utils$3.encodingForCharset(contentType.parameters[S$.$_get]("charset"), convert.utf8);
      contentType = contentType.change({parameters: new (T$.IdentityMapOfString$String()).from(["charset", encoding.name])});
      return multipart_file.MultipartFile.fromBytes(field, encoding.encode(value), {filename: filename, contentType: contentType});
    }
    static ['_#fromString#tearOff'](field, value, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      return multipart_file.MultipartFile.fromString(field, value, {filename: filename, contentType: contentType});
    }
    static fromPath(field, filePath, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      return multipart_file_stub.multipartFileFromPath(field, filePath, {filename: filename, contentType: contentType});
    }
    finalize() {
      if (this.isFinalized) {
        dart.throw(new core.StateError.new("Can't finalize a finalized MultipartFile."));
      }
      this[S._isFinalized] = true;
      return this[S._stream];
    }
  };
  (multipart_file.MultipartFile.new = function(field, stream, length, opts) {
    let t201;
    let filename = opts && 'filename' in opts ? opts.filename : null;
    let contentType = opts && 'contentType' in opts ? opts.contentType : null;
    this[S._isFinalized] = false;
    this[S.field] = field;
    this[S.length$1] = length;
    this[S.filename] = filename;
    this[S._stream] = utils$3.toByteStream(stream);
    this[S.contentType$1] = (t201 = contentType, t201 == null ? new media_type.MediaType.new("application", "octet-stream") : t201);
    ;
  }).prototype = multipart_file.MultipartFile.prototype;
  dart.addTypeTests(multipart_file.MultipartFile);
  dart.addTypeCaches(multipart_file.MultipartFile);
  dart.setMethodSignature(multipart_file.MultipartFile, () => ({
    __proto__: dart.getMethods(multipart_file.MultipartFile.__proto__),
    finalize: dart.fnType(byte_stream.ByteStream, [])
  }));
  dart.setStaticMethodSignature(multipart_file.MultipartFile, () => ['fromBytes', 'fromString', 'fromPath']);
  dart.setGetterSignature(multipart_file.MultipartFile, () => ({
    __proto__: dart.getGetters(multipart_file.MultipartFile.__proto__),
    isFinalized: core.bool
  }));
  dart.setLibraryUri(multipart_file.MultipartFile, I[191]);
  dart.setFieldSignature(multipart_file.MultipartFile, () => ({
    __proto__: dart.getFields(multipart_file.MultipartFile.__proto__),
    field: dart.finalFieldType(core.String),
    length: dart.finalFieldType(core.int),
    filename: dart.finalFieldType(dart.nullable(core.String)),
    contentType: dart.finalFieldType(media_type.MediaType),
    [S._stream]: dart.finalFieldType(byte_stream.ByteStream),
    [S._isFinalized]: dart.fieldType(core.bool)
  }));
  multipart_request.MultipartRequest = class MultipartRequest extends base_request.BaseRequest {
    get fields() {
      return this[S.fields];
    }
    set fields(value) {
      super.fields = value;
    }
    get files() {
      return this[S.files];
    }
    set files(value) {
      super.files = value;
    }
    static ['_#new#tearOff'](method, url) {
      return new multipart_request.MultipartRequest.new(method, url);
    }
    get contentLength() {
      let length = 0;
      this.fields[S$.$forEach](dart.fn((name, value) => {
        length = length + ("--".length + 70 + "\r\n".length + convert.utf8.encode(this[S._headerForField](name, value))[S$.$length] + convert.utf8.encode(value)[S$.$length] + "\r\n".length);
      }, T$.StringAndStringTovoid()));
      for (let file of this.files) {
        length = length + ("--".length + 70 + "\r\n".length + convert.utf8.encode(this[S._headerForFile](file))[S$.$length] + file.length + "\r\n".length);
      }
      return length + "--".length + 70 + "--\r\n".length;
    }
    set contentLength(value) {
      dart.throw(new core.UnsupportedError.new("Cannot set the contentLength property of " + "multipart requests."));
    }
    finalize() {
      let boundary = this[S._boundaryString]();
      this.headers[S$.$_set]("content-type", "multipart/form-data; boundary=" + boundary);
      super.finalize();
      return new byte_stream.ByteStream.new(this[S._finalize](boundary));
    }
    [S._finalize](boundary) {
      return new (T$._AsyncStarImplOfListOfint()).new((function* _finalize(stream) {
        let line = C[157] || CT.C157;
        let separator = convert.utf8.encode("--" + boundary + "\r\n");
        let close = convert.utf8.encode("--" + boundary + "--\r\n");
        for (let field of this.fields[S.$entries]) {
          if (stream.add(separator)) return;
          yield;
          if (stream.add(convert.utf8.encode(this[S._headerForField](field.key, field.value)))) return;
          yield;
          if (stream.add(convert.utf8.encode(field.value))) return;
          yield;
          if (stream.add(line)) return;
          yield;
        }
        for (let file of this.files) {
          if (stream.add(separator)) return;
          yield;
          if (stream.add(convert.utf8.encode(this[S._headerForFile](file)))) return;
          yield;
          if (stream.addStream(file.finalize())) return;
          yield;
          if (stream.add(line)) return;
          yield;
        }
        if (stream.add(close)) return;
        yield;
      }).bind(this)).stream;
    }
    [S._headerForField](name, value) {
      let header = "content-disposition: form-data; name=\"" + this[S._browserEncode](name) + "\"";
      if (!utils$3.isPlainAscii(value)) {
        header = header + "\r\n" + "content-type: text/plain; charset=utf-8\r\n" + "content-transfer-encoding: binary";
      }
      return header + "\r\n\r\n";
    }
    [S._headerForFile](file) {
      let header = "content-type: " + dart.str(file.contentType) + "\r\n" + "content-disposition: form-data; name=\"" + this[S._browserEncode](file.field) + "\"";
      if (file.filename != null) {
        header = header + "; filename=\"" + this[S._browserEncode](dart.nullCheck(file.filename)) + "\"";
      }
      return header + "\r\n\r\n";
    }
    [S._browserEncode](value) {
      return value[S$.$replaceAll](multipart_request._newlineRegExp, "%0D%0A")[S$.$replaceAll]("\"", "%22");
    }
    [S._boundaryString]() {
      let prefix = "dart-http-boundary-";
      let list = T$.ListOfint().generate(70 - prefix.length, dart.fn(index => boundary_characters.boundaryCharacters[S$.$_get](multipart_request.MultipartRequest._random.nextInt(boundary_characters.boundaryCharacters[S$.$length])), T$.intToint()), {growable: false});
      return prefix + core.String.fromCharCodes(list);
    }
  };
  (multipart_request.MultipartRequest.new = function(method, url) {
    this[S.fields] = new (T$.IdentityMapOfString$String()).new();
    this[S.files] = T$.JSArrayOfMultipartFile().of([]);
    multipart_request.MultipartRequest.__proto__.new.call(this, method, url);
    ;
  }).prototype = multipart_request.MultipartRequest.prototype;
  dart.addTypeTests(multipart_request.MultipartRequest);
  dart.addTypeCaches(multipart_request.MultipartRequest);
  dart.setMethodSignature(multipart_request.MultipartRequest, () => ({
    __proto__: dart.getMethods(multipart_request.MultipartRequest.__proto__),
    [S._finalize]: dart.fnType(async.Stream$(core.List$(core.int)), [core.String]),
    [S._headerForField]: dart.fnType(core.String, [core.String, core.String]),
    [S._headerForFile]: dart.fnType(core.String, [multipart_file.MultipartFile]),
    [S._browserEncode]: dart.fnType(core.String, [core.String]),
    [S._boundaryString]: dart.fnType(core.String, [])
  }));
  dart.setGetterSignature(multipart_request.MultipartRequest, () => ({
    __proto__: dart.getGetters(multipart_request.MultipartRequest.__proto__),
    contentLength: core.int
  }));
  dart.setLibraryUri(multipart_request.MultipartRequest, I[192]);
  dart.setFieldSignature(multipart_request.MultipartRequest, () => ({
    __proto__: dart.getFields(multipart_request.MultipartRequest.__proto__),
    fields: dart.finalFieldType(core.Map$(core.String, core.String)),
    files: dart.finalFieldType(core.List$(multipart_file.MultipartFile))
  }));
  dart.setStaticFieldSignature(multipart_request.MultipartRequest, () => ['_boundaryLength', '_random']);
  dart.defineLazy(multipart_request.MultipartRequest, {
    /*multipart_request.MultipartRequest._boundaryLength*/get _boundaryLength() {
      return 70;
    },
    /*multipart_request.MultipartRequest._random*/get _random() {
      return math.Random.new();
    }
  }, false);
  dart.defineLazy(multipart_request, {
    /*multipart_request._newlineRegExp*/get _newlineRegExp() {
      return core.RegExp.new("\\r\\n|\\r|\\n");
    }
  }, false);
  streamed_response.StreamedResponse = class StreamedResponse extends base_response.BaseResponse {
    get stream() {
      return this[S.stream];
    }
    set stream(value) {
      super.stream = value;
    }
    static ['_#new#tearOff'](stream, statusCode, opts) {
      let contentLength = opts && 'contentLength' in opts ? opts.contentLength : null;
      let request = opts && 'request' in opts ? opts.request : null;
      let headers = opts && 'headers' in opts ? opts.headers : C[155] || CT.C155;
      let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;
      let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : true;
      let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;
      return new streamed_response.StreamedResponse.new(stream, statusCode, {contentLength: contentLength, request: request, headers: headers, isRedirect: isRedirect, persistentConnection: persistentConnection, reasonPhrase: reasonPhrase});
    }
  };
  (streamed_response.StreamedResponse.new = function(stream, statusCode, opts) {
    let contentLength = opts && 'contentLength' in opts ? opts.contentLength : null;
    let request = opts && 'request' in opts ? opts.request : null;
    let headers = opts && 'headers' in opts ? opts.headers : C[155] || CT.C155;
    let isRedirect = opts && 'isRedirect' in opts ? opts.isRedirect : false;
    let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : true;
    let reasonPhrase = opts && 'reasonPhrase' in opts ? opts.reasonPhrase : null;
    this[S.stream] = utils$3.toByteStream(stream);
    streamed_response.StreamedResponse.__proto__.new.call(this, statusCode, {contentLength: contentLength, request: request, headers: headers, isRedirect: isRedirect, persistentConnection: persistentConnection, reasonPhrase: reasonPhrase});
    ;
  }).prototype = streamed_response.StreamedResponse.prototype;
  dart.addTypeTests(streamed_response.StreamedResponse);
  dart.addTypeCaches(streamed_response.StreamedResponse);
  dart.setLibraryUri(streamed_response.StreamedResponse, I[193]);
  dart.setFieldSignature(streamed_response.StreamedResponse, () => ({
    __proto__: dart.getFields(streamed_response.StreamedResponse.__proto__),
    stream: dart.finalFieldType(byte_stream.ByteStream)
  }));
  task.fbTaskStateToTaskState = function fbTaskStateToTaskState(state) {
    return dart.nullCheck(task._fbTaskStateToTaskState[S$.$_get](state));
  };
  task.fbUploadTaskSnapshotToTaskSnapshot = function fbUploadTaskSnapshotToTaskSnapshot(reference, snapshot) {
    return new task_snapshot_web.TaskSnapshotWeb.new(reference, snapshot);
  };
  dart.defineLazy(task, {
    /*task._fbTaskStateToTaskState*/get _fbTaskStateToTaskState() {
      return new (T$.LinkedMapOfTaskState$TaskState()).from([storage.TaskState.CANCELED, task_state.TaskState.canceled, storage.TaskState.ERROR, task_state.TaskState.error, storage.TaskState.PAUSED, task_state.TaskState.paused, storage.TaskState.RUNNING, task_state.TaskState.running, storage.TaskState.SUCCESS, task_state.TaskState.success]);
    },
    set _fbTaskStateToTaskState(value) {}
  }, false);
  list_result_web.ListResultWeb = class ListResultWeb extends platform_interface_list_result.ListResultPlatform {
    static ['_#new#tearOff'](storage, opts) {
      let nextPageToken = opts && 'nextPageToken' in opts ? opts.nextPageToken : null;
      let items = opts && 'items' in opts ? opts.items : null;
      let prefixes = opts && 'prefixes' in opts ? opts.prefixes : null;
      return new list_result_web.ListResultWeb.new(storage, {nextPageToken: nextPageToken, items: items, prefixes: prefixes});
    }
    get items() {
      return this[S._items][S$.$map](platform_interface_reference.ReferencePlatform, dart.bind(dart.nullCheck(this.storage), 'ref'))[S$.$toList]();
    }
    get prefixes() {
      return this[S._prefixes][S$.$map](platform_interface_reference.ReferencePlatform, dart.bind(dart.nullCheck(this.storage), 'ref'))[S$.$toList]();
    }
  };
  (list_result_web.ListResultWeb.new = function(storage, opts) {
    let t201, t201$;
    let nextPageToken = opts && 'nextPageToken' in opts ? opts.nextPageToken : null;
    let items = opts && 'items' in opts ? opts.items : null;
    let prefixes = opts && 'prefixes' in opts ? opts.prefixes : null;
    this[S._items] = (t201 = items, t201 == null ? T$.JSArrayOfString().of([]) : t201);
    this[S._prefixes] = (t201$ = prefixes, t201$ == null ? T$.JSArrayOfString().of([]) : t201$);
    list_result_web.ListResultWeb.__proto__.new.call(this, storage, nextPageToken);
    ;
  }).prototype = list_result_web.ListResultWeb.prototype;
  dart.addTypeTests(list_result_web.ListResultWeb);
  dart.addTypeCaches(list_result_web.ListResultWeb);
  dart.setLibraryUri(list_result_web.ListResultWeb, I[194]);
  dart.setFieldSignature(list_result_web.ListResultWeb, () => ({
    __proto__: dart.getFields(list_result_web.ListResultWeb.__proto__),
    [S._items]: dart.fieldType(core.List$(core.String)),
    [S._prefixes]: dart.fieldType(core.List$(core.String))
  }));
  const _is__TypedQueue_default = Symbol('_is__TypedQueue_default');
  typed_queue._TypedQueue$ = dart.generic((E, L) => {
    var __t$IterableOfE = () => (__t$IterableOfE = dart.constFn(core.Iterable$(E)))();
    var __t$ListOfE = () => (__t$ListOfE = dart.constFn(core.List$(E)))();
    var __t$EN = () => (__t$EN = dart.constFn(dart.nullable(E)))();
    const Object_ListMixin$36 = class Object_ListMixin extends core.Object {};
    (Object_ListMixin$36.new = function() {
    }).prototype = Object_ListMixin$36.prototype;
    dart.applyMixin(Object_ListMixin$36, collection.ListMixin$(E));
    class _TypedQueue extends Object_ListMixin$36 {
      get [S._table$1]() {
        return this[S._table];
      }
      set [S._table$1](value) {
        this[S._table] = value;
      }
      get [S._head$2]() {
        return this[S._head$1];
      }
      set [S._head$2](value) {
        this[S._head$1] = value;
      }
      get [S._tail$1]() {
        return this[S._tail];
      }
      set [S._tail$1](value) {
        this[S._tail] = value;
      }
      get length() {
        return (this[S._tail$1] - this[S._head$2] & this[S._table$1][S$.$length] - 1) >>> 0;
      }
      toList(opts) {
        let growable = opts && 'growable' in opts ? opts.growable : true;
        let list = growable ? this[S._createBuffer](this.length) : this[S._createList](this.length);
        this[S._writeToList](list);
        return list;
      }
      cast(T) {
        if (queue_list.QueueList$(T).is(this)) return queue_list.QueueList$(T).as(this);
        dart.throw(new core.UnsupportedError.new(dart.str(this) + " cannot be cast to the desired type."));
      }
      retype(T) {
        return this.cast(T);
      }
      addLast(value) {
        E.as(value);
        this[S._table$1][S$.$_set](this[S._tail$1], value);
        this[S._tail$1] = (this[S._tail$1] + 1 & this[S._table$1][S$.$length] - 1) >>> 0;
        if (this[S._head$2] === this[S._tail$1]) this[S._growAtCapacity]();
      }
      addFirst(value) {
        E.as(value);
        this[S._head$2] = (this[S._head$2] - 1 & this[S._table$1][S$.$length] - 1) >>> 0;
        this[S._table$1][S$.$_set](this[S._head$2], value);
        if (this[S._head$2] === this[S._tail$1]) this[S._growAtCapacity]();
      }
      removeFirst() {
        if (this[S._head$2] === this[S._tail$1]) dart.throw(new core.StateError.new("No element"));
        let result = this[S._table$1][S$.$_get](this[S._head$2]);
        this[S._head$2] = (this[S._head$2] + 1 & this[S._table$1][S$.$length] - 1) >>> 0;
        return result;
      }
      removeLast() {
        if (this[S._head$2] === this[S._tail$1]) dart.throw(new core.StateError.new("No element"));
        this[S._tail$1] = (this[S._tail$1] - 1 & this[S._table$1][S$.$length] - 1) >>> 0;
        return this[S._table$1][S$.$_get](this[S._tail$1]);
      }
      add(value) {
        E.as(value);
        return this.addLast(value);
      }
      set length(value) {
        core.RangeError.checkNotNegative(value, "length");
        let delta = value - this.length;
        if (delta >= 0) {
          let needsToGrow = this[S._table$1][S$.$length] <= value;
          if (needsToGrow) this[S._growTo](value);
          this[S._tail$1] = (this[S._tail$1] + delta & this[S._table$1][S$.$length] - 1) >>> 0;
          if (!needsToGrow) this.fillRange(value - delta, value, this[S._defaultValue]);
        } else {
          this.removeRange(value, this.length);
        }
      }
      _get(index) {
        core.RangeError.checkValidIndex(index, this, null, this.length);
        return this[S._table$1][S$.$_get]((this[S._head$2] + index & this[S._table$1][S$.$length] - 1) >>> 0);
      }
      _set(index, value$) {
        let value = value$;
        E.as(value);
        core.RangeError.checkValidIndex(index, this);
        this[S._table$1][S$.$_set]((this[S._head$2] + index & this[S._table$1][S$.$length] - 1) >>> 0, value);
        return value$;
      }
      removeRange(start, end) {
        let length = this.length;
        core.RangeError.checkValidRange(start, end, length);
        if (start === 0) {
          this[S._head$2] = (this[S._head$2] + end & this[S._table$1][S$.$length] - 1) >>> 0;
          return;
        }
        let elementsAfter = length - end;
        if (elementsAfter === 0) {
          this[S._tail$1] = (this[S._head$2] + start & this[S._table$1][S$.$length] - 1) >>> 0;
          return;
        }
        let removedElements = end - start;
        if (start < elementsAfter) {
          this.setRange(removedElements, end, this);
          this[S._head$2] = (this[S._head$2] + removedElements & this[S._table$1][S$.$length] - 1) >>> 0;
        } else {
          this.setRange(start, length - removedElements, this, end);
          this[S._tail$1] = (this[S._tail$1] - removedElements & this[S._table$1][S$.$length] - 1) >>> 0;
        }
      }
      setRange(start, end, iterable, skipCount = 0) {
        __t$IterableOfE().as(iterable);
        core.RangeError.checkValidRange(start, end, this.length);
        if (start === end) return;
        let targetStart = (this[S._head$2] + start & this[S._table$1][S$.$length] - 1) >>> 0;
        let targetEnd = (this[S._head$2] + end & this[S._table$1][S$.$length] - 1) >>> 0;
        let targetIsContiguous = targetStart < targetEnd;
        if (iterable === this) {
          let sourceStart = (this[S._head$2] + skipCount & this[S._table$1][S$.$length] - 1) >>> 0;
          let sourceEnd = (sourceStart + (end - start) & this[S._table$1][S$.$length] - 1) >>> 0;
          if (sourceStart === targetStart) return;
          let sourceIsContiguous = sourceStart < sourceEnd;
          if (targetIsContiguous && sourceIsContiguous) {
            this[S._table$1][S$.$setRange](targetStart, targetEnd, this[S._table$1], sourceStart);
          } else if (!targetIsContiguous && !sourceIsContiguous) {
            if (sourceStart > targetStart) {
              let startGap = sourceStart - targetStart;
              let firstEnd = this[S._table$1][S$.$length] - startGap;
              this[S._table$1][S$.$setRange](targetStart, firstEnd, this[S._table$1], sourceStart);
              this[S._table$1][S$.$setRange](firstEnd, this[S._table$1][S$.$length], this[S._table$1]);
              this[S._table$1][S$.$setRange](0, targetEnd, this[S._table$1], startGap);
            } else if (sourceEnd < targetEnd) {
              let firstStart = targetEnd - sourceEnd;
              this[S._table$1][S$.$setRange](firstStart, targetEnd, this[S._table$1]);
              this[S._table$1][S$.$setRange](0, firstStart, this[S._table$1], this[S._table$1][S$.$length] - firstStart);
              this[S._table$1][S$.$setRange](targetStart, this[S._table$1][S$.$length], this[S._table$1], sourceStart);
            }
          } else if (sourceStart < targetEnd) {
            if (sourceIsContiguous) {
              this[S._table$1][S$.$setRange](targetStart, this[S._table$1][S$.$length], this[S._table$1], sourceStart);
              this[S._table$1][S$.$setRange](0, targetEnd, this[S._table$1], sourceStart + (this[S._table$1][S$.$length] - targetStart));
            } else {
              let firstEnd = this[S._table$1][S$.$length] - sourceStart;
              this[S._table$1][S$.$setRange](targetStart, firstEnd, this[S._table$1], sourceStart);
              this[S._table$1][S$.$setRange](firstEnd, targetEnd, this[S._table$1]);
            }
          } else {
            if (sourceIsContiguous) {
              this[S._table$1][S$.$setRange](0, targetEnd, this[S._table$1], sourceStart + (this[S._table$1][S$.$length] - targetStart));
              this[S._table$1][S$.$setRange](targetStart, this[S._table$1][S$.$length], this[S._table$1], sourceStart);
            } else {
              let firstStart = targetEnd - sourceEnd;
              this[S._table$1][S$.$setRange](firstStart, targetEnd, this[S._table$1]);
              this[S._table$1][S$.$setRange](targetStart, firstStart, this[S._table$1], sourceStart);
            }
          }
        } else if (targetIsContiguous) {
          this[S._table$1][S$.$setRange](targetStart, targetEnd, iterable, skipCount);
        } else if (__t$ListOfE().is(iterable)) {
          this[S._table$1][S$.$setRange](targetStart, this[S._table$1][S$.$length], iterable, skipCount);
          this[S._table$1][S$.$setRange](0, targetEnd, iterable, skipCount + (this[S._table$1][S$.$length] - targetStart));
        } else {
          super.setRange(start, end, iterable, skipCount);
        }
      }
      fillRange(start, end, value = null) {
        __t$EN().as(value);
        let startInTable = (this[S._head$2] + start & this[S._table$1][S$.$length] - 1) >>> 0;
        let endInTable = (this[S._head$2] + end & this[S._table$1][S$.$length] - 1) >>> 0;
        if (startInTable <= endInTable) {
          this[S._table$1][S$.$fillRange](startInTable, endInTable, value);
        } else {
          this[S._table$1][S$.$fillRange](startInTable, this[S._table$1][S$.$length], value);
          this[S._table$1][S$.$fillRange](0, endInTable, value);
        }
      }
      sublist(start, end = null) {
        let length = this.length;
        let nonNullEnd = core.RangeError.checkValidRange(start, end, length);
        let list = this[S._createList](nonNullEnd - start);
        this[S._writeToList](list, start, nonNullEnd);
        return list;
      }
      [S._writeToList](target, start = null, end = null) {
        start == null ? start = 0 : null;
        end == null ? end = this.length : null;
        if (!(target[S$.$length] >= dart.notNull(end) - dart.notNull(start))) dart.assertFailed(null, I[195], 278, 12, "target.length >= end - start");
        if (!(dart.notNull(start) <= dart.notNull(end))) dart.assertFailed(null, I[195], 279, 12, "start <= end");
        let elementsToWrite = dart.notNull(end) - dart.notNull(start);
        let startInTable = (this[S._head$2] + dart.notNull(start) & this[S._table$1][S$.$length] - 1) >>> 0;
        let endInTable = (this[S._head$2] + dart.notNull(end) & this[S._table$1][S$.$length] - 1) >>> 0;
        if (startInTable <= endInTable) {
          target[S$.$setRange](0, elementsToWrite, this[S._table$1], startInTable);
        } else {
          let firstPartSize = this[S._table$1][S$.$length] - startInTable;
          target[S$.$setRange](0, firstPartSize, this[S._table$1], startInTable);
          target[S$.$setRange](firstPartSize, firstPartSize + endInTable, this[S._table$1], 0);
        }
        return elementsToWrite;
      }
      [S._growAtCapacity]() {
        if (!(this[S._head$2] === this[S._tail$1])) dart.assertFailed(null, I[195], 297, 12, "_head == _tail");
        let newTable = this[S._createList](this[S._table$1][S$.$length] * 2);
        let partitionPoint = this[S._table$1][S$.$length] - this[S._head$2];
        newTable[S$.$setRange](0, partitionPoint, this[S._table$1], this[S._head$2]);
        if (partitionPoint !== this[S._table$1][S$.$length]) {
          newTable[S$.$setRange](partitionPoint, this[S._table$1][S$.$length], this[S._table$1]);
        }
        this[S._head$2] = 0;
        this[S._tail$1] = this[S._table$1][S$.$length];
        this[S._table$1] = newTable;
      }
      [S._growTo](newElementCount) {
        if (!(newElementCount >= this.length)) dart.assertFailed(null, I[195], 316, 12, "newElementCount >= length");
        newElementCount = newElementCount + newElementCount[S$.$rightShift](1);
        let newTable = this[S._createList](typed_queue._nextPowerOf2(newElementCount));
        this[S._tail$1] = this[S._writeToList](newTable);
        this[S._table$1] = newTable;
        this[S._head$2] = 0;
      }
    }
    (_TypedQueue.new = function(table) {
      this[S._table] = L.as(table);
      this[S._head$1] = 0;
      this[S._tail] = 0;
      ;
    }).prototype = _TypedQueue.prototype;
    dart.addTypeTests(_TypedQueue);
    _TypedQueue.prototype[_is__TypedQueue_default] = true;
    dart.addTypeCaches(_TypedQueue);
    dart.setMethodSignature(_TypedQueue, () => ({
      __proto__: dart.getMethods(_TypedQueue.__proto__),
      cast: dart.gFnType(T => [queue_list.QueueList$(T), []], T => [dart.nullable(core.Object)]),
      [S$.$cast]: dart.gFnType(T => [queue_list.QueueList$(T), []], T => [dart.nullable(core.Object)]),
      retype: dart.gFnType(T => [queue_list.QueueList$(T), []], T => [dart.nullable(core.Object)]),
      addLast: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addFirst: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      removeFirst: dart.fnType(E, []),
      _get: dart.fnType(E, [core.int]),
      [S$.$_get]: dart.fnType(E, [core.int]),
      _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [S$.$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      sublist: dart.fnType(L, [core.int], [dart.nullable(core.int)]),
      [S$.$sublist]: dart.fnType(L, [core.int], [dart.nullable(core.int)]),
      [S._writeToList]: dart.fnType(core.int, [core.List$(E)], [dart.nullable(core.int), dart.nullable(core.int)]),
      [S._growAtCapacity]: dart.fnType(dart.void, []),
      [S._growTo]: dart.fnType(dart.void, [core.int])
    }));
    dart.setGetterSignature(_TypedQueue, () => ({
      __proto__: dart.getGetters(_TypedQueue.__proto__),
      length: core.int,
      [S$.$length]: core.int
    }));
    dart.setSetterSignature(_TypedQueue, () => ({
      __proto__: dart.getSetters(_TypedQueue.__proto__),
      length: core.int,
      [S$.$length]: core.int
    }));
    dart.setLibraryUri(_TypedQueue, I[196]);
    dart.setFieldSignature(_TypedQueue, () => ({
      __proto__: dart.getFields(_TypedQueue.__proto__),
      [S._table$1]: dart.fieldType(L),
      [S._head$2]: dart.fieldType(core.int),
      [S._tail$1]: dart.fieldType(core.int)
    }));
    dart.defineExtensionMethods(_TypedQueue, [
      'toList',
      'cast',
      'removeLast',
      'add',
      '_get',
      '_set',
      'removeRange',
      'setRange',
      'fillRange',
      'sublist'
    ]);
    dart.defineExtensionAccessors(_TypedQueue, ['length']);
    return _TypedQueue;
  });
  typed_queue._TypedQueue = typed_queue._TypedQueue$();
  dart.addTypeTests(typed_queue._TypedQueue, _is__TypedQueue_default);
  const _is__IntQueue_default = Symbol('_is__IntQueue_default');
  typed_queue._IntQueue$ = dart.generic(L => {
    class _IntQueue extends typed_queue._TypedQueue$(core.int, L) {
      get [S._defaultValue]() {
        return 0;
      }
    }
    (_IntQueue.new = function(queue) {
      _IntQueue.__proto__.new.call(this, queue);
      ;
    }).prototype = _IntQueue.prototype;
    dart.addTypeTests(_IntQueue);
    _IntQueue.prototype[_is__IntQueue_default] = true;
    dart.addTypeCaches(_IntQueue);
    dart.setGetterSignature(_IntQueue, () => ({
      __proto__: dart.getGetters(_IntQueue.__proto__),
      [S._defaultValue]: core.int
    }));
    dart.setLibraryUri(_IntQueue, I[196]);
    return _IntQueue;
  });
  typed_queue._IntQueue = typed_queue._IntQueue$();
  dart.addTypeTests(typed_queue._IntQueue, _is__IntQueue_default);
  const _is__FloatQueue_default = Symbol('_is__FloatQueue_default');
  typed_queue._FloatQueue$ = dart.generic(L => {
    class _FloatQueue extends typed_queue._TypedQueue$(core.double, L) {
      get [S._defaultValue]() {
        return 0;
      }
    }
    (_FloatQueue.new = function(queue) {
      _FloatQueue.__proto__.new.call(this, queue);
      ;
    }).prototype = _FloatQueue.prototype;
    dart.addTypeTests(_FloatQueue);
    _FloatQueue.prototype[_is__FloatQueue_default] = true;
    dart.addTypeCaches(_FloatQueue);
    dart.setGetterSignature(_FloatQueue, () => ({
      __proto__: dart.getGetters(_FloatQueue.__proto__),
      [S._defaultValue]: core.double
    }));
    dart.setLibraryUri(_FloatQueue, I[196]);
    return _FloatQueue;
  });
  typed_queue._FloatQueue = typed_queue._FloatQueue$();
  dart.addTypeTests(typed_queue._FloatQueue, _is__FloatQueue_default);
  typed_queue.Uint8Queue = class Uint8Queue extends typed_queue._IntQueue$(typed_data.Uint8List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Uint8Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t201;
      t201 = new typed_queue.Uint8Queue.new(elements[S$.$length]);
      return (() => {
        t201.addAll(elements);
        return t201;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Uint8Queue.fromList(elements);
    }
    [S._createList](size) {
      return _native_typed_data.NativeUint8List.new(size);
    }
    [S._createBuffer](size) {
      return new typed_buffer.Uint8Buffer.new(size);
    }
    [S._add$2](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[158] || CT.C158, null, [element])));
    }
    get [S._head$3]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[159] || CT.C159)));
    }
    [S._writeToList$1](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[160] || CT.C160, null, [target])));
    }
    [S._grow$1]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[161] || CT.C161, null, [])));
    }
    [S._preGrow$1](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[162] || CT.C162, null, [newElementCount])));
    }
    get [S._table$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[163] || CT.C163)));
    }
    get [S._tail$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[164] || CT.C164)));
    }
    set [S._head$3](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[165] || CT.C165, value)));
    }
    set [S._table$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[166] || CT.C166, value)));
    }
    set [S._tail$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[167] || CT.C167, value)));
    }
  };
  (typed_queue.Uint8Queue.new = function(initialCapacity = null) {
    typed_queue.Uint8Queue.__proto__.new.call(this, _native_typed_data.NativeUint8List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Uint8Queue.prototype;
  dart.addTypeTests(typed_queue.Uint8Queue);
  dart.addTypeCaches(typed_queue.Uint8Queue);
  typed_queue.Uint8Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Uint8Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Uint8Queue.__proto__),
    [S._createList]: dart.fnType(typed_data.Uint8List, [core.int]),
    [S._createBuffer]: dart.fnType(typed_buffer.Uint8Buffer, [core.int]),
    [S._add$2]: dart.fnType(dart.void, [core.int]),
    [S._writeToList$1]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [S._grow$1]: dart.fnType(dart.void, []),
    [S._preGrow$1]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Uint8Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Uint8Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Uint8Queue.__proto__),
    [S._head$3]: core.int,
    [S._table$2]: core.List$(dart.nullable(core.int)),
    [S._tail$2]: core.int
  }));
  dart.setSetterSignature(typed_queue.Uint8Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Uint8Queue.__proto__),
    [S._head$3]: core.int,
    [S._table$2]: core.List$(dart.nullable(core.int)),
    [S._tail$2]: core.int
  }));
  dart.setLibraryUri(typed_queue.Uint8Queue, I[196]);
  typed_queue.Int8Queue = class Int8Queue extends typed_queue._IntQueue$(typed_data.Int8List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Int8Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t201;
      t201 = new typed_queue.Int8Queue.new(elements[S$.$length]);
      return (() => {
        t201.addAll(elements);
        return t201;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Int8Queue.fromList(elements);
    }
    [S._createList](size) {
      return _native_typed_data.NativeInt8List.new(size);
    }
    [S._createBuffer](size) {
      return new typed_buffer.Int8Buffer.new(size);
    }
    [S._add$2](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[158] || CT.C158, null, [element])));
    }
    get [S._head$3]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[159] || CT.C159)));
    }
    [S._writeToList$1](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[160] || CT.C160, null, [target])));
    }
    [S._grow$1]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[161] || CT.C161, null, [])));
    }
    [S._preGrow$1](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[162] || CT.C162, null, [newElementCount])));
    }
    get [S._table$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[163] || CT.C163)));
    }
    get [S._tail$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[164] || CT.C164)));
    }
    set [S._head$3](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[165] || CT.C165, value)));
    }
    set [S._table$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[166] || CT.C166, value)));
    }
    set [S._tail$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[167] || CT.C167, value)));
    }
  };
  (typed_queue.Int8Queue.new = function(initialCapacity = null) {
    typed_queue.Int8Queue.__proto__.new.call(this, _native_typed_data.NativeInt8List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Int8Queue.prototype;
  dart.addTypeTests(typed_queue.Int8Queue);
  dart.addTypeCaches(typed_queue.Int8Queue);
  typed_queue.Int8Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Int8Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Int8Queue.__proto__),
    [S._createList]: dart.fnType(typed_data.Int8List, [core.int]),
    [S._createBuffer]: dart.fnType(typed_buffer.Int8Buffer, [core.int]),
    [S._add$2]: dart.fnType(dart.void, [core.int]),
    [S._writeToList$1]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [S._grow$1]: dart.fnType(dart.void, []),
    [S._preGrow$1]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Int8Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Int8Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Int8Queue.__proto__),
    [S._head$3]: core.int,
    [S._table$2]: core.List$(dart.nullable(core.int)),
    [S._tail$2]: core.int
  }));
  dart.setSetterSignature(typed_queue.Int8Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Int8Queue.__proto__),
    [S._head$3]: core.int,
    [S._table$2]: core.List$(dart.nullable(core.int)),
    [S._tail$2]: core.int
  }));
  dart.setLibraryUri(typed_queue.Int8Queue, I[196]);
  typed_queue.Uint8ClampedQueue = class Uint8ClampedQueue extends typed_queue._IntQueue$(typed_data.Uint8ClampedList) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Uint8ClampedQueue.new(initialCapacity);
    }
    static fromList(elements) {
      let t201;
      t201 = new typed_queue.Uint8ClampedQueue.new(elements[S$.$length]);
      return (() => {
        t201.addAll(elements);
        return t201;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Uint8ClampedQueue.fromList(elements);
    }
    [S._createList](size) {
      return _native_typed_data.NativeUint8ClampedList.new(size);
    }
    [S._createBuffer](size) {
      return new typed_buffer.Uint8ClampedBuffer.new(size);
    }
    [S._add$2](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[158] || CT.C158, null, [element])));
    }
    get [S._head$3]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[159] || CT.C159)));
    }
    [S._writeToList$1](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[160] || CT.C160, null, [target])));
    }
    [S._grow$1]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[161] || CT.C161, null, [])));
    }
    [S._preGrow$1](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[162] || CT.C162, null, [newElementCount])));
    }
    get [S._table$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[163] || CT.C163)));
    }
    get [S._tail$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[164] || CT.C164)));
    }
    set [S._head$3](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[165] || CT.C165, value)));
    }
    set [S._table$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[166] || CT.C166, value)));
    }
    set [S._tail$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[167] || CT.C167, value)));
    }
  };
  (typed_queue.Uint8ClampedQueue.new = function(initialCapacity = null) {
    typed_queue.Uint8ClampedQueue.__proto__.new.call(this, _native_typed_data.NativeUint8ClampedList.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Uint8ClampedQueue.prototype;
  dart.addTypeTests(typed_queue.Uint8ClampedQueue);
  dart.addTypeCaches(typed_queue.Uint8ClampedQueue);
  typed_queue.Uint8ClampedQueue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Uint8ClampedQueue, () => ({
    __proto__: dart.getMethods(typed_queue.Uint8ClampedQueue.__proto__),
    [S._createList]: dart.fnType(typed_data.Uint8ClampedList, [core.int]),
    [S._createBuffer]: dart.fnType(typed_buffer.Uint8ClampedBuffer, [core.int]),
    [S._add$2]: dart.fnType(dart.void, [core.int]),
    [S._writeToList$1]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [S._grow$1]: dart.fnType(dart.void, []),
    [S._preGrow$1]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Uint8ClampedQueue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Uint8ClampedQueue, () => ({
    __proto__: dart.getGetters(typed_queue.Uint8ClampedQueue.__proto__),
    [S._head$3]: core.int,
    [S._table$2]: core.List$(dart.nullable(core.int)),
    [S._tail$2]: core.int
  }));
  dart.setSetterSignature(typed_queue.Uint8ClampedQueue, () => ({
    __proto__: dart.getSetters(typed_queue.Uint8ClampedQueue.__proto__),
    [S._head$3]: core.int,
    [S._table$2]: core.List$(dart.nullable(core.int)),
    [S._tail$2]: core.int
  }));
  dart.setLibraryUri(typed_queue.Uint8ClampedQueue, I[196]);
  typed_queue.Uint16Queue = class Uint16Queue extends typed_queue._IntQueue$(typed_data.Uint16List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Uint16Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t201;
      t201 = new typed_queue.Uint16Queue.new(elements[S$.$length]);
      return (() => {
        t201.addAll(elements);
        return t201;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Uint16Queue.fromList(elements);
    }
    [S._createList](size) {
      return _native_typed_data.NativeUint16List.new(size);
    }
    [S._createBuffer](size) {
      return new typed_buffer.Uint16Buffer.new(size);
    }
    [S._add$2](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[158] || CT.C158, null, [element])));
    }
    get [S._head$3]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[159] || CT.C159)));
    }
    [S._writeToList$1](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[160] || CT.C160, null, [target])));
    }
    [S._grow$1]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[161] || CT.C161, null, [])));
    }
    [S._preGrow$1](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[162] || CT.C162, null, [newElementCount])));
    }
    get [S._table$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[163] || CT.C163)));
    }
    get [S._tail$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[164] || CT.C164)));
    }
    set [S._head$3](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[165] || CT.C165, value)));
    }
    set [S._table$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[166] || CT.C166, value)));
    }
    set [S._tail$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[167] || CT.C167, value)));
    }
  };
  (typed_queue.Uint16Queue.new = function(initialCapacity = null) {
    typed_queue.Uint16Queue.__proto__.new.call(this, _native_typed_data.NativeUint16List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Uint16Queue.prototype;
  dart.addTypeTests(typed_queue.Uint16Queue);
  dart.addTypeCaches(typed_queue.Uint16Queue);
  typed_queue.Uint16Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Uint16Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Uint16Queue.__proto__),
    [S._createList]: dart.fnType(typed_data.Uint16List, [core.int]),
    [S._createBuffer]: dart.fnType(typed_buffer.Uint16Buffer, [core.int]),
    [S._add$2]: dart.fnType(dart.void, [core.int]),
    [S._writeToList$1]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [S._grow$1]: dart.fnType(dart.void, []),
    [S._preGrow$1]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Uint16Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Uint16Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Uint16Queue.__proto__),
    [S._head$3]: core.int,
    [S._table$2]: core.List$(dart.nullable(core.int)),
    [S._tail$2]: core.int
  }));
  dart.setSetterSignature(typed_queue.Uint16Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Uint16Queue.__proto__),
    [S._head$3]: core.int,
    [S._table$2]: core.List$(dart.nullable(core.int)),
    [S._tail$2]: core.int
  }));
  dart.setLibraryUri(typed_queue.Uint16Queue, I[196]);
  typed_queue.Int16Queue = class Int16Queue extends typed_queue._IntQueue$(typed_data.Int16List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Int16Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t201;
      t201 = new typed_queue.Int16Queue.new(elements[S$.$length]);
      return (() => {
        t201.addAll(elements);
        return t201;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Int16Queue.fromList(elements);
    }
    [S._createList](size) {
      return _native_typed_data.NativeInt16List.new(size);
    }
    [S._createBuffer](size) {
      return new typed_buffer.Int16Buffer.new(size);
    }
    [S._add$2](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[158] || CT.C158, null, [element])));
    }
    get [S._head$3]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[159] || CT.C159)));
    }
    [S._writeToList$1](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[160] || CT.C160, null, [target])));
    }
    [S._grow$1]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[161] || CT.C161, null, [])));
    }
    [S._preGrow$1](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[162] || CT.C162, null, [newElementCount])));
    }
    get [S._table$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[163] || CT.C163)));
    }
    get [S._tail$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[164] || CT.C164)));
    }
    set [S._head$3](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[165] || CT.C165, value)));
    }
    set [S._table$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[166] || CT.C166, value)));
    }
    set [S._tail$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[167] || CT.C167, value)));
    }
  };
  (typed_queue.Int16Queue.new = function(initialCapacity = null) {
    typed_queue.Int16Queue.__proto__.new.call(this, _native_typed_data.NativeInt16List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Int16Queue.prototype;
  dart.addTypeTests(typed_queue.Int16Queue);
  dart.addTypeCaches(typed_queue.Int16Queue);
  typed_queue.Int16Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Int16Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Int16Queue.__proto__),
    [S._createList]: dart.fnType(typed_data.Int16List, [core.int]),
    [S._createBuffer]: dart.fnType(typed_buffer.Int16Buffer, [core.int]),
    [S._add$2]: dart.fnType(dart.void, [core.int]),
    [S._writeToList$1]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [S._grow$1]: dart.fnType(dart.void, []),
    [S._preGrow$1]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Int16Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Int16Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Int16Queue.__proto__),
    [S._head$3]: core.int,
    [S._table$2]: core.List$(dart.nullable(core.int)),
    [S._tail$2]: core.int
  }));
  dart.setSetterSignature(typed_queue.Int16Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Int16Queue.__proto__),
    [S._head$3]: core.int,
    [S._table$2]: core.List$(dart.nullable(core.int)),
    [S._tail$2]: core.int
  }));
  dart.setLibraryUri(typed_queue.Int16Queue, I[196]);
  typed_queue.Uint32Queue = class Uint32Queue extends typed_queue._IntQueue$(typed_data.Uint32List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Uint32Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t201;
      t201 = new typed_queue.Uint32Queue.new(elements[S$.$length]);
      return (() => {
        t201.addAll(elements);
        return t201;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Uint32Queue.fromList(elements);
    }
    [S._createList](size) {
      return _native_typed_data.NativeUint32List.new(size);
    }
    [S._createBuffer](size) {
      return new typed_buffer.Uint32Buffer.new(size);
    }
    [S._add$2](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[158] || CT.C158, null, [element])));
    }
    get [S._head$3]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[159] || CT.C159)));
    }
    [S._writeToList$1](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[160] || CT.C160, null, [target])));
    }
    [S._grow$1]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[161] || CT.C161, null, [])));
    }
    [S._preGrow$1](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[162] || CT.C162, null, [newElementCount])));
    }
    get [S._table$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[163] || CT.C163)));
    }
    get [S._tail$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[164] || CT.C164)));
    }
    set [S._head$3](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[165] || CT.C165, value)));
    }
    set [S._table$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[166] || CT.C166, value)));
    }
    set [S._tail$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[167] || CT.C167, value)));
    }
  };
  (typed_queue.Uint32Queue.new = function(initialCapacity = null) {
    typed_queue.Uint32Queue.__proto__.new.call(this, _native_typed_data.NativeUint32List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Uint32Queue.prototype;
  dart.addTypeTests(typed_queue.Uint32Queue);
  dart.addTypeCaches(typed_queue.Uint32Queue);
  typed_queue.Uint32Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Uint32Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Uint32Queue.__proto__),
    [S._createList]: dart.fnType(typed_data.Uint32List, [core.int]),
    [S._createBuffer]: dart.fnType(typed_buffer.Uint32Buffer, [core.int]),
    [S._add$2]: dart.fnType(dart.void, [core.int]),
    [S._writeToList$1]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [S._grow$1]: dart.fnType(dart.void, []),
    [S._preGrow$1]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Uint32Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Uint32Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Uint32Queue.__proto__),
    [S._head$3]: core.int,
    [S._table$2]: core.List$(dart.nullable(core.int)),
    [S._tail$2]: core.int
  }));
  dart.setSetterSignature(typed_queue.Uint32Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Uint32Queue.__proto__),
    [S._head$3]: core.int,
    [S._table$2]: core.List$(dart.nullable(core.int)),
    [S._tail$2]: core.int
  }));
  dart.setLibraryUri(typed_queue.Uint32Queue, I[196]);
  typed_queue.Int32Queue = class Int32Queue extends typed_queue._IntQueue$(typed_data.Int32List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Int32Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t201;
      t201 = new typed_queue.Int32Queue.new(elements[S$.$length]);
      return (() => {
        t201.addAll(elements);
        return t201;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Int32Queue.fromList(elements);
    }
    [S._createList](size) {
      return _native_typed_data.NativeInt32List.new(size);
    }
    [S._createBuffer](size) {
      return new typed_buffer.Int32Buffer.new(size);
    }
    [S._add$2](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[158] || CT.C158, null, [element])));
    }
    get [S._head$3]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[159] || CT.C159)));
    }
    [S._writeToList$1](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[160] || CT.C160, null, [target])));
    }
    [S._grow$1]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[161] || CT.C161, null, [])));
    }
    [S._preGrow$1](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[162] || CT.C162, null, [newElementCount])));
    }
    get [S._table$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[163] || CT.C163)));
    }
    get [S._tail$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[164] || CT.C164)));
    }
    set [S._head$3](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[165] || CT.C165, value)));
    }
    set [S._table$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[166] || CT.C166, value)));
    }
    set [S._tail$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[167] || CT.C167, value)));
    }
  };
  (typed_queue.Int32Queue.new = function(initialCapacity = null) {
    typed_queue.Int32Queue.__proto__.new.call(this, _native_typed_data.NativeInt32List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Int32Queue.prototype;
  dart.addTypeTests(typed_queue.Int32Queue);
  dart.addTypeCaches(typed_queue.Int32Queue);
  typed_queue.Int32Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Int32Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Int32Queue.__proto__),
    [S._createList]: dart.fnType(typed_data.Int32List, [core.int]),
    [S._createBuffer]: dart.fnType(typed_buffer.Int32Buffer, [core.int]),
    [S._add$2]: dart.fnType(dart.void, [core.int]),
    [S._writeToList$1]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [S._grow$1]: dart.fnType(dart.void, []),
    [S._preGrow$1]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Int32Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Int32Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Int32Queue.__proto__),
    [S._head$3]: core.int,
    [S._table$2]: core.List$(dart.nullable(core.int)),
    [S._tail$2]: core.int
  }));
  dart.setSetterSignature(typed_queue.Int32Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Int32Queue.__proto__),
    [S._head$3]: core.int,
    [S._table$2]: core.List$(dart.nullable(core.int)),
    [S._tail$2]: core.int
  }));
  dart.setLibraryUri(typed_queue.Int32Queue, I[196]);
  typed_queue.Uint64Queue = class Uint64Queue extends typed_queue._IntQueue$(typed_data.Uint64List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Uint64Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t201;
      t201 = new typed_queue.Uint64Queue.new(elements[S$.$length]);
      return (() => {
        t201.addAll(elements);
        return t201;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Uint64Queue.fromList(elements);
    }
    [S._createList](size) {
      return typed_data.Uint64List.new(size);
    }
    [S._createBuffer](size) {
      return new typed_buffer.Uint64Buffer.new(size);
    }
    [S._add$2](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[158] || CT.C158, null, [element])));
    }
    get [S._head$3]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[159] || CT.C159)));
    }
    [S._writeToList$1](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[160] || CT.C160, null, [target])));
    }
    [S._grow$1]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[161] || CT.C161, null, [])));
    }
    [S._preGrow$1](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[162] || CT.C162, null, [newElementCount])));
    }
    get [S._table$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[163] || CT.C163)));
    }
    get [S._tail$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[164] || CT.C164)));
    }
    set [S._head$3](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[165] || CT.C165, value)));
    }
    set [S._table$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[166] || CT.C166, value)));
    }
    set [S._tail$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[167] || CT.C167, value)));
    }
  };
  (typed_queue.Uint64Queue.new = function(initialCapacity = null) {
    typed_queue.Uint64Queue.__proto__.new.call(this, typed_data.Uint64List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Uint64Queue.prototype;
  dart.addTypeTests(typed_queue.Uint64Queue);
  dart.addTypeCaches(typed_queue.Uint64Queue);
  typed_queue.Uint64Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Uint64Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Uint64Queue.__proto__),
    [S._createList]: dart.fnType(typed_data.Uint64List, [core.int]),
    [S._createBuffer]: dart.fnType(typed_buffer.Uint64Buffer, [core.int]),
    [S._add$2]: dart.fnType(dart.void, [core.int]),
    [S._writeToList$1]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [S._grow$1]: dart.fnType(dart.void, []),
    [S._preGrow$1]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Uint64Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Uint64Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Uint64Queue.__proto__),
    [S._head$3]: core.int,
    [S._table$2]: core.List$(dart.nullable(core.int)),
    [S._tail$2]: core.int
  }));
  dart.setSetterSignature(typed_queue.Uint64Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Uint64Queue.__proto__),
    [S._head$3]: core.int,
    [S._table$2]: core.List$(dart.nullable(core.int)),
    [S._tail$2]: core.int
  }));
  dart.setLibraryUri(typed_queue.Uint64Queue, I[196]);
  typed_queue.Int64Queue = class Int64Queue extends typed_queue._IntQueue$(typed_data.Int64List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Int64Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t201;
      t201 = new typed_queue.Int64Queue.new(elements[S$.$length]);
      return (() => {
        t201.addAll(elements);
        return t201;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Int64Queue.fromList(elements);
    }
    [S._createList](size) {
      return typed_data.Int64List.new(size);
    }
    [S._createBuffer](size) {
      return new typed_buffer.Int64Buffer.new(size);
    }
    [S._add$2](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[158] || CT.C158, null, [element])));
    }
    get [S._head$3]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[159] || CT.C159)));
    }
    [S._writeToList$1](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[160] || CT.C160, null, [target])));
    }
    [S._grow$1]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[161] || CT.C161, null, [])));
    }
    [S._preGrow$1](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[162] || CT.C162, null, [newElementCount])));
    }
    get [S._table$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[163] || CT.C163)));
    }
    get [S._tail$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[164] || CT.C164)));
    }
    set [S._head$3](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[165] || CT.C165, value)));
    }
    set [S._table$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[166] || CT.C166, value)));
    }
    set [S._tail$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[167] || CT.C167, value)));
    }
  };
  (typed_queue.Int64Queue.new = function(initialCapacity = null) {
    typed_queue.Int64Queue.__proto__.new.call(this, typed_data.Int64List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Int64Queue.prototype;
  dart.addTypeTests(typed_queue.Int64Queue);
  dart.addTypeCaches(typed_queue.Int64Queue);
  typed_queue.Int64Queue[dart.implements] = () => [queue_list.QueueList$(core.int)];
  dart.setMethodSignature(typed_queue.Int64Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Int64Queue.__proto__),
    [S._createList]: dart.fnType(typed_data.Int64List, [core.int]),
    [S._createBuffer]: dart.fnType(typed_buffer.Int64Buffer, [core.int]),
    [S._add$2]: dart.fnType(dart.void, [core.int]),
    [S._writeToList$1]: dart.fnType(core.int, [core.List$(dart.nullable(core.int))]),
    [S._grow$1]: dart.fnType(dart.void, []),
    [S._preGrow$1]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Int64Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Int64Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Int64Queue.__proto__),
    [S._head$3]: core.int,
    [S._table$2]: core.List$(dart.nullable(core.int)),
    [S._tail$2]: core.int
  }));
  dart.setSetterSignature(typed_queue.Int64Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Int64Queue.__proto__),
    [S._head$3]: core.int,
    [S._table$2]: core.List$(dart.nullable(core.int)),
    [S._tail$2]: core.int
  }));
  dart.setLibraryUri(typed_queue.Int64Queue, I[196]);
  typed_queue.Float32Queue = class Float32Queue extends typed_queue._FloatQueue$(typed_data.Float32List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Float32Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t201;
      t201 = new typed_queue.Float32Queue.new(elements[S$.$length]);
      return (() => {
        t201.addAll(elements);
        return t201;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Float32Queue.fromList(elements);
    }
    [S._createList](size) {
      return _native_typed_data.NativeFloat32List.new(size);
    }
    [S._createBuffer](size) {
      return new typed_buffer.Float32Buffer.new(size);
    }
    [S._add$2](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[158] || CT.C158, null, [element])));
    }
    get [S._head$3]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[159] || CT.C159)));
    }
    [S._writeToList$1](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[160] || CT.C160, null, [target])));
    }
    [S._grow$1]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[161] || CT.C161, null, [])));
    }
    [S._preGrow$1](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[162] || CT.C162, null, [newElementCount])));
    }
    get [S._table$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[163] || CT.C163)));
    }
    get [S._tail$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[164] || CT.C164)));
    }
    set [S._head$3](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[165] || CT.C165, value)));
    }
    set [S._table$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[166] || CT.C166, value)));
    }
    set [S._tail$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[167] || CT.C167, value)));
    }
  };
  (typed_queue.Float32Queue.new = function(initialCapacity = null) {
    typed_queue.Float32Queue.__proto__.new.call(this, _native_typed_data.NativeFloat32List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Float32Queue.prototype;
  dart.addTypeTests(typed_queue.Float32Queue);
  dart.addTypeCaches(typed_queue.Float32Queue);
  typed_queue.Float32Queue[dart.implements] = () => [queue_list.QueueList$(core.double)];
  dart.setMethodSignature(typed_queue.Float32Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Float32Queue.__proto__),
    [S._createList]: dart.fnType(typed_data.Float32List, [core.int]),
    [S._createBuffer]: dart.fnType(typed_buffer.Float32Buffer, [core.int]),
    [S._add$2]: dart.fnType(dart.void, [core.double]),
    [S._writeToList$1]: dart.fnType(core.int, [core.List$(dart.nullable(core.double))]),
    [S._grow$1]: dart.fnType(dart.void, []),
    [S._preGrow$1]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Float32Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Float32Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Float32Queue.__proto__),
    [S._head$3]: core.int,
    [S._table$2]: core.List$(dart.nullable(core.double)),
    [S._tail$2]: core.int
  }));
  dart.setSetterSignature(typed_queue.Float32Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Float32Queue.__proto__),
    [S._head$3]: core.int,
    [S._table$2]: core.List$(dart.nullable(core.double)),
    [S._tail$2]: core.int
  }));
  dart.setLibraryUri(typed_queue.Float32Queue, I[196]);
  typed_queue.Float64Queue = class Float64Queue extends typed_queue._FloatQueue$(typed_data.Float64List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Float64Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t201;
      t201 = new typed_queue.Float64Queue.new(elements[S$.$length]);
      return (() => {
        t201.addAll(elements);
        return t201;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Float64Queue.fromList(elements);
    }
    [S._createList](size) {
      return _native_typed_data.NativeFloat64List.new(size);
    }
    [S._createBuffer](size) {
      return new typed_buffer.Float64Buffer.new(size);
    }
    [S._add$2](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[158] || CT.C158, null, [element])));
    }
    get [S._head$3]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[159] || CT.C159)));
    }
    [S._writeToList$1](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[160] || CT.C160, null, [target])));
    }
    [S._grow$1]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[161] || CT.C161, null, [])));
    }
    [S._preGrow$1](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[162] || CT.C162, null, [newElementCount])));
    }
    get [S._table$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[163] || CT.C163)));
    }
    get [S._tail$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[164] || CT.C164)));
    }
    set [S._head$3](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[165] || CT.C165, value)));
    }
    set [S._table$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[166] || CT.C166, value)));
    }
    set [S._tail$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[167] || CT.C167, value)));
    }
  };
  (typed_queue.Float64Queue.new = function(initialCapacity = null) {
    typed_queue.Float64Queue.__proto__.new.call(this, _native_typed_data.NativeFloat64List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Float64Queue.prototype;
  dart.addTypeTests(typed_queue.Float64Queue);
  dart.addTypeCaches(typed_queue.Float64Queue);
  typed_queue.Float64Queue[dart.implements] = () => [queue_list.QueueList$(core.double)];
  dart.setMethodSignature(typed_queue.Float64Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Float64Queue.__proto__),
    [S._createList]: dart.fnType(typed_data.Float64List, [core.int]),
    [S._createBuffer]: dart.fnType(typed_buffer.Float64Buffer, [core.int]),
    [S._add$2]: dart.fnType(dart.void, [core.double]),
    [S._writeToList$1]: dart.fnType(core.int, [core.List$(dart.nullable(core.double))]),
    [S._grow$1]: dart.fnType(dart.void, []),
    [S._preGrow$1]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Float64Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Float64Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Float64Queue.__proto__),
    [S._head$3]: core.int,
    [S._table$2]: core.List$(dart.nullable(core.double)),
    [S._tail$2]: core.int
  }));
  dart.setSetterSignature(typed_queue.Float64Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Float64Queue.__proto__),
    [S._head$3]: core.int,
    [S._table$2]: core.List$(dart.nullable(core.double)),
    [S._tail$2]: core.int
  }));
  dart.setLibraryUri(typed_queue.Float64Queue, I[196]);
  typed_queue.Int32x4Queue = class Int32x4Queue extends typed_queue._TypedQueue$(typed_data.Int32x4, typed_data.Int32x4List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Int32x4Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t201;
      t201 = new typed_queue.Int32x4Queue.new(elements[S$.$length]);
      return (() => {
        t201.addAll(elements);
        return t201;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Int32x4Queue.fromList(elements);
    }
    [S._createList](size) {
      return new _native_typed_data.NativeInt32x4List.new(size);
    }
    [S._createBuffer](size) {
      return new typed_buffer.Int32x4Buffer.new(size);
    }
    get [S._defaultValue]() {
      return typed_queue.Int32x4Queue._zero;
    }
    [S._add$2](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[158] || CT.C158, null, [element])));
    }
    get [S._head$3]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[159] || CT.C159)));
    }
    [S._writeToList$1](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[160] || CT.C160, null, [target])));
    }
    [S._grow$1]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[161] || CT.C161, null, [])));
    }
    [S._preGrow$1](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[162] || CT.C162, null, [newElementCount])));
    }
    get [S._table$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[163] || CT.C163)));
    }
    get [S._tail$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[164] || CT.C164)));
    }
    set [S._head$3](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[165] || CT.C165, value)));
    }
    set [S._table$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[166] || CT.C166, value)));
    }
    set [S._tail$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[167] || CT.C167, value)));
    }
  };
  (typed_queue.Int32x4Queue.new = function(initialCapacity = null) {
    typed_queue.Int32x4Queue.__proto__.new.call(this, new _native_typed_data.NativeInt32x4List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Int32x4Queue.prototype;
  dart.addTypeTests(typed_queue.Int32x4Queue);
  dart.addTypeCaches(typed_queue.Int32x4Queue);
  typed_queue.Int32x4Queue[dart.implements] = () => [queue_list.QueueList$(typed_data.Int32x4)];
  dart.setMethodSignature(typed_queue.Int32x4Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Int32x4Queue.__proto__),
    [S._createList]: dart.fnType(typed_data.Int32x4List, [core.int]),
    [S._createBuffer]: dart.fnType(typed_buffer.Int32x4Buffer, [core.int]),
    [S._add$2]: dart.fnType(dart.void, [typed_data.Int32x4]),
    [S._writeToList$1]: dart.fnType(core.int, [core.List$(dart.nullable(typed_data.Int32x4))]),
    [S._grow$1]: dart.fnType(dart.void, []),
    [S._preGrow$1]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Int32x4Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Int32x4Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Int32x4Queue.__proto__),
    [S._defaultValue]: typed_data.Int32x4,
    [S._head$3]: core.int,
    [S._table$2]: core.List$(dart.nullable(typed_data.Int32x4)),
    [S._tail$2]: core.int
  }));
  dart.setSetterSignature(typed_queue.Int32x4Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Int32x4Queue.__proto__),
    [S._head$3]: core.int,
    [S._table$2]: core.List$(dart.nullable(typed_data.Int32x4)),
    [S._tail$2]: core.int
  }));
  dart.setLibraryUri(typed_queue.Int32x4Queue, I[196]);
  dart.setStaticFieldSignature(typed_queue.Int32x4Queue, () => ['_zero']);
  dart.defineLazy(typed_queue.Int32x4Queue, {
    /*typed_queue.Int32x4Queue._zero*/get _zero() {
      return new _native_typed_data.NativeInt32x4.new(0, 0, 0, 0);
    }
  }, false);
  typed_queue.Float32x4Queue = class Float32x4Queue extends typed_queue._TypedQueue$(typed_data.Float32x4, typed_data.Float32x4List) {
    static ['_#new#tearOff'](initialCapacity = null) {
      return new typed_queue.Float32x4Queue.new(initialCapacity);
    }
    static fromList(elements) {
      let t201;
      t201 = new typed_queue.Float32x4Queue.new(elements[S$.$length]);
      return (() => {
        t201.addAll(elements);
        return t201;
      })();
    }
    static ['_#fromList#tearOff'](elements) {
      return typed_queue.Float32x4Queue.fromList(elements);
    }
    [S._createList](size) {
      return new _native_typed_data.NativeFloat32x4List.new(size);
    }
    [S._createBuffer](size) {
      return new typed_buffer.Float32x4Buffer.new(size);
    }
    get [S._defaultValue]() {
      return new _native_typed_data.NativeFloat32x4.zero();
    }
    [S._add$2](element) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[158] || CT.C158, null, [element])));
    }
    get [S._head$3]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[159] || CT.C159)));
    }
    [S._writeToList$1](target) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[160] || CT.C160, null, [target])));
    }
    [S._grow$1]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[161] || CT.C161, null, [])));
    }
    [S._preGrow$1](newElementCount) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[162] || CT.C162, null, [newElementCount])));
    }
    get [S._table$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[163] || CT.C163)));
    }
    get [S._tail$2]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[164] || CT.C164)));
    }
    set [S._head$3](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[165] || CT.C165, value)));
    }
    set [S._table$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[166] || CT.C166, value)));
    }
    set [S._tail$2](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[167] || CT.C167, value)));
    }
  };
  (typed_queue.Float32x4Queue.new = function(initialCapacity = null) {
    typed_queue.Float32x4Queue.__proto__.new.call(this, new _native_typed_data.NativeFloat32x4List.new(typed_queue._chooseRealInitialCapacity(initialCapacity)));
    ;
  }).prototype = typed_queue.Float32x4Queue.prototype;
  dart.addTypeTests(typed_queue.Float32x4Queue);
  dart.addTypeCaches(typed_queue.Float32x4Queue);
  typed_queue.Float32x4Queue[dart.implements] = () => [queue_list.QueueList$(typed_data.Float32x4)];
  dart.setMethodSignature(typed_queue.Float32x4Queue, () => ({
    __proto__: dart.getMethods(typed_queue.Float32x4Queue.__proto__),
    [S._createList]: dart.fnType(typed_data.Float32x4List, [core.int]),
    [S._createBuffer]: dart.fnType(typed_buffer.Float32x4Buffer, [core.int]),
    [S._add$2]: dart.fnType(dart.void, [typed_data.Float32x4]),
    [S._writeToList$1]: dart.fnType(core.int, [core.List$(dart.nullable(typed_data.Float32x4))]),
    [S._grow$1]: dart.fnType(dart.void, []),
    [S._preGrow$1]: dart.fnType(dart.void, [core.int])
  }));
  dart.setStaticMethodSignature(typed_queue.Float32x4Queue, () => ['fromList']);
  dart.setGetterSignature(typed_queue.Float32x4Queue, () => ({
    __proto__: dart.getGetters(typed_queue.Float32x4Queue.__proto__),
    [S._defaultValue]: typed_data.Float32x4,
    [S._head$3]: core.int,
    [S._table$2]: core.List$(dart.nullable(typed_data.Float32x4)),
    [S._tail$2]: core.int
  }));
  dart.setSetterSignature(typed_queue.Float32x4Queue, () => ({
    __proto__: dart.getSetters(typed_queue.Float32x4Queue.__proto__),
    [S._head$3]: core.int,
    [S._table$2]: core.List$(dart.nullable(typed_data.Float32x4)),
    [S._tail$2]: core.int
  }));
  dart.setLibraryUri(typed_queue.Float32x4Queue, I[196]);
  typed_queue._chooseRealInitialCapacity = function _chooseRealInitialCapacity(initialCapacity) {
    if (initialCapacity == null || dart.notNull(initialCapacity) < 16) {
      return 16;
    } else if (!typed_queue._isPowerOf2(initialCapacity)) {
      return typed_queue._nextPowerOf2(initialCapacity);
    } else {
      return initialCapacity;
    }
  };
  typed_queue._isPowerOf2 = function _isPowerOf2(number) {
    return (number & number - 1) === 0;
  };
  typed_queue._nextPowerOf2 = function _nextPowerOf2(number) {
    if (!(number > 0)) dart.assertFailed(null, I[195], 690, 10, "number > 0");
    number = (number << 1 >>> 0) - 1;
    for (;;) {
      let nextNumber = (number & number - 1) >>> 0;
      if (nextNumber === 0) return number;
      number = nextNumber;
    }
  };
  dart.defineLazy(typed_queue, {
    /*typed_queue._defaultInitialCapacity*/get _defaultInitialCapacity() {
      return 16;
    }
  }, false);
  storage_backend_js.StorageBackendJs = class StorageBackendJs extends storage_backend.StorageBackend {
    get objectStoreName() {
      return this[S.objectStoreName];
    }
    set objectStoreName(value) {
      super.objectStoreName = value;
    }
    get supportsCompaction() {
      return this[S.supportsCompaction$1];
    }
    set supportsCompaction(value) {
      this[S.supportsCompaction$1] = value;
    }
    static ['_#new#tearOff'](_db, _cipher, objectStoreName, _registry = C[18] || CT.C18) {
      return new storage_backend_js.StorageBackendJs.new(_db, _cipher, objectStoreName, _registry);
    }
    get path() {
      return null;
    }
    [S._isEncoded](bytes) {
      return bytes[S$.$length] >= storage_backend_js.StorageBackendJs._bytePrefix[S$.$length] && bytes[S$.$_get](0) === storage_backend_js.StorageBackendJs._bytePrefix[S$.$_get](0) && bytes[S$.$_get](1) === storage_backend_js.StorageBackendJs._bytePrefix[S$.$_get](1);
    }
    encodeValue(frame) {
      let value = frame.value;
      if (this[S._cipher$2] == null) {
        if (value == null) {
          return value;
        } else if (typed_data.Uint8List.is(value)) {
          if (!this[S._isEncoded](value)) {
            return value[S$.$buffer];
          }
        } else if (typeof value == 'number' || typeof value == 'boolean' || typeof value == 'string' || T$.ListOfnum().is(value) || T$.ListOfbool().is(value) || T$.ListOfString().is(value)) {
          return value;
        }
      }
      let frameWriter = new binary_writer_impl.BinaryWriterImpl.new(this[S._registry]);
      frameWriter.writeByteList(storage_backend_js.StorageBackendJs._bytePrefix, {writeLength: false});
      if (this[S._cipher$2] == null) {
        frameWriter.write(dart.dynamic, value);
      } else {
        frameWriter.writeEncrypted(value, dart.nullCheck(this[S._cipher$2]));
      }
      let bytes = frameWriter.toBytes();
      let sublist = bytes[S$.$sublist](0, bytes[S$.$length]);
      return sublist[S$.$buffer];
    }
    decodeValue(value) {
      if (typed_data.ByteBuffer.is(value)) {
        let bytes = typed_data.Uint8List.view(value);
        if (this[S._isEncoded](bytes)) {
          let reader = new binary_reader_impl.BinaryReaderImpl.new(bytes, this[S._registry]);
          reader.skip(2);
          if (this[S._cipher$2] == null) {
            return reader.read();
          } else {
            return reader.readEncrypted(dart.nullCheck(this[S._cipher$2]));
          }
        } else {
          return bytes;
        }
      } else {
        return value;
      }
    }
    getStore(write) {
      return this[S._db$1][S$.$transaction](this.objectStoreName, write ? "readwrite" : "readonly")[S$.$objectStore](this.objectStoreName);
    }
    getKeys(opts) {
      let cursor = opts && 'cursor' in opts ? opts.cursor : false;
      let store = this.getStore(false);
      if (js_util.hasProperty(store, "getAllKeys") && !cursor) {
        let completer = T$.CompleterOfList().new();
        let request = this.getStore(false)[S$.$getAllKeys](null);
        request[S$.$onSuccess].listen(dart.fn(_ => {
          completer.complete(T$.ListN().as(request[S$.$result]));
        }, T$.EventTovoid()));
        request[S.$onError].listen(dart.fn(_ => {
          completer.completeError(dart.nullCheck(request.error));
        }, T$.EventTovoid()));
        return completer.future;
      } else {
        return store[S$.$openCursor]({autoAdvance: true}).map(T$.ObjectN(), dart.fn(e => e.key, T$.CursorWithValueToObjectN())).toList();
      }
    }
    getValues(opts) {
      let cursor = opts && 'cursor' in opts ? opts.cursor : false;
      let store = this.getStore(false);
      if (js_util.hasProperty(store, "getAll") && !cursor) {
        let completer = T$.CompleterOfIterable().new();
        let request = store[S.$getAll](null);
        request[S$.$onSuccess].listen(dart.fn(_ => {
          let values = core.List.as(request[S$.$result])[S$.$map](dart.dynamic, dart.bind(this, 'decodeValue'));
          completer.complete(values);
        }, T$.EventTovoid()));
        request[S.$onError].listen(dart.fn(_ => {
          completer.completeError(dart.nullCheck(request.error));
        }, T$.EventTovoid()));
        return completer.future;
      } else {
        return store[S$.$openCursor]({autoAdvance: true}).map(dart.dynamic, dart.fn(e => e[S$.$value], T$.CursorWithValueTodynamic())).toList();
      }
    }
    initialize(registry, keystore, lazy) {
      return async.async(core.int, (function* initialize() {
        let t201;
        this[S._registry] = registry;
        let keys = (yield this.getKeys());
        if (!lazy) {
          let i = 0;
          let values = (yield this.getValues());
          for (let value of values) {
            let key = keys[S$.$_get]((t201 = i, i = t201 + 1, t201));
            keystore.insert(new frame$.Frame.new(key, value), {notify: false});
          }
        } else {
          for (let key of keys) {
            keystore.insert(new frame$.Frame.lazy(key), {notify: false});
          }
        }
        return 0;
      }).bind(this));
    }
    readValue(frame) {
      return async.async(dart.dynamic, (function* readValue() {
        let value = (yield this.getStore(false)[S$.$getObject](frame.key));
        return this.decodeValue(value);
      }).bind(this));
    }
    writeFrames(frames) {
      return async.async(dart.void, (function* writeFrames() {
        let store = this.getStore(true);
        for (let frame of frames) {
          if (frame.deleted) {
            yield store[S$.$delete](frame.key);
          } else {
            yield store[S$.$put](this.encodeValue(frame), frame.key);
          }
        }
      }).bind(this));
    }
    compact(frames) {
      dart.throw(new core.UnsupportedError.new("Not supported"));
    }
    clear() {
      return this.getStore(true)[S$.$clear]();
    }
    close() {
      this[S._db$1].close();
      return T$.FutureOfvoid().value();
    }
    deleteFromDisk() {
      return async.async(dart.void, (function* deleteFromDisk() {
        let t201, t201$;
        let indexDB = js.context.hasProperty("window") ? html.window[S$.$indexedDB] : html.WorkerGlobalScope.instance.indexedDB;
        core.print("Delete " + dart.str(this[S._db$1].name) + " // " + this.objectStoreName + " from disk");
        if ((t201 = this[S._db$1].objectStoreNames, t201 == null ? null : t201[S$.$length]) === 1) {
          yield dart.nullCheck(indexDB)[S$.$deleteDatabase](dart.nullCheck(this[S._db$1].name));
        } else {
          let db = (yield dart.nullCheck(indexDB)[S$.$open](dart.nullCheck(this[S._db$1].name), {version: 1, onUpgradeNeeded: dart.fn(e => {
              let t201;
              let db = indexed_db.Database.as(e[S$.$target][S$.$result]);
              if ((t201 = db.objectStoreNames, t201 == null ? T$.JSArrayOfString().of([]) : t201)[S$.$contains](this.objectStoreName)) {
                db.deleteObjectStore(this.objectStoreName);
              }
            }, T$.VersionChangeEventTovoid())}));
          if ((t201$ = db.objectStoreNames, t201$ == null ? T$.JSArrayOfString().of([]) : t201$)[S$.$isEmpty]) {
            yield indexDB[S$.$deleteDatabase](dart.nullCheck(this[S._db$1].name));
          }
        }
      }).bind(this));
    }
    flush() {
      return T$.FutureOfvoid().value();
    }
  };
  (storage_backend_js.StorageBackendJs.new = function(_db, _cipher, objectStoreName, _registry = C[18] || CT.C18) {
    this[S.supportsCompaction$1] = false;
    this[S._db$1] = _db;
    this[S._cipher$2] = _cipher;
    this[S.objectStoreName] = objectStoreName;
    this[S._registry] = _registry;
    ;
  }).prototype = storage_backend_js.StorageBackendJs.prototype;
  dart.addTypeTests(storage_backend_js.StorageBackendJs);
  dart.addTypeCaches(storage_backend_js.StorageBackendJs);
  dart.setMethodSignature(storage_backend_js.StorageBackendJs, () => ({
    __proto__: dart.getMethods(storage_backend_js.StorageBackendJs.__proto__),
    [S._isEncoded]: dart.fnType(core.bool, [typed_data.Uint8List]),
    encodeValue: dart.fnType(dart.dynamic, [frame$.Frame]),
    decodeValue: dart.fnType(dart.dynamic, [dart.dynamic]),
    getStore: dart.fnType(indexed_db.ObjectStore, [core.bool]),
    getKeys: dart.fnType(async.Future$(core.List), [], {cursor: core.bool}, {}),
    getValues: dart.fnType(async.Future$(core.Iterable), [], {cursor: core.bool}, {}),
    initialize: dart.fnType(async.Future$(core.int), [hive.TypeRegistry, keystore$.Keystore, core.bool]),
    readValue: dart.fnType(async.Future, [frame$.Frame]),
    writeFrames: dart.fnType(async.Future$(dart.void), [core.List$(frame$.Frame)]),
    compact: dart.fnType(async.Future$(core.List$(frame$.Frame)), [core.Iterable$(frame$.Frame)]),
    clear: dart.fnType(async.Future$(dart.void), []),
    close: dart.fnType(async.Future$(dart.void), []),
    deleteFromDisk: dart.fnType(async.Future$(dart.void), []),
    flush: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setGetterSignature(storage_backend_js.StorageBackendJs, () => ({
    __proto__: dart.getGetters(storage_backend_js.StorageBackendJs.__proto__),
    path: dart.nullable(core.String)
  }));
  dart.setLibraryUri(storage_backend_js.StorageBackendJs, I[197]);
  dart.setFieldSignature(storage_backend_js.StorageBackendJs, () => ({
    __proto__: dart.getFields(storage_backend_js.StorageBackendJs.__proto__),
    [S._db$1]: dart.finalFieldType(indexed_db.Database),
    [S._cipher$2]: dart.finalFieldType(dart.nullable(hive.HiveCipher)),
    objectStoreName: dart.finalFieldType(core.String),
    [S._registry]: dart.fieldType(hive.TypeRegistry),
    supportsCompaction: dart.fieldType(core.bool)
  }));
  dart.setStaticFieldSignature(storage_backend_js.StorageBackendJs, () => ['_bytePrefix']);
  dart.defineLazy(storage_backend_js.StorageBackendJs, {
    /*storage_backend_js.StorageBackendJs._bytePrefix*/get _bytePrefix() {
      return C[168] || CT.C168;
    }
  }, false);
  method_channel_document_change.MethodChannelDocumentChange = class MethodChannelDocumentChange extends platform_interface_document_change.DocumentChangePlatform {
    static ['_#new#tearOff'](firestore, data) {
      return new method_channel_document_change.MethodChannelDocumentChange.new(firestore, data);
    }
  };
  (method_channel_document_change.MethodChannelDocumentChange.new = function(firestore, data) {
    method_channel_document_change.MethodChannelDocumentChange.__proto__.new.call(this, platform_interface_document_change.DocumentChangeType.values[S$.$firstWhere](dart.fn(type => type.toString() === data[S$.$_get]("type"), T$.DocumentChangeTypeTobool())), core.int.as(data[S$.$_get]("oldIndex")), core.int.as(data[S$.$_get]("newIndex")), new platform_interface_document_snapshot.DocumentSnapshotPlatform.new(firestore, core.String.as(data[S$.$_get]("path")), new (T$.IdentityMapOfString$dynamic()).from(["data", T$.LinkedHashMapOfString$dynamic().from(core.Map.as(data[S$.$_get]("data"))), "metadata", T$.LinkedHashMapOfString$dynamic().from(core.Map.as(data[S$.$_get]("metadata")))])));
    ;
  }).prototype = method_channel_document_change.MethodChannelDocumentChange.prototype;
  dart.addTypeTests(method_channel_document_change.MethodChannelDocumentChange);
  dart.addTypeCaches(method_channel_document_change.MethodChannelDocumentChange);
  dart.setLibraryUri(method_channel_document_change.MethodChannelDocumentChange, I[198]);
  auto_id_generator.AutoIdGenerator = class AutoIdGenerator extends core.Object {
    static autoId() {
      let stringBuffer = new core.StringBuffer.new();
      for (let i = 0; i < 20; i = i + 1) {
        stringBuffer.write(auto_id_generator.AutoIdGenerator._AUTO_ID_ALPHABET[S$.$_get](auto_id_generator.AutoIdGenerator._random.nextInt(62)));
      }
      return stringBuffer.toString();
    }
    static ['_#new#tearOff']() {
      return new auto_id_generator.AutoIdGenerator.new();
    }
  };
  (auto_id_generator.AutoIdGenerator.new = function() {
    ;
  }).prototype = auto_id_generator.AutoIdGenerator.prototype;
  dart.addTypeTests(auto_id_generator.AutoIdGenerator);
  dart.addTypeCaches(auto_id_generator.AutoIdGenerator);
  dart.setStaticMethodSignature(auto_id_generator.AutoIdGenerator, () => ['autoId']);
  dart.setLibraryUri(auto_id_generator.AutoIdGenerator, I[199]);
  dart.setStaticFieldSignature(auto_id_generator.AutoIdGenerator, () => ['_AUTO_ID_LENGTH', '_AUTO_ID_ALPHABET', '_random']);
  dart.defineLazy(auto_id_generator.AutoIdGenerator, {
    /*auto_id_generator.AutoIdGenerator._AUTO_ID_LENGTH*/get _AUTO_ID_LENGTH() {
      return 20;
    },
    /*auto_id_generator.AutoIdGenerator._AUTO_ID_ALPHABET*/get _AUTO_ID_ALPHABET() {
      return "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    },
    /*auto_id_generator.AutoIdGenerator._random*/get _random() {
      return math.Random.new();
    }
  }, false);
  dart.defineLazy(charcodes, {
    /*charcodes.$lf*/get $lf() {
      return 10;
    },
    /*charcodes.$cr*/get $cr() {
      return 13;
    },
    /*charcodes.$0*/get $0() {
      return 48;
    },
    /*charcodes.$9*/get $9() {
      return 57;
    },
    /*charcodes.$a*/get $a() {
      return 97;
    },
    /*charcodes.$f*/get $f() {
      return 102;
    }
  }, false);
  exception$1.convertPlatformException = function convertPlatformException$0(exception, stackTrace) {
    if (!core.Exception.is(exception) || !message_codec.PlatformException.is(exception)) {
      core.Error.throwWithStackTrace(core.Object.as(exception), stackTrace);
    }
    core.Error.throwWithStackTrace(exception$1.platformExceptionToFirebaseException(exception, stackTrace), stackTrace);
  };
  exception$1.catchFuturePlatformException = function catchFuturePlatformException(T, exception, stackTrace) {
    if (!core.Exception.is(exception) || !message_codec.PlatformException.is(exception)) {
      return async.Future$(T).error(exception, stackTrace);
    }
    return async.Future$(T).error(exception$1.platformExceptionToFirebaseException(exception, stackTrace), stackTrace);
  };
  exception$1.platformExceptionToFirebaseException = function platformExceptionToFirebaseException$(platformException, stackTrace) {
    let t201, t201$, t201$0;
    let details = platformException.details != null ? T$.LinkedHashMapOfString$String().from(core.Map.as(platformException.details)) : null;
    let code = "unknown";
    let message = (t201 = platformException.message, t201 == null ? "" : t201);
    if (details != null) {
      code = (t201$ = details[S$.$_get]("code"), t201$ == null ? code : t201$);
      message = (t201$0 = details[S$.$_get]("message"), t201$0 == null ? message : t201$0);
    }
    return new firebase_core_platform_interface.FirebaseException.new({plugin: "firebase_storage", code: code, message: message});
  };
  method_channel_reference.MethodChannelReference = class MethodChannelReference extends platform_interface_reference.ReferencePlatform {
    static ['_#new#tearOff'](storage, path) {
      return new method_channel_reference.MethodChannelReference.new(storage, path);
    }
    delete() {
      return async.async(dart.void, (function* $delete() {
        try {
          yield method_channel_firebase_storage.MethodChannelFirebaseStorage.channel.invokeMethod(dart.dynamic, "Reference#delete", new (T$.IdentityMapOfString$dynamic()).from(["appName", this.storage.app.name, "maxOperationRetryTime", this.storage.maxOperationRetryTime, "maxUploadRetryTime", this.storage.maxUploadRetryTime, "maxDownloadRetryTime", this.storage.maxDownloadRetryTime, "bucket", this.storage.bucket, "host", this.storage.emulatorHost, "port", this.storage.emulatorPort, "path", this.fullPath]));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$1.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    getDownloadURL() {
      return async.async(core.String, (function* getDownloadURL() {
        try {
          let data = (yield method_channel_firebase_storage.MethodChannelFirebaseStorage.channel.invokeMapMethod(core.String, dart.dynamic, "Reference#getDownloadURL", new (T$.IdentityMapOfString$dynamic()).from(["appName", this.storage.app.name, "maxOperationRetryTime", this.storage.maxOperationRetryTime, "maxUploadRetryTime", this.storage.maxUploadRetryTime, "maxDownloadRetryTime", this.storage.maxDownloadRetryTime, "bucket", this.storage.bucket, "host", this.storage.emulatorHost, "port", this.storage.emulatorPort, "path", this.fullPath])));
          return T$.FutureOrOfString().as(dart.nullCheck(data)[S$.$_get]("downloadURL"));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$1.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    getMetadata() {
      return async.async(full_metadata.FullMetadata, (function* getMetadata() {
        try {
          let data = (yield method_channel_firebase_storage.MethodChannelFirebaseStorage.channel.invokeMapMethod(core.String, dart.dynamic, "Reference#getMetadata", new (T$.IdentityMapOfString$dynamic()).from(["appName", this.storage.app.name, "maxOperationRetryTime", this.storage.maxOperationRetryTime, "maxUploadRetryTime", this.storage.maxUploadRetryTime, "maxDownloadRetryTime", this.storage.maxDownloadRetryTime, "bucket", this.storage.bucket, "host", this.storage.emulatorHost, "port", this.storage.emulatorPort, "path", this.fullPath])));
          return new full_metadata.FullMetadata.new(dart.nullCheck(data));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$1.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    list(options = null) {
      return async.async(platform_interface_list_result.ListResultPlatform, (function* list() {
        let t204, t204$, t204$0;
        try {
          let data = (yield method_channel_firebase_storage.MethodChannelFirebaseStorage.channel.invokeMapMethod(core.String, dart.dynamic, "Reference#list", new (T$.IdentityMapOfString$dynamic()).from(["appName", this.storage.app.name, "maxOperationRetryTime", this.storage.maxOperationRetryTime, "maxUploadRetryTime", this.storage.maxUploadRetryTime, "maxDownloadRetryTime", this.storage.maxDownloadRetryTime, "bucket", this.storage.bucket, "host", this.storage.emulatorHost, "port", this.storage.emulatorPort, "path", this.fullPath, "options", new (T$.IdentityMapOfString$dynamic()).from(["maxResults", (t204$ = (t204 = options, t204 == null ? null : t204.maxResults), t204$ == null ? 1000 : t204$), "pageToken", (t204$0 = options, t204$0 == null ? null : t204$0.pageToken)])])));
          return new method_channel_list_result.MethodChannelListResult.new(this.storage, {nextPageToken: T$.StringN().as(dart.nullCheck(data)[S$.$_get]("nextPageToken")), items: T$.ListOfString().from(core.Iterable.as(data[S$.$_get]("items"))), prefixes: T$.ListOfString().from(core.Iterable.as(data[S$.$_get]("prefixes")))});
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$1.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    listAll() {
      return async.async(platform_interface_list_result.ListResultPlatform, (function* listAll() {
        try {
          let data = (yield method_channel_firebase_storage.MethodChannelFirebaseStorage.channel.invokeMapMethod(core.String, dart.dynamic, "Reference#listAll", new (T$.IdentityMapOfString$dynamic()).from(["appName", this.storage.app.name, "maxOperationRetryTime", this.storage.maxOperationRetryTime, "maxUploadRetryTime", this.storage.maxUploadRetryTime, "maxDownloadRetryTime", this.storage.maxDownloadRetryTime, "bucket", this.storage.bucket, "host", this.storage.emulatorHost, "port", this.storage.emulatorPort, "path", this.fullPath])));
          return new method_channel_list_result.MethodChannelListResult.new(this.storage, {nextPageToken: T$.StringN().as(dart.nullCheck(data)[S$.$_get]("nextPageToken")), items: T$.ListOfString().from(core.Iterable.as(data[S$.$_get]("items"))), prefixes: T$.ListOfString().from(core.Iterable.as(data[S$.$_get]("prefixes")))});
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$1.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    getData(maxSize) {
      try {
        return method_channel_firebase_storage.MethodChannelFirebaseStorage.channel.invokeMethod(typed_data.Uint8List, "Reference#getData", new (T$.IdentityMapOfString$dynamic()).from(["appName", this.storage.app.name, "maxOperationRetryTime", this.storage.maxOperationRetryTime, "maxUploadRetryTime", this.storage.maxUploadRetryTime, "maxDownloadRetryTime", this.storage.maxDownloadRetryTime, "bucket", this.storage.bucket, "host", this.storage.emulatorHost, "port", this.storage.emulatorPort, "path", this.fullPath, "maxSize", maxSize]));
      } catch (e$) {
        let e = dart.getThrown(e$);
        let stack = dart.stackTrace(e$);
        if (core.Object.is(e)) {
          exception$1.convertPlatformException(e, stack);
        } else
          throw e$;
      }
    }
    putData(data, metadata = null) {
      let handle = method_channel_firebase_storage.MethodChannelFirebaseStorage.nextMethodChannelHandleId;
      method_channel_firebase_storage.MethodChannelFirebaseStorage.taskObservers[S$.$_set](handle, T$.StreamControllerOfTaskSnapshotPlatform().broadcast());
      return new method_channel_task.MethodChannelPutTask.new(handle, this.storage, this.fullPath, data, metadata);
    }
    putBlob(data, metadata = null) {
      dart.throw(new core.UnimplementedError.new("putBlob() is not supported on native platforms. Use [put], [putFile] or [putString] instead."));
    }
    putFile(file, metadata = null) {
      let handle = method_channel_firebase_storage.MethodChannelFirebaseStorage.nextMethodChannelHandleId;
      method_channel_firebase_storage.MethodChannelFirebaseStorage.taskObservers[S$.$_set](handle, T$.StreamControllerOfTaskSnapshotPlatform().broadcast());
      return new method_channel_task.MethodChannelPutFileTask.new(handle, this.storage, this.fullPath, file, metadata);
    }
    putString(data, format, metadata = null) {
      let handle = method_channel_firebase_storage.MethodChannelFirebaseStorage.nextMethodChannelHandleId;
      method_channel_firebase_storage.MethodChannelFirebaseStorage.taskObservers[S$.$_set](handle, T$.StreamControllerOfTaskSnapshotPlatform().broadcast());
      return new method_channel_task.MethodChannelPutStringTask.new(handle, this.storage, this.fullPath, data, format, metadata);
    }
    updateMetadata(metadata) {
      return async.async(full_metadata.FullMetadata, (function* updateMetadata() {
        try {
          let data = (yield method_channel_firebase_storage.MethodChannelFirebaseStorage.channel.invokeMapMethod(core.String, dart.dynamic, "Reference#updateMetadata", new (T$.IdentityMapOfString$dynamic()).from(["appName", this.storage.app.name, "maxOperationRetryTime", this.storage.maxOperationRetryTime, "maxUploadRetryTime", this.storage.maxUploadRetryTime, "maxDownloadRetryTime", this.storage.maxDownloadRetryTime, "bucket", this.storage.bucket, "host", this.storage.emulatorHost, "port", this.storage.emulatorPort, "path", this.fullPath, "metadata", metadata.asMap()])));
          return new full_metadata.FullMetadata.new(dart.nullCheck(data));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            exception$1.convertPlatformException(e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    writeToFile(file) {
      let handle = method_channel_firebase_storage.MethodChannelFirebaseStorage.nextMethodChannelHandleId;
      method_channel_firebase_storage.MethodChannelFirebaseStorage.taskObservers[S$.$_set](handle, T$.StreamControllerOfTaskSnapshotPlatform().broadcast());
      return new method_channel_task.MethodChannelDownloadTask.new(handle, this.storage, this.fullPath, file);
    }
  };
  (method_channel_reference.MethodChannelReference.new = function(storage, path) {
    method_channel_reference.MethodChannelReference.__proto__.new.call(this, storage, path);
    ;
  }).prototype = method_channel_reference.MethodChannelReference.prototype;
  dart.addTypeTests(method_channel_reference.MethodChannelReference);
  dart.addTypeCaches(method_channel_reference.MethodChannelReference);
  dart.setLibraryUri(method_channel_reference.MethodChannelReference, I[200]);
  method_channel_task_snapshot.MethodChannelTaskSnapshot = class MethodChannelTaskSnapshot extends platform_interface_task_snapshot.TaskSnapshotPlatform {
    get storage() {
      return this[S.storage$2];
    }
    set storage(value) {
      super.storage = value;
    }
    static ['_#new#tearOff'](storage, state, _data) {
      return new method_channel_task_snapshot.MethodChannelTaskSnapshot.new(storage, state, _data);
    }
    get ref() {
      return new method_channel_reference.MethodChannelReference.new(this.storage, core.String.as(this[S._data$5][S$.$_get]("path")));
    }
  };
  (method_channel_task_snapshot.MethodChannelTaskSnapshot.new = function(storage, state, _data) {
    this[S.storage$2] = storage;
    this[S._data$5] = _data;
    method_channel_task_snapshot.MethodChannelTaskSnapshot.__proto__.new.call(this, state, _data);
    ;
  }).prototype = method_channel_task_snapshot.MethodChannelTaskSnapshot.prototype;
  dart.addTypeTests(method_channel_task_snapshot.MethodChannelTaskSnapshot);
  dart.addTypeCaches(method_channel_task_snapshot.MethodChannelTaskSnapshot);
  dart.setLibraryUri(method_channel_task_snapshot.MethodChannelTaskSnapshot, I[201]);
  dart.setFieldSignature(method_channel_task_snapshot.MethodChannelTaskSnapshot, () => ({
    __proto__: dart.getFields(method_channel_task_snapshot.MethodChannelTaskSnapshot.__proto__),
    storage: dart.finalFieldType(platform_interface_firebase_storage.FirebaseStoragePlatform),
    [S._data$5]: dart.finalFieldType(core.Map$(core.String, dart.dynamic))
  }));
  browser_client.BrowserClient = class BrowserClient extends base_client.BaseClient {
    get withCredentials() {
      return this[S.withCredentials];
    }
    set withCredentials(value) {
      this[S.withCredentials] = value;
    }
    send(request) {
      return async.async(streamed_response.StreamedResponse, (function* send() {
        let t208;
        let bytes = (yield request.finalize().toBytes());
        let xhr = html.HttpRequest.new();
        this[S._xhrs].add(xhr);
        t208 = xhr;
        (() => {
          t208.open(request.method, dart.str(request.url), {async: true});
          t208[S.$responseType] = "arraybuffer";
          t208.withCredentials = this.withCredentials;
          return t208;
        })();
        request.headers[S$.$forEach](dart.bind(xhr, 'setRequestHeader'));
        let completer = T$.CompleterOfStreamedResponse().new();
        async.unawaited(xhr[S.$onLoad].first.then(dart.void, dart.fn(_ => {
          let body = typed_data.ByteBuffer.as(xhr[S.$response])[S$.$asUint8List]();
          completer.complete(new streamed_response.StreamedResponse.new(byte_stream.ByteStream.fromBytes(body), dart.nullCheck(xhr.status), {contentLength: body[S$.$length], request: request, headers: xhr[S.$responseHeaders], reasonPhrase: xhr.statusText}));
        }, T$.ProgressEventToNull())));
        async.unawaited(xhr[S.$onError].first.then(dart.void, dart.fn(_ => {
          completer.completeError(new exception.ClientException.new("XMLHttpRequest error.", request.url), core.StackTrace.current);
        }, T$.ProgressEventToNull())));
        xhr.send(bytes);
        try {
          return yield completer.future;
        } finally {
          this[S._xhrs].remove(xhr);
        }
      }).bind(this));
    }
    close() {
      for (let xhr of this[S._xhrs]) {
        xhr.abort();
      }
    }
    static ['_#new#tearOff']() {
      return new browser_client.BrowserClient.new();
    }
  };
  (browser_client.BrowserClient.new = function() {
    this[S._xhrs] = T$.LinkedHashSetOfHttpRequest().new();
    this[S.withCredentials] = false;
    ;
  }).prototype = browser_client.BrowserClient.prototype;
  dart.addTypeTests(browser_client.BrowserClient);
  dart.addTypeCaches(browser_client.BrowserClient);
  dart.setMethodSignature(browser_client.BrowserClient, () => ({
    __proto__: dart.getMethods(browser_client.BrowserClient.__proto__),
    send: dart.fnType(async.Future$(streamed_response.StreamedResponse), [base_request.BaseRequest])
  }));
  dart.setLibraryUri(browser_client.BrowserClient, I[202]);
  dart.setFieldSignature(browser_client.BrowserClient, () => ({
    __proto__: dart.getFields(browser_client.BrowserClient.__proto__),
    [S._xhrs]: dart.finalFieldType(core.Set$(html.HttpRequest)),
    withCredentials: dart.fieldType(core.bool)
  }));
  browser_client.createClient = function createClient() {
    return new browser_client.BrowserClient.new();
  };
  utils$3.mapToQuery = function mapToQuery(map, opts) {
    let encoding = opts && 'encoding' in opts ? opts.encoding : null;
    let pairs = T$.JSArrayOfListOfString().of([]);
    map[S$.$forEach](dart.fn((key, value) => {
      let t208, t208$;
      return pairs[S$.$add](T$.JSArrayOfString().of([core.Uri.encodeQueryComponent(key, {encoding: (t208 = encoding, t208 == null ? convert.utf8 : t208)}), core.Uri.encodeQueryComponent(value, {encoding: (t208$ = encoding, t208$ == null ? convert.utf8 : t208$)})]));
    }, T$.StringAndStringTovoid()));
    return pairs[S$.$map](core.String, dart.fn(pair => pair[S$.$_get](0) + "=" + pair[S$.$_get](1), T$.ListOfStringToString()))[S$.$join]("&");
  };
  utils$3.encodingForCharset = function encodingForCharset(charset, fallback = C[169] || CT.C169) {
    let t208;
    if (charset == null) return fallback;
    t208 = convert.Encoding.getByName(charset);
    return t208 == null ? fallback : t208;
  };
  utils$3.requiredEncodingForCharset = function requiredEncodingForCharset(charset) {
    let t208;
    t208 = convert.Encoding.getByName(charset);
    return t208 == null ? dart.throw(new core.FormatException.new("Unsupported encoding \"" + charset + "\".")) : t208;
  };
  utils$3.isPlainAscii = function isPlainAscii(string) {
    return utils$3._asciiOnly.hasMatch(string);
  };
  utils$3.toUint8List = function toUint8List(input) {
    if (typed_data.Uint8List.is(input)) return input;
    if (typed_data.TypedData.is(input)) {
      return typed_data.Uint8List.view(typed_data.TypedData.as(input)[S$.$buffer]);
    }
    return _native_typed_data.NativeUint8List.fromList(input);
  };
  utils$3.toByteStream = function toByteStream(stream) {
    if (byte_stream.ByteStream.is(stream)) return stream;
    return new byte_stream.ByteStream.new(stream);
  };
  utils$3.onDone = function onDone(T, stream, onDone) {
    return stream.transform(T, new (async._StreamHandlerTransformer$(T, T)).new({handleDone: dart.fn(sink => {
        sink.close();
        onDone();
      }, dart.fnType(dart.void, [async.EventSink$(T)]))}));
  };
  dart.defineLazy(utils$3, {
    /*utils$3._asciiOnly*/get _asciiOnly() {
      return core.RegExp.new("^[\\x00-\\x7F]+$");
    }
  }, false);
  multipart_file_stub.multipartFileFromPath = function multipartFileFromPath(field, filePath, opts) {
    let filename = opts && 'filename' in opts ? opts.filename : null;
    let contentType = opts && 'contentType' in opts ? opts.contentType : null;
    return dart.throw(new core.UnsupportedError.new("MultipartFile is only supported where dart:io is available."));
  };
  dart.defineLazy(boundary_characters, {
    /*boundary_characters.boundaryCharacters*/get boundaryCharacters() {
      return C[170] || CT.C170;
    }
  }, false);
  task_snapshot_web.TaskSnapshotWeb = class TaskSnapshotWeb extends platform_interface_task_snapshot.TaskSnapshotPlatform {
    static ['_#new#tearOff'](ref, snapshot) {
      return new task_snapshot_web.TaskSnapshotWeb.new(ref, snapshot);
    }
    get bytesTransferred() {
      return this[S._snapshot].bytesTransferred;
    }
    get metadata() {
      return metadata$.fbFullMetadataToFullMetadata(this[S._snapshot].metadata);
    }
    get ref() {
      return this[S._reference$1];
    }
    get state() {
      return task.fbTaskStateToTaskState(this[S._snapshot].state);
    }
    get totalBytes() {
      return this[S._snapshot].totalBytes;
    }
  };
  (task_snapshot_web.TaskSnapshotWeb.new = function(ref, snapshot) {
    this[S._reference$1] = ref;
    this[S._snapshot] = snapshot;
    task_snapshot_web.TaskSnapshotWeb.__proto__.new.call(this, task.fbTaskStateToTaskState(snapshot.state), new (T$.IdentityMapOfString$dynamic()).new());
    ;
  }).prototype = task_snapshot_web.TaskSnapshotWeb.prototype;
  dart.addTypeTests(task_snapshot_web.TaskSnapshotWeb);
  dart.addTypeCaches(task_snapshot_web.TaskSnapshotWeb);
  dart.setGetterSignature(task_snapshot_web.TaskSnapshotWeb, () => ({
    __proto__: dart.getGetters(task_snapshot_web.TaskSnapshotWeb.__proto__),
    metadata: full_metadata.FullMetadata
  }));
  dart.setLibraryUri(task_snapshot_web.TaskSnapshotWeb, I[203]);
  dart.setFieldSignature(task_snapshot_web.TaskSnapshotWeb, () => ({
    __proto__: dart.getFields(task_snapshot_web.TaskSnapshotWeb.__proto__),
    [S._reference$1]: dart.finalFieldType(platform_interface_reference.ReferencePlatform),
    [S._snapshot]: dart.finalFieldType(storage.UploadTaskSnapshot)
  }));
  const _is_TypedDataBuffer_default = Symbol('_is_TypedDataBuffer_default');
  typed_buffer.TypedDataBuffer$ = dart.generic(E => {
    var __t$IterableOfE = () => (__t$IterableOfE = dart.constFn(core.Iterable$(E)))();
    var __t$TypedDataBufferOfE = () => (__t$TypedDataBufferOfE = dart.constFn(typed_buffer.TypedDataBuffer$(E)))();
    class TypedDataBuffer extends collection.ListBase$(E) {
      get [S._typedBuffer]() {
        return typed_data.TypedData.as(this[S._buffer$1]);
      }
      get length() {
        return this[S._length$1];
      }
      _get(index) {
        if (index >= this.length) dart.throw(new core.IndexError.new(index, this));
        return this[S._buffer$1][S$.$_get](index);
      }
      _set(index, value$) {
        let value = value$;
        E.as(value);
        if (index >= this.length) dart.throw(new core.IndexError.new(index, this));
        this[S._buffer$1][S$.$_set](index, value);
        return value$;
      }
      set length(newLength) {
        if (newLength < this[S._length$1]) {
          let defaultValue = this[S._defaultValue$1];
          for (let i = newLength; i < this[S._length$1]; i = i + 1) {
            this[S._buffer$1][S$.$_set](i, defaultValue);
          }
        } else if (newLength > this[S._buffer$1][S$.$length]) {
          let newBuffer = null;
          if (this[S._buffer$1][S$.$isEmpty]) {
            newBuffer = this[S._createBuffer$1](newLength);
          } else {
            newBuffer = this[S._createBiggerBuffer](newLength);
          }
          newBuffer[S$.$setRange](0, this[S._length$1], this[S._buffer$1]);
          this[S._buffer$1] = newBuffer;
        }
        this[S._length$1] = newLength;
      }
      [S._add$3](value) {
        let t208;
        if (this[S._length$1] === this[S._buffer$1][S$.$length]) this[S._grow$2](this[S._length$1]);
        this[S._buffer$1][S$.$_set]((t208 = this[S._length$1], this[S._length$1] = t208 + 1, t208), value);
      }
      add(element) {
        E.as(element);
        this[S._add$3](element);
      }
      addAll(values, start = 0, end = null) {
        __t$IterableOfE().as(values);
        core.RangeError.checkNotNegative(start, "start");
        if (end != null && start > dart.notNull(end)) {
          dart.throw(new core.RangeError.range(end, start, null, "end"));
        }
        this[S._addAll](values, start, end);
      }
      insertAll(index, values, start = 0, end = null) {
        let t208;
        __t$IterableOfE().as(values);
        core.RangeError.checkValidIndex(index, this, "index", this[S._length$1] + 1);
        core.RangeError.checkNotNegative(start, "start");
        if (end != null) {
          if (start > dart.notNull(end)) {
            dart.throw(new core.RangeError.range(end, start, null, "end"));
          }
          if (start === end) return;
        }
        if (index === this[S._length$1]) {
          this[S._addAll](values, start, end);
          return;
        }
        if (end == null && core.List.is(values)) {
          end = values[S$.$length];
        }
        if (end != null) {
          this[S._insertKnownLength](index, values, start, end);
          return;
        }
        let writeIndex = this[S._length$1];
        let skipCount = start;
        for (let value of values) {
          if (skipCount > 0) {
            skipCount = skipCount - 1;
            continue;
          }
          if (writeIndex === this[S._buffer$1][S$.$length]) {
            this[S._grow$2](writeIndex);
          }
          this[S._buffer$1][S$.$_set]((t208 = writeIndex, writeIndex = t208 + 1, t208), value);
        }
        if (skipCount > 0) {
          dart.throw(new core.StateError.new("Too few elements"));
        }
        if (end != null && writeIndex < dart.notNull(end)) {
          dart.throw(new core.RangeError.range(end, start, writeIndex, "end"));
        }
        typed_buffer.TypedDataBuffer._reverse(this[S._buffer$1], index, this[S._length$1]);
        typed_buffer.TypedDataBuffer._reverse(this[S._buffer$1], this[S._length$1], writeIndex);
        typed_buffer.TypedDataBuffer._reverse(this[S._buffer$1], index, writeIndex);
        this[S._length$1] = writeIndex;
        return;
      }
      static _reverse(buffer, start, end) {
        end = end - 1;
        while (start < end) {
          let first = buffer[S$.$_get](start);
          let last = buffer[S$.$_get](end);
          buffer[S$.$_set](end, first);
          buffer[S$.$_set](start, last);
          start = start + 1;
          end = end - 1;
        }
      }
      [S._addAll](values, start = 0, end = null) {
        if (core.List.is(values)) end == null ? end = values[S$.$length] : null;
        if (end != null) {
          this[S._insertKnownLength](this[S._length$1], values, start, end);
          return;
        }
        let i = 0;
        for (let value of values) {
          if (i >= start) this.add(value);
          i = i + 1;
        }
        if (i < start) dart.throw(new core.StateError.new("Too few elements"));
      }
      [S._insertKnownLength](index, values, start, end) {
        if (core.List.is(values)) {
          if (start > values[S$.$length] || end > values[S$.$length]) {
            dart.throw(new core.StateError.new("Too few elements"));
          }
        }
        let valuesLength = end - start;
        let newLength = this[S._length$1] + valuesLength;
        this[S._ensureCapacity](newLength);
        this[S._buffer$1][S$.$setRange](index + valuesLength, this[S._length$1] + valuesLength, this[S._buffer$1], index);
        this[S._buffer$1][S$.$setRange](index, index + valuesLength, values, start);
        this[S._length$1] = newLength;
      }
      insert(index, element) {
        E.as(element);
        if (index < 0 || index > this[S._length$1]) {
          dart.throw(new core.RangeError.range(index, 0, this[S._length$1]));
        }
        if (this[S._length$1] < this[S._buffer$1][S$.$length]) {
          this[S._buffer$1][S$.$setRange](index + 1, this[S._length$1] + 1, this[S._buffer$1], index);
          this[S._buffer$1][S$.$_set](index, element);
          this[S._length$1] = this[S._length$1] + 1;
          return;
        }
        let newBuffer = this[S._createBiggerBuffer](null);
        newBuffer[S$.$setRange](0, index, this[S._buffer$1]);
        newBuffer[S$.$setRange](index + 1, this[S._length$1] + 1, this[S._buffer$1], index);
        newBuffer[S$.$_set](index, element);
        this[S._length$1] = this[S._length$1] + 1;
        this[S._buffer$1] = newBuffer;
      }
      [S._ensureCapacity](requiredCapacity) {
        if (requiredCapacity <= this[S._buffer$1][S$.$length]) return;
        let newBuffer = this[S._createBiggerBuffer](requiredCapacity);
        newBuffer[S$.$setRange](0, this[S._length$1], this[S._buffer$1]);
        this[S._buffer$1] = newBuffer;
      }
      [S._createBiggerBuffer](requiredCapacity) {
        let newLength = this[S._buffer$1][S$.$length] * 2;
        if (requiredCapacity != null && dart.notNull(newLength) < dart.notNull(requiredCapacity)) {
          newLength = requiredCapacity;
        } else if (dart.notNull(newLength) < 8) {
          newLength = 8;
        }
        return this[S._createBuffer$1](newLength);
      }
      [S._grow$2](length) {
        let t208;
        this[S._buffer$1] = (t208 = this[S._createBiggerBuffer](null), (() => {
          t208[S$.$setRange](0, length, this[S._buffer$1]);
          return t208;
        })());
      }
      setRange(start, end, iterable, skipCount = 0) {
        __t$IterableOfE().as(iterable);
        if (end > this[S._length$1]) dart.throw(new core.RangeError.range(end, 0, this[S._length$1]));
        this[S._setRange](start, end, iterable, skipCount);
      }
      [S._setRange](start, end, source, skipCount) {
        if (__t$TypedDataBufferOfE().is(source)) {
          this[S._buffer$1][S$.$setRange](start, end, source[S._buffer$1], skipCount);
        } else {
          this[S._buffer$1][S$.$setRange](start, end, source, skipCount);
        }
      }
      get elementSizeInBytes() {
        return this[S._typedBuffer][S.$elementSizeInBytes];
      }
      get lengthInBytes() {
        return this[S._length$1] * this[S._typedBuffer][S.$elementSizeInBytes];
      }
      get offsetInBytes() {
        return this[S._typedBuffer][S$.$offsetInBytes];
      }
      get buffer() {
        return this[S._typedBuffer][S$.$buffer];
      }
    }
    (TypedDataBuffer.new = function(buffer) {
      this[S._buffer$1] = buffer;
      this[S._length$1] = buffer[S$.$length];
      ;
    }).prototype = TypedDataBuffer.prototype;
    dart.addTypeTests(TypedDataBuffer);
    TypedDataBuffer.prototype[_is_TypedDataBuffer_default] = true;
    dart.addTypeCaches(TypedDataBuffer);
    dart.setMethodSignature(TypedDataBuffer, () => ({
      __proto__: dart.getMethods(TypedDataBuffer.__proto__),
      _get: dart.fnType(E, [core.int]),
      [S$.$_get]: dart.fnType(E, [core.int]),
      _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [S$.$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [S._add$3]: dart.fnType(dart.void, [E]),
      addAll: dart.fnType(dart.void, [dart.nullable(core.Object)], [core.int, dart.nullable(core.int)]),
      [S$.$addAll]: dart.fnType(dart.void, [dart.nullable(core.Object)], [core.int, dart.nullable(core.int)]),
      insertAll: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)], [core.int, dart.nullable(core.int)]),
      [S.$insertAll]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)], [core.int, dart.nullable(core.int)]),
      [S._addAll]: dart.fnType(dart.void, [core.Iterable$(E)], [core.int, dart.nullable(core.int)]),
      [S._insertKnownLength]: dart.fnType(dart.void, [core.int, core.Iterable$(E), core.int, core.int]),
      [S._ensureCapacity]: dart.fnType(dart.void, [core.int]),
      [S._createBiggerBuffer]: dart.fnType(core.List$(E), [dart.nullable(core.int)]),
      [S._grow$2]: dart.fnType(dart.void, [core.int]),
      [S._setRange]: dart.fnType(dart.void, [core.int, core.int, core.Iterable$(E), core.int])
    }));
    dart.setStaticMethodSignature(TypedDataBuffer, () => ['_reverse']);
    dart.setGetterSignature(TypedDataBuffer, () => ({
      __proto__: dart.getGetters(TypedDataBuffer.__proto__),
      [S._typedBuffer]: typed_data.TypedData,
      length: core.int,
      [S$.$length]: core.int,
      elementSizeInBytes: core.int,
      lengthInBytes: core.int,
      offsetInBytes: core.int,
      buffer: typed_data.ByteBuffer
    }));
    dart.setSetterSignature(TypedDataBuffer, () => ({
      __proto__: dart.getSetters(TypedDataBuffer.__proto__),
      length: core.int,
      [S$.$length]: core.int
    }));
    dart.setLibraryUri(TypedDataBuffer, I[204]);
    dart.setFieldSignature(TypedDataBuffer, () => ({
      __proto__: dart.getFields(TypedDataBuffer.__proto__),
      [S._buffer$1]: dart.fieldType(core.List$(E)),
      [S._length$1]: dart.fieldType(core.int)
    }));
    dart.setStaticFieldSignature(TypedDataBuffer, () => ['_initialLength']);
    dart.defineExtensionMethods(TypedDataBuffer, [
      '_get',
      '_set',
      'add',
      'addAll',
      'insertAll',
      'insert',
      'setRange'
    ]);
    dart.defineExtensionAccessors(TypedDataBuffer, ['length']);
    return TypedDataBuffer;
  });
  typed_buffer.TypedDataBuffer = typed_buffer.TypedDataBuffer$();
  dart.defineLazy(typed_buffer.TypedDataBuffer, {
    /*typed_buffer.TypedDataBuffer._initialLength*/get _initialLength() {
      return 8;
    }
  }, false);
  dart.addTypeTests(typed_buffer.TypedDataBuffer, _is_TypedDataBuffer_default);
  typed_buffer._IntBuffer = class _IntBuffer extends typed_buffer.TypedDataBuffer$(core.int) {
    get [S._defaultValue$1]() {
      return 0;
    }
  };
  (typed_buffer._IntBuffer.new = function(buffer) {
    typed_buffer._IntBuffer.__proto__.new.call(this, buffer);
    ;
  }).prototype = typed_buffer._IntBuffer.prototype;
  dart.addTypeTests(typed_buffer._IntBuffer);
  dart.addTypeCaches(typed_buffer._IntBuffer);
  dart.setGetterSignature(typed_buffer._IntBuffer, () => ({
    __proto__: dart.getGetters(typed_buffer._IntBuffer.__proto__),
    [S._defaultValue$1]: core.int
  }));
  dart.setLibraryUri(typed_buffer._IntBuffer, I[204]);
  typed_buffer._FloatBuffer = class _FloatBuffer extends typed_buffer.TypedDataBuffer$(core.double) {
    get [S._defaultValue$1]() {
      return 0;
    }
  };
  (typed_buffer._FloatBuffer.new = function(buffer) {
    typed_buffer._FloatBuffer.__proto__.new.call(this, buffer);
    ;
  }).prototype = typed_buffer._FloatBuffer.prototype;
  dart.addTypeTests(typed_buffer._FloatBuffer);
  dart.addTypeCaches(typed_buffer._FloatBuffer);
  dart.setGetterSignature(typed_buffer._FloatBuffer, () => ({
    __proto__: dart.getGetters(typed_buffer._FloatBuffer.__proto__),
    [S._defaultValue$1]: core.double
  }));
  dart.setLibraryUri(typed_buffer._FloatBuffer, I[204]);
  typed_buffer.Uint8Buffer = class Uint8Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Uint8Buffer.new(initialLength);
    }
    [S._createBuffer$1](size) {
      return _native_typed_data.NativeUint8List.new(size);
    }
  };
  (typed_buffer.Uint8Buffer.new = function(initialLength = 0) {
    typed_buffer.Uint8Buffer.__proto__.new.call(this, _native_typed_data.NativeUint8List.new(initialLength));
    ;
  }).prototype = typed_buffer.Uint8Buffer.prototype;
  dart.addTypeTests(typed_buffer.Uint8Buffer);
  dart.addTypeCaches(typed_buffer.Uint8Buffer);
  dart.setMethodSignature(typed_buffer.Uint8Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Uint8Buffer.__proto__),
    [S._createBuffer$1]: dart.fnType(typed_data.Uint8List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Uint8Buffer, I[204]);
  typed_buffer.Int8Buffer = class Int8Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Int8Buffer.new(initialLength);
    }
    [S._createBuffer$1](size) {
      return _native_typed_data.NativeInt8List.new(size);
    }
  };
  (typed_buffer.Int8Buffer.new = function(initialLength = 0) {
    typed_buffer.Int8Buffer.__proto__.new.call(this, _native_typed_data.NativeInt8List.new(initialLength));
    ;
  }).prototype = typed_buffer.Int8Buffer.prototype;
  dart.addTypeTests(typed_buffer.Int8Buffer);
  dart.addTypeCaches(typed_buffer.Int8Buffer);
  dart.setMethodSignature(typed_buffer.Int8Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Int8Buffer.__proto__),
    [S._createBuffer$1]: dart.fnType(typed_data.Int8List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Int8Buffer, I[204]);
  typed_buffer.Uint8ClampedBuffer = class Uint8ClampedBuffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Uint8ClampedBuffer.new(initialLength);
    }
    [S._createBuffer$1](size) {
      return _native_typed_data.NativeUint8ClampedList.new(size);
    }
  };
  (typed_buffer.Uint8ClampedBuffer.new = function(initialLength = 0) {
    typed_buffer.Uint8ClampedBuffer.__proto__.new.call(this, _native_typed_data.NativeUint8ClampedList.new(initialLength));
    ;
  }).prototype = typed_buffer.Uint8ClampedBuffer.prototype;
  dart.addTypeTests(typed_buffer.Uint8ClampedBuffer);
  dart.addTypeCaches(typed_buffer.Uint8ClampedBuffer);
  dart.setMethodSignature(typed_buffer.Uint8ClampedBuffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Uint8ClampedBuffer.__proto__),
    [S._createBuffer$1]: dart.fnType(typed_data.Uint8ClampedList, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Uint8ClampedBuffer, I[204]);
  typed_buffer.Uint16Buffer = class Uint16Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Uint16Buffer.new(initialLength);
    }
    [S._createBuffer$1](size) {
      return _native_typed_data.NativeUint16List.new(size);
    }
  };
  (typed_buffer.Uint16Buffer.new = function(initialLength = 0) {
    typed_buffer.Uint16Buffer.__proto__.new.call(this, _native_typed_data.NativeUint16List.new(initialLength));
    ;
  }).prototype = typed_buffer.Uint16Buffer.prototype;
  dart.addTypeTests(typed_buffer.Uint16Buffer);
  dart.addTypeCaches(typed_buffer.Uint16Buffer);
  dart.setMethodSignature(typed_buffer.Uint16Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Uint16Buffer.__proto__),
    [S._createBuffer$1]: dart.fnType(typed_data.Uint16List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Uint16Buffer, I[204]);
  typed_buffer.Int16Buffer = class Int16Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Int16Buffer.new(initialLength);
    }
    [S._createBuffer$1](size) {
      return _native_typed_data.NativeInt16List.new(size);
    }
  };
  (typed_buffer.Int16Buffer.new = function(initialLength = 0) {
    typed_buffer.Int16Buffer.__proto__.new.call(this, _native_typed_data.NativeInt16List.new(initialLength));
    ;
  }).prototype = typed_buffer.Int16Buffer.prototype;
  dart.addTypeTests(typed_buffer.Int16Buffer);
  dart.addTypeCaches(typed_buffer.Int16Buffer);
  dart.setMethodSignature(typed_buffer.Int16Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Int16Buffer.__proto__),
    [S._createBuffer$1]: dart.fnType(typed_data.Int16List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Int16Buffer, I[204]);
  typed_buffer.Uint32Buffer = class Uint32Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Uint32Buffer.new(initialLength);
    }
    [S._createBuffer$1](size) {
      return _native_typed_data.NativeUint32List.new(size);
    }
  };
  (typed_buffer.Uint32Buffer.new = function(initialLength = 0) {
    typed_buffer.Uint32Buffer.__proto__.new.call(this, _native_typed_data.NativeUint32List.new(initialLength));
    ;
  }).prototype = typed_buffer.Uint32Buffer.prototype;
  dart.addTypeTests(typed_buffer.Uint32Buffer);
  dart.addTypeCaches(typed_buffer.Uint32Buffer);
  dart.setMethodSignature(typed_buffer.Uint32Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Uint32Buffer.__proto__),
    [S._createBuffer$1]: dart.fnType(typed_data.Uint32List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Uint32Buffer, I[204]);
  typed_buffer.Int32Buffer = class Int32Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Int32Buffer.new(initialLength);
    }
    [S._createBuffer$1](size) {
      return _native_typed_data.NativeInt32List.new(size);
    }
  };
  (typed_buffer.Int32Buffer.new = function(initialLength = 0) {
    typed_buffer.Int32Buffer.__proto__.new.call(this, _native_typed_data.NativeInt32List.new(initialLength));
    ;
  }).prototype = typed_buffer.Int32Buffer.prototype;
  dart.addTypeTests(typed_buffer.Int32Buffer);
  dart.addTypeCaches(typed_buffer.Int32Buffer);
  dart.setMethodSignature(typed_buffer.Int32Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Int32Buffer.__proto__),
    [S._createBuffer$1]: dart.fnType(typed_data.Int32List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Int32Buffer, I[204]);
  typed_buffer.Uint64Buffer = class Uint64Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Uint64Buffer.new(initialLength);
    }
    [S._createBuffer$1](size) {
      return typed_data.Uint64List.new(size);
    }
  };
  (typed_buffer.Uint64Buffer.new = function(initialLength = 0) {
    typed_buffer.Uint64Buffer.__proto__.new.call(this, typed_data.Uint64List.new(initialLength));
    ;
  }).prototype = typed_buffer.Uint64Buffer.prototype;
  dart.addTypeTests(typed_buffer.Uint64Buffer);
  dart.addTypeCaches(typed_buffer.Uint64Buffer);
  dart.setMethodSignature(typed_buffer.Uint64Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Uint64Buffer.__proto__),
    [S._createBuffer$1]: dart.fnType(typed_data.Uint64List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Uint64Buffer, I[204]);
  typed_buffer.Int64Buffer = class Int64Buffer extends typed_buffer._IntBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Int64Buffer.new(initialLength);
    }
    [S._createBuffer$1](size) {
      return typed_data.Int64List.new(size);
    }
  };
  (typed_buffer.Int64Buffer.new = function(initialLength = 0) {
    typed_buffer.Int64Buffer.__proto__.new.call(this, typed_data.Int64List.new(initialLength));
    ;
  }).prototype = typed_buffer.Int64Buffer.prototype;
  dart.addTypeTests(typed_buffer.Int64Buffer);
  dart.addTypeCaches(typed_buffer.Int64Buffer);
  dart.setMethodSignature(typed_buffer.Int64Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Int64Buffer.__proto__),
    [S._createBuffer$1]: dart.fnType(typed_data.Int64List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Int64Buffer, I[204]);
  typed_buffer.Float32Buffer = class Float32Buffer extends typed_buffer._FloatBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Float32Buffer.new(initialLength);
    }
    [S._createBuffer$1](size) {
      return _native_typed_data.NativeFloat32List.new(size);
    }
  };
  (typed_buffer.Float32Buffer.new = function(initialLength = 0) {
    typed_buffer.Float32Buffer.__proto__.new.call(this, _native_typed_data.NativeFloat32List.new(initialLength));
    ;
  }).prototype = typed_buffer.Float32Buffer.prototype;
  dart.addTypeTests(typed_buffer.Float32Buffer);
  dart.addTypeCaches(typed_buffer.Float32Buffer);
  dart.setMethodSignature(typed_buffer.Float32Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Float32Buffer.__proto__),
    [S._createBuffer$1]: dart.fnType(typed_data.Float32List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Float32Buffer, I[204]);
  typed_buffer.Float64Buffer = class Float64Buffer extends typed_buffer._FloatBuffer {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Float64Buffer.new(initialLength);
    }
    [S._createBuffer$1](size) {
      return _native_typed_data.NativeFloat64List.new(size);
    }
  };
  (typed_buffer.Float64Buffer.new = function(initialLength = 0) {
    typed_buffer.Float64Buffer.__proto__.new.call(this, _native_typed_data.NativeFloat64List.new(initialLength));
    ;
  }).prototype = typed_buffer.Float64Buffer.prototype;
  dart.addTypeTests(typed_buffer.Float64Buffer);
  dart.addTypeCaches(typed_buffer.Float64Buffer);
  dart.setMethodSignature(typed_buffer.Float64Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Float64Buffer.__proto__),
    [S._createBuffer$1]: dart.fnType(typed_data.Float64List, [core.int])
  }));
  dart.setLibraryUri(typed_buffer.Float64Buffer, I[204]);
  typed_buffer.Int32x4Buffer = class Int32x4Buffer extends typed_buffer.TypedDataBuffer$(typed_data.Int32x4) {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Int32x4Buffer.new(initialLength);
    }
    get [S._defaultValue$1]() {
      return typed_buffer.Int32x4Buffer._zero;
    }
    [S._createBuffer$1](size) {
      return new _native_typed_data.NativeInt32x4List.new(size);
    }
  };
  (typed_buffer.Int32x4Buffer.new = function(initialLength = 0) {
    typed_buffer.Int32x4Buffer.__proto__.new.call(this, new _native_typed_data.NativeInt32x4List.new(initialLength));
    ;
  }).prototype = typed_buffer.Int32x4Buffer.prototype;
  dart.addTypeTests(typed_buffer.Int32x4Buffer);
  dart.addTypeCaches(typed_buffer.Int32x4Buffer);
  dart.setMethodSignature(typed_buffer.Int32x4Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Int32x4Buffer.__proto__),
    [S._createBuffer$1]: dart.fnType(typed_data.Int32x4List, [core.int])
  }));
  dart.setGetterSignature(typed_buffer.Int32x4Buffer, () => ({
    __proto__: dart.getGetters(typed_buffer.Int32x4Buffer.__proto__),
    [S._defaultValue$1]: typed_data.Int32x4
  }));
  dart.setLibraryUri(typed_buffer.Int32x4Buffer, I[204]);
  dart.setStaticFieldSignature(typed_buffer.Int32x4Buffer, () => ['_zero']);
  dart.defineLazy(typed_buffer.Int32x4Buffer, {
    /*typed_buffer.Int32x4Buffer._zero*/get _zero() {
      return new _native_typed_data.NativeInt32x4.new(0, 0, 0, 0);
    }
  }, false);
  typed_buffer.Float32x4Buffer = class Float32x4Buffer extends typed_buffer.TypedDataBuffer$(typed_data.Float32x4) {
    static ['_#new#tearOff'](initialLength = 0) {
      return new typed_buffer.Float32x4Buffer.new(initialLength);
    }
    get [S._defaultValue$1]() {
      return new _native_typed_data.NativeFloat32x4.zero();
    }
    [S._createBuffer$1](size) {
      return new _native_typed_data.NativeFloat32x4List.new(size);
    }
  };
  (typed_buffer.Float32x4Buffer.new = function(initialLength = 0) {
    typed_buffer.Float32x4Buffer.__proto__.new.call(this, new _native_typed_data.NativeFloat32x4List.new(initialLength));
    ;
  }).prototype = typed_buffer.Float32x4Buffer.prototype;
  dart.addTypeTests(typed_buffer.Float32x4Buffer);
  dart.addTypeCaches(typed_buffer.Float32x4Buffer);
  dart.setMethodSignature(typed_buffer.Float32x4Buffer, () => ({
    __proto__: dart.getMethods(typed_buffer.Float32x4Buffer.__proto__),
    [S._createBuffer$1]: dart.fnType(typed_data.Float32x4List, [core.int])
  }));
  dart.setGetterSignature(typed_buffer.Float32x4Buffer, () => ({
    __proto__: dart.getGetters(typed_buffer.Float32x4Buffer.__proto__),
    [S._defaultValue$1]: typed_data.Float32x4
  }));
  dart.setLibraryUri(typed_buffer.Float32x4Buffer, I[204]);
  binary_writer_impl.BinaryWriterImpl = class BinaryWriterImpl extends hive.BinaryWriter {
    get [S._byteData$1]() {
      this[S._byteDataInstance] == null ? this[S._byteDataInstance] = typed_data.ByteData.view(this[S._buffer$2][S$.$buffer]) : null;
      return dart.nullCheck(this[S._byteDataInstance]);
    }
    static ['_#new#tearOff'](typeRegistry) {
      return new binary_writer_impl.BinaryWriterImpl.new(typeRegistry);
    }
    static ['_#withBuffer#tearOff'](_buffer, _typeRegistry) {
      return new binary_writer_impl.BinaryWriterImpl.withBuffer(_buffer, _typeRegistry);
    }
    [S._reserveBytes](count) {
      if (this[S._buffer$2][S$.$length] - this[S._offset$1] < count) {
        this[S._increaseBufferSize](count);
      }
    }
    [S._increaseBufferSize](count) {
      let newSize = binary_writer_impl.BinaryWriterImpl._pow2roundup((this[S._offset$1] + count) * 2);
      let newBuffer = _native_typed_data.NativeUint8List.new(newSize);
      newBuffer[S$.$setRange](0, this[S._offset$1], this[S._buffer$2]);
      this[S._buffer$2] = newBuffer;
      this[S._byteDataInstance] = null;
    }
    [S._addBytes](bytes) {
      core.ArgumentError.checkNotNull(T$.ListOfint(), bytes);
      let length = bytes[S$.$length];
      this[S._reserveBytes](length);
      this[S._buffer$2][S$.$setRange](this[S._offset$1], this[S._offset$1] + length, bytes);
      this[S._offset$1] = this[S._offset$1] + length;
    }
    writeByte(byte) {
      let t208;
      core.ArgumentError.checkNotNull(core.int, byte);
      this[S._reserveBytes](1);
      this[S._buffer$2][S$.$_set]((t208 = this[S._offset$1], this[S._offset$1] = t208 + 1, t208), byte);
    }
    writeWord(value) {
      let t208, t208$;
      core.ArgumentError.checkNotNull(core.int, value);
      this[S._reserveBytes](2);
      this[S._buffer$2][S$.$_set]((t208 = this[S._offset$1], this[S._offset$1] = t208 + 1, t208), value);
      this[S._buffer$2][S$.$_set]((t208$ = this[S._offset$1], this[S._offset$1] = t208$ + 1, t208$), value[S$.$rightShift](8));
    }
    writeInt32(value) {
      core.ArgumentError.checkNotNull(core.int, value);
      this[S._reserveBytes](4);
      this[S._byteData$1][S.$setInt32](this[S._offset$1], value, typed_data.Endian.little);
      this[S._offset$1] = this[S._offset$1] + 4;
    }
    writeUint32(value) {
      core.ArgumentError.checkNotNull(core.int, value);
      this[S._reserveBytes](4);
      extensions['ListIntX|writeUint32'](this[S._buffer$2], this[S._offset$1], value);
      this[S._offset$1] = this[S._offset$1] + 4;
    }
    writeInt(value) {
      this.writeDouble(value[S.$toDouble]());
    }
    writeDouble(value) {
      core.ArgumentError.checkNotNull(core.double, value);
      this[S._reserveBytes](8);
      this[S._byteData$1][S.$setFloat64](this[S._offset$1], value, typed_data.Endian.little);
      this[S._offset$1] = this[S._offset$1] + 8;
    }
    writeBool(value) {
      core.ArgumentError.checkNotNull(core.bool, value);
      this.writeByte(value ? 1 : 0);
    }
    writeString(value, opts) {
      let writeByteCount = opts && 'writeByteCount' in opts ? opts.writeByteCount : true;
      let encoder = opts && 'encoder' in opts ? opts.encoder : C[3] || CT.C3;
      core.ArgumentError.checkNotNull(core.String, value);
      let bytes = encoder.convert(value);
      if (writeByteCount) {
        this.writeUint32(bytes[S$.$length]);
      }
      this[S._addBytes](bytes);
    }
    writeByteList(bytes, opts) {
      let writeLength = opts && 'writeLength' in opts ? opts.writeLength : true;
      core.ArgumentError.checkNotNull(T$.ListOfint(), bytes);
      if (writeLength) {
        this.writeUint32(bytes[S$.$length]);
      }
      this[S._addBytes](bytes);
    }
    writeIntList(list, opts) {
      let writeLength = opts && 'writeLength' in opts ? opts.writeLength : true;
      core.ArgumentError.checkNotNull(T$.ListOfint(), list);
      let length = list[S$.$length];
      if (writeLength) {
        this.writeUint32(length);
      }
      this[S._reserveBytes](length * 8);
      let byteData = this[S._byteData$1];
      for (let i = 0; i < length; i = i + 1) {
        byteData[S.$setFloat64](this[S._offset$1], list[S$.$_get](i)[S.$toDouble](), typed_data.Endian.little);
        this[S._offset$1] = this[S._offset$1] + 8;
      }
    }
    writeDoubleList(list, opts) {
      let writeLength = opts && 'writeLength' in opts ? opts.writeLength : true;
      core.ArgumentError.checkNotNull(T$.ListOfdouble(), list);
      let length = list[S$.$length];
      if (writeLength) {
        this.writeUint32(length);
      }
      this[S._reserveBytes](length * 8);
      let byteData = this[S._byteData$1];
      for (let i = 0; i < length; i = i + 1) {
        byteData[S.$setFloat64](this[S._offset$1], list[S$.$_get](i), typed_data.Endian.little);
        this[S._offset$1] = this[S._offset$1] + 8;
      }
    }
    writeBoolList(list, opts) {
      let t208;
      let writeLength = opts && 'writeLength' in opts ? opts.writeLength : true;
      core.ArgumentError.checkNotNull(T$.ListOfbool(), list);
      let length = list[S$.$length];
      if (writeLength) {
        this.writeUint32(length);
      }
      this[S._reserveBytes](length);
      for (let i = 0; i < length; i = i + 1) {
        this[S._buffer$2][S$.$_set]((t208 = this[S._offset$1], this[S._offset$1] = t208 + 1, t208), list[S$.$_get](i) ? 1 : 0);
      }
    }
    writeStringList(list, opts) {
      let writeLength = opts && 'writeLength' in opts ? opts.writeLength : true;
      let encoder = opts && 'encoder' in opts ? opts.encoder : C[3] || CT.C3;
      core.ArgumentError.checkNotNull(T$.ListOfString(), list);
      if (writeLength) {
        this.writeUint32(list[S$.$length]);
      }
      for (let str of list) {
        let strBytes = encoder.convert(str);
        this.writeUint32(strBytes[S$.$length]);
        this[S._addBytes](strBytes);
      }
    }
    writeList(list, opts) {
      let writeLength = opts && 'writeLength' in opts ? opts.writeLength : true;
      core.ArgumentError.checkNotNull(core.List, list);
      if (writeLength) {
        this.writeUint32(list[S$.$length]);
      }
      for (let i = 0; i < list[S$.$length]; i = i + 1) {
        this.write(dart.dynamic, list[S$.$_get](i));
      }
    }
    writeMap(map, opts) {
      let writeLength = opts && 'writeLength' in opts ? opts.writeLength : true;
      core.ArgumentError.checkNotNull(core.Map, map);
      if (writeLength) {
        this.writeUint32(map[S$.$length]);
      }
      for (let key of map[S$.$keys]) {
        this.write(dart.dynamic, key);
        this.write(dart.dynamic, map[S$.$_get](key));
      }
    }
    writeKey(key) {
      core.ArgumentError.checkNotNull(core.Object, key);
      if (typeof key == 'string') {
        this.writeByte(1);
        let bytes = hive.BinaryWriter.utf8Encoder.convert(key);
        this.writeByte(bytes[S$.$length]);
        this[S._addBytes](bytes);
      } else {
        this.writeByte(0);
        this.writeUint32(core.int.as(key));
      }
    }
    writeHiveList(list, opts) {
      let writeLength = opts && 'writeLength' in opts ? opts.writeLength : true;
      core.ArgumentError.checkNotNull(T$.HiveListOfHiveObjectMixin(), list);
      if (writeLength) {
        this.writeUint32(list[S$.$length]);
      }
      let boxName = T$.HiveListImplOfHiveObjectMixin().as(list).boxName;
      this.writeByte(boxName.length);
      this[S._addBytes](boxName[S$.$codeUnits]);
      for (let obj of list) {
        this.writeKey(obj.key);
      }
    }
    writeFrame(frame, opts) {
      let t208, t208$;
      let cipher = opts && 'cipher' in opts ? opts.cipher : null;
      core.ArgumentError.checkNotNull(frame$.Frame, frame);
      let startOffset = this[S._offset$1];
      this[S._reserveBytes](4);
      this[S._offset$1] = this[S._offset$1] + 4;
      this.writeKey(frame.key);
      if (!frame.deleted) {
        if (cipher == null) {
          this.write(dart.dynamic, frame.value);
        } else {
          this.writeEncrypted(frame.value, cipher);
        }
      }
      let frameLength = this[S._offset$1] - startOffset + 4;
      extensions['ListIntX|writeUint32'](this[S._buffer$2], startOffset, frameLength);
      let crc = crc32.Crc32.compute(this[S._buffer$2], {offset: startOffset, length: frameLength - 4, crc: (t208$ = (t208 = cipher, t208 == null ? null : t208.calculateKeyCrc()), t208$ == null ? 0 : t208$)});
      this.writeUint32(crc);
      return frameLength;
    }
    write(T, value, opts) {
      let writeTypeId = opts && 'writeTypeId' in opts ? opts.writeTypeId : true;
      if (value == null) {
        if (writeTypeId) {
          this.writeByte(0);
        }
      } else if (core.int.is(value)) {
        if (writeTypeId) {
          this.writeByte(1);
        }
        this.writeInt(value);
      } else if (typeof value == 'number') {
        if (writeTypeId) {
          this.writeByte(2);
        }
        this.writeDouble(value);
      } else if (typeof value == 'boolean') {
        if (writeTypeId) {
          this.writeByte(3);
        }
        this.writeBool(value);
      } else if (typeof value == 'string') {
        if (writeTypeId) {
          this.writeByte(4);
        }
        this.writeString(value);
      } else if (core.List.is(value)) {
        this[S._writeList](value, {writeTypeId: writeTypeId});
      } else if (core.Map.is(value)) {
        if (writeTypeId) {
          this.writeByte(11);
        }
        this.writeMap(value);
      } else {
        let resolved = this[S._typeRegistry$1].findAdapterForValue(value);
        if (resolved == null) {
          dart.throw(new hive.HiveError.new("Cannot write, unknown type: " + dart.str(dart.runtimeType(value)) + ". " + "Did you forget to register an adapter?"));
        }
        if (writeTypeId) {
          this.writeByte(resolved.typeId);
        }
        resolved.adapter.write(this, value);
      }
    }
    [S._writeList](value, opts) {
      let writeTypeId = opts && 'writeTypeId' in opts ? opts.writeTypeId : true;
      if (T$.HiveListOfHiveObjectMixin().is(value)) {
        if (writeTypeId) {
          this.writeByte(12);
        }
        this.writeHiveList(value);
      } else if (value[S$.$contains](null)) {
        if (writeTypeId) {
          this.writeByte(10);
        }
        this.writeList(value);
      } else if (typed_data.Uint8List.is(value)) {
        if (writeTypeId) {
          this.writeByte(5);
        }
        this.writeByteList(value);
      } else if (T$.ListOfint().is(value)) {
        if (writeTypeId) {
          this.writeByte(6);
        }
        this.writeIntList(value);
      } else if (T$.ListOfdouble().is(value)) {
        if (writeTypeId) {
          this.writeByte(7);
        }
        this.writeDoubleList(value);
      } else if (T$.ListOfbool().is(value)) {
        if (writeTypeId) {
          this.writeByte(8);
        }
        this.writeBoolList(value);
      } else if (T$.ListOfString().is(value)) {
        if (writeTypeId) {
          this.writeByte(9);
        }
        this.writeStringList(value);
      } else {
        if (writeTypeId) {
          this.writeByte(10);
        }
        this.writeList(value);
      }
    }
    writeEncrypted(value, cipher, opts) {
      let t208;
      let writeTypeId = opts && 'writeTypeId' in opts ? opts.writeTypeId : true;
      let valueWriter = (t208 = new binary_writer_impl.BinaryWriterImpl.new(this[S._typeRegistry$1]), (() => {
        t208.write(dart.dynamic, value, {writeTypeId: writeTypeId});
        return t208;
      })());
      let inp = valueWriter[S._buffer$2];
      let inpLength = valueWriter[S._offset$1];
      this[S._reserveBytes](cipher.maxEncryptedSize(inp));
      let len = cipher.encrypt(inp, 0, inpLength, this[S._buffer$2], this[S._offset$1]);
      this[S._offset$1] = this[S._offset$1] + len;
    }
    toBytes() {
      return typed_data.Uint8List.view(this[S._buffer$2][S$.$buffer], 0, this[S._offset$1]);
    }
    static _pow2roundup(x) {
      if (!(x > 0)) dart.assertFailed(null, I[205], 419, 12, "x > 0");
      x = x - 1;
      x = (x | x[S$.$rightShift](1)) >>> 0;
      x = (x | x[S$.$rightShift](2)) >>> 0;
      x = (x | x[S$.$rightShift](4)) >>> 0;
      x = (x | x[S$.$rightShift](8)) >>> 0;
      x = (x | x[S$.$rightShift](16)) >>> 0;
      return x + 1;
    }
  };
  (binary_writer_impl.BinaryWriterImpl.new = function(typeRegistry) {
    this[S._buffer$2] = _native_typed_data.NativeUint8List.new(4096);
    this[S._byteDataInstance] = null;
    this[S._offset$1] = 0;
    this[S._typeRegistry$1] = type_registry_impl.TypeRegistryImpl.as(typeRegistry);
    ;
  }).prototype = binary_writer_impl.BinaryWriterImpl.prototype;
  (binary_writer_impl.BinaryWriterImpl.withBuffer = function(_buffer, _typeRegistry) {
    this[S._buffer$2] = _native_typed_data.NativeUint8List.new(4096);
    this[S._byteDataInstance] = null;
    this[S._offset$1] = 0;
    this[S._buffer$2] = _buffer;
    this[S._typeRegistry$1] = _typeRegistry;
    ;
  }).prototype = binary_writer_impl.BinaryWriterImpl.prototype;
  dart.addTypeTests(binary_writer_impl.BinaryWriterImpl);
  dart.addTypeCaches(binary_writer_impl.BinaryWriterImpl);
  dart.setMethodSignature(binary_writer_impl.BinaryWriterImpl, () => ({
    __proto__: dart.getMethods(binary_writer_impl.BinaryWriterImpl.__proto__),
    [S._reserveBytes]: dart.fnType(dart.void, [core.int]),
    [S._increaseBufferSize]: dart.fnType(dart.void, [core.int]),
    [S._addBytes]: dart.fnType(dart.void, [core.List$(core.int)]),
    writeByte: dart.fnType(dart.void, [core.int]),
    writeWord: dart.fnType(dart.void, [core.int]),
    writeInt32: dart.fnType(dart.void, [core.int]),
    writeUint32: dart.fnType(dart.void, [core.int]),
    writeInt: dart.fnType(dart.void, [core.int]),
    writeDouble: dart.fnType(dart.void, [core.double]),
    writeBool: dart.fnType(dart.void, [core.bool]),
    writeString: dart.fnType(dart.void, [core.String], {encoder: convert.Converter$(core.String, core.List$(core.int)), writeByteCount: core.bool}, {}),
    writeByteList: dart.fnType(dart.void, [core.List$(core.int)], {writeLength: core.bool}, {}),
    writeIntList: dart.fnType(dart.void, [core.List$(core.int)], {writeLength: core.bool}, {}),
    writeDoubleList: dart.fnType(dart.void, [core.List$(core.double)], {writeLength: core.bool}, {}),
    writeBoolList: dart.fnType(dart.void, [core.List$(core.bool)], {writeLength: core.bool}, {}),
    writeStringList: dart.fnType(dart.void, [core.List$(core.String)], {encoder: convert.Converter$(core.String, core.List$(core.int)), writeLength: core.bool}, {}),
    writeList: dart.fnType(dart.void, [core.List], {writeLength: core.bool}, {}),
    writeMap: dart.fnType(dart.void, [core.Map], {writeLength: core.bool}, {}),
    writeKey: dart.fnType(dart.void, [dart.dynamic]),
    writeHiveList: dart.fnType(dart.void, [hive.HiveList$(hive_object.HiveObjectMixin)], {writeLength: core.bool}, {}),
    writeFrame: dart.fnType(core.int, [frame$.Frame], {cipher: dart.nullable(hive.HiveCipher)}, {}),
    write: dart.gFnType(T => [dart.void, [T], {writeTypeId: core.bool}, {}], T => [dart.nullable(core.Object)]),
    [S._writeList]: dart.fnType(dart.void, [core.List], {writeTypeId: core.bool}, {}),
    writeEncrypted: dart.fnType(dart.void, [dart.dynamic, hive.HiveCipher], {writeTypeId: core.bool}, {}),
    toBytes: dart.fnType(typed_data.Uint8List, [])
  }));
  dart.setStaticMethodSignature(binary_writer_impl.BinaryWriterImpl, () => ['_pow2roundup']);
  dart.setGetterSignature(binary_writer_impl.BinaryWriterImpl, () => ({
    __proto__: dart.getGetters(binary_writer_impl.BinaryWriterImpl.__proto__),
    [S._byteData$1]: typed_data.ByteData
  }));
  dart.setLibraryUri(binary_writer_impl.BinaryWriterImpl, I[206]);
  dart.setFieldSignature(binary_writer_impl.BinaryWriterImpl, () => ({
    __proto__: dart.getFields(binary_writer_impl.BinaryWriterImpl.__proto__),
    [S._typeRegistry$1]: dart.finalFieldType(type_registry_impl.TypeRegistryImpl),
    [S._buffer$2]: dart.fieldType(typed_data.Uint8List),
    [S._byteDataInstance]: dart.fieldType(dart.nullable(typed_data.ByteData)),
    [S._offset$1]: dart.fieldType(core.int)
  }));
  dart.setStaticFieldSignature(binary_writer_impl.BinaryWriterImpl, () => ['_initBufferSize']);
  dart.defineLazy(binary_writer_impl.BinaryWriterImpl, {
    /*binary_writer_impl.BinaryWriterImpl._initBufferSize*/get _initBufferSize() {
      return 4096;
    }
  }, false);
  method_channel_list_result.MethodChannelListResult = class MethodChannelListResult extends platform_interface_list_result.ListResultPlatform {
    static ['_#new#tearOff'](storage, opts) {
      let nextPageToken = opts && 'nextPageToken' in opts ? opts.nextPageToken : null;
      let items = opts && 'items' in opts ? opts.items : null;
      let prefixes = opts && 'prefixes' in opts ? opts.prefixes : null;
      return new method_channel_list_result.MethodChannelListResult.new(storage, {nextPageToken: nextPageToken, items: items, prefixes: prefixes});
    }
    get items() {
      return this[S._items$1][S$.$map](method_channel_reference.MethodChannelReference, dart.fn(path => new method_channel_reference.MethodChannelReference.new(dart.nullCheck(this.storage), path), T$.StringToMethodChannelReference()))[S$.$toList]();
    }
    get prefixes() {
      return this[S._prefixes$1][S$.$map](method_channel_reference.MethodChannelReference, dart.fn(path => new method_channel_reference.MethodChannelReference.new(dart.nullCheck(this.storage), path), T$.StringToMethodChannelReference()))[S$.$toList]();
    }
  };
  (method_channel_list_result.MethodChannelListResult.new = function(storage, opts) {
    let t208, t208$;
    let nextPageToken = opts && 'nextPageToken' in opts ? opts.nextPageToken : null;
    let items = opts && 'items' in opts ? opts.items : null;
    let prefixes = opts && 'prefixes' in opts ? opts.prefixes : null;
    this[S._items$1] = (t208 = items, t208 == null ? T$.JSArrayOfString().of([]) : t208);
    this[S._prefixes$1] = (t208$ = prefixes, t208$ == null ? T$.JSArrayOfString().of([]) : t208$);
    method_channel_list_result.MethodChannelListResult.__proto__.new.call(this, storage, nextPageToken);
    ;
  }).prototype = method_channel_list_result.MethodChannelListResult.prototype;
  dart.addTypeTests(method_channel_list_result.MethodChannelListResult);
  dart.addTypeCaches(method_channel_list_result.MethodChannelListResult);
  dart.setLibraryUri(method_channel_list_result.MethodChannelListResult, I[207]);
  dart.setFieldSignature(method_channel_list_result.MethodChannelListResult, () => ({
    __proto__: dart.getFields(method_channel_list_result.MethodChannelListResult.__proto__),
    [S._items$1]: dart.fieldType(core.List$(core.String)),
    [S._prefixes$1]: dart.fieldType(core.List$(core.String))
  }));
  method_channel_task.MethodChannelTask = class MethodChannelTask extends platform_interface_task.TaskPlatform {
    get storage() {
      return this[S.storage$3];
    }
    set storage(value) {
      super.storage = value;
    }
    get [S._stackTrace]() {
      let t211;
      t211 = this[S.__MethodChannelTask__stackTrace];
      return t211 == null ? dart.throw(new _internal.LateError.fieldNI("_stackTrace")) : t211;
    }
    set [S._stackTrace](_stackTrace$35param) {
      this[S.__MethodChannelTask__stackTrace] = _stackTrace$35param;
    }
    get [S._stream$1]() {
      let t211;
      t211 = this[S.__MethodChannelTask__stream];
      return t211 == null ? dart.throw(new _internal.LateError.fieldNI("_stream")) : t211;
    }
    set [S._stream$1](_stream$35param) {
      this[S.__MethodChannelTask__stream] = _stream$35param;
    }
    get [S._initialTaskCompleter]() {
      let t211;
      t211 = this[S.__MethodChannelTask__initialTaskCompleter];
      return t211 == null ? dart.throw(new _internal.LateError.fieldNI("_initialTaskCompleter")) : t211;
    }
    set [S._initialTaskCompleter](_initialTaskCompleter$35param) {
      this[S.__MethodChannelTask__initialTaskCompleter] = _initialTaskCompleter$35param;
    }
    get [S._snapshot$1]() {
      let t211;
      t211 = this[S.__MethodChannelTask__snapshot];
      return t211 == null ? dart.throw(new _internal.LateError.fieldNI("_snapshot")) : t211;
    }
    set [S._snapshot$1](_snapshot$35param) {
      this[S.__MethodChannelTask__snapshot] = _snapshot$35param;
    }
    get snapshotEvents() {
      return T$.StreamOfTaskSnapshotPlatform().as(dart.nullCheck(method_channel_firebase_storage.MethodChannelFirebaseStorage.taskObservers[S$.$_get](this[S._handle])).stream);
    }
    get snapshot() {
      return this[S._snapshot$1];
    }
    get onComplete() {
      return async.async(platform_interface_task_snapshot.TaskSnapshotPlatform, (function* onComplete() {
        if (this[S._didComplete] && this[S._exception] == null) {
          return T$.FutureOfTaskSnapshotPlatform().value(this.snapshot);
        } else if (this[S._didComplete] && this[S._exception] != null) {
          return exception$1.catchFuturePlatformException(platform_interface_task_snapshot.TaskSnapshotPlatform, dart.nullCheck(this[S._exception]), this[S._stackTrace]);
        } else {
          this[S._completer] == null ? this[S._completer] = T$.CompleterOfTaskSnapshotPlatform().new() : null;
          return dart.nullCheck(this[S._completer]).future;
        }
      }).bind(this));
    }
    pause() {
      return async.async(core.bool, (function* pause() {
        try {
          if (!this[S._initialTaskCompleter].isCompleted) {
            yield this[S._initialTaskCompleter].future;
          }
          let data = (yield method_channel_firebase_storage.MethodChannelFirebaseStorage.channel.invokeMapMethod(core.String, dart.dynamic, "Task#pause", new (T$.IdentityMapOfString$dynamic()).from(["handle", this[S._handle]])));
          let success = core.bool.as(dart.nullCheck(data)[S$.$_get]("status"));
          if (success) {
            this[S._snapshot$1] = new method_channel_task_snapshot.MethodChannelTaskSnapshot.new(this.storage, task_state.TaskState.paused, T$.LinkedHashMapOfString$dynamic().from(core.Map.as(data[S$.$_get]("snapshot"))));
          }
          return success;
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            return exception$1.catchFuturePlatformException(core.bool, e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    resume() {
      return async.async(core.bool, (function* resume() {
        try {
          if (!this[S._initialTaskCompleter].isCompleted) {
            yield this[S._initialTaskCompleter].future;
          }
          let data = (yield method_channel_firebase_storage.MethodChannelFirebaseStorage.channel.invokeMapMethod(core.String, dart.dynamic, "Task#resume", new (T$.IdentityMapOfString$dynamic()).from(["handle", this[S._handle]])));
          let success = core.bool.as(dart.nullCheck(data)[S$.$_get]("status"));
          if (success) {
            this[S._snapshot$1] = new method_channel_task_snapshot.MethodChannelTaskSnapshot.new(this.storage, task_state.TaskState.running, T$.LinkedHashMapOfString$dynamic().from(core.Map.as(data[S$.$_get]("snapshot"))));
          }
          return success;
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            return exception$1.catchFuturePlatformException(core.bool, e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
    cancel() {
      return async.async(core.bool, (function* cancel() {
        try {
          if (!this[S._initialTaskCompleter].isCompleted) {
            yield this[S._initialTaskCompleter].future;
          }
          let data = (yield method_channel_firebase_storage.MethodChannelFirebaseStorage.channel.invokeMapMethod(core.String, dart.dynamic, "Task#cancel", new (T$.IdentityMapOfString$dynamic()).from(["handle", this[S._handle]])));
          let success = core.bool.as(dart.nullCheck(data)[S$.$_get]("status"));
          if (success) {
            this[S._snapshot$1] = new method_channel_task_snapshot.MethodChannelTaskSnapshot.new(this.storage, task_state.TaskState.canceled, T$.LinkedHashMapOfString$dynamic().from(core.Map.as(data[S$.$_get]("snapshot"))));
          }
          return success;
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stack = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            return exception$1.catchFuturePlatformException(core.bool, e, stack);
          } else
            throw e$;
        }
      }).bind(this));
    }
  };
  (method_channel_task.MethodChannelTask.new = function(_handle, storage, path, _initialTask) {
    this[S._exception] = null;
    this[S.__MethodChannelTask__stackTrace] = null;
    this[S._didComplete] = false;
    this[S._completer] = null;
    this[S.__MethodChannelTask__stream] = null;
    this[S.__MethodChannelTask__initialTaskCompleter] = null;
    this[S.__MethodChannelTask__snapshot] = null;
    this[S._handle] = _handle;
    this[S.storage$3] = storage;
    this[S._initialTask] = _initialTask;
    method_channel_task.MethodChannelTask.__proto__.new.call(this);
    this[S._initialTaskCompleter] = T$.CompleterOfvoid().new();
    this[S._snapshot$1] = new method_channel_task_snapshot.MethodChannelTaskSnapshot.new(this.storage, task_state.TaskState.running, new (T$.IdentityMapOfString$dynamic()).from(["path", path, "bytesTransferred", 0, "totalBytes", 1]));
    this[S._initialTask]().then(core.Null, dart.fn(_ => {
      this[S._initialTaskCompleter].complete();
    }, T$.voidToNull())).catchError(dart.fn((e, stackTrace) => {
      this[S._initialTaskCompleter].completeError(e, stackTrace);
      this[S._didComplete] = true;
      this[S._exception] = e;
      this[S._stackTrace] = stackTrace;
      if (this[S._completer] != null) {
        exception$1.catchFuturePlatformException(dart.dynamic, e, stackTrace).catchError(dart.bind(dart.nullCheck(this[S._completer]), 'completeError'));
      }
    }, T$.ObjectAndStackTraceToNull()));
    this[S._stream$1] = T$.StreamOfTaskSnapshotPlatform().as(dart.nullCheck(method_channel_firebase_storage.MethodChannelFirebaseStorage.taskObservers[S$.$_get](this[S._handle])).stream);
    let _subscription = null;
    function _subscription$35get() {
      let t209;
      t209 = _subscription;
      return t209 == null ? dart.throw(new _internal.LateError.localNI("_subscription")) : t209;
    }
    function _subscription$35set(_subscription$35param) {
      return _subscription = _subscription$35param;
    }
    _subscription$35set(this[S._stream$1].listen(dart.fn(snapshot => async.async(dart.void, (function*() {
      let t211;
      if (this[S._snapshot$1].state !== task_state.TaskState.canceled) {
        this[S._snapshot$1] = snapshot;
      }
      if (snapshot.state === task_state.TaskState.success) {
        this[S._didComplete] = true;
        t211 = this[S._completer];
        t211 == null ? null : t211.complete(snapshot);
        yield _subscription$35get().cancel();
      }
    }).bind(this)), T$.TaskSnapshotPlatformToFutureOfvoid()), {onError: dart.fn((e, stackTrace) => {
        if (firebase_core_platform_interface.FirebaseException.is(e) && e.code === "canceled") {
          this[S._snapshot$1] = new method_channel_task_snapshot.MethodChannelTaskSnapshot.new(this.storage, task_state.TaskState.canceled, new (T$.IdentityMapOfString$dynamic()).from(["path", path, "bytesTransferred", this[S._snapshot$1].bytesTransferred, "totalBytes", this[S._snapshot$1].totalBytes]));
        } else {
          this[S._snapshot$1] = new method_channel_task_snapshot.MethodChannelTaskSnapshot.new(this.storage, task_state.TaskState.error, new (T$.IdentityMapOfString$dynamic()).from(["path", path, "bytesTransferred", this[S._snapshot$1].bytesTransferred, "totalBytes", this[S._snapshot$1].totalBytes]));
        }
        this[S._didComplete] = true;
        this[S._exception] = e;
        this[S._stackTrace] = stackTrace;
        if (this[S._completer] != null) {
          exception$1.catchFuturePlatformException(dart.dynamic, e, stackTrace).catchError(dart.bind(dart.nullCheck(this[S._completer]), 'completeError'));
        }
      }, T$.ObjectAndStackTraceToNull()), cancelOnError: true}));
  }).prototype = method_channel_task.MethodChannelTask.prototype;
  dart.addTypeTests(method_channel_task.MethodChannelTask);
  dart.addTypeCaches(method_channel_task.MethodChannelTask);
  dart.setGetterSignature(method_channel_task.MethodChannelTask, () => ({
    __proto__: dart.getGetters(method_channel_task.MethodChannelTask.__proto__),
    [S._stackTrace]: core.StackTrace,
    [S._stream$1]: async.Stream$(platform_interface_task_snapshot.TaskSnapshotPlatform),
    [S._initialTaskCompleter]: async.Completer$(dart.void),
    [S._snapshot$1]: platform_interface_task_snapshot.TaskSnapshotPlatform
  }));
  dart.setSetterSignature(method_channel_task.MethodChannelTask, () => ({
    __proto__: dart.getSetters(method_channel_task.MethodChannelTask.__proto__),
    [S._stackTrace]: core.StackTrace,
    [S._stream$1]: async.Stream$(platform_interface_task_snapshot.TaskSnapshotPlatform),
    [S._initialTaskCompleter]: async.Completer$(dart.void),
    [S._snapshot$1]: platform_interface_task_snapshot.TaskSnapshotPlatform
  }));
  dart.setLibraryUri(method_channel_task.MethodChannelTask, I[208]);
  dart.setFieldSignature(method_channel_task.MethodChannelTask, () => ({
    __proto__: dart.getFields(method_channel_task.MethodChannelTask.__proto__),
    [S._exception]: dart.fieldType(dart.nullable(core.Object)),
    [S.__MethodChannelTask__stackTrace]: dart.fieldType(dart.nullable(core.StackTrace)),
    [S._didComplete]: dart.fieldType(core.bool),
    [S._completer]: dart.fieldType(dart.nullable(async.Completer$(platform_interface_task_snapshot.TaskSnapshotPlatform))),
    [S.__MethodChannelTask__stream]: dart.fieldType(dart.nullable(async.Stream$(platform_interface_task_snapshot.TaskSnapshotPlatform))),
    [S.__MethodChannelTask__initialTaskCompleter]: dart.fieldType(dart.nullable(async.Completer$(dart.void))),
    [S._initialTask]: dart.fieldType(dart.fnType(async.Future$(dart.void), [])),
    [S._handle]: dart.finalFieldType(core.int),
    storage: dart.finalFieldType(platform_interface_firebase_storage.FirebaseStoragePlatform),
    [S.__MethodChannelTask__snapshot]: dart.fieldType(dart.nullable(platform_interface_task_snapshot.TaskSnapshotPlatform))
  }));
  method_channel_task.MethodChannelPutFileTask = class MethodChannelPutFileTask extends method_channel_task.MethodChannelTask {
    static ['_#new#tearOff'](handle, storage, path, file, metadata) {
      return new method_channel_task.MethodChannelPutFileTask.new(handle, storage, path, file, metadata);
    }
    static _getTask(handle, storage, path, file, metadata) {
      return dart.fn(() => {
        let t214;
        return method_channel_firebase_storage.MethodChannelFirebaseStorage.channel.invokeMethod(dart.void, "Task#startPutFile", new (T$.IdentityMapOfString$dynamic()).from(["appName", storage.app.name, "maxOperationRetryTime", storage.maxOperationRetryTime, "maxUploadRetryTime", storage.maxUploadRetryTime, "maxDownloadRetryTime", storage.maxDownloadRetryTime, "bucket", storage.bucket, "host", storage.emulatorHost, "port", storage.emulatorPort, "handle", handle, "path", path, "filePath", file.absolute.path, "metadata", (t214 = metadata, t214 == null ? null : t214.asMap())]));
      }, T$.VoidToFutureOfvoid());
    }
  };
  (method_channel_task.MethodChannelPutFileTask.new = function(handle, storage, path, file, metadata) {
    method_channel_task.MethodChannelPutFileTask.__proto__.new.call(this, handle, storage, path, method_channel_task.MethodChannelPutFileTask._getTask(handle, storage, path, file, metadata));
    ;
  }).prototype = method_channel_task.MethodChannelPutFileTask.prototype;
  dart.addTypeTests(method_channel_task.MethodChannelPutFileTask);
  dart.addTypeCaches(method_channel_task.MethodChannelPutFileTask);
  dart.setStaticMethodSignature(method_channel_task.MethodChannelPutFileTask, () => ['_getTask']);
  dart.setLibraryUri(method_channel_task.MethodChannelPutFileTask, I[208]);
  method_channel_task.MethodChannelPutStringTask = class MethodChannelPutStringTask extends method_channel_task.MethodChannelTask {
    static ['_#new#tearOff'](handle, storage, path, data, format, metadata) {
      return new method_channel_task.MethodChannelPutStringTask.new(handle, storage, path, data, format, metadata);
    }
    static _getTask(handle, storage, path, data, format, metadata) {
      return dart.fn(() => {
        let t214;
        return method_channel_firebase_storage.MethodChannelFirebaseStorage.channel.invokeMethod(dart.void, "Task#startPutString", new (T$.IdentityMapOfString$dynamic()).from(["appName", storage.app.name, "bucket", storage.bucket, "maxOperationRetryTime", storage.maxOperationRetryTime, "maxUploadRetryTime", storage.maxUploadRetryTime, "maxDownloadRetryTime", storage.maxDownloadRetryTime, "host", storage.emulatorHost, "port", storage.emulatorPort, "handle", handle, "path", path, "data", data, "format", format.index, "metadata", (t214 = metadata, t214 == null ? null : t214.asMap())]));
      }, T$.VoidToFutureOfvoid());
    }
  };
  (method_channel_task.MethodChannelPutStringTask.new = function(handle, storage, path, data, format, metadata) {
    method_channel_task.MethodChannelPutStringTask.__proto__.new.call(this, handle, storage, path, method_channel_task.MethodChannelPutStringTask._getTask(handle, storage, path, data, format, metadata));
    ;
  }).prototype = method_channel_task.MethodChannelPutStringTask.prototype;
  dart.addTypeTests(method_channel_task.MethodChannelPutStringTask);
  dart.addTypeCaches(method_channel_task.MethodChannelPutStringTask);
  dart.setStaticMethodSignature(method_channel_task.MethodChannelPutStringTask, () => ['_getTask']);
  dart.setLibraryUri(method_channel_task.MethodChannelPutStringTask, I[208]);
  method_channel_task.MethodChannelPutTask = class MethodChannelPutTask extends method_channel_task.MethodChannelTask {
    static ['_#new#tearOff'](handle, storage, path, data, metadata) {
      return new method_channel_task.MethodChannelPutTask.new(handle, storage, path, data, metadata);
    }
    static _getTask(handle, storage, path, data, metadata) {
      return dart.fn(() => {
        let t214;
        return method_channel_firebase_storage.MethodChannelFirebaseStorage.channel.invokeMethod(dart.void, "Task#startPutData", new (T$.IdentityMapOfString$dynamic()).from(["appName", storage.app.name, "bucket", storage.bucket, "maxOperationRetryTime", storage.maxOperationRetryTime, "maxUploadRetryTime", storage.maxUploadRetryTime, "maxDownloadRetryTime", storage.maxDownloadRetryTime, "host", storage.emulatorHost, "port", storage.emulatorPort, "handle", handle, "path", path, "data", data, "metadata", (t214 = metadata, t214 == null ? null : t214.asMap())]));
      }, T$.VoidToFutureOfvoid());
    }
  };
  (method_channel_task.MethodChannelPutTask.new = function(handle, storage, path, data, metadata) {
    method_channel_task.MethodChannelPutTask.__proto__.new.call(this, handle, storage, path, method_channel_task.MethodChannelPutTask._getTask(handle, storage, path, data, metadata));
    ;
  }).prototype = method_channel_task.MethodChannelPutTask.prototype;
  dart.addTypeTests(method_channel_task.MethodChannelPutTask);
  dart.addTypeCaches(method_channel_task.MethodChannelPutTask);
  dart.setStaticMethodSignature(method_channel_task.MethodChannelPutTask, () => ['_getTask']);
  dart.setLibraryUri(method_channel_task.MethodChannelPutTask, I[208]);
  method_channel_task.MethodChannelDownloadTask = class MethodChannelDownloadTask extends method_channel_task.MethodChannelTask {
    static ['_#new#tearOff'](handle, storage, path, file) {
      return new method_channel_task.MethodChannelDownloadTask.new(handle, storage, path, file);
    }
    static _getTask(handle, storage, path, file) {
      return dart.fn(() => method_channel_firebase_storage.MethodChannelFirebaseStorage.channel.invokeMethod(dart.void, "Task#writeToFile", new (T$.IdentityMapOfString$dynamic()).from(["appName", storage.app.name, "maxOperationRetryTime", storage.maxOperationRetryTime, "maxUploadRetryTime", storage.maxUploadRetryTime, "maxDownloadRetryTime", storage.maxDownloadRetryTime, "host", storage.emulatorHost, "port", storage.emulatorPort, "bucket", storage.bucket, "handle", handle, "path", path, "filePath", file.path])), T$.VoidToFutureOfvoid());
    }
  };
  (method_channel_task.MethodChannelDownloadTask.new = function(handle, storage, path, file) {
    method_channel_task.MethodChannelDownloadTask.__proto__.new.call(this, handle, storage, path, method_channel_task.MethodChannelDownloadTask._getTask(handle, storage, path, file));
    ;
  }).prototype = method_channel_task.MethodChannelDownloadTask.prototype;
  dart.addTypeTests(method_channel_task.MethodChannelDownloadTask);
  dart.addTypeCaches(method_channel_task.MethodChannelDownloadTask);
  dart.setStaticMethodSignature(method_channel_task.MethodChannelDownloadTask, () => ['_getTask']);
  dart.setLibraryUri(method_channel_task.MethodChannelDownloadTask, I[208]);
  dart.trackLibraries("zapp_user_main", {
    "file:///zapp/project/.zapp_entry.dart": $46zapp_entry,
    "file:///zapp/project/lib/main.dart": main,
    "file:///zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart": web_plugin_registrant,
    "package:hive/hive.dart": hive,
    "package:hive_flutter/hive_flutter.dart": hive_flutter,
    "file:///zapp/project/lib/firstlime.dart": firstlime,
    "file:///zapp/project/lib/mainpage.dart": mainpage,
    "package:cloud_firestore_web/cloud_firestore_web.dart": cloud_firestore_web,
    "package:firebase_auth_web/firebase_auth_web.dart": firebase_auth_web,
    "package:firebase_core_web/firebase_core_web.dart": firebase_core_web,
    "package:firebase_storage_web/firebase_storage_web.dart": firebase_storage_web,
    "package:crypto/crypto.dart": crypto,
    "package:hive/src/box/default_compaction_strategy.dart": default_compaction_strategy,
    "package:hive/src/box/default_key_comparator.dart": default_key_comparator,
    "package:hive/src/crypto/aes_cbc_pkcs7.dart": aes_cbc_pkcs7,
    "package:hive/src/crypto/crc32.dart": crc32,
    "package:hive/src/hive_impl.dart": hive_impl,
    "package:hive/src/object/hive_list_impl.dart": hive_list_impl,
    "package:hive/src/object/hive_object.dart": hive_object,
    "package:hive/src/util/extensions.dart": extensions,
    "package:hive/src/box_collection/box_collection_indexed_db.dart": box_collection_indexed_db,
    "package:hive_flutter/src/stub/path_provider.dart": path_provider,
    "package:hive_flutter/src/stub/path.dart": path,
    "package:cloud_firestore_platform_interface/cloud_firestore_platform_interface.dart": cloud_firestore_platform_interface,
    "package:cloud_firestore_web/src/internals.dart": internals,
    "package:cloud_firestore_web/src/load_bundle_task_web.dart": load_bundle_task_web,
    "package:cloud_firestore_web/src/utils/web_utils.dart": web_utils,
    "package:firebase_core/firebase_core.dart": firebase_core,
    "package:firebase_core_web/firebase_core_web_interop.dart": firebase_core_web_interop,
    "package:cloud_firestore_web/src/collection_reference_web.dart": collection_reference_web,
    "package:cloud_firestore_web/src/field_value_factory_web.dart": field_value_factory_web,
    "package:cloud_firestore_web/src/document_reference_web.dart": document_reference_web,
    "package:cloud_firestore_web/src/query_web.dart": query_web,
    "package:cloud_firestore_web/src/transaction_web.dart": transaction_web,
    "package:cloud_firestore_web/src/write_batch_web.dart": write_batch_web,
    "package:cloud_firestore_web/src/interop/firestore.dart": firestore,
    "package:firebase_auth_platform_interface/firebase_auth_platform_interface.dart": firebase_auth_platform_interface,
    "package:firebase_auth_web/src/utils/web_utils.dart": web_utils$,
    "package:firebase_auth_web/src/firebase_auth_web_confirmation_result.dart": firebase_auth_web_confirmation_result,
    "package:firebase_auth_web/src/firebase_auth_web_recaptcha_verifier_factory.dart": firebase_auth_web_recaptcha_verifier_factory,
    "package:firebase_auth_web/src/firebase_auth_web_user.dart": firebase_auth_web_user,
    "package:firebase_auth_web/src/firebase_auth_web_user_credential.dart": firebase_auth_web_user_credential,
    "package:firebase_auth_web/src/interop/auth.dart": auth$,
    "package:firebase_core_platform_interface/firebase_core_platform_interface.dart": firebase_core_platform_interface,
    "package:firebase_core_web/src/interop/core.dart": core$,
    "package:firebase_storage_web/src/firebase_storage_web.dart": firebase_storage_web$,
    "package:crypto/src/digest.dart": digest,
    "package:crypto/src/hash.dart": hash,
    "package:crypto/src/hmac.dart": hmac,
    "package:crypto/src/md5.dart": md5,
    "package:crypto/src/sha1.dart": sha1,
    "package:crypto/src/sha256.dart": sha256,
    "package:crypto/src/sha512.dart": sha512,
    "package:hive/src/crypto/aes_engine.dart": aes_engine,
    "package:hive/src/adapters/big_int_adapter.dart": big_int_adapter,
    "package:hive/src/adapters/date_time_adapter.dart": date_time_adapter,
    "package:hive/src/backend/storage_backend_memory.dart": storage_backend_memory,
    "package:hive/src/box/box_base_impl.dart": box_base_impl,
    "package:hive/src/box/box_impl.dart": box_impl,
    "package:hive/src/box/lazy_box_impl.dart": lazy_box_impl,
    "package:hive/src/registry/type_registry_impl.dart": type_registry_impl,
    "package:hive/src/backend/storage_backend.dart": storage_backend,
    "package:hive/src/object/hive_collection_mixin.dart": hive_collection_mixin,
    "package:hive/src/util/delegating_list_view_mixin.dart": delegating_list_view_mixin,
    "package:hive/src/box_collection/box_collection_stub.dart": box_collection_stub,
    "package:cloud_firestore_platform_interface/src/internal/pointer.dart": pointer,
    "package:cloud_firestore_platform_interface/src/blob.dart": blob,
    "package:cloud_firestore_platform_interface/src/field_path.dart": field_path,
    "package:cloud_firestore_platform_interface/src/geo_point.dart": geo_point,
    "package:cloud_firestore_platform_interface/src/platform_interface/platform_interface_firestore.dart": platform_interface_firestore,
    "package:cloud_firestore_platform_interface/src/platform_interface/platform_interface_collection_reference.dart": platform_interface_collection_reference,
    "package:cloud_firestore_platform_interface/src/platform_interface/platform_interface_document_change.dart": platform_interface_document_change,
    "package:cloud_firestore_platform_interface/src/platform_interface/platform_interface_document_reference.dart": platform_interface_document_reference,
    "package:cloud_firestore_platform_interface/src/platform_interface/platform_interface_document_snapshot.dart": platform_interface_document_snapshot,
    "package:cloud_firestore_platform_interface/src/platform_interface/platform_interface_field_value.dart": platform_interface_field_value,
    "package:cloud_firestore_platform_interface/src/platform_interface/platform_interface_field_value_factory.dart": platform_interface_field_value_factory,
    "package:cloud_firestore_platform_interface/src/platform_interface/platform_interface_query.dart": platform_interface_query,
    "package:cloud_firestore_platform_interface/src/platform_interface/platform_interface_query_snapshot.dart": platform_interface_query_snapshot,
    "package:cloud_firestore_platform_interface/src/platform_interface/platform_interface_transaction.dart": platform_interface_transaction,
    "package:cloud_firestore_platform_interface/src/platform_interface/platform_interface_write_batch.dart": platform_interface_write_batch,
    "package:cloud_firestore_platform_interface/src/platform_interface/platform_interface_load_bundle_task.dart": platform_interface_load_bundle_task,
    "package:cloud_firestore_platform_interface/src/platform_interface/platform_interface_load_bundle_task_snapshot.dart": platform_interface_load_bundle_task_snapshot,
    "package:cloud_firestore_platform_interface/src/snapshot_metadata.dart": snapshot_metadata,
    "package:cloud_firestore_platform_interface/src/source.dart": source,
    "package:cloud_firestore_platform_interface/src/load_bundle_task_state.dart": load_bundle_task_state,
    "package:cloud_firestore_platform_interface/src/timestamp.dart": timestamp,
    "package:cloud_firestore_platform_interface/src/settings.dart": settings,
    "package:cloud_firestore_platform_interface/src/get_options.dart": get_options,
    "package:cloud_firestore_platform_interface/src/set_options.dart": set_options,
    "package:cloud_firestore_platform_interface/src/persistence_settings.dart": persistence_settings,
    "package:cloud_firestore_platform_interface/src/platform_interface/utils/load_bundle_task_state.dart": load_bundle_task_state$,
    "package:firebase_core/src/internals.dart": internals$,
    "package:cloud_firestore_web/src/utils/decode_utility.dart": decode_utility,
    "package:firebase_core_web/src/interop/utils/es6_interop.dart": es6_interop,
    "package:firebase_core_web/src/interop/utils/func.dart": func,
    "package:firebase_core_web/src/interop/utils/js.dart": js$,
    "package:firebase_core_web/src/interop/utils/js_interop.dart": js_interop,
    "package:firebase_core_web/src/interop/utils/utils.dart": utils,
    "package:cloud_firestore_web/src/field_value_web.dart": field_value_web,
    "package:cloud_firestore_web/src/utils/encode_utility.dart": encode_utility,
    "package:cloud_firestore_web/src/interop/firestore_interop.dart": firestore_interop,
    "package:cloud_firestore_web/src/interop/utils/utils.dart": utils$,
    "package:firebase_auth_platform_interface/src/action_code_info.dart": action_code_info,
    "package:firebase_auth_platform_interface/src/action_code_settings.dart": action_code_settings,
    "package:firebase_auth_platform_interface/src/additional_user_info.dart": additional_user_info,
    "package:firebase_auth_platform_interface/src/auth_credential.dart": auth_credential,
    "package:firebase_auth_platform_interface/src/auth_provider.dart": auth_provider,
    "package:firebase_auth_platform_interface/src/firebase_auth_exception.dart": firebase_auth_exception,
    "package:firebase_auth_platform_interface/src/id_token_result.dart": id_token_result,
    "package:firebase_auth_platform_interface/src/platform_interface/platform_interface_confirmation_result.dart": platform_interface_confirmation_result,
    "package:firebase_auth_platform_interface/src/platform_interface/platform_interface_firebase_auth.dart": platform_interface_firebase_auth,
    "package:firebase_auth_platform_interface/src/platform_interface/platform_interface_recaptcha_verifier_factory.dart": platform_interface_recaptcha_verifier_factory,
    "package:firebase_auth_platform_interface/src/platform_interface/platform_interface_user.dart": platform_interface_user,
    "package:firebase_auth_platform_interface/src/platform_interface/platform_interface_user_credential.dart": platform_interface_user_credential,
    "package:firebase_auth_platform_interface/src/providers/email_auth.dart": email_auth,
    "package:firebase_auth_platform_interface/src/providers/facebook_auth.dart": facebook_auth,
    "package:firebase_auth_platform_interface/src/providers/github_auth.dart": github_auth,
    "package:firebase_auth_platform_interface/src/providers/google_auth.dart": google_auth,
    "package:firebase_auth_platform_interface/src/providers/oauth.dart": oauth,
    "package:firebase_auth_platform_interface/src/providers/phone_auth.dart": phone_auth,
    "package:firebase_auth_platform_interface/src/providers/saml_auth.dart": saml_auth,
    "package:firebase_auth_platform_interface/src/providers/twitter_auth.dart": twitter_auth,
    "package:firebase_auth_platform_interface/src/types.dart": types,
    "package:firebase_auth_platform_interface/src/user_info.dart": user_info,
    "package:firebase_auth_platform_interface/src/user_metadata.dart": user_metadata,
    "package:http_parser/http_parser.dart": http_parser,
    "package:firebase_auth_web/src/interop/auth_interop.dart": auth_interop,
    "package:firebase_auth_web/src/interop/utils/utils.dart": utils$0,
    "package:firebase_core_platform_interface/src/pigeon/messages.pigeon.dart": messages$46pigeon,
    "package:plugin_platform_interface/plugin_platform_interface.dart": plugin_platform_interface,
    "package:firebase_core_platform_interface/src/pigeon/mocks.dart": mocks,
    "package:firebase_core_platform_interface/src/pigeon/test_api.dart": test_api,
    "package:firebase_core_web/src/interop/app.dart": app$,
    "package:firebase_core_web/src/interop/core_interop.dart": core_interop,
    "package:firebase_core_web/src/interop/app_interop.dart": app_interop,
    "package:firebase_storage_platform_interface/firebase_storage_platform_interface.dart": firebase_storage_platform_interface,
    "package:firebase_storage_web/src/interop/storage.dart": storage,
    "package:firebase_storage_web/src/reference_web.dart": reference_web,
    "package:firebase_storage_web/src/utils/errors.dart": errors,
    "package:crypto/src/digest_sink.dart": digest_sink,
    "package:crypto/src/hash_sink.dart": hash_sink,
    "package:crypto/src/utils.dart": utils$1,
    "package:crypto/src/sha512_slowsinks.dart": sha512_slowsinks,
    "package:hive/src/crypto/aes_tables.dart": aes_tables,
    "package:hive/src/binary/frame.dart": frame$,
    "package:hive/src/binary/frame_helper.dart": frame_helper,
    "package:hive/src/box/keystore.dart": keystore$,
    "package:hive/src/box/change_notifier.dart": change_notifier$,
    "package:hive/src/adapters/ignored_type_adapter.dart": ignored_type_adapter,
    "package:hive/src/backend/js/backend_manager.dart": backend_manager,
    "package:cloud_firestore_platform_interface/src/internal/field_path_type.dart": field_path_type,
    "package:cloud_firestore_platform_interface/src/method_channel/method_channel_firestore.dart": method_channel_firestore,
    "package:cloud_firestore_platform_interface/src/method_channel/method_channel_field_value_factory.dart": method_channel_field_value_factory,
    "package:firebase_auth_platform_interface/src/method_channel/method_channel_firebase_auth.dart": method_channel_firebase_auth,
    "package:http_parser/src/authentication_challenge.dart": authentication_challenge,
    "package:http_parser/src/case_insensitive_map.dart": case_insensitive_map,
    "package:http_parser/src/chunked_coding.dart": chunked_coding,
    "package:http_parser/src/http_date.dart": http_date,
    "package:http_parser/src/media_type.dart": media_type,
    "package:firebase_storage_platform_interface/src/full_metadata.dart": full_metadata,
    "package:firebase_storage_platform_interface/src/list_options.dart": list_options,
    "package:firebase_storage_platform_interface/src/platform_interface/platform_interface_firebase_storage.dart": platform_interface_firebase_storage,
    "package:firebase_storage_platform_interface/src/platform_interface/platform_interface_list_result.dart": platform_interface_list_result,
    "package:firebase_storage_platform_interface/src/platform_interface/platform_interface_reference.dart": platform_interface_reference,
    "package:firebase_storage_platform_interface/src/platform_interface/platform_interface_task.dart": platform_interface_task,
    "package:firebase_storage_platform_interface/src/platform_interface/platform_interface_task_snapshot.dart": platform_interface_task_snapshot,
    "package:firebase_storage_platform_interface/src/put_string_format.dart": put_string_format,
    "package:firebase_storage_platform_interface/src/settable_metadata.dart": settable_metadata,
    "package:firebase_storage_platform_interface/src/task_state.dart": task_state,
    "package:firebase_storage_web/src/interop/storage_interop.dart": storage_interop,
    "package:http/http.dart": http,
    "package:firebase_storage_web/src/utils/metadata.dart": metadata$,
    "package:firebase_storage_web/src/task_web.dart": task_web,
    "package:firebase_storage_web/src/utils/list.dart": list,
    "package:firebase_storage_web/src/utils/metadata_cache.dart": metadata_cache,
    "package:typed_data/typed_data.dart": typed_data$,
    "package:hive/src/binary/binary_reader_impl.dart": binary_reader_impl,
    "package:hive/src/util/indexable_skip_list.dart": indexable_skip_list,
    "package:hive/src/backend/js/native/backend_manager.dart": backend_manager$,
    "package:cloud_firestore_platform_interface/src/method_channel/method_channel_load_bundle_task.dart": method_channel_load_bundle_task,
    "package:cloud_firestore_platform_interface/src/method_channel/method_channel_query_snapshot.dart": method_channel_query_snapshot,
    "package:cloud_firestore_platform_interface/src/method_channel/utils/source.dart": source$,
    "package:cloud_firestore_platform_interface/src/method_channel/method_channel_collection_reference.dart": method_channel_collection_reference,
    "package:cloud_firestore_platform_interface/src/method_channel/method_channel_document_reference.dart": method_channel_document_reference,
    "package:cloud_firestore_platform_interface/src/method_channel/method_channel_query.dart": method_channel_query,
    "package:cloud_firestore_platform_interface/src/method_channel/method_channel_transaction.dart": method_channel_transaction,
    "package:cloud_firestore_platform_interface/src/method_channel/method_channel_write_batch.dart": method_channel_write_batch,
    "package:cloud_firestore_platform_interface/src/method_channel/utils/firestore_message_codec.dart": firestore_message_codec,
    "package:cloud_firestore_platform_interface/src/method_channel/utils/exception.dart": exception$,
    "package:cloud_firestore_platform_interface/src/method_channel/method_channel_field_value.dart": method_channel_field_value,
    "package:firebase_auth_platform_interface/src/method_channel/method_channel_user.dart": method_channel_user,
    "package:firebase_auth_platform_interface/src/method_channel/method_channel_user_credential.dart": method_channel_user_credential,
    "package:firebase_auth_platform_interface/src/method_channel/utils/exception.dart": exception$0,
    "package:http_parser/src/scan.dart": scan,
    "package:http_parser/src/utils.dart": utils$2,
    "package:http_parser/src/chunked_coding/decoder.dart": decoder,
    "package:http_parser/src/chunked_coding/encoder.dart": encoder,
    "package:firebase_storage_platform_interface/src/method_channel/method_channel_firebase_storage.dart": method_channel_firebase_storage,
    "package:firebase_storage_platform_interface/src/internal/pointer.dart": pointer$,
    "package:http/src/client.dart": client$,
    "package:http/src/exception.dart": exception,
    "package:http/src/request.dart": request$,
    "package:http/src/response.dart": response$,
    "package:http/src/streamed_request.dart": streamed_request,
    "package:http/src/base_client.dart": base_client,
    "package:http/src/base_request.dart": base_request,
    "package:http/src/base_response.dart": base_response,
    "package:http/src/byte_stream.dart": byte_stream,
    "package:http/src/multipart_file.dart": multipart_file,
    "package:http/src/multipart_request.dart": multipart_request,
    "package:http/src/streamed_response.dart": streamed_response,
    "package:firebase_storage_web/src/utils/task.dart": task,
    "package:firebase_storage_web/src/list_result_web.dart": list_result_web,
    "package:typed_data/src/typed_queue.dart": typed_queue,
    "package:typed_data/typed_buffers.dart": typed_buffers,
    "package:hive/src/backend/js/native/storage_backend_js.dart": storage_backend_js,
    "package:cloud_firestore_platform_interface/src/method_channel/method_channel_document_change.dart": method_channel_document_change,
    "package:cloud_firestore_platform_interface/src/method_channel/utils/auto_id_generator.dart": auto_id_generator,
    "package:http_parser/src/chunked_coding/charcodes.dart": charcodes,
    "package:firebase_storage_platform_interface/src/method_channel/utils/exception.dart": exception$1,
    "package:firebase_storage_platform_interface/src/method_channel/method_channel_reference.dart": method_channel_reference,
    "package:firebase_storage_platform_interface/src/method_channel/method_channel_task_snapshot.dart": method_channel_task_snapshot,
    "package:http/src/browser_client.dart": browser_client,
    "package:http/src/utils.dart": utils$3,
    "package:http/src/multipart_file_stub.dart": multipart_file_stub,
    "package:http/src/boundary_characters.dart": boundary_characters,
    "package:firebase_storage_web/src/task_snapshot_web.dart": task_snapshot_web,
    "package:typed_data/src/typed_buffer.dart": typed_buffer,
    "package:hive/src/binary/binary_writer_impl.dart": binary_writer_impl,
    "package:firebase_storage_platform_interface/src/method_channel/method_channel_list_result.dart": method_channel_list_result,
    "package:firebase_storage_platform_interface/src/method_channel/method_channel_task.dart": method_channel_task
  }, {
    "package:hive/hive.dart": ["src/annotations/hive_field.dart", "src/annotations/hive_type.dart", "src/binary/binary_reader.dart", "src/binary/binary_writer.dart", "src/box/box.dart", "src/box/box_base.dart", "src/box/lazy_box.dart", "src/crypto/hive_aes_cipher.dart", "src/crypto/hive_cipher.dart", "src/hive.dart", "src/hive_error.dart", "src/object/hive_collection.dart", "src/object/hive_list.dart", "src/object/hive_storage_backend_preference.dart", "src/registry/type_adapter.dart", "src/registry/type_registry.dart"],
    "package:hive_flutter/hive_flutter.dart": ["src/box_extensions.dart", "src/hive_extensions.dart", "src/watch_box_builder.dart"],
    "package:firebase_core_web/firebase_core_web.dart": ["src/firebase_app_web.dart", "src/firebase_sdk_version.dart", "src/firebase_core_web.dart"],
    "package:hive/src/object/hive_object.dart": ["hive_object_internal.dart"],
    "package:firebase_core/firebase_core.dart": ["src/firebase_app.dart", "src/firebase.dart"],
    "package:firebase_core_platform_interface/firebase_core_platform_interface.dart": ["src/firebase_core_exceptions.dart", "src/firebase_exception.dart", "src/firebase_options.dart", "src/method_channel/method_channel_firebase.dart", "src/method_channel/method_channel_firebase_app.dart", "src/platform_interface/platform_interface_firebase.dart", "src/platform_interface/platform_interface_firebase_app.dart", "src/platform_interface/platform_interface_firebase_plugin.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["/zapp/project/.zapp_entry.dart","/zapp/project/lib/main.dart","/zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/annotations/hive_field.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/annotations/hive_type.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/binary/binary_reader.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/binary/binary_writer.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/box/box.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/box/box_base.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/box/lazy_box.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/crypto/hive_aes_cipher.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/crypto/hive_cipher.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/hive.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/hive_error.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/object/hive_collection.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/object/hive_list.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/object/hive_storage_backend_preference.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/registry/type_adapter.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/registry/type_registry.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/hive.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive_flutter-1.1.0/lib/src/box_extensions.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive_flutter-1.1.0/lib/src/watch_box_builder.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive_flutter-1.1.0/lib/src/hive_extensions.dart","/zapp/project/lib/firstlime.dart","/zapp/project/lib/mainpage.dart","/zapp/pub/.pub_cache/hosted/pub.dev/plugin_platform_interface-2.1.2/lib/plugin_platform_interface.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/platform_interface/platform_interface_firestore.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_web-2.7.0/lib/cloud_firestore_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_platform_interface-6.3.2/lib/src/platform_interface/platform_interface_firebase_auth.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_web-4.0.0/lib/firebase_auth_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_core_platform_interface-4.4.3/lib/src/platform_interface/platform_interface_firebase_app.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_core_web-1.7.0/lib/src/firebase_app_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_core_web-1.7.0/lib/src/firebase_core_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_core_platform_interface-4.4.3/lib/src/platform_interface/platform_interface_firebase.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_core_web-1.7.0/lib/firebase_core_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_core_web-1.7.0/lib/src/firebase_sdk_version.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/box/default_compaction_strategy.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/box/default_key_comparator.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/crypto/aes_cbc_pkcs7.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/crypto/crc32.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/registry/type_registry_impl.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/hive_impl.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/object/hive_collection_mixin.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/util/delegating_list_view_mixin.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/object/hive_list_impl.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/object/hive_object.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/object/hive_object_internal.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/util/extensions.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/box_collection/box_collection_indexed_db.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive_flutter-1.1.0/lib/src/stub/path_provider.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive_flutter-1.1.0/lib/src/stub/path.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/cloud_firestore_platform_interface.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_web-2.7.0/lib/src/internals.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/platform_interface/platform_interface_load_bundle_task.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_web-2.7.0/lib/src/load_bundle_task_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_web-2.7.0/lib/src/utils/web_utils.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_core-1.19.2/lib/src/firebase_app.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_core-1.19.2/lib/src/firebase.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/platform_interface/platform_interface_query.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_web-2.7.0/lib/src/query_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_web-2.7.0/lib/src/collection_reference_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/platform_interface/platform_interface_field_value_factory.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_web-2.7.0/lib/src/field_value_factory_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/platform_interface/platform_interface_document_reference.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_web-2.7.0/lib/src/document_reference_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/platform_interface/platform_interface_transaction.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_web-2.7.0/lib/src/transaction_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/platform_interface/platform_interface_write_batch.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_web-2.7.0/lib/src/write_batch_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_core_web-1.7.0/lib/src/interop/utils/js.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_web-2.7.0/lib/src/interop/firestore.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_web-4.0.0/lib/src/utils/web_utils.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_platform_interface-6.3.2/lib/src/platform_interface/platform_interface_confirmation_result.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_web-4.0.0/lib/src/firebase_auth_web_confirmation_result.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_platform_interface-6.3.2/lib/src/platform_interface/platform_interface_recaptcha_verifier_factory.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_web-4.0.0/lib/src/firebase_auth_web_recaptcha_verifier_factory.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_platform_interface-6.3.2/lib/src/platform_interface/platform_interface_user.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_web-4.0.0/lib/src/firebase_auth_web_user.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_platform_interface-6.3.2/lib/src/platform_interface/platform_interface_user_credential.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_web-4.0.0/lib/src/firebase_auth_web_user_credential.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_web-4.0.0/lib/src/interop/auth.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_core_platform_interface-4.4.3/lib/src/firebase_exception.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_core_platform_interface-4.4.3/lib/src/firebase_options.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_core_platform_interface-4.4.3/lib/src/method_channel/method_channel_firebase.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_core_platform_interface-4.4.3/lib/src/method_channel/method_channel_firebase_app.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_core_platform_interface-4.4.3/lib/src/platform_interface/platform_interface_firebase_plugin.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_core_platform_interface-4.4.3/lib/src/firebase_core_exceptions.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_core_platform_interface-4.4.3/lib/firebase_core_platform_interface.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_core_web-1.7.0/lib/src/interop/core.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_storage_platform_interface-4.1.11/lib/src/platform_interface/platform_interface_firebase_storage.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_storage_web-3.3.0/lib/src/firebase_storage_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/crypto-3.0.3/lib/src/digest.dart","/zapp/pub/.pub_cache/hosted/pub.dev/crypto-3.0.3/lib/src/hash.dart","/zapp/pub/.pub_cache/hosted/pub.dev/crypto-3.0.3/lib/src/hmac.dart","/zapp/pub/.pub_cache/hosted/pub.dev/crypto-3.0.3/lib/src/md5.dart","/zapp/pub/.pub_cache/hosted/pub.dev/crypto-3.0.3/lib/src/hash_sink.dart","/zapp/pub/.pub_cache/hosted/pub.dev/crypto-3.0.3/lib/src/sha1.dart","/zapp/pub/.pub_cache/hosted/pub.dev/crypto-3.0.3/lib/src/sha256.dart","/zapp/pub/.pub_cache/hosted/pub.dev/crypto-3.0.3/lib/src/sha512.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/crypto/aes_engine.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/adapters/big_int_adapter.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/adapters/date_time_adapter.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/backend/storage_backend.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/backend/storage_backend_memory.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/box/box_base_impl.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/box/box_impl.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/box/lazy_box_impl.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/box_collection/box_collection_stub.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/internal/pointer.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/blob.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/field_path.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/geo_point.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/platform_interface/platform_interface_collection_reference.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/platform_interface/platform_interface_document_change.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/platform_interface/platform_interface_document_snapshot.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/platform_interface/platform_interface_field_value.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/platform_interface/platform_interface_query_snapshot.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/platform_interface/platform_interface_load_bundle_task_snapshot.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/snapshot_metadata.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/source.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/load_bundle_task_state.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/timestamp.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/settings.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/get_options.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/set_options.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/persistence_settings.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/platform_interface/utils/load_bundle_task_state.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_core-1.19.2/lib/src/internals.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_web-2.7.0/lib/src/utils/decode_utility.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_core_web-1.7.0/lib/src/interop/utils/js_interop.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_core_web-1.7.0/lib/src/interop/utils/utils.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_web-2.7.0/lib/src/field_value_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_web-2.7.0/lib/src/utils/encode_utility.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_web-2.7.0/lib/src/interop/utils/utils.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_platform_interface-6.3.2/lib/src/action_code_info.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_platform_interface-6.3.2/lib/src/action_code_settings.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_platform_interface-6.3.2/lib/src/additional_user_info.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_platform_interface-6.3.2/lib/src/auth_credential.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_platform_interface-6.3.2/lib/src/auth_provider.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_platform_interface-6.3.2/lib/src/firebase_auth_exception.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_platform_interface-6.3.2/lib/src/id_token_result.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_platform_interface-6.3.2/lib/src/providers/email_auth.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_platform_interface-6.3.2/lib/src/providers/facebook_auth.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_platform_interface-6.3.2/lib/src/providers/oauth.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_platform_interface-6.3.2/lib/src/providers/github_auth.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_platform_interface-6.3.2/lib/src/providers/google_auth.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_platform_interface-6.3.2/lib/src/providers/phone_auth.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_platform_interface-6.3.2/lib/src/providers/saml_auth.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_platform_interface-6.3.2/lib/src/providers/twitter_auth.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_platform_interface-6.3.2/lib/src/types.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_platform_interface-6.3.2/lib/src/user_info.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_platform_interface-6.3.2/lib/src/user_metadata.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_web-4.0.0/lib/src/interop/utils/utils.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_core_platform_interface-4.4.3/lib/src/pigeon/messages.pigeon.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_core_platform_interface-4.4.3/lib/src/pigeon/mocks.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_core_platform_interface-4.4.3/lib/src/pigeon/test_api.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_core_web-1.7.0/lib/src/interop/app.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_storage_web-3.3.0/lib/src/interop/storage.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_storage_platform_interface-4.1.11/lib/src/platform_interface/platform_interface_reference.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_storage_web-3.3.0/lib/src/reference_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_storage_web-3.3.0/lib/src/utils/errors.dart","/zapp/pub/.pub_cache/hosted/pub.dev/crypto-3.0.3/lib/src/digest_sink.dart","/zapp/pub/.pub_cache/hosted/pub.dev/crypto-3.0.3/lib/src/utils.dart","/zapp/pub/.pub_cache/hosted/pub.dev/crypto-3.0.3/lib/src/sha512_slowsinks.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/crypto/aes_tables.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/binary/frame.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/binary/frame_helper.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/box/keystore.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/box/change_notifier.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/adapters/ignored_type_adapter.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/backend/js/backend_manager.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/internal/field_path_type.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/method_channel/method_channel_firestore.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/method_channel/method_channel_field_value_factory.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_platform_interface-6.3.2/lib/src/method_channel/method_channel_firebase_auth.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.1/lib/src/authentication_challenge.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.1/lib/src/case_insensitive_map.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.1/lib/src/chunked_coding.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.1/lib/src/http_date.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.1/lib/src/media_type.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_storage_platform_interface-4.1.11/lib/src/full_metadata.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_storage_platform_interface-4.1.11/lib/src/list_options.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_storage_platform_interface-4.1.11/lib/src/platform_interface/platform_interface_list_result.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_storage_platform_interface-4.1.11/lib/src/platform_interface/platform_interface_task.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_storage_platform_interface-4.1.11/lib/src/platform_interface/platform_interface_task_snapshot.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_storage_platform_interface-4.1.11/lib/src/put_string_format.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_storage_platform_interface-4.1.11/lib/src/settable_metadata.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_storage_platform_interface-4.1.11/lib/src/task_state.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.4/lib/http.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_storage_web-3.3.0/lib/src/utils/metadata.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_storage_web-3.3.0/lib/src/task_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_storage_web-3.3.0/lib/src/utils/list.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_storage_web-3.3.0/lib/src/utils/metadata_cache.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/binary/binary_reader_impl.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/util/indexable_skip_list.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/backend/js/native/backend_manager.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/method_channel/method_channel_load_bundle_task.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/method_channel/method_channel_query_snapshot.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/method_channel/utils/source.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/method_channel/method_channel_query.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/method_channel/method_channel_collection_reference.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/method_channel/method_channel_document_reference.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/method_channel/method_channel_transaction.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/method_channel/method_channel_write_batch.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/method_channel/utils/firestore_message_codec.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/method_channel/utils/exception.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/method_channel/method_channel_field_value.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_platform_interface-6.3.2/lib/src/method_channel/method_channel_user.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_platform_interface-6.3.2/lib/src/method_channel/method_channel_user_credential.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_auth_platform_interface-6.3.2/lib/src/method_channel/utils/exception.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.1/lib/src/scan.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.1/lib/src/utils.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.1/lib/src/chunked_coding/decoder.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.1/lib/src/chunked_coding/encoder.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_storage_platform_interface-4.1.11/lib/src/method_channel/method_channel_firebase_storage.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_storage_platform_interface-4.1.11/lib/src/internal/pointer.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.4/lib/src/client.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.4/lib/src/exception.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.4/lib/src/base_request.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.4/lib/src/request.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.4/lib/src/base_response.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.4/lib/src/response.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.4/lib/src/streamed_request.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.4/lib/src/base_client.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.4/lib/src/byte_stream.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.4/lib/src/multipart_file.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.4/lib/src/multipart_request.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.4/lib/src/streamed_response.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_storage_web-3.3.0/lib/src/utils/task.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_storage_web-3.3.0/lib/src/list_result_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/typed_data-1.3.1/lib/src/typed_queue.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/backend/js/native/storage_backend_js.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/method_channel/method_channel_document_change.dart","/zapp/pub/.pub_cache/hosted/pub.dev/cloud_firestore_platform_interface-5.6.0/lib/src/method_channel/utils/auto_id_generator.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http_parser-4.0.1/lib/src/chunked_coding/charcodes.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_storage_platform_interface-4.1.11/lib/src/method_channel/utils/exception.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_storage_platform_interface-4.1.11/lib/src/method_channel/method_channel_reference.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_storage_platform_interface-4.1.11/lib/src/method_channel/method_channel_task_snapshot.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.4/lib/src/browser_client.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.4/lib/src/utils.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.4/lib/src/multipart_file_stub.dart","/zapp/pub/.pub_cache/hosted/pub.dev/http-0.13.4/lib/src/boundary_characters.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_storage_web-3.3.0/lib/src/task_snapshot_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/typed_data-1.3.1/lib/src/typed_buffer.dart","/zapp/pub/.pub_cache/hosted/pub.dev/hive-2.2.3/lib/src/binary/binary_writer_impl.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_storage_platform_interface-4.1.11/lib/src/method_channel/method_channel_list_result.dart","/zapp/pub/.pub_cache/hosted/pub.dev/firebase_storage_platform_interface-4.1.11/lib/src/method_channel/method_channel_task.dart"],"names":[],"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","file":"main.js"}');
  // Exports:
  return {
    zapp__project__$46zapp_entry: $46zapp_entry,
    zapp__project__lib__main: main,
    zapp__project__$46dart_tool__dartpad__web_plugin_registrant: web_plugin_registrant,
    hive: hive,
    hive_flutter: hive_flutter,
    zapp__project__lib__firstlime: firstlime,
    zapp__project__lib__mainpage: mainpage,
    cloud_firestore_web: cloud_firestore_web,
    firebase_auth_web: firebase_auth_web,
    firebase_core_web: firebase_core_web,
    firebase_storage_web: firebase_storage_web,
    crypto: crypto,
    src__box__default_compaction_strategy: default_compaction_strategy,
    src__box__default_key_comparator: default_key_comparator,
    src__crypto__aes_cbc_pkcs7: aes_cbc_pkcs7,
    src__crypto__crc32: crc32,
    src__hive_impl: hive_impl,
    src__object__hive_list_impl: hive_list_impl,
    src__object__hive_object: hive_object,
    src__util__extensions: extensions,
    src__box_collection__box_collection_indexed_db: box_collection_indexed_db,
    src__stub__path_provider: path_provider,
    src__stub__path: path,
    cloud_firestore_platform_interface: cloud_firestore_platform_interface,
    src__internals: internals,
    src__load_bundle_task_web: load_bundle_task_web,
    src__utils__web_utils: web_utils,
    firebase_core: firebase_core,
    firebase_core_web_interop: firebase_core_web_interop,
    src__collection_reference_web: collection_reference_web,
    src__field_value_factory_web: field_value_factory_web,
    src__document_reference_web: document_reference_web,
    src__query_web: query_web,
    src__transaction_web: transaction_web,
    src__write_batch_web: write_batch_web,
    src__interop__firestore: firestore,
    firebase_auth_platform_interface: firebase_auth_platform_interface,
    src__utils__web_utils: web_utils$,
    src__firebase_auth_web_confirmation_result: firebase_auth_web_confirmation_result,
    src__firebase_auth_web_recaptcha_verifier_factory: firebase_auth_web_recaptcha_verifier_factory,
    src__firebase_auth_web_user: firebase_auth_web_user,
    src__firebase_auth_web_user_credential: firebase_auth_web_user_credential,
    src__interop__auth: auth$,
    firebase_core_platform_interface: firebase_core_platform_interface,
    src__interop__core: core$,
    src__firebase_storage_web: firebase_storage_web$,
    src__digest: digest,
    src__hash: hash,
    src__hmac: hmac,
    src__md5: md5,
    src__sha1: sha1,
    src__sha256: sha256,
    src__sha512: sha512,
    src__crypto__aes_engine: aes_engine,
    src__adapters__big_int_adapter: big_int_adapter,
    src__adapters__date_time_adapter: date_time_adapter,
    src__backend__storage_backend_memory: storage_backend_memory,
    src__box__box_base_impl: box_base_impl,
    src__box__box_impl: box_impl,
    src__box__lazy_box_impl: lazy_box_impl,
    src__registry__type_registry_impl: type_registry_impl,
    src__backend__storage_backend: storage_backend,
    src__object__hive_collection_mixin: hive_collection_mixin,
    src__util__delegating_list_view_mixin: delegating_list_view_mixin,
    src__box_collection__box_collection_stub: box_collection_stub,
    src__internal__pointer: pointer,
    src__blob: blob,
    src__field_path: field_path,
    src__geo_point: geo_point,
    src__platform_interface__platform_interface_firestore: platform_interface_firestore,
    src__platform_interface__platform_interface_collection_reference: platform_interface_collection_reference,
    src__platform_interface__platform_interface_document_change: platform_interface_document_change,
    src__platform_interface__platform_interface_document_reference: platform_interface_document_reference,
    src__platform_interface__platform_interface_document_snapshot: platform_interface_document_snapshot,
    src__platform_interface__platform_interface_field_value: platform_interface_field_value,
    src__platform_interface__platform_interface_field_value_factory: platform_interface_field_value_factory,
    src__platform_interface__platform_interface_query: platform_interface_query,
    src__platform_interface__platform_interface_query_snapshot: platform_interface_query_snapshot,
    src__platform_interface__platform_interface_transaction: platform_interface_transaction,
    src__platform_interface__platform_interface_write_batch: platform_interface_write_batch,
    src__platform_interface__platform_interface_load_bundle_task: platform_interface_load_bundle_task,
    src__platform_interface__platform_interface_load_bundle_task_snapshot: platform_interface_load_bundle_task_snapshot,
    src__snapshot_metadata: snapshot_metadata,
    src__source: source,
    src__load_bundle_task_state: load_bundle_task_state,
    src__timestamp: timestamp,
    src__settings: settings,
    src__get_options: get_options,
    src__set_options: set_options,
    src__persistence_settings: persistence_settings,
    src__platform_interface__utils__load_bundle_task_state: load_bundle_task_state$,
    src__internals: internals$,
    src__utils__decode_utility: decode_utility,
    src__interop__utils__es6_interop: es6_interop,
    src__interop__utils__func: func,
    src__interop__utils__js: js$,
    src__interop__utils__js_interop: js_interop,
    src__interop__utils__utils: utils,
    src__field_value_web: field_value_web,
    src__utils__encode_utility: encode_utility,
    src__interop__firestore_interop: firestore_interop,
    src__interop__utils__utils: utils$,
    src__action_code_info: action_code_info,
    src__action_code_settings: action_code_settings,
    src__additional_user_info: additional_user_info,
    src__auth_credential: auth_credential,
    src__auth_provider: auth_provider,
    src__firebase_auth_exception: firebase_auth_exception,
    src__id_token_result: id_token_result,
    src__platform_interface__platform_interface_confirmation_result: platform_interface_confirmation_result,
    src__platform_interface__platform_interface_firebase_auth: platform_interface_firebase_auth,
    src__platform_interface__platform_interface_recaptcha_verifier_factory: platform_interface_recaptcha_verifier_factory,
    src__platform_interface__platform_interface_user: platform_interface_user,
    src__platform_interface__platform_interface_user_credential: platform_interface_user_credential,
    src__providers__email_auth: email_auth,
    src__providers__facebook_auth: facebook_auth,
    src__providers__github_auth: github_auth,
    src__providers__google_auth: google_auth,
    src__providers__oauth: oauth,
    src__providers__phone_auth: phone_auth,
    src__providers__saml_auth: saml_auth,
    src__providers__twitter_auth: twitter_auth,
    src__types: types,
    src__user_info: user_info,
    src__user_metadata: user_metadata,
    http_parser: http_parser,
    src__interop__auth_interop: auth_interop,
    src__interop__utils__utils: utils$0,
    src__pigeon__messages$46pigeon: messages$46pigeon,
    plugin_platform_interface: plugin_platform_interface,
    src__pigeon__mocks: mocks,
    src__pigeon__test_api: test_api,
    src__interop__app: app$,
    src__interop__core_interop: core_interop,
    src__interop__app_interop: app_interop,
    firebase_storage_platform_interface: firebase_storage_platform_interface,
    src__interop__storage: storage,
    src__reference_web: reference_web,
    src__utils__errors: errors,
    src__digest_sink: digest_sink,
    src__hash_sink: hash_sink,
    src__utils: utils$1,
    src__sha512_slowsinks: sha512_slowsinks,
    src__crypto__aes_tables: aes_tables,
    src__binary__frame: frame$,
    src__binary__frame_helper: frame_helper,
    src__box__keystore: keystore$,
    src__box__change_notifier: change_notifier$,
    src__adapters__ignored_type_adapter: ignored_type_adapter,
    src__backend__js__backend_manager: backend_manager,
    src__internal__field_path_type: field_path_type,
    src__method_channel__method_channel_firestore: method_channel_firestore,
    src__method_channel__method_channel_field_value_factory: method_channel_field_value_factory,
    src__method_channel__method_channel_firebase_auth: method_channel_firebase_auth,
    src__authentication_challenge: authentication_challenge,
    src__case_insensitive_map: case_insensitive_map,
    src__chunked_coding: chunked_coding,
    src__http_date: http_date,
    src__media_type: media_type,
    src__full_metadata: full_metadata,
    src__list_options: list_options,
    src__platform_interface__platform_interface_firebase_storage: platform_interface_firebase_storage,
    src__platform_interface__platform_interface_list_result: platform_interface_list_result,
    src__platform_interface__platform_interface_reference: platform_interface_reference,
    src__platform_interface__platform_interface_task: platform_interface_task,
    src__platform_interface__platform_interface_task_snapshot: platform_interface_task_snapshot,
    src__put_string_format: put_string_format,
    src__settable_metadata: settable_metadata,
    src__task_state: task_state,
    src__interop__storage_interop: storage_interop,
    http: http,
    src__utils__metadata: metadata$,
    src__task_web: task_web,
    src__utils__list: list,
    src__utils__metadata_cache: metadata_cache,
    typed_data: typed_data$,
    src__binary__binary_reader_impl: binary_reader_impl,
    src__util__indexable_skip_list: indexable_skip_list,
    src__backend__js__native__backend_manager: backend_manager$,
    src__method_channel__method_channel_load_bundle_task: method_channel_load_bundle_task,
    src__method_channel__method_channel_query_snapshot: method_channel_query_snapshot,
    src__method_channel__utils__source: source$,
    src__method_channel__method_channel_collection_reference: method_channel_collection_reference,
    src__method_channel__method_channel_document_reference: method_channel_document_reference,
    src__method_channel__method_channel_query: method_channel_query,
    src__method_channel__method_channel_transaction: method_channel_transaction,
    src__method_channel__method_channel_write_batch: method_channel_write_batch,
    src__method_channel__utils__firestore_message_codec: firestore_message_codec,
    src__method_channel__utils__exception: exception$,
    src__method_channel__method_channel_field_value: method_channel_field_value,
    src__method_channel__method_channel_user: method_channel_user,
    src__method_channel__method_channel_user_credential: method_channel_user_credential,
    src__method_channel__utils__exception: exception$0,
    src__scan: scan,
    src__utils: utils$2,
    src__chunked_coding__decoder: decoder,
    src__chunked_coding__encoder: encoder,
    src__method_channel__method_channel_firebase_storage: method_channel_firebase_storage,
    src__internal__pointer: pointer$,
    src__client: client$,
    src__exception: exception,
    src__request: request$,
    src__response: response$,
    src__streamed_request: streamed_request,
    src__base_client: base_client,
    src__base_request: base_request,
    src__base_response: base_response,
    src__byte_stream: byte_stream,
    src__multipart_file: multipart_file,
    src__multipart_request: multipart_request,
    src__streamed_response: streamed_response,
    src__utils__task: task,
    src__list_result_web: list_result_web,
    src__typed_queue: typed_queue,
    typed_buffers: typed_buffers,
    src__backend__js__native__storage_backend_js: storage_backend_js,
    src__method_channel__method_channel_document_change: method_channel_document_change,
    src__method_channel__utils__auto_id_generator: auto_id_generator,
    src__chunked_coding__charcodes: charcodes,
    src__method_channel__utils__exception: exception$1,
    src__method_channel__method_channel_reference: method_channel_reference,
    src__method_channel__method_channel_task_snapshot: method_channel_task_snapshot,
    src__browser_client: browser_client,
    src__utils: utils$3,
    src__multipart_file_stub: multipart_file_stub,
    src__boundary_characters: boundary_characters,
    src__task_snapshot_web: task_snapshot_web,
    src__typed_buffer: typed_buffer,
    src__binary__binary_writer_impl: binary_writer_impl,
    src__method_channel__method_channel_list_result: method_channel_list_result,
    src__method_channel__method_channel_task: method_channel_task
  };
}));

//# sourceMappingURL=main.js.map
